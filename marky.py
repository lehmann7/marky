#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogcmF3OiAgICAgaW5jbHVkZSB3aXRo
b3V0IGFueSBwYXJzaW5nCgkjICAqIG5vbWV0YTogIGluY2x1ZGUgYW5kIGlnbm9yZSBhbGwg
bWV0YSBkYXRhCgkjICAqIG5vdGV4dDogIGluY2x1ZGUgYW5kIGlnbm9yZSBhbGwgTWFya2Rv
d24gdGV4dAoJIyAgKiBub21hcmt5OiBpbmNsdWRlIGJ1dCBkbyBub3QgcHJvY2VzcyBtYXJr
eSBtYXJrdXAKCSMgICogIytOOiAgICAgaW5jcmVhc2UgbGV2ZWwgb2YgQVRYIGhlYWRpbmdz
IGJ5IE4KCSMgICogPj5OOiAgICAgaW5jcmVhc2UgaW5kZW50YXRpb24gbGV2ZWwgYnkgTiB0
YWJzCgkjICAqID5OOiAgICAgIGluY3JlYXNlIGluZGVudGF0aW9uIGxldmVsIGJ5IE4gc3Bh
Y2VzCgkjICAqIG5vcmVmOiAgIGluY2x1ZGUgd2l0aG91dCBNYWtlZmlsZSBkZXBlbmRlbmN5
CgkjICAqIGF1eDogICAgIG9ubHkgTWFrZWZpbGUgZGVwZW5kZW5jeSBidXQgbm8gcGFyc2lu
ZwoJIwoKLlBIT05ZOiBjaGVhdC1tZXRhCmNoZWF0LW1ldGE6CgkjCgkjIE1FVEEgREFUQQoJ
IwoJIyAgLS0tCgkjICB0aXRsZTogRG9jdW1lbnQKCSMgIGRhdGU6IFRvZGF5CgkjICBhdXRo
b3I6IE5hbWUKCSMgIGxpbmstY2l0YXRpb25zOiB0cnVlCgkjICBiaWJsaW9ncmFwaHk6IGJp
YmwuYmliCgkjICBmb250c2l6ZS0tcGRmOiAxMXB0CgkjICBmb250c2l6ZS0taHRtbDogMTBw
dAoJIyAgaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KCSMgICAgIFx1c2VwYWNrYWdley4uLn0K
CSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgIGhlYWRlci1pbmNsdWRlcy0taHRtbDogPgoJ
IyAgICAgPHNjcmlwdCAuLi4+CgkjICAgICA8bGluayAuLi4+CgkjICAgICA8c3R5bGUgLi4u
PgoJIyAgeG5vcy1jbGV2ZXJlZjogdHJ1ZQoJIyAgeG5vcy1jYXBpdGFsaXNlOiB0cnVlCgkj
ICAtaGlkZGVuX2ZpZWxkOiB0ZXh0CgkjICAtLS0KCSMKCi5QSE9OWTogY2hlYXQtbGluawpj
aGVhdC1saW5rOgoJIwoJIyBGT1JNQVQgTElOSwoJIwoJIyAgW0xpbmsgdG8gRG9jdW1lbnRd
KHBhdGgvdG8vZmlsZS5odG1sKQoJIyAgW0xpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmls
ZS5wZGYpCgkjICBbRm9ybWF0IExpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS4/Pz8p
CgkjICBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgZm9ybWF0IGxpbmsgLlw/Pz8KCSMKCi5QSE9O
WTogY2hlYXQtY29kZQpjaGVhdC1jb2RlOgoJIwoJIyBGT1JNQVQgQ09ERQoJIwoJIyAgIGBg
YCEKCSMgICBkZWYgdGVzdDFfaHRtbCgpOgoJIyAgICAgICBfKCJUaGlzIGlzIEhUTUwxISIp
CgkjICAgZGVmIHRlc3QxX3BkZigpOgoJIyAgICAgICByZXR1cm4gIlRoaXMgaXMgXHtQREYx
XH0hIgoJIyAgIGRlZiB0ZXN0Ml9odG1sKCk6CgkjICAgICAgIF9fKCIiIgoJIyAgICAgICAg
ICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgIFRoaXMgaXMgSFRNTDIhCgkjICAgICAg
ICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAiIiIpCgkjICAgZGVmIHRlc3QyX3BkZigp
OgoJIyAgICAgICByZXR1cm4gIiIiCgkjICAgICAgICAgICBUaGlzIGlzIFx7UERGMlx9IQoJ
IyAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAgICAgIFRoaXMgaXMgXHtQ
REYyXH0hCgkjICAgICAgICIiIgoJIyAgIGBgYAoJIyAgIFJ1biBGb3JtYXQgQ29kZSBgP3Rl
c3QxKClgIGFuZCBgP3Rlc3QyKClgLgoJIyAgIGBcP3Rlc3QxKClgIGFuZCBgXD90ZXN0Migp
YCBhcmUgbm90IHBhcnNlZC4KCSMKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBhbGwK
YWxsOiAkKEhUTUwpICQoUERGKQoKLlBIT05ZOiBhbGwtbWsKYWxsLW1rOiAkKE1LKQoKLlBI
T05ZOiBhbGwtbWQKYWxsLW1kOiAkKE1EKQoKLlBIT05ZOiBhbGwtbGluawphbGwtbGluazog
JChNREhUTUwpICQoTURQREYpCgouUEhPTlk6IGFsbC1odG1sCmFsbC1odG1sOiAkKEhUTUwp
CgouUEhPTlk6IGFsbC1wZGYKYWxsLXBkZjogJChQREYpCgouUEhPTlk6IGNsZWFuCmNsZWFu
OgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8qCgouUEhPTlk6IGh0dHBkCmh0
dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2ZXIKCi5QSE9OWTogc2Nhbgpz
Y2FuOiBhbGwtbWsKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKYnVpbGQvJS5tZC5tazogbWQvJS5t
ZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21hcmt5LnB5IC0tbWtkZXAg
LS1tYXJreT0iJDwiCgpidWlsZC8lLm1kOiBidWlsZC8lLm1kLm1rCglta2RpciAtcCAkKHNo
ZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1tZD0iJEAiCgpidWlsZC8lLmh0bWwu
bWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJr
eS5weSAtLWxpbmsgaHRtbCAtLW1kPSIkPCIKCmJ1aWxkLyUucGRmLm1kOiBidWlsZC8lLm1k
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1saW5rIHBk
ZiAtLW1kPSIkPCIKCmh0bWwvJS5odG1sOiBidWlsZC8lLmh0bWwubWQKCW1rZGlyIC1wICQo
c2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNuZiAuLi9kYXRhIGh0bWwvZGF0YQoJcGFuZG9j
ICIkPCIgLS1maWx0ZXIgcGFuZG9jLXhub3MgLS1jaXRlcHJvYyAtLWZyb209bWFya2Rvd24r
cmF3X2h0bWwrJChNREVMKSAtLXRvPWh0bWw1IC0tb3V0cHV0PSIkQCIgLS1yZXNvdXJjZS1w
YXRoPSIuL2RhdGEvIiAtLW1hdGhqYXggLS1zZWxmLWNvbnRhaW5lZCAtLXRhYmxlLW9mLWNv
bnRlbnRzIC0tbnVtYmVyLXNlY3Rpb25zIC0tY29sdW1ucz0xCgpwZGYvJS5wZGY6IGJ1aWxk
LyUucGRmLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCWxuIC1zbmYgLi4v
ZGF0YSBwZGYvZGF0YQoJcGFuZG9jICIkPCIgLS1maWx0ZXIgcGFuZG9jLXhub3MgLS1jaXRl
cHJvYyAtLWZyb209bWFya2Rvd24rcmF3X3RleCskKE1ERUwpIC0tdG89bGF0ZXggLS1vdXRw
dXQ9IiRAIiAtLXJlc291cmNlLXBhdGg9Ii4vZGF0YS8iIC0tdGFibGUtb2YtY29udGVudHMg
LS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEgLS1wZGYtZW5naW5lPXhlbGF0ZXgKCiMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIwoKUFNFVURPPWhlbHAgdHJlZSBjaGVhdCBjbGVhbiBodHRwZCBz
Y2FuCgpJTkNGTEFHPTAKCmRlZmluZSBMT09QQk9EWQogIGlmZXEgKCQkKGZpbHRlciAkJChQ
U0VVRE8pLCQkKEcpKSwpCiAgICBJTkNGTEFHPTEKICBlbmRpZgplbmRlZgoKaWZuZXEgKCQo
TUFLRUNNREdPQUxTKSwpCiAgJChmb3JlYWNoIEcsJChNQUtFQ01ER09BTFMpLCQoZXZhbCAk
KExPT1BCT0RZKSkpCmVuZGlmCgppZmVxICgkKElOQ0ZMQUcpLDEpCiAgLWluY2x1ZGUgJChN
SykKZW5kaWYKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwo=
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmRhdGU6IDEuIEF1Z3VzdCAyMDIxCmF1
dGhvcjogSGVucnkgTGVobWFubgpsaW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6
IG1hcmt5LmJpYgpoZWFkZXItaW5jbHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xv
cmxpbmtzPWZhbHNlLAogICBhbGxib3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVy
c3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4q
IHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRy
dWUKeG5vcy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRzaXplOiAxMXB0Ci1maWdzaXplOiBbMTAs
OF0KLWZpZ2RwaTogMzAwCi12ZXJzaW9uOiB1bmRlZmluZWQKCi0tLQohISEgLi4vTWFrZWZp
bGUgYXV4CiEhISAuLi9tYXJreS5weSBhdXgKYGBgISEKCWltcG9ydCBzdWJwcm9jZXNzCglN
RCA9ICJNYXJrZG93biIKCU0gPSAiYG1hcmt5YCIKCU1GID0gImBNYWtlZmlsZWAiCglNUCA9
ICJgbWFya3kucHlgIgoJTXAgPSAibWFya3kucHkiCglQID0gImBwYW5kb2NgIgoJTlUgPSAi
YG51bXB5YCIKCVBMID0gImBtYXRwbG90bGliYCIKCVIgPSAiUk1hcmtkb3duIgoJUSA9ICJR
dWFydG8iCglCVCA9ICJgIgoJUDE9ICJgXygpYCIKCVAyPSAiYF9fKClgIgoJdmVyc2lvbiA9
IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsicHl0aG9uIiwgIm1hcmt5LnB5IiwKCQkiLS12
ZXJzaW9uIl0pLmRlY29kZSgidXRmLTgiKS5zdHJpcCgpCmBgYAoKLS0tCgo+ICoqQWJzdHJh
Y3QqKiAtLSBgIU1gIGlzIGEgcHJlcHJvY2Vzc29yIGZvciBgIU1EYCB1c2luZyBQeXRob24u
Cj4gYCFNYCBpcyBpbnNwaXJlZCBieSBbcGFuZG9jXShodHRwczovL3d3dy5wYW5kb2Mub3Jn
LyksCj4gW2AhUmBdKGh0dHBzOi8vcm1hcmtkb3duLnJzdHVkaW8uY29tLyksIFtgIVFgXSho
dHRwczovL3F1YXJ0by5vcmcvKS4KPiBUaGlzIGRvY3VtZW50IGlzIGNyZWF0ZWQgdXNpbmcg
YCFNYCAoVmVyc2lvbiBgIXZlcnNpb25gKSBhbmQKPiBjb250YWlucyBleGFtcGxlcyB3aGlj
aCBpbGx1c3RyYXRlIHRoZSBnZW5lcmF0aW9uIG9mCj4gZG9jdW1lbnQgY29udGVudCBmb3Ig
YGh0bWxgIGFuZCBgcGRmYCBhbmQgdGhlIGR5bmFtaWNhbCBhZGp1c3RtZW50Cj4gb2YgYCFN
RGAgdGV4dCBkdXJpbmcgcHJlcHJvY2Vzc2luZyBiYXNlZCBvbiBgcHl0aG9uYCBjb2RlLgo+
IFRoZSBmdWxsIHJhdyBgIU1gIHNvdXJjZSBjb2RlIG9mIHRoaXMgZG9jdW1lbnRhdGlvbiBh
cHBlbmRlZCBhdAo+IHRoZSBlbmQuIFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9mIHRoaXMg
ZG9jdW1lbnQgY2FuIGJlIHJlYWQKPiBbaGVyZV0obWFya3lzb3VyY2UuPz8/KS4gRm9yIGBt
YXJreWAgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRv
cnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCiMgSW50cm9k
dWN0aW9uCgpgIU1gIGlzIGEgYCFNRGAgcHJlcHJvY2Vzc29yIHdoaWNoIHRyYW5zZm9ybXMg
YSBgIU1EYCBkb2N1bWVudAp1c2luZyBweXRob24uIGAhTWAgaW1wbGVtZW50cyBuZXcgbWFy
a3VwIHdoaWNoIGNvbnRyb2xzIHRoZSBleGVjdXRpb24Kb2YgcHl0aG9uIGNvZGUgYW5kIHRo
ZSBnZW5lcmF0aW9uIGFuZCBtYW5pcHVsYXRpb24gb2YgYCFNRGAgdGV4dC4KCmAhTWAgb25s
eSBkZXBlbmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgLiBgIVBgIGlzIHVzZWQgZm9yIHJlbmRl
cmluZwp0aGUgYCFNRGAgaW50byBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIHN1cHBvcnRzIHZh
cmlvdXMgYCFNRGAKZXh0ZW5zaW9ucyBhbGxvd2luZyBmb3Igc2NpZW50aWZpYyB3cml0aW5n
IHVzaW5nIGVxdWF0aW9ucywgZmlndXJlcywKdGFibGVzLCBjaXRhdGlvbnMgYW5kIGNvcnJl
c3BvbmRpbmcgcmVmZXJlbmNpbmcgbWVjaGFuaXNtIGZvciB0aGUgbGF0dGVyLgpgcHl5YW1s
YCBpcyB1c2VkIGZvciBwYXJzaW5nIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQgbWF0dGVyIG9m
IHRoZQpgIU1EYCB0ZXh0IGlmIGl0IGlzIHByZXNlbnQuCgpXb3JrZmxvdyBmb3IgY3JlYXRp
bmcgYGh0bWxgIG9yIGBwZGZgIHVzaW5nIGAhTWAKCjEuIHVzZXIgd3JpdGVzIGEgYCFNRGAg
dGV4dCBmaWxlIGFuZCBwbGFjZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9yeSB3aXRoIHRo
ZSBleHRlbnNpb24gYC5tZGAuIHRoZSBgIU1EYCB0ZXh0IGNvbnRhaW5zCnNwZWNpYWwgYCFN
YCBtYXJrdXAgd2hpY2ggZXhlY3V0ZXMgcHl0aG9uIGNvZGUgYW5kIG1hbmlwdWxhdGVzCnRo
ZSBgIU1EYCB0ZXh0LgoKMi4gYCFNYCB0cmFuc2Zvcm1zIHRoZSBmaWxlcyBpbiBgbWQvKi5t
ZGAgaW50byByZWd1bGFyIGAhTURgIHRleHQKYW5kIHBsYWNlcyB0aGUgdHJhbnNmb3JtZWQg
ZmlsZXMgaW4gYGJ1aWxkLyoubWRgLiBUaGUgdHJhbnNmb3JtZWQgdGV4dApvbmx5IGNvbnRh
aW5zIHJlZ3VsYXIgYCFNRGAsIGFuZCBwbGFjZWhvbGRlcnMgZm9yIGZvcm1hdCBkZXBlbmRl
bnQKb3V0cHV0IGZvciBgaHRtbGAgYW5kIGBwZGZgLgoKMy4gYmVmb3JlIHJlbmRlcmluZyBg
IU1gIHJlcGxhY2VzIHBsYWNlaG9sZGVycyBmb3IgZm9ybWF0IGRlcGVuZGVudApvdXRwdXQg
d2l0aCBjb250ZW50IGNyZWF0aW5nIGEgdGVtcG9yYXJ5IGZpbGUgd2hpY2ggb25seSBjb250
YWlucwpyZWd1bGFyIGAhTURgIHRleHQgZm9yIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRz
IGFjY29yZGluZyB0bwpgIVBgIGAhTURgIHNwZWNpZmljYXRpb24uCgo0LiB0aGUgcmVndWxh
ciBgIU1EYCB0ZXh0IGluIHRoZSBmaWxlcyBgYnVpbGQvKi5tZGAgaXMgcmVuZGVyZWQgaW50
bwpgaHRtbGAgYW5kIGBwZGZgIHVzaW5nIGAhUGAuCgpUaGUgdGhyZWUgc3RlcHMgYXJlIGlt
cGxlbWVudGVkIGluIGAhTVBgIGFuZCBhIGAhTUZgLiBUaGUKZm9sbG93aW5nIGRvY3VtZW50
IGRlc2NyaWJlcyB0aGUgc3BlY2lhbCBgIU1gIG1hcmt1cCBhbmQgc2hvd3MKaG93IHRvIHVz
ZSBgIU1QYCBhbmQgdGhlIGAhTUZgLgoKLS0tCgojIFJlbGF0ZWQgV29yayB7I3NlYzpyZWxh
dGVkfQoKRm9yIHNjaWVudGlmaWMgcmVwb3J0aW5nIGFuZCB3cml0aW5nIHVzdWFsbHkgdHlw
ZXNldHRpbmcgc3lzdGVtcyBvcgpjb21wbGljdGVkIFdZU0lXWUcgZWRpdG9ycyBhcmUgdXNl
ZC4gSW4gb3JkZXIgdG8gc2ltcGxpZnkgdGhlIHdyaXRpbmcKZGlmZmVyZW50IGFwcHJvYWNo
ZXMgYW5kIGZyYW1ld29ya3MgaGF2ZSBiZWVuIGRldmVsb3BlZC4KCiogW2AhUGBdKGh0dHBz
Oi8vd3d3LnBhbmRvYy5vcmcvKSwKKiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRp
by5jb20vKQoqIFtRdWFydG9dKGh0dHBzOi8vcXVhcnRvLm9yZy8pCiogW1NjaWVudGlmaWMg
YCFNRGBdKGh0dHBzOi8vamFhbnRvbGxhbmRlci5jb20vcG9zdC9zY2llbnRpZmljLXdyaXRp
bmctd2l0aC1tYXJrZG93bi8pCiogW1RlY2huaWNhbCBgIVBgXShodHRwczovL2xlZS1waGls
bGlwcy5vcmcvcGFuZmx1dGUtZ251cGxvdC8pCgpBbGwgb2YgdGhvc2UgYXBwcm9hY2hlcyB1
c2UgYCFQYCBhcyBhbiB1bmRlcmx5aW5nIGZyYW1ld29yayBmb3IgZG9jdW1lbnQKY29udmVy
c2lvbi4gYCFQYCBpcyBhIHBvd2VyZnVsIGZyYW1ld29yayBmb3IgY29udmVyc2lvbiBiZXR3
ZWVuIGRpZmZlcmVudApkb2N1bWVudCBmb3JtYXRzIGluY2x1ZGluZyBgIU1gLCBgaHRtbGAg
YW5kIGBwZGZgLiBgIVBgIGltcGxlbWVudHMgYW4Kb3duIGludGVybmFsIEFTVCwgaW4gd2hp
Y2ggZGlmZmVyZW50IGRvY3VtZW50IGZvcm1hdHMgY2FuIGJlIGltcG9ydGVkIGFuZApleHBv
cnRlZC4gVXNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgZG9jdW1lbnQgcmVwcmVzZW50YXRpb24s
IGAhUGAgYWxsb3dzCnRvIG1vZGlmeSBkb2N1bWVudCB1c2luZyBmaWx0ZXJzLCB3aGljaCBv
cGVyYXRlIG9uIHRoZSBBU1QuIEZpbHRlcnMKY2FuIGJlIHdyaXR0ZW4gaW4gW2BoYXNrZWxs
YF0oaHR0cHM6Ly9wYW5kb2Mub3JnL2ZpbHRlcnMuaHRtbCksCltgbHVhYF0oaHR0cHM6Ly9w
YW5kb2Mub3JnL2x1YS1maWx0ZXJzLmh0bWwpIGFuZApbYHB5dGhvbmBdKGh0dHBzOi8vcGFu
ZG9jLm9yZy9maWx0ZXJzLmh0bWwjYnV0LWktZG9udC13YW50LXRvLWxlYXJuLWhhc2tlbGwp
LgoKV2hlcmUgYXMgYCFSYCBhbmQgYCFRYCBhcmUgaW50ZWdyYXRlZCBmcmFtZXdvcmtzLCB3
aGljaCBhZGRpdGlvbmFsbHkKZGVwZW5kIG9uIGBrbml0cmAsIGBSU3R1ZGlvYCwgYEp1cHl0
ZXJgLCBgIU1gIGRlcGVuZHMgb24gYCFQYCBhbmQgYHB5eWFtbGAKb25seS4gYCFNYCBuYXRp
dmVseSBvbmx5IHN1cHBvcnRzIGV4ZWN1dGFibGUgcHl0aG9uIGNvZGUgYmxvY2tzLCBob3dl
dmVyLApvdGhlciBsYW5ndWFnZXMgY2FuIGJlIGV4ZWN1dGVkIHVzaW5nIHdyYXBwZXJzLCB3
aGljaCBhcmUgYXZhaWxhYmxlIGZvcgpvdGhlciBsYW5ndWFnZXMuCgotLS0KCiMgYCFNYCBG
ZWF0dXJlcyB7I3NlYzpmZWF0dXJlc30KCmAhTWAgaW1wbGVtZW50cyBmb2xsb3dpbmcgZmVh
dHVyZXMgdXNpbmcgYW4gc2ltcGxlIGAhTURgLXN0eWxlIHN5bnRheC4KCjEuIHJlYWQgYCFN
RGAgbWV0YSBkYXRhIGZyb20gZnJvbnQgbWF0dGVyLApzZWUgQHNlYzptZXRhZGF0YQpgYGBt
ZAoJLS0tCgkJPGtleT46IDx2YWx1ZT4KCS0tLQpgYGAKCjIuIGV4ZWN1dGUgYW5kIGhpZGUv
c2hvdyBweXRob24gY29kZSBibG9ja3MgaW5zaWRlIGAhTURgIHRleHQsCnNlZSBAc2VjOmJs
b2NrCmBgYG1kCglgIUJUKjNgIQoJCTxweXRob25fY29kZV9zaG93bj4KCWAhQlQqM2AKCglg
IUJUKjNgISEKCQk8cHl0aG9uX2NvZGVfaGlkZGVuPgoJYCFCVCozYApgYGAKCjMuIGdlbmVy
YXRlIGAhTURgIHRleHQgdXNpbmcgcHl0aG9uIGNvZGUsIHNlZSBAc2VjOm1kcHJpbnQKYGBg
bWQKCWAhQlQqM2AhCgkJXygiPG1hcmtkb3duX3RleHQ+IikKCQlfXygiIiIKCQkJPG1hcmtk
b3duX3RleHQ+CgkJCTxtYXJrZG93bl90ZXh0PgoJCQk8bWFya2Rvd25fdGV4dD4KCQkiIiIp
CglgIUJUKjNgCmBgYAoKNC4gZm9ybWF0IG91dHB1dCBvZiBweXRob24gdmFyaWFibGVzIGlu
dG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6Zm9ybWF0CmBgYG1kCglPdXRwdXQgaW50byB0ZXh0
OiBgXCE8cHl0aG9uX3ZhcmlhYmxlPmAKYGBgCgo1LiBvdXRwdXQgdGhlIHJlc3VsdCBvZiBw
eXRob24gZXhwcmVzc2lvbnMgaW50byBgIU1EYCB0ZXh0LApzZWUgQHNlYzppbmxpbmUKYGBg
bWQKCU91dHB1dCBpbnRvIHRleHQ6IGBcITxweXRob25fZXhwcmVzc2lvbj5gCmBgYAoKNi4g
aW5jbHVkZSBgIU1EYCB0ZXh0LCBtYWtlIGRlcGVuZGVuY2llcyBhbmQgZm9yd2FyZCBtZXRh
IGRhdGEsCnNlZSBAc2VjOmluY2x1ZGUgYW5kICFAc2VjOmluY21ldGEuCmBgYG1kCgkhISEg
aW5jbHVkZV9maWxlLm1kaQpgYGAKCjcuIGZvcm1hdCBsaW5rcyBpbiBgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyBmb3IKcmVmZXJlbmNpbmcgZXh0ZXJuYWwgZG9jdW1lbnRzIG9mIHRo
ZSBzYW1lIGZvcm1hdCwKc2VlIEBzZWM6Zm9ybWxpbmsuCmBgYG1kCglbRm9ybWF0IExpbmsg
dG8gaHRtbC9wZGYgZG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5cPz8/KQpgYGAKCjguIHVzZSBm
b3JtYXQgY29kZXMgaW4gb3JkZXIgdG8gaW5qZWN0IGZvcm1hdCBzcGVjaWZpYwpjb2RlIGlu
IGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLApzZWUgQHNlYzpmb3JtY29kZS4KYGBgbWQK
CWAhQlQqM2AhCgkJZGVmIGNvZGVfaHRtbCgpOgoJCQlfKCI8SFRNTF9DT0RFPiIpCgkJCXJl
dHVybiAiIiIKCQkJCTxNT1JFX0NPREU+CgkJCQk8TU9SRV9DT0RFPgoJCQkJPE1PUkVfQ09E
RT4KCQkJIiIiCgkJZGVmIGNvZGVfcGRmKCk6CgkJCV9fKCIiIgoJCQkJe1RFWF9DT0RFfQoJ
CQkJe1RFWF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkiIiIpCglgIUJUKjNgCgoJRm9ybWF0
IGRlcGVuZGVudCBvdXRwdXQ6IGBcIWNvZGUoKWAKYGBgCgotLS0KCiMgU2NpZW50aWZpYyBX
cml0aW5nIGluIGAhTURgIHsjc2VjOnBhbm1kfQoKW2AhTURgXShodHRwczovL3BhbmRvYy5v
cmcvTUFOVUFMLmh0bWwjcGFuZG9jcy1tYXJrZG93bikgaXMgYSBtYXJrdXAKbGFuZ3VhZ2Ug
Zm9yIHRlY2huaWNhbCB3cml0aW5nLCB3aXRoIGVtcGhhc2lzIG9uIHJlYWRhYmlsaXR5LiBg
IU1EYApjYW4gYmUgcmVuZGVyZWQgaW4gbWFueSBmb3JtYXRzIGluY2x1ZGluZyBgaHRtbGAg
YW5kIGBwZGZgIGJ5IHVzaW5nCltgIVBgXShodHRwczovL3BhbmRvYy5vcmcvKSBmb3IgZXhh
bXBsZS4KClVzaW5nIHZhcmlvdXMgYCFNRGAgZXh0ZW5zaW9ucyBvZiBgIVBgIGEgc3VmZmlj
aWVudCBzdHJ1Y3R1cmUgZm9yCndyaXRpbmcgc2NpZW50aWZpYyBkb2N1bWVudHMgY2FuIGJl
IHJlZmxlY3RlZCB1c2luZyBgIU1EYCBzeW50YXguCmAhTWAgdXNlcyB0aGUgZm9sbG93aW5n
IGAhUGAgYCFNRGAgZXh0ZW5zaW9ucy4KKiBwYXJzaW5nIGV4dGVuc2lvbnMKCSogW2FsbF9z
eW1ib2xzX2VzY2FwYWJsZV0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVu
c2lvbi1hbGxfc3ltYm9sc19lc2NhcGFibGUpCgkqIFtpbnRyYXdvcmRfdW5kZXJzY29yZXNd
KGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW50cmF3b3JkX3Vu
ZGVyc2NvcmVzKQoJKiBbZXNjYXBlZF9saW5lX2JyZWFrc10oaHR0cHM6Ly9wYW5kb2Mub3Jn
L01BTlVBTC5odG1sI2V4dGVuc2lvbi1lc2NhcGVkX2xpbmVfYnJlYWtzKQoJKiBbc3BhY2Vf
aW5fYXR4X2hlYWRlcl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lv
bi1zcGFjZV9pbl9hdHhfaGVhZGVyKQoJKiBbbGlzdHNfd2l0aG91dF9wcmVjZWRpbmdfYmxh
bmtsaW5lXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWxpc3Rz
X3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZSkKKiBzdHlsaW5nIGV4dGVuc2lvbnMKCSog
W2lubGluZV9jb2RlX2F0dHJpYnV0ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24taW5saW5lX2NvZGVfYXR0cmlidXRlcykKCSogW3N0cmlrZW91dF0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zdHJpa2VvdXQpCiogc3Ry
dWN0dXJpbmcgZXh0ZW5zaW9ucwoJKiBbeWFtbF9tZXRhZGF0YV9ibG9ja10oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi15YW1sX21ldGFkYXRhX2Jsb2NrKQoJ
KiBbcGlwZV90YWJsZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNp
b24tcGlwZV90YWJsZXMpCgkqIFtsaW5lX2Jsb2Nrc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI2V4dGVuc2lvbi1saW5lX2Jsb2NrcykKCSogW2ltcGxpY2l0X2ZpZ3VyZXNd
KGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW1wbGljaXRfZmln
dXJlcykKCSogW2FiYnJldmlhdGlvbnNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tYWJicmV2aWF0aW9ucykKCSogW2lubGluZV9ub3Rlc10oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbmxpbmVfbm90ZXMpCiogY29kZSBp
bmplY3Rpb24KCSogW3Jhd19odG1sXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwj
ZXh0ZW5zaW9uLXJhd19odG1sKQoJKiBbcmF3X3RleF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI2V4dGVuc2lvbi1yYXdfdGV4KQoKYCFQYCBzdXBwb3J0cwpbZXF1YXRpb25z
XShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXRleF9tYXRoX2Rv
bGxhcnMpCnJlbmRlcmVkIGlubGluZSBhbmQgc2luZ2xlLWxpbmUgaW4gdGV4LXN0eWxlIHVz
aW5nIGAkLi4uJGAgYW5kIGAkJC4uLiQkYCwKW2JpYmxpb2dyYXBoeV0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2NpdGF0aW9ucykKdXNpbmcgdGhlIGAtLWNpdGVwcm9jYCBv
cHRpb24sCltzZWN0aW9uIG51bWJlcmluZ10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi1oZWFkZXJfYXR0cmlidXRlcykKdXNpbmcgdGhlIGAtLW51bWJlci1z
ZWN0aW9uc2Agb3B0aW9uIGFuZApbdGFibGUgb2YgY29udGVudHNdKGh0dHBzOi8vcGFuZG9j
Lm9yZy9NQU5VQUwuaHRtbCNvcHRpb24tLXRvYykKdXNpbmcgdGhlIGAtLXRhYmxlLW9mLWNv
bnRlbnRzYCBvcHRpb24uCgpgIVBgIHN1cHBvcnRzIFtgeG5vc2BdKGh0dHBzOi8vZ2l0aHVi
LmNvbS90b21kdWNrL3BhbmRvYy14bm9zKSBmaWx0ZXJzCmZvciByZWZlcmVuY2luZyBkb2N1
bWVudCBjb250ZW50IGxpa2UKW2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNr
L3BhbmRvYy1maWdub3MjdXNhZ2UpLApbZXF1YXRpb25zXShodHRwczovL2dpdGh1Yi5jb20v
dG9tZHVjay9wYW5kb2MtZXFub3MjdXNhZ2UpLApbdGFibGVzXShodHRwczovL2dpdGh1Yi5j
b20vdG9tZHVjay9wYW5kb2MtdGFibGVub3MjdXNhZ2UpLApbc2VjdGlvbnNdKGh0dHBzOi8v
Z2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjdXNhZ2UpCmJ5IHVzaW5nIHRoZSBg
LS1maWx0ZXIgcGFuZG9jLXhub3NgIG9wdGlvbi4KYHhub3NgIGludGVncmF0ZXMgY2xldmVy
IHJlZmVyZW5jZXMsIHdoaWNoIG1lYW5zICJGaWcuIiwgIlNlYy4iLCAiRXEuIgphbmQgIlRh
Yi4iIGFyZSBhZGRlZCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1l
bnQuCklmIHRoZSBwcmVmaXggaXMgdG8gYmUgb21pdHRlZCwgdGhlIHJlZmVyZW5jZSBjYW4g
YmUgd3JpdHRlbiBhcwpgXCFAcmVmOmxhYmVsYC4KCioqRXhhbXBsZSoqCmBgYG1kCiMjIFJl
ZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8g
QHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFnZS9wbmc7YmFz
ZTY0LGlWQk9SdzBLR2dvQUFBQU5TClVoRVVnQUFBQVVBQUFBRkNBWUFBQUNOYnlibEFBQUFI
RWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERICnhnbGpOQkFBTzlUWEwwWTRPSHdBQUFB
QkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBm
aWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1
NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlvbiB7I3RibDps
YWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7ZX1e
e1xtYm94e2l9XHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRv
IEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNdLgpgYGAKClRo
ZSBmaWxlIGBtYXJreS5iaWJgIGlzIHNwZWNpZmllZCBpbiB0aGUgbWV0YSBkYXRhIGluIHRo
ZSBmcm9udAptYXR0ZXIgb2YgdGhlIGAhTURgIHRleHQgYW5kIGNvbnRhaW5zIHRoZSBmb2xs
b3dpbmcgYXJ0aWNsZS4KCmBgYGJpYnRleAohISEgLi4vZGF0YS9tYXJreS5iaWIgcmF3CmBg
YAoKKipPdXRwdXQqKgoKIyMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxhYmVsfQoKVGhp
cyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRoZSBjYXB0aW9u
XShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFVQUFB
QUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJLRTBESHhnbGpO
QkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlz
IGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0t
fC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0
aGUgY2FwdGlvbi4geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6
bGFiZWwuCgokJFxtYm94e2V9XntpXHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEg
cmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5
OTNdLgoKLS0tCgojIGAhTVBgIENvbW1hbmQtTGluZSBVc2FnZQoKIyMgYCFNUGAgU2NyaXB0
IFVzYWdlCgpgIU1gIGlzIHN1cHBsaWVkIGFzIGEgc2luZ2xlLWZpbGUgc2NyaXB0IHdoaWNo
IGNvbnRhaW5zIHRoZSBgIU1gCmAhTUZgIGFzIHdlbGwgYXMgdGhlIGAhTWAgZG9jdW1lbnRh
dGlvbiBgbWFya3kubWRgLCBgbWFya3kubWRpYAphbmQgYG1hcmt5LmJpYmAuCgpBZnRlciBk
b3dubG9hZGluZyBgIU1QYCB0aGUgc2NyaXB0IG5lZWRzIHRvIGJlIHBsYWNlZCBpbiBhIHBy
b2plY3QKd29ya2luZyBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYC4gVGhlIHNjcmlwdCBjYW4g
YmUgaW52b2tlZCB1c2luZwphIHB5dGhvbiBpbnRlcnByZXRlciBgcHl0aG9uYCBgIU1wYCBv
ciBpdCBjYW4gYmUgZXhlY3V0ZWQgdXNpbmcgYQpzaGVsbDoKYGBgYmFzaAo+IGNkIHdvcmtp
bmdfZGlyCj4gY2htb2QgK3ggbWFya3kucHkKPiAuL21hcmt5LnB5CmBgYAoKQSBuZXcgcHJv
amVjdCBpcyBpbml0aWFsaXplZCBpbiB0aGUgYHdvcmtpbmdfZGlyYCB1c2luZyB0aGUgYC0t
aW5pdGAKb3B0aW9uLiBgIU1gIGNyZWF0ZXMgYSBkaXJlY3RvcnkgdHJlZSBmb3IgdGhlIHBy
b2plY3QsIHdoaWNoIGlzCmV4cGxhaW5lZCBpbiBkZXRhaWwgaW4gQHNlYzpwcm9qZWN0LiBU
aGUgYCFNYCBgIU1GYCBhbmQKZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBgbWFya3kubWRp
YCBhbmQgYG1hcmt5LmJpYmAgYXJlIGF1dG8tZ2VuZXJhdGVkCmFuZCBwbGFjZWQgaW5zaWRl
IHRoZSBzdWJkaXJzIGBtZC9gIGFuZCBgZGF0YS9gIGluIGB3b3JraW5nX2RpcmAKYWNjb3Jk
aW5nbHkuCmBgYGJhc2gKPiBjZCB3b3JraW5nX2Rpcgo+IC4vbWFya3kucHkgLS1pbml0CldS
SVRFIC4vTWFrZWZpbGUKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAuL21kL21hcmt5Lm1k
aQpXUklURSAuL2RhdGEvbWFya3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBgCjIuIGBtYWtl
IGFsbC1odG1sIGh0dHBkYAozLiBgbWFrZSBhbGwtcGRmYApgYGAKCmAhTWAgcmVuZGVycyB0
aGUgZG9jdW1lbnRhdGlvbiB1c2luZyBgIVBgIGludG8gYGh0bWxgIGFuZApgcGRmYCB1c2lu
ZyBgbWFrZSBhbGxgLiBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBjYW4gYmUgcmVuZGVy
ZWQgYWZ0ZXIKaW5zdGFsbGluZyB0aGUgZGVwZW5kZW5jaWVzIGBweXRob24tcHl5YW1sYCwg
YHBhbmRvY2AgYW5kIGBwYW5kb2MteG5vc2AKKGBwYW5kb2MtZmlnbm9zYCwgYHBhbmRvYy1z
ZWNub3NgLCBgcGFuZG9jLWVxbm9zYCwgYHBhbmRvYy10YWJsZW5vc2ApLgpUaGUgZGV0YWls
cyBhcmUgc2hvd24gaW4gdGhlIGAhTUZgIGhlbHAgbWVzc2FnZSBpbiBAc2VjOm1ha2VmaWxl
LgoKIyMgYCFNYCBQcm9qZWN0IFN0cnVjdHVyZSB7I3NlYzpwcm9qZWN0fQoKQSBgIU1gIHBy
b2plY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlLCB3aGljaCBpcyBhdXRvLWdlbmVy
YXRlZAppbiB0aGUgcHJvamVjdCBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYCBhZnRlciBpbnZv
Y2F0aW9uIG9mCmAhTXBgIGAtLWluaXRgLgpgYGAhIQoJdGV4dCA9ICIiCglmb3IgaSBpbiBz
dWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJCSJ0cmVlIl0pLmRlY29kZSgidXRm
LTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJdGV4dCArPSBp
ICsgIlxuIgpgYGAKCmBgYApgIXRleHRgCmBgYAoKQnkgaW52b2tpbmcgYG1ha2UgYWxsYCBh
bGwgZmlsZXMgYG1kLyoubWRgIGFyZSB0cmFuc2Zvcm1lZAppbnRvIGNvcnJlc3BvbmRpbmcg
YGh0bWwvKi5odG1sYCBhbmQgYHBkZi8qLnBkZmAgZmlsZXMuIEJ5Cmludm9raW5nIGBtYWtl
IGh0dHBkYCBhIHB5dGhvbiB3ZWIgc2VydmVyIGlzIHN0YXJ0ZWQgaW4gYGh0bWwvYC4KCkFs
bCB1c2VyLWdlbmVyYXRlZCBwcm9qZWN0IGNvbnRlbnQgZ29lcyBpbnRvIGBtZC8qLm1kKGkp
YCBmb3IKYCFNRGAgdGV4dCBhbmQgYCFNRGAgaW5jbHVkZSBmaWxlcyBhbmQgYGRhdGEvKmAg
Zm9yIGltYWdlcywKYmlibGlvZ3JhcGh5LCB2aWRlb3MsIGh0bWwgZnJhbWVzLCBldGMuLi4K
CioqQVRURU5USU9OOioqIFRoZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMgYGJ1aWxkLyou
bWRgIGFyZQoqKmF1dG8tZ2VuZXJhdGVkKiouIEFsbCB1c2VyLWdlbmVyYXRlZCBjb250ZW50
IGAqLm1kYCBhbmQgYCoubWRpYApoYXMgdG8gYmUgcGxhY2VkIGluc2lkZSB0aGUgZGlyZWN0
b3J5IGBtZC9gLiBJbnZva2luZyBgbWFrZSBjbGVhbmAKd2lsbCBkZWxldGUgYWxsIGZpbGVz
IGluIGBodG1sL2AsIGBidWlsZC9gIGFuZCBgcGRmL2AuCgojIyBgIU1gIE1ha2VmaWxlIFVz
YWdlIHsjc2VjOm1ha2VmaWxlfQoKQnkgcnVubmluZyBgbWFrZWAgb3IgYG1ha2UgaGVscGAg
aW4gdGhlIHByb2plY3QgYHdvcmtpbmdfZGlyYCB0aGUKYCFNRmAgaGVscCBpcyBzaG93bi4K
YGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJt
YWtlIiwKCQkiaGVscCJdKS5kZWNvZGUoInV0Zi04Iikuc3BsaXQoIlxuIik6CgkJaWYgaS5z
dGFydHN3aXRoKCIjIik6CgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApg
YGAKCiMjIGAhTWAgQ2hlYXQgU2hlZXQKCkJ5IHJ1bm5pbmcgYG1ha2UgY2hlYXRgIGluIHRo
ZSBwcm9qZWN0IGB3b3JraW5nX2RpcmAgdGhlIGAhTWAgY2hlYXQKc2hlZXQgaXMgc2hvd24s
IHdoaWNoIHByZXNlbnRzIGEgcXVpY2sgb3ZlcnZpZXcgb2YgYCFNYCBzcGVjaWFsCm1hcmt1
cCBmb3IgZXhlY3V0aW9uIG9mIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRpb24gb2YgYCFN
RGAgdGV4dCwKYWNjb3JkaW5nIHRvIHRoZSBmZWF0dXJlcyBkZXNjcmliZXMgaW4gQHNlYzpm
ZWF0dXJlcy4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19v
dXRwdXQoWyJtYWtlIiwKCQkiY2hlYXQiXSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIp
OgoJCWlmIGkuc3RhcnRzd2l0aCgiIyIpOgoJCQlpID0gaS5yZXBsYWNlKHIiLlw/Pz8iLCBy
Ii5cXD8/PyIpCgkJCWkgPSBpLnJlcGxhY2UociIuPz8/IiwgciIuXD8/PyIpCgkJCXRleHQg
Kz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApgYGAKCi0tLQoKIyBgIU1gIFByZXByb2Nl
c3NvciBNYXJrdXAKCiMjIFlhbWwgTWV0YSBEYXRhIGluIEZyb250IE1hdHRlciB7I3NlYzpt
ZXRhZGF0YX0KCk1ldGEgZGF0YSBpcyBhbm5vdGF0ZWQgaW4gdGhlIGZyb250IG1hdHRlciBv
ZiBhIGAhTURgIHRleHQgZG9jdW1lbnQuClRoZSBmcm9udCBtYXR0ZXIgbXVzdCBzdGFydCBp
biB0aGUgZmlyc3QgbGluZSB3aXRoIGAtLS1gIGFuZCBwcmVjZWRlcyBhbGwKb3RoZXIgdGV4
dCBiZWluZyBmZW5jZWQgYnkgYC0tLWAuIFRoZSBtZXRhIGRhdGEgaXMgaW4gYHlhbWxgIGZv
cm1hdC4KVGhlIGB5YW1sYCBibG9jayBpcyBwYXJzZWQgdXNpbmcgYHB5dGhvbi1weXlhbWxg
LiBCeSBkZWZhdWx0IGFsbCBtZXRhCmRhdGEgaXMgaW1wb3J0ZWQgaW50byB0aGUgcHJlcHJv
Y2Vzc2VkIGRvY3VtZW50LiBJZiBhIG1ldGEKZGF0YSBrZXkgc3RhcnRzIHdpdGggYC1gIHRo
ZSBrZXkgaXMgbm90IGltcG9ydGVkIGludG8gdGhlIHJlc3VsdGluZwptZXRhIGRhdGEgb2Yg
dGhlIHByZXByb2Nlc3NlZCBkb2N1bWVudCwgaG93ZXZlciB0aGUga2V5IHdpbGwgYmUKZXhw
b3NlZCBpbnRvIHRoZSBweXRob24gc2NvbGUgYXMgYSBsb2NhbCB2YXJpYWJsZS4gSW4gdGhl
IGZvbGxvd2luZwpleG1hbXBsZSBhbGwga2V5cyBleGNlcHQgYGZpZ3NpemVgLCBgZmlnZHBp
YCBhbmQgYHZlcnNpb25gIGFyZSBjb3BpZWQKaW50byB0aGUgcHJlcHJvY2Vzc2VkIGAhTURg
IGRvY3VtZW50LgoKKipFeGFtcGxlKioKYGBgeWFtbAoKLS0tCnRpdGxlOiBgIXRpdGxlYApk
YXRlOiBgIWRhdGVgCmF1dGhvcjogYCFhdXRob3JgCmxpbmstY2l0YXRpb25zOiBgIWxpbmtf
Y2l0YXRpb25zYApiaWJsaW9ncmFwaHk6IGAhYmlibGlvZ3JhcGh5YApoZWFkZXItaW5jbHVk
ZXMtLXBkZjogPgogIFxoeXBlcnNldHVwewogIGNvbG9ybGlua3M9ZmFsc2UsCiAgYWxsYm9y
ZGVyY29sb3JzPXswIDAgMH0sCiAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVy
LWluY2x1ZGVzLS1odG1sOiA+CiAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94
OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogYCF4bm9zX2NsZXZlcmVmYAp4bm9zLWNhcGl0
YWxpc2U6IGAheG5vc19jYXBpdGFsaXNlYApmb250c2l6ZTogYCFmb250c2l6ZWAKLXZlcnNp
b246IGAhdmVyc2lvbmAKLWZpZ3NpemU6IGAhZmlnc2l6ZWAKLWZpZ2RwaTogYCFmaWdkcGlg
CgotLS0KCmBgYAoKVGhlIG1ldGEgZGF0YSBmaWVsZHMKW2B0aXRsZWAsIGBkYXRlYCwgYGF1
dGhvcmBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNtZXRhZGF0YS12YXJpYWJs
ZXMpLApbYGxpbmstY2l0YXRpb25zYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I290aGVyLXJlbGV2YW50LW1ldGFkYXRhLWZpZWxkcyksCltgYmlibGlvZ3JhcGh5YF0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2NpdGF0aW9uLXJlbmRlcmluZykgYW5kCltg
aGVhZGVyLWluY2x1ZGVzYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3Zhcmlh
Ymxlcy1zZXQtYXV0b21hdGljYWxseSkKYXJlIHByb2Nlc3NlZCBieSBgIVBgIGR1cmluZyBk
b2N1bWVudCByZW5kZXJpbmcuIGBmb250c2l6ZWAgYWRqdXN0cyB0aGUKZm9udCBzaXplIGlu
IFtgaHRtbGBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJpYWJsZXMtZm9y
LWh0bWwpCmFuZCBbYHBkZmBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJp
YWJsZXMtZm9yLWxhdGV4KSBkb2N1bWVudHMuClRoZSBgaGVhZGVyLWluY2x1ZGVzYCBmaWVs
ZCBpcyB1c2VkIGZvciB1bmRlcmxpbmluZyBsaW5rcyBpbiBgcGRmYAphbmQgYGh0bWxgIGRv
Y3VtZW50cy4gVGhlIGB4bm9zLWNsZXZlcmVmYCBhbmQgYHhub3MtY2FwaXRhbGlzZWAKZmll
bGRzIGFyZSB1c2VkIGJ5IHRoZSBbYHBhbmRvYy14bm9zYF0oaHR0cHM6Ly9naXRodWIuY29t
L3RvbWR1Y2svcGFuZG9jLXhub3MpCmV4dGVuc2lvbnMgZm9yIHJlZmVyZW5jaW5nCltmaWd1
cmVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZmlnbm9zI2N1c3RvbWl6
YXRpb24pLApbdGFibGVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtdGFi
bGVub3MjY3VzdG9taXphdGlvbiksCltzZWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3Rv
bWR1Y2svcGFuZG9jLXNlY25vcyNjdXN0b21pemF0aW9uKSBhbmQKW2VxdWF0aW9uc10oaHR0
cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWVxbm9zI2N1c3RvbWl6YXRpb24pLgoK
VGhlIGZpZWxkIGBoZWFkZXItaW5jbHVkZXNgIGVuZHMgd2l0aCBgLS1wZGZgIGFuZCBgLS1o
dG1sYCwgd2hpY2gKc3BlY2lmaWVzIGNvcnJlc3BvbmRpbmcgb3B0aW9ucyBmb3IgZ2VuZXJh
dGlvbiBvZiBgcGRmYCBhbmQgYGh0bWxgCmRvY3VtZW50cy4gRHVyaW5nIG1ha2UsIGAhTWAg
c2NhbnMgYWxsIG1ldGEgZGF0YSBmaWVsZHMsIGFuZApmaWVsZHMgd2hpY2ggZW5kIHdpdGgg
YC0tcGRmYCBhbmQgYC0taHRtbGAgYXJlIHNlbGVjdGVkIGFuZCBmb3J3YXJkZWQKdG8gYCFQ
YCBiYXNlZCBvbiB0aGUgZm9ybWF0IHRvIGJlIHJlbmRlcmVkLiBUaGlzIHdhcyBmb3JtYXQg
ZGVwZW5kZW50Cm1ldGEgZGF0YSBjYW4gYmUgc3BlY2lmaWVkIGluIGAhTWAgTWFya2Rvd24g
dGV4dC4KClRoZSBgdmVyc2lvbmAgZmllbGQgaXMgYSB1c2VyLWRlZmluZWQgZmllbGQKd2hp
Y2ggc2hvd3MgdGhlIHZlcnNpb24gb2YgdGhpcyBkb2N1bWVudDogKmAhdmVyc2lvbmAqLiBg
Zmlnc2l6ZWAgYW5kCmBmaWdkcGlgIGFyZSB1c2VkIGluIHRoaXMgZG9jdW1lbnQgdG8gY29u
dHJvbCB0aGUgZmlndXJlIHNpemUgYW5kCnJlc29sdXRpb24gaW4gdGhlIGAhTlVgIGFuZCBg
IVBMYCBleGFtcGxlLCBzZWUgQHNlYzpleGFtcGxlcy4gVGhlIGZvbnQKc2l6ZSBpcyBgIWZv
bnRzaXplYCBhbmQgdGhlIEBmaWc6ZmlndXJlMSwgIUBmaWc6ZmlndXJlMl8xLAohQGZpZzpm
aWd1cmUyXzIsICFAZmlnOmZpZ3VyZTJfMyBhbmQgIUBmaWc6ZmlndXJlMl80IGhhdmUgYSBz
aXplIG9mCmAhIngiLmpvaW4oc3RyKGkpIGZvciBpIGluIGZpZ3NpemUpYGNtLiBUaGUgZm9u
dCBzaXplIGFwcGxpZXMgdG8KYm90aCBkb2N1bWVudCB0ZXh0IGFuZCBmaWd1cmUgdGV4dC4K
CkFzIHRoZSB1c2VyLWRlZmluZWQgZmllbGRzIGFyZSBwcmVjZWVkZWQgd2l0aCBgLWAsIHRo
ZXkgYXJlIG5vdCBjb3BpZWQKaW50byB0aGUgbWV0YSBkYXRhIG9mIHRoZSBwcmVwcm9jZXNz
ZWQgYCFNRGAgdGV4dC4gVGhleSBhcmUgb25seQpleHBvc2VkIGludG8gdGhlIHB5dGhvbiBz
Y29wZSBhcyB2YXJpYWJsZXMgZm9yIHByb2Nlc3NpbmcgdGhlIGAhTWAKYCFNRGAgdGV4dCwg
YXMgZGVzY3JpYmVkIGluIEBzZWM6aW5jbWV0YS4KCiMjIFB5dGhvbiBDb2RlIEJsb2NrcyBp
bnNpZGUgYCFNRGAgVGV4dCB7I3NlYzpibG9ja30KClB5dGhvbiBjb2RlIGNhbiBiZSBleGVj
dXRlZCBkdXJpbmcgdHJhbnNmb3JtYXRpb24gb2YgdGhlIGAhTURgIHRleHQuClB5dGhvbiBj
b2RlIGlzIGRpcmVjdGx5IHdyaXR0ZW4gaW5zaWRlIHRoZSBgIU1EYCB0ZXh0IGFuZCBpcyBm
ZW5jZWQKdXNpbmcgdGhlIGBgIGAhQlQqM2AgYGAgc3RhdGVtZW50LiBUaGUgYmxvY2sgbmVl
ZHMgdG8gc3RhcnQgd2l0aCBlaXRoZXIKYFwhYCBvciBgXCEhYC4KKiBgXCFgOiBUaGUgcHl0
aG9uIGNvZGUgaXMgZXhlY3V0ZWQgYW5kICoqc2hvd24qKiBpbiB0aGUgb3V0cHV0LgoqIGBc
ISFgOiBUaGUgcHl0aG9uIGNvZGUgaXMgZXhlY3V0ZWQgYW5kICoqaGlkZGVuKiogaW4gdGhl
IG91dHB1dC4KCmBgYG1kCglgIUJUKjNgIQoJCTxweXRob25fY29kZV9zaG93bj4KCWAhQlQq
M2AKCglgIUJUKjNgISEKCQk8cHl0aG9uX2NvZGVfaGlkZGVuPgoJYCFCVCozYApgYGAKCk1l
dGEgZGF0YSBmcm9tIGAhTURgIGZyb250IG1hdHRlciBjYW4gYmUgdXNlZCBhcyBsb2NhbCB2
YXJpYWJsZXMgaW4KcHl0aG9uIGNvZGUgYmxvY2tzLiBUaGUgYGltcG9ydGAgc3RhdGVtZW50
IGNhbiBiZSB1c2VkIGluIHB5dGhvbiBjb2RlCmJsb2NrcyBpbiBvcmRlciB0byBhY2Nlc3Mg
aW5zdGFsbGVkIHB5dGhvbiBwYWNrYWdlcy4gQWxsIGNvZGUgYmxvY2tzCnNwYW4gb25lIGxh
cmdlIHNjb3BlIGZvciBzaGFyaW5nIGZ1bmN0aW9ucyBhbmQgbG9jYWwgdmFyaWFibGVzLgpV
c2luZyB0aGUgYHByaW50KClgIGZ1bmN0aW9uIHRoZSB0ZXh0IHdpbGwgYmUgcHJpbnRlZCB0
byB0aGUgY29uc29sZQphbmQgKipub3QqKiBpbnNpZGUgdGhlIHJlc3VsdGluZyBgIU1EYCB0
ZXh0LiBJbiBvcmRlciB0byBtb2RpZnkKdGhlIGAhTURgIHRleHQgdXNpbmcgYCFNYCBkdXJp
bmcgcHJlcHJvY2Vzc2luZywgdGhlIGAhUDFgIHN0YXRlbWVudApoYXMgdG8gYmUgdXNlZCwg
c2VlIEBzZWM6bWRwcmludC4KCioqRXhhbXBsZSoqCmBgYCEKCWltcG9ydCBudW1weSBhcyBu
cAoJZGVmIGdldF94KGE9MCk6CgkJcmV0dXJuIG5wLmFycmF5KFs0MSArIGFdKQoJeSA9IDEK
YGBgCgpUaGlzIGlzIGEgcGFyYWdyYXBoLgoKYGBgIQoJeCA9IGdldF94KHkpCglwcmludCgi
SGVsbG8gQ29uc29sZSEgeCBpcyIsIHgpCmBgYAoKIyMgR2VuZXJhdGlvbiBvZiBgIU1EYCBU
ZXh0IHVzaW5nIFB5dGhvbiBDb2RlIHsjc2VjOm1kcHJpbnR9CgojIyMgVGhlIGAhUDFgIFN0
YXRlbWVudAoKVXNpbmcgdGhlIGBwcmludCgpYCBzdGF0ZW1lbnQgdGhlIHRleHQgd2lsbCBi
ZSBwcmludGVkIHRvIHRoZSBjb25zb2xlLgpXaGVuIHVzaW5nIHRoZSBgIVAxYCBhbmQgYCFQ
MmAgc3RhdGVtZW50cyBuZXcgYCFNRGAgdGV4dCBjYW4gYmUKaW5zZXJ0ZWQgZHluYW1pY2Fs
bHkgaW50byB0aGUgZG9jdW1lbnQgZHVyaW5nIHByZXByb2Nlc3NpbmcuCgoqKmAhUDFgIFN0
YXRlbWVudCoqCiogYF8oKmFyZ3MsIHNlcD0iICIpYDoKCTEuIGNvbnZlcnQgYXJndW1lbnRz
IHRvIHN0cmluZwoJMi4gam9pbiBhcmd1bWVudHMgdXNpbmcgYHNlcGAKKiBgXyhfLCAqYXJn
cyAgIClgOiBhcHBlbmQgdG8gcHJldmlvdXMgb3V0cHV0CiogYF8oXywgKmFyZ3MsIF8pYDog
YXBwZW5kIHRvIHByZXZpb3VzIG91dHB1dCBhbmQgYXBwZW5kIG5leHQgb3V0cHV0CiogYF8o
ICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQgb3V0cHV0IHRvIHRoaXMgb3V0cHV0CgoqKmAh
UDJgIFN0YXRlbWVudCoqCiogYF9fKGFyZywgY3JvcD1UcnVlLCBzaGlmdD0iIilgOgoJMS4g
Y29udmVydCBgYXJnYCB0byBzdHJpbmcKCTIuIGNyb3AgYW5kIHByZXBlbmQgYHNoaWZ0YCBz
dHJpbmcgdG8gZWFjaCBsaW5lCiogYF9fKGFyZywgXylgOiBhcHBlbmQgbmV4dCBvdXRwdXQg
dG8gdGhpcyBvdXRwdXQKCioqQ3JvcCBhbmQgU2hpZnQqKgpgYGBweQpkZWYgdGVzdCgpOgoJ
X18oIiIiCgkJKiBMaXN0IExldmVsIDEKCQkqIExpc3QgTGV2ZWwgMQoJIiIiKQoJX18oIiIi
CgkJKiBMaXN0IExldmVsIDIKCQkqIExpc3QgTGV2ZWwgMgoJCSAgICAqIExpc3QgTGV2ZWwg
MwoJIiIiLCBzaGlmdD0iICIqNCkKYGBgCgpgYGBtZAoqIExpc3QgTGV2ZWwgMQoqIExpc3Qg
TGV2ZWwgMQogICAgKiBMaXN0IExldmVsIDIKICAgICogTGlzdCBMZXZlbCAyCiAgICAgICAg
KiBMaXN0IExldmVsIDMKYGBgCgoqKkV4YW1wbGUqKgpgYGAhCgl5ICs9IDEKCV9fKGYiIiIK
CQkqIFRoaXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJCSogVGhpcyBpcyBg
bWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkiIiIpCglfXyhmIiIiCgkJMS4gVGhpcyBp
cyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkJMi4gVGhpcyBpcyBgbWFya3lgIFZl
cnNpb24gKnt2ZXJzaW9ufSouCgkiIiIsIHNoaWZ0PSIgIio0KQpgYGAKCmBgYCEKCV8oIlRo
aXMiLCBfKQoJXygiaXMiKQoJXyhfLCAiIG9uZSIsIF8pCglfKCJsaW5lISBub3QgZW5kaW5n
IHdpdGggXFwiKQoJXygidGhpcz8iKQpgYGAKCmBgYCEKCV8oZiJIZWxsbyBNYXJrZG93biEg
eCBpcyAqKnt4fSoqIGFuZCB5IGlzICp7eX0qIikKYGBgCgojIyMgSW5kZW50YXRpb24gb2Yg
dGhlIGAhUDFgIFN0YXRlbWVudAoKVGhlIGAhUDFgIHN0YXRlbWVudCBuZWVkcyB0byBiZSBp
bmRlbnRlZCBhY2NvcmRpbmcgdG8gdGhlIHB5dGhvbiBwcm9ncmFtCmZsb3cgKGBmb3JgLCBg
d2hpbGVgLCBgaWZgLCBgZWxzZWAsIGB0cnlgLCBgd2l0aGAsIGBkZWZgLCBgY2xhc3NgKSBh
bmQKc3VwcG9ydHMgZHluYW1pYyBpbnNlcnRpb24gb2YgYCFNRGAgdGV4dCBpbnRvIHRoZSBk
b2N1bWVudCBiYXNlZApvbiBsb29wcyBhbmQgY29uZGl0aW9ucy4KCioqRXhhbXBsZSAxKioK
CmBgYCEKCV8oIlRoaXMgaXMgdGhlICoqZ2VuZXJhdGVkIG91dHB1dCoqOiIpCglfKCIiKQoJ
XygiPiBUaGlzIGlzIGEgKmxpc3RpbmcqOiIpCgl0ZXh0ID0gWyJ6ZXJvIiwgIm9uZSIsICJ0
d28iLCAidGhyZWUiXQoJZm9yIGkgaW4gcmFuZ2UoMTApOgoJCWlmIGkgPCAyOgoJCQlfKGYi
PiB7aX0iKQoJCWVsaWYgaSA9PSAyOgoJCQlqID0gdGV4dFtpXQoJCQlfKGYiPiB7an0iKQoJ
CWVsaWYgaSA9PSAzOgoJCQlfKCIiKQoJCWVsaWYgaSA8IDc6CgkJCV8oZiI+PiB7JyAgICAn
KihpLTQpfSoge2l9IikKCQllbGlmIGkgPT0gNzoKCQkJXygiIikKCQllbHNlOgoJCQlqID0g
aSAtIDcKCQkJayA9IHRleHRbal0KCQkJXyhmIj4ge2p9LiB7a30iKQpgYGAKCioqRXhhbXBs
ZSAyKioKCkB0Ymw6dGFibGUxIGlzIGdlbmVyYXRlZCB1c2luZyB0aGUgZm9sbG93aW5nIHB5
dGhvbiBjbG9kZSBibG9jay4KCmBgYCEKCW4gPSAxMwoJZGVjID0gWyIqJXMqIiwgIioqJXMq
KiIsICJ+fiVzfn4iLCAiYCVzYCIsCgkJciIkXHRpbWVzXiVzJCIsICIkXGluZnR5XyVzJCJd
CglfKCJ8Ii5qb2luKCJYIipuKSArICJcbiIgKyAifCIuam9pbigiLSIqbikpCglmb3IgaSBp
biByYW5nZShuKToKCQlmaWxsID0gW2NocihvcmQoIkEiKSsoMippKzMqayklMjYpIGZvciBr
IGluIHJhbmdlKGkrMSldCgkJZmlsbCA9IFtkZWNbKGwraSklbGVuKGRlYyldJWsgZm9yIGws
IGsgaW4gZW51bWVyYXRlKGZpbGwpXQoJCXRleHQgPSBsaXN0KCIwIikqbgoJCXRleHRbKG4+
PjEpLShpPj4xKToobj4+MSkrKGk+PjEpXSA9IGZpbGwKCQlfKCJ8Ii5qb2luKHRleHQpKQpg
YGAKClRhYmxlOiBUYWJsZSBpcyBnZW5lcmF0ZWQgdXNpbmcgY29kZSBhbmQgdGhlIGAhUDFg
IHN0YXRlbWVudC4geyN0Ymw6dGFibGUxfQoKIyMgRm9ybWF0dGVkIE91dHB1dCBvZiBQeXRo
b24gVmFyaWFibGVzIHsjc2VjOmZvcm1hdH0KCmAhTWAgY2FuIG91dHB1dCBweXRob24gdmFy
aWFibGVzIGlubGluZSBpbnRvIGAhTURgIHRleHQgdXNpbmcKdGhlIGBgIGBcIVZBUklBQkxF
YCBgYCBzdGF0ZW1lbnQuIGBWQVJJQUJMRWAgY2FuIGJlIGFueSBweXRob24gdmFyaWFibGUK
ZnJvbSBhIHB5dGhvbiBjb2RlIGJsb2NrIG9yIG1ldGEgZGF0YSBmaWVsZC4gVGhlIG91dHB1
dCBjYW4gYmUKZm9ybWF0dGVkIHVzaW5nIHRoZSBgYCBgXCFWQVJJQUJMRVs6Rk9STUFUXWAg
YGAgc3RhdGVtZW50IGFjY29yZGluZwp0byB0aGUgcHl0aG9uIG9wZXJhdG9yIGB7PHZhcmlh
YmxlPls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4gdGhlCltgc3RyLmZvcm1hdCgpYF0o
aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1hdHN0
cmluZ3MpCnNwZWNpZmljYXRpb24uIFRoZSBgYCBgXCFWQVJJQUJMRWAgYGAgc3RhdGVtZW50
IGlzIGVzY2FwZWQKdXNpbmcgYGAgYFxcIVZBUklBQkxFYCBgYC4KCioqRXhhbXBsZSoqCmBg
YCEKCXggPSBpbnQoMSkKCXkgPSBmbG9hdCgyLjMpCgl6ID0gMAoJYSA9IFsxLCAyLCAzXQoJ
YiA9ICg0LCA1KQpgYGAKCmBgYG1kClRoaXMgaXMgYSBwYXJhZ3JhcGggYW5kIHggaXMgYFwh
eDowM2RgIGFuZCB5IGlzIGBcIXk6LjJmYC4KT3RoZXIgY29udGVudCBpczogYFwhYWAsIGBc
IWJgIGFuZCBlc2NhcGluZyB3b3JrczogYFxcIXpgLgpgYGAKClRoaXMgaXMgYSBwYXJhZ3Jh
cGggYW5kIHggaXMgYCF4OjAzZGAgYW5kIHkgaXMgYCF5Oi4yZmAuCk90aGVyIGNvbnRlbnQg
aXM6IGAhYWAsIGAhYmAgYW5kIGVzY2FwaW5nIHdvcmtzOiBgXCF6YC4KCiMjIE91dHB1dCBS
ZXN1bHRzIG9mIFB5dGhvbiBFeHByZXNzaW9ucyB7I3NlYzppbmxpbmV9CgpgIU1gIG91dHB1
dHMgcmVzdWx0cyBvZiBweXRob24gZXhwcmVzc2lvbnMgaW5saW5lIGludG8gYCFNRGAgdGV4
dAp1c2luZyB0aGUgYGAgYFwhRVhQUkVTU0lPTmAgYGAgc3RhdGVtZW50LiBgRVhQUkVTU0lP
TmAgY2FuIGJlIGFueSBweXRob24KZXhwcmVzc2lvbi4gVGhlIG91dHB1dCBjYW4gYmUgZm9y
bWF0dGVkIHVzaW5nIHRoZSBweXRob24KYGAgYFwhRVhQUkVTU0lPTls6Rk9STUFUXWAgYGAg
c3RhdGVtZW50IGFjY29yZGluZyB0byB0aGUgcHl0aG9uIG9wZXJhdG9yCmB7PGV4cHJlc3Np
b24+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbiB0aGUgcHl0aG9uCltgZmAtc3RyaW5n
c10oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2UvbGV4aWNhbF9hbmFseXNp
cy5odG1sI2Ytc3RyaW5ncykKc3BlY2lmaWNhdGlvbi4gVGhlIGBgIGBcIUVYUFJFU1NJT05g
IGBgIHN0YXRlbWVudCBpcyBlc2NhcGVkCnVzaW5nIGBgIGBcXCFFWFBSRVNTSU9OYCBgYC4K
CioqRXhhbXBsZSoqCmBgYG1kClRoaXMgaXMgYSBsaXN0IHdpdGggdGhlIG51bWJlcnMgYFwh
IiwgIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gYV0pYC4KVGhlIHJlc3VsdCBvZiB0aGUgZnVu
Y3Rpb24gYGdldF94YCBpcyBgXCFnZXRfeCgpYCBhbmQgZXNjYXBpbmcKd29ya3M6IGBcXCFn
ZXRfeChiWzFdKVswXWAuCmBgYAoKVGhpcyBpcyBhIGxpc3Qgd2l0aCB0aGUgbnVtYmVycyBg
ISIsICIuam9pbihbc3RyKGkpIGZvciBpIGluIGFdKWAuClRoZSByZXN1bHQgb2YgdGhlIGZ1
bmN0aW9uIGBnZXRfeGAgaXMgYCFnZXRfeCgpYCBhbmQgZXNjYXBpbmcKd29ya3M6IGBcIWdl
dF94KGJbMV0pWzBdYC4KCiMjIEluY2x1ZGUgU3RhdGVtZW50IGFuZCBNYWtlIERlcGVuZGVu
Y2llcyB7I3NlYzppbmNsdWRlfQoKYCFNYCBzdXBwb3J0cyBpbmNsdWRlIG9mIGAhTURgIHRl
eHQgdXNpbmcgdGhlIGBcISEhYCBzdGF0ZW1lbnQuClRoZSBgXCEhIWAgc3RhdGVtZW50IG11
c3QgYmUgb24gYSBzaW5nbGUgbGluZSBhbmQgZm9sbG93cyB0aGUgcGF0aApvZiB0aGUgaW5j
bHVkZSBmaWxlLiBUaGUgcGF0aCBvZiB0aGUgaW5jbHVkZSBmaWxlIGlzIHJlbGF0aXZlIHRv
CnRoZSByb290IGAhTURgIGRvY3VtZW50IHdoaWNoIGlzIHByb2Nlc3NlZC4gVGhlIHBhdGhz
IG9mIGFsbAppbmNsdWRlZCBmaWxlcyBhcmUgY29sbGVjdGVkIGFuZCBhIGAhTUZgIHJ1bGUg
aXMgY3JlYXRlZCBhbmQKc3RvcmVkIGluIGEgZmlsZSAocGF0aCBvZiBvdXRwdXQgYCFNRGAg
dGV4dCBhcHBlbmRlZCB3aXRoIGAubWtgKS4KClRoZSBgXCEhIWAgc3RhdGVtZW50IGlzIGVz
Y2FwZWQgdXNpbmcgYFxcISEhYC4KVGhlIGluY2x1ZGUgc3RhdGVtZW50ICoqY2Fubm90Kiog
YmUgdXNlZCBpbiBjb2RlIGJsb2Nrcy4gYCFNYCBgIU1EYAp0ZXh0IG11c3QgaGF2ZSB0aGUg
ZXh0ZW5zaW9uIGAubWRgIGFuZCBpbmNsdWRlIGZpbGVzIG11c3QgaGF2ZSB0aGUKZXh0ZW5z
aW9uIGAubWRpYAoKVGhlIGluY2x1ZGUgc3RhdGVtZW50IHN1cHBvcnRzIGZsYWdzIGZvciBw
YXJzaW5nIHRoZSBpbmNsdWRlIGZpbGUuCmBgYG1kClwhISEgUEFUSC9GSUxFLm1kaSBGTEFH
UwpgYGAKCioqRmxhZ3MqKgoqIGByYXdgOiB0aGUgZmlsZSBpcyBpbmNsdWRlZCBhcyBpcyB3
aXRob3V0IGFueSBwYXJzaW5nCiogYG5vbWV0YWA6IG1ldGEgZGF0YSBpbiBmcm9udCBtYXR0
ZXIgaXMgc2tpcHBlZCBkdXJpbmcgcGFyc2luZwoqIGBub3RleHRgOiBhbGwgTWFya2Rvd24g
dGV4dCBpcyBza2lwcGVkIGR1cmluZyBwYXJzaW5nCiogYG5vbWFya3lgOiBpbmNsdWRlIHRo
ZSBgIU1EYCB0ZXh0IHdpdGhvdXQgYW55IGAhTWAgcHJvY2Vzc2luZwoqIGAjK05gOiBpbmNy
ZWFzZSB0aGUgbGV2ZWwgb2YgQVRYIGhlYWRpbmdzIGAjYC4gVGhlIGhlYWRpbmdzIGFyZQpw
YXJzZWQgYWNjb3JkaW5nIHRvIGAhUGAgZXh0ZW5zaW9ucwooW2JsYW5rX2JlZm9yZV9oZWFk
ZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYmxhbmtfYmVm
b3JlX2hlYWRlciksCltzcGFjZV9pbl9hdHhfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXNwYWNlX2luX2F0eF9oZWFkZXIpKQoqIGA+Pk5gOiBp
bmNyZWFzZSB0aGUgaW5kZW50YXRpb24gdXNpbmcgYE5gIHRhYnMKKiBgPk5gOiBpbmNyZWFz
ZSB0aGUgaW5kZW50YXRpb24gdXNpbmcgYE5gIHNwYWNlcwoqIGBub3JlZmA6IGRvIG5vdCBy
ZWZlcmVuY2UgdGhpcyBmaWxlIGFzIE1ha2VmaWxlIGRlcGVuZGVuY3kKKiBgYXV4YDogcmVm
ZXJlbmNlIGFzIE1ha2VmaWxlIGRlcGVuZGVuY3ksIGJ1dCBkbyBub3QgcHJvY2VzcwoKKipF
eGFtcGxlKioKYGBgbWQKXCEhISBtYXJreS5tZGkgIysyClRoZSBmaWxlIHdhcyBpbmNsdWRl
ZDogYFwhaW5jbHVkZWRgIGFuZCAkeD1gXCF4YCQgYW5kICR5PWBcIXlgJC4KYGBgCgohISEg
bWFya3kubWRpICMrMgpUaGUgZmlsZSB3YXMgaW5jbHVkZWQ6IGAhaW5jbHVkZWRgIGFuZCAk
eD1gIXhgJCBhbmQgJHk9YCF5YCQuCgpUaGUgZmlsZSBgbWFya3kubWRpYCB3YXMgbG9hZGVk
IHdpdGggc2hpZnRpbmcgQVRYIGhlYWRpbmdzIGJ5IDIgd2hpY2gKbWVhbnMgYCMjYCBoYXMg
YmVlbiBhZGRlZCB0byB0aGUgaW5jbHVkZWQgc2VjdGlvbi4gVGhlIGZpbGUgY29udGFpbnM6
CmBgYG1kCiEhISBtYXJreS5tZGkgcmF3ID4+MQpgYGAKVGhlIHVubW9kaWZpZWQgc291cmNl
IHdhcyBsb2FkZWQgdXNpbmcgdGhlIGZsYWdzIGByYXcgPj4xYC4KClRoZSBmaWxlIGBtYXJr
eS5tZC5ta2AgY29udGFpbnM6CmBgYE1ha2VmaWxlCmJ1aWxkL21hcmt5Lm1kOiBcCm1kL21h
cmt5Lm1kaQoKLlBIT05ZOiBtZC1tYXJreQptZC1tYXJreTogYnVpbGQvbWFya3kubWQKCi5Q
SE9OWTogaHRtbC1tYXJreQpodG1sLW1hcmt5OiBodG1sL21hcmt5Lmh0bWwKCi5QSE9OWTog
cGRmLW1hcmt5CnBkZi1tYXJreTogcGRmL21hcmt5LnBkZgpgYGAKCiMjIEluY2x1ZGUgU3Rh
dGVtZW50IGFuZCBNZXRhIERhdGEgSW1wb3J0IHsjc2VjOmluY21ldGF9CgpUaGUgaW5jbHVk
ZSBzdGF0ZW1lbnQgYFwhISFgIGxvYWRzIGFuZCBwYXJzZXMgYW4gYCoubWRpYCBpbmNsdWRl
IGZpbGUuClRoZSBgeWFtbGAgbWV0YSBkYXRhIGluIHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhl
IGRvY3VtZW50IGFsc28gaXMgbG9hZGVkCmFuZCBwYXJzZWQgaWYgdGhlIGBub21ldGFgIGZs
YWcgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgaW5jbHVkZQpzdGF0ZW1lbnQuIEFzc3VtaW5n
IHRoZSByb290IGRvY3VtZW50IGFuZCB0aGUgaW5jbHVkZWQgZG9jdW1lbnQgaGF2ZSB0aGUK
Zm9sbG93aW5nIG1ldGEgZGF0YS4KCioqUm9vdCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQp3
aWR0aDogMTAKaGVpZ2h0OiAyMAoKLS0tClwhISEgaW5jbHVkZS5tZGkKYGBgCgoqKkluY2x1
ZGVkIERvY3VtZW50KioKYGBgeWFtbAoKLS0tCmRlcHRoOiAzMAp2b2x1bWU6IDYwMDAKLXNl
cmlhbDogQTU2R0hKCgotLS0KYGBgCgpCeSBkZWZhdWx0IGFsbCBgeWFtbGAgbWV0YSBkYXRh
IGZpZWxkcyBhcmUgY29waWVkIHRvIHRoZSBtZXRhIGRhdGEgb2YKdGhlIHJvb3QgYCFNRGAg
ZG9jdW1lbnQgd2hpY2ggaXMgcHJvY2Vzc2VkLiBIb3dldmVyLCBpZiBhIG1ldGEgZGF0YQpr
ZXkgaXMgcHJlY2VlZGVkIGJ5IGAtYCB0aGUga2V5IGlzIG5vdCBpbXBvcnRlZCBpbnRvIHRo
ZSByb290IGRvY3VtZW50LgpBbGwgYHlhbWxgIG1ldGEgZGF0YSBrZXlzIHdoaWNoIHN0YXJ0
IHdpdGggYC1gIGFyZSBleHBvc2VkIHRvIHRoZQpweXRob24gc2NvcGUgYW5kIHdpbGwgYXBw
ZWFyIGFzIGxvY2FsIHZhcmlhYmxlcywgYnV0IHRoZXkgd2lsbCBub3QKYXBwZWFyIGluIHRo
ZSBtZXRhIGRhdGEgb2YgdGhlIGZyb250IG1hdHRlciBpbiB0aGUgcHJlcHJvY2Vzc2VkCmAh
TURgIHRleHQuIEdpdmVuIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgcmVzdWx0aW5nIG1ldGEg
ZGF0YSBpbgp0aGUgZnJvbnQgbWF0dGVyIG9mIHRoZSBwcmVwcm9jZXNzZWQgYCFNRGAgdGV4
dCBsb29rcyBhcyBmb2xsb3dzLgoKKipQcmVwcm9jZXNzZWQgRG9jdW1lbnQqKgpgYGB5YW1s
CgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAKZGVwdGg6IDMwCnZvbHVtZTogNjAwMAoKLS0t
CmBgYAoKIyMgRm9ybWF0IExpbmtzIGZvciBgaHRtbGAgYW5kIGBwZGZgIERvY3VtZW50cyB7
I3NlYzpmb3JtbGlua30KCldoZW4gd3JpdGluZyBtdWx0aXBsZSBkb2N1bWVudHMsIG9mdGVu
IGRvY3VtZW50cyBhcmUgcmVmZXJlbmNlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgbGlu
a3MuIEluIG9yZGVyIHRvIHJlZmVyIHRvIGV4dGVybmFsCmBodG1sYCBhbmQgYHBkZmAgZG9j
dW1lbnRzIHRoZSBgIU1EYCBsaW5rIHN0YXRlbWVudCBpcyB1c2VkLgpgYGBtZApbTGluayBD
YXB0aW9uXShwYXRoL3RvL2ZpbGUuaHRtbCkKW0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxl
LnBkZikKYGBgCgpXaGVuIHVzaW5nIHJlbGF0aXZlIHBhdGhzIGluIHRoZSBVUkwsIHRoZSBk
b2N1bWVudHMgY2FuIGJlIHJlZmVyZW5jZWQKYWNjb3JkaW5nIHRvIHRoZSBkaXJlY3Rvcnkg
dHJlZSBvZiB0aGUgc291cmNlIGAhTWAgYCFNRGAgdGV4dApgbWQvKi8qLm1kYC4gSG93ZXZl
ciwgdGhlIHJlc3VsdGluZyBsaW5rIHdpbGwgYmUgYSBwYXRoIHJlbGF0aXZlCnRvIHRoZSBk
aXJlY3RvcnkgYGh0bWwvYCBmb3IgYGh0bWxgIGRvY3VtZW50cyBhbmQgcmVsYXRpdmUgdG8g
YHBkZi9gCmZvciBgcGRmYCBkb2N1bWVudHMuIEFzIGFsbCBgaHRtbGAgYW5kIGBwZGZgIGRv
Y3VtZW50cyBhcmUga2VwdCBpbgpzZXBhcmF0ZSBkaXJlY3Rvcmllcywgb25lIGxpbmsgc3Rh
dGVtZW50IGNhbm5vdCBiZSB1c2VkIGZvciByZW5kZXJpbmcKYGh0bWxgIGFuZCBgcGRmYCB3
aXRoIGNvbnNpc3RlbnQgcGF0aHMgaW4gdGhlIGxpbmsgc3RhdGVtZW50LgoKQnkgdXNpbmcg
dGhlIGAhTWAgZm9ybWF0IGxpbmsgc3RhdGVtZW50IGAuXD8/P2AsIHRoZSBmaWxlIGV4dGVu
c2lvbgppbiB0aGUgbGlua3MgaXMgcmVwbGFjZWQgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQg
Zm9ybWF0CnJlc3VsaW5nIGluIGNvbnNpc3RlbnQgbGlua3MgZm9yIGBodG1sYCBhbmQgYHBk
ZmAKZG9jdW1lbnRzLiBUaGUgZm9ybWF0IGxpbmsgc3RhdGVtZW50IGNhbiBiZSBlc2NhcGVk
IHVzaW5nIGAuXFw/Pz9gLgoKKipFeGFtcGxlKioKYGBgbWQKW0xpbmsgdG8gdGhpcyBEb2N1
bWVudF0obWFya3kuXD8/PykKYGBgCgpbTGluayB0byB0aGlzIERvY3VtZW50XShtYXJreS4/
Pz8pCgojIyBGb3JtYXQgQ29kZXMgZm9yIGBodG1sYCBhbmQgYHBkZmAgRG9jdW1lbnRzIHsj
c2VjOmZvcm1jb2RlfQoKT2Z0ZW4gd2hlbiB3cml0aW5nIG1hcmtkb3duIGZvciBgaHRtbGAg
YW5kIGBwZGZgIGRvY3VtZW50cywgdGhlCmZvcm1hdCBuZWVkcyB0byBiZSBhZGp1c3RlZCBh
Y2NvcmRpbmcgdG8gdGhlIGZvcm1hdC4gYCFQYCBgIU1EYAphbHJlYWR5IHJlbmRlcnMgYWxs
IGNvbW1vbiBNYXJrZG93biBpbnRvIGBodG1sYCBhbmQgYHBkZmAuCmAhTWAgc3VwcG9ydHMg
Zm9ybWF0IHNwZWNpZmljIHR3ZWFraW5nIHVzaW5nIGZvcm1hdCBjb2Rlcy4KCkluIG9yZGVy
IHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMgY29kZSwgYGh0bWxgIGNvZGUgb3IgYHRleGAg
Y29kZQpmb3IgYHBkZmAgZG9jdW1lbnRzLCB0aGUgZm9ybWF0IGNvZGVzIGFyZSB1c2VkLiBB
IGZvcm1hdCBjb2RlIGlzCndyaXR0ZW4gYXMgYGAgYFw/Rk1UQ09ERShBUkdTKWAgYGAgd2hp
Y2ggaXMgdHJhbnNsYXRlZCBpbiB0d28gcHl0aG9uCmZ1bmN0aW9uIGNhbGxzOgoxLiBgRk1U
Q09ERV9odG1sKEFSR1MpYDogZm9ybWF0IGNvZGUgZm9yIGluamVjdGlvbiBvZiByYXcgYGh0
bWxgCmNvZGUgZm9yIHJlbmRlcmluZyBgaHRtbGAtYmFzZWQgZG9jdW1lbnRzIGluIGAhUGAu
CjIuIGBGTVRDT0RFX3BkZihBUkdTKWA6IGZvcm1hdCBjb2RlIGZvciBpbmplY3Rpb24gb2Yg
cmF3IGB0ZXhgCmNvZGUgaW4gYHBkZmAtYmFzZWQgZG9jdW1lbnRzIGluIGAhUGAuCgpEdXJp
bmcgcHJlcHJvY2Vzc2luZywgYCFNYCBwcm9jZXNzZXMgYWxsIGZvcm1hdCBjb2RlcyBmb3Ig
ZWFjaApmb3JtYXQgYGh0bWxgIGFuZCBgcGRmYCBhbmQgY2FjaGVzIHRoZSBvdXRwdXQuIEJl
Zm9yZSByZW5kZXJpbmcKdGhlIE1hcmtkb3duIGluIG9uZSBwYXJ0aWN1bGFyIGZvcm1hdCB1
c2luZyBgIVBgLCBgIU1gIGV4dHJhY3RzCnRoZSByZXN1bHRzIG9mIHRoZSBjb3JyZXNwb25k
aW5nIGZvcm1hdCBjb2RlcyBhbmQgc2tpcHMgdGhlIG90aGVycy4KQWRkaXRpb25hbCBgdGV4
YCBwYWNrYWdlcyBoYXZlIHRvIGJlIGluY2x1ZGVkIHVzaW5nIHRoZSBtZXRhIGRhdGEKZmll
bGQgYGhlYWRlci1pbmNsdWRlc2AuCgpGb3IgcmV0dXJuaW5nIHRoZSByYXcgZm9ybWF0IGNv
ZGUsIGVpdGhlciB0aGUgYCFQMWAgc3RhdGVtZW50IGNhbgpiZSB1c2VkIEBzZWM6bWRwcmlu
dCAqKm9yKiogdGhlIGByZXR1cm5gIHN0YXRlbWVudCBjYW4gYmUgdXNlZC4KSWYgYm90aCBz
dGF0ZW1lbnRzIGFyZSBtaXhlZCwgdGhlIG91dHB1dCB3aGljaCBoYWQgYmVlbiByZXR1cm5l
ZAp3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSB0ZXh0IGdlbmVyYXRlZCB3aXRoIHRoZSBgIVAx
YCBzdGF0ZW1lbnQuCgoqKkV4YW1wbGUqKgpgYGAhCglkZWYgdGVzdDFfaHRtbCgpOgoJCV8o
IlRoaXMgaXMgSFRNTDEgYW5kIikKCQlyZXR1cm4gIml0IGdvZXMgb24gaGVyZSEiCglkZWYg
dGVzdDFfcGRmKCk6CgkJX18oIiIiCgkJCVRoaXMgaXMgXHtQREYxXH0gYW5kCgkJIiIiKQoJ
ZGVmIHRlc3QyX2h0bWwoKToKCQlyZXR1cm4gIiIiCgkJCVRoaXMgaXMgSFRNTDIhCgkJIiIi
CglkZWYgdGVzdDJfcGRmKCk6CgkJcGFzcwpgYGAKCmBgYG1kClRoZSBvdXRwdXQgb2YgdGhl
IGZvcm1hdCBjb2RlIGBcXD90ZXN0MSgpYCBpcyAiYFw/dGVzdDEoKWAiIGFuZApgXFw/dGVz
dDIoKWAgaXMgImBcP3Rlc3QyKClgIiAoaW4gSFRNTCBpdCBpcyBub3QgZW1wdHkpLgpgYGAK
ClRoZSBvdXRwdXQgb2YgdGhlIGZvcm1hdCBjb2RlIGBcP3Rlc3QxKClgIGlzICJgP3Rlc3Qx
KClgIiBhbmQKYFw/dGVzdDIoKWAgaXMgImA/dGVzdDIoKWAiIChpbiBIVE1MIGl0IGlzIG5v
dCBlbXB0eSkuCgotLS0KCiMgYCFNYCBgIU1EYCBFeGFtcGxlcyB7I3NlYzpleGFtcGxlc30K
CiMjIEphdmFTY3JpcHQgaW4gYGh0bWxgIGFuZCBQbGFjZWhvbGRlciBpbiBgcGRmYAoKV2hl
biBjcmVhdGluZyBgIU1EYCB0ZXh0IGZvciBgaHRtbGAgb3V0cHV0LCB0aGUgdXNlciBvZnRl
biB3YW50cwppbnRlcmFjdGl2aXR5IHVzaW5nIHdpZGdldHMgbGlrZSBzbGlkZXJzLCBjaGVj
ayBib3hlcywgZHJvcCBkb3duIGJveGVzCmV0Yy4gSG93ZXZlciwgd2hlbiBleHBvcnRpbmcg
aW50byBgcGRmYCB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlCnJlcGxhY2VkIHdpdGggbm9u
LWludGVyYWN0aXZlIHBsYWNlaG9sZGVycy4gSW4gb3JkZXIgdG8gZGV2ZWxvcCBhIHNpbmds
ZQpgIU1EYCBkb2N1bWVudCwgd2hpY2ggY2FuIGJlIHJlbmRlcmVkIGluIGBodG1sYCB3aXRo
IGludGVyYWN0aXZlCmVsZW1lbnRzIGFuZCBpbnRvIGBwZGZgIHdpdGggcGxhY2Vob2xkZXIs
IHRoZSBgIU1gIGZvcm1hdCBjb2RlcyBjYW4gYmUKdXNlZCwgc2VlIEBzZWM6Zm9ybWNvZGUu
IFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZWZpbmVzIGEKYDxpbnB1dCB0eXBlPSJyYW5nZSI+
YCBhbmQgdHdvIGA8c3BhbnM+YCB3aXRoIGBpZD0ibXl2YWwiYCBhbmQKYGlkPSJteXJlcyJg
LCBpbiBvcmRlciB0byB1cGRhdGUgdGhlIHZhbHVlIG9mICR5PXNpbih4KSQgaW4gYGh0bWxg
LiBGb3IKYHBkZmAgb3V0cHV0IHRoZSBlcXVhdGlvbiBhbmQgdGhlIHZhbHVlIHJhbmdlIGlz
IHNob3duLgoKKipFeGFtcGxlKioKYGBgIQoJZGVmIHJhbmdlX2h0bWwoKToKCQlfXygiIiIK
CQkJJHhcaW4gWzAkIDxpbnB1dCB0eXBlPSdyYW5nZScgdmFsdWU9JzAnIG1pbj0nMCcgbWF4
PScxMDAnCgkJCW9uY2hhbmdlPSIKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215dmFs
JykuaW5uZXJIVE1MID0gdGhpcy52YWx1ZTsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQo
J215cmVzJykuaW5uZXJIVE1MID0KCQkJTWF0aC5zaW4odGhpcy52YWx1ZSk7Ij4gJDEwMF0k
CgkJIiIiKQoJZGVmIHJhbmdlX3BkZigpOgoJCXJldHVybiAiJHhcaW5bMCwxMDBdJCIKCWRl
ZiBmb3JtdWxhX2h0bWwoKToKCQlfXygiIiIKCQkJJHk9c2luKHgpPSQgPHNwYW4gaWQ9Im15
cmVzIj4wLjAwMDwvc3Bhbj4KCQkJd2l0aCAkeD0kIDxzcGFuIGlkPSJteXZhbCI+MDwvc3Bh
bj4KCQkiIiIpCglkZWYgZm9ybXVsYV9wZGYoKToKCQlyZXR1cm4gIiR5PXNpbih4KSQiCmBg
YAoKYGBgbWQKJHgkIGFuZCAkeSQgYXJlIHJlbGF0ZWQgdG8gZWFjaCBvdGhlciBieSBgXD9m
b3JtdWxhKClgLgoKJHgkIG11c3QgYmUgaW4gdGhlIHJhbmdlIGBcP3JhbmdlKClgLgpgYGAK
CiR4JCBhbmQgJHkkIGFyZSByZWxhdGVkIHRvIGVhY2ggb3RoZXIgYnkgYD9mb3JtdWxhKClg
LgoKJHgkIG11c3QgYmUgaW4gdGhlIHJhbmdlIGA/cmFuZ2UoKWAuCgojIyBHZW5lcmF0ZSBh
IEZpZ3VyZSBvbi10aGUtZmx5IGR1cmluZyBQcmVwcm9jZXNzaW5nCgpUaGlzIHNlY3Rpb24g
aWxsdXN0cmF0ZXMgaG93IHB5dGhvbiBtb2R1bGVzIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZQpk
b2N1bWVudCBjb250ZW50LiBEb2N1bWVudCBjb250ZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhl
IGBkYXRhL2AKZGlyZWN0b3J5IG9mIHRoZSBjdXJyZW50IHByb2plY3Qgd29ya2luZyBkaXJl
Y3RvcnkgKHJlZmVyIHRvIGAhTWAKcHJvamVjdCBzdHJ1Y3R1cmUsIEBzZWM6cHJvamVjdCkK
CiFbVGhpcyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2luZyBgIU5VYCBhbmQKYCFQTGAuXShm
aWd1cmUxLnBuZyl7I2ZpZzpmaWd1cmUxfQoKW2AhTlVgXShodHRwczovL3d3dy5udW1weS5v
cmcpIGFuZCBbYCFQTGBdKGh0dHBzOi8vd3d3Lm1hdHBsb3RsaWIub3JnKQphcmUgcG93ZXJm
dWwgcHl0aG9uIG1vZHVsZXMgZm9yIG1hdGhlbWF0aWNhbCBjb21wdXRpbmcgYW5kIHBsb3QK
Z2VuZXJhdGlvbi4gVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBnZW5lcmF0
ZSBAZmlnOmZpZ3VyZTEKdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBpbmNsdWRlIGl0IGlu
dG8gdGhlIGRvY3VtZW50LgoKKipFeGFtcGxlKioKCmBgYCEKCWltcG9ydCBudW1weSBhcyBu
cAoJaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoJR1JFRUsgPSBsYW1iZGEgQTog
Y2hyKG9yZCh1Ilx1MDM5MSIpICsgb3JkKEEpIC0gb3JkKCJBIikpCglncmVlayA9IGxhbWJk
YSBhOiBjaHIob3JkKHUiXHUwM2IxIikgKyBvcmQoYSkgLSBvcmQoImEiKSkKCWNtMmluY2gg
PSBsYW1iZGEgeHk6IHR1cGxlKGkvMi41NCBmb3IgaSBpbiB4eSkKCWZvbnRzaXplID0gaW50
KGZvbnRzaXplWzotMl0pICMgY29udmVydCB0byBpbnQKCWZpZ3NpemUgPSBjbTJpbmNoKGZp
Z3NpemUpICMgY29udmVydCBmcm9tIGNtIHRvIGluY2gKCXBhcmFtcyA9IHsKCQknZmlndXJl
LmZpZ3NpemUnOiBmaWdzaXplLAoJCSdsZWdlbmQuZm9udHNpemUnOiBmb250c2l6ZSwKCQkn
YXhlcy5sYWJlbHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy50aXRsZXNpemUnOiBmb250c2l6
ZSwKCQkneHRpY2subGFiZWxzaXplJzogZm9udHNpemUsCgkJJ3l0aWNrLmxhYmVsc2l6ZSc6
IGZvbnRzaXplLAoJCSdmb250LmZhbWlseSc6ICdUaW1lcyBOZXcgUm9tYW4nCgl9CglwbHQu
cmNQYXJhbXMudXBkYXRlKHBhcmFtcykKCXggPSBucC5yYW5kb20ucmFuZCg1MCkKCXkgPSBu
cC5yYW5kb20ucmFuZCg1MCkKCXBsdC5maWd1cmUoKQoJcGx0LnNjYXR0ZXIoeCwgeSwgbGFi
ZWw9IlJhbmRvbSBDb29yZGluYXRlcyIpCgl0ZXh0ID0gIiIuam9pbihbZ3JlZWsoaSkgZm9y
IGkgaW4gWyJhIiwgImIiLCAiYyIsICJkIl1dKQoJcGx0LmFubm90YXRlKHRleHQsIHh5PSgw
LjUsMC41KSwgeHl0ZXh0PSgwLjI1LDAuMjUpLAoJCWFycm93cHJvcHM9ZGljdChhcnJvd3N0
eWxlPSctPicsbHc9MS41KSkKCXBsdC50aXRsZSgiVHdvIFJhbmRvbSBEYXRhc2V0cyIpCglw
bHQueGxhYmVsKHIiRGF0YSAjMSAtICRcbWF0aGRlZmF1bHR7JXNfMX0kIiAlIEdSRUVLKCJD
IikpCglwbHQueWxhYmVsKHIiRGF0YSAjMiAtICRcbWF0aGRlZmF1bHR7JXNfMn0kIiAlIEdS
RUVLKCJEIikpCglwbHQuZ3JpZCgpCglwbHQubGVnZW5kKCkKCXBsdC50aWdodF9sYXlvdXQo
KQoJcGx0LnNhdmVmaWcoImRhdGEvZmlndXJlMS5wbmciLCBkcGk9ZmlnZHBpKQoJcGx0LmNs
b3NlKCJhbGwiKQpgYGAKCmBgYG1kCiFbVGhpcyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2lu
ZyBgIU5VYAphbmQgYCFQTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpmaWd1cmUxfQpgYGAKCiMj
IEdlbmVyYXRlIGEgU2VxdWVuY2Ugb2YgRmlndXJlcyBvbi10aGUtZmx5CgpUaGlzIHNlY3Rp
b24gaWxsdXN0cmF0ZXMgaG93IGEgc2VxdWVuY2Ugb2YgY29tcGxleCBmaWd1cmVzIGNhbiBi
ZQpnZW5lcmF0ZWQgdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBob3cgdGhlIGZpZ3VyZXMg
YXJlIGZvcm1hdHRlZAp1c2luZyBweXRob24gYW5kIHJlZmVyZW5jZWQgdXNpbmcgYCFNYC4K
ClN1cHBvc2Ugb25lIGV4cGVyaW1lbnQgd2hpY2ggY2FuIGJlIHJ1biBpbiBmb3VyIGRpZmZl
cmVudCBzZXR1cHMgd2l0aApkaWZmZXJlbnQgdmFsdWVzIGZvciAkXGxhbWJkYT0kCmAhIiwg
Ii5qb2luKFsiKCVkKSAkJS4yZiRubSIlKGssIDEyNS4zMyprKSBmb3IgayBpbiByYW5nZSgx
LCA1KV0pYC4KRWFjaCBydW4gb2YgdGhlIGV4cGVyaW1lbnQgdXNpbmcgc2V0dXAgKDEpLS0o
NCksIHR3byBhZGRpdGlvbmFsCnBhcmFtZXRlcnMgJFx2YXJlcHNpbG9uJCBhbmQgJFxhbHBo
YSQgYXJlIHZhcnJpZWQgYmV0d2VlbgokMTAuMlxsZG90czMwLjZcJSQgYW5kICQwLjFcbGRv
dHMwLjMkSHogcmVzcGVjdGl2ZWx5LgoKVGhlIHJlc3VsdHMgb2YgdGhlIGV4cGVyaW1lbnRz
IGZvciB0aGUgc2V0dXBzICgxKS0tKDQpIGFyZSBzdW1tYXJpemVkCmluIHRoZSBAZmlnOmZp
Z3VyZTJfMSwgIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMgYW5kCiFAZmlnOmZp
Z3VyZTJfNC4KCioqRXhhbXBsZSoqCgpgYGAhCgluID0gMTAwCglhbHBoYSA9IHUiXHUwM2Ix
IgoJZXBzaWxvbiA9IHUiXHUwM2I1IgoJbGFtZGEgPSB1Ilx1MDNiYiIKCWYgPSBsYW1iZGEg
eCwgYSwgYjogYSoobnAuc3FydCh4KStiKm5wLnNpbih4KmIpKQoJZyA9IGxhbWJkYSB4LCBh
ICxiLCBjOiBucC5mYWJzKGYoeCwgYSwgYikgLSBmKGMsIGEsIGIpKSArIGMKCWRhdCA9IG5w
Lnplcm9zKChuLTEsIDMsIDMsIDQpLCBkdHlwZT1ucC5mbG9hdDMyKQoJY29scyA9IFsicmVk
IiwgImdyZWVuIiwgImJsdWUiXQoJbWFyayA9IFsibyIsICJ4IiwgIjwiXQoJeCA9IG5wLmFy
cmF5KFs1MC4qeC9uIGZvciB4IGluIHJhbmdlKDEsIG4pXSwgZHR5cGU9bnAuZmxvYXQzMikK
CWZvciBrLCBjIGluIGVudW1lcmF0ZShbMTAuLCAyMC4sIDMwLiwgNDAuXSk6CgkJZm9yIGks
IGEgaW4gZW51bWVyYXRlKFsxLCAyLCA0XSk6CgkJCWZvciBqLCBiIGluIGVudW1lcmF0ZShb
MC4yLCAwLjQsIDAuNl0pOgoJCQkJZGF0WzosIGksIGosIGtdID0gZyh4LCBhLCBiLCBjKQoJ
CXBsdC5maWd1cmUoKQoJCWZvciBqIGluIHJhbmdlKDMpOgoJCQlmb3IgaSBpbiByYW5nZSgz
KToKCQkJCWxhYmVsX2kgPSAiJXM9JS4xZiUlIiAlIChlcHNpbG9uLCAoaSsxKSoxMC4yKSBc
CgkJCQkJaWYgaiA9PSAwIGVsc2UgTm9uZQoJCQkJbGFiZWxfaiA9ICIlcz0lLjFmSHoiICUg
KGFscGhhLCAoaisxKS8xMC4pIFwKCQkJCQlpZiBpID09IDAgZWxzZSBOb25lCgkJCQl5ID0g
ZGF0WzosIGksIGosIGtdLmZsYXR0ZW4oKQoJCQkJcGx0LnBsb3QoeCwgeSwgY29sb3I9Y29s
c1tpXSwgbHc9MC43NSwgbGFiZWw9bGFiZWxfaSkKCQkJCXBsdC5zY2F0dGVyKHhbMTo6NF0s
IHlbMTo6NF0sIGNvbG9yPSJibGFjayIsCgkJCQkJbWFya2VyPW1hcmtbal0sIGx3PTAuNSwg
cz01LCBsYWJlbD1sYWJlbF9qKQoJCWsgPSBrICsgMQoJCWt2YWwgPSBrKjEyNS4zMwoJCXBs
dC50aXRsZSgiRXhwZXJpbWVudCBTZXR1cCAjJWQ6ICVzPSUuMmZubSIgJSAoaywgbGFtZGEs
IGt2YWwpKQoJCXBsdC54bGFiZWwoIlRpbWUgW3NdIikKCQlwbHQueWxhYmVsKCJJbnRlbnNp
dHkgW2tnL3PCs10iKQoJCXBsdC5ncmlkKCkKCQlwbHQubGVnZW5kKCkKCQlwbHQudGlnaHRf
bGF5b3V0KCkKCQlwbHQuc2F2ZWZpZygiZGF0YS9maWd1cmUyLSVkLnBuZyIgJSBrLCBkcGk9
ZmlnZHBpKQoJCXBsdC5jbG9zZSgiYWxsIikKCQlfXyhmIiIiCgkJCSFbVGhpcyBpcyB0aGUg
cmVzdWx0IG9mIHRoZSBleHBlcmltZW50IGFjY29yZGluZwoJCQl0byB0aGUgc2V0dXAgI3tr
fSB3aXRoICR7bGFtZGF9PXtrdmFsfSRubS4gVGhlIHBhcmFtZXRlcnMKCQkJJHtlcHNpbG9u
fSQgYW5kICR7YWxwaGF9JCBhcmUgdmFycmllZCBiZXR3ZWVuCgkJCSQxMC4yXGxkb3RzMzAu
NlwlJCBhbmQgJDAuMVxsZG90czAuMyRIegoJCQlyZXNwZWN0aXZlbHkuXShmaWd1cmUyLXtr
fS5wbmcpe3sjZmlnOmZpZ3VyZTJfe2t9fX0KCgkJIiIiKQpgYGAKCi0tLQoKKlRoYW5rcyBm
b3IgcmVhZGluZywgcGxlYXNlIHRyeSBgbWFya3lgLioKCi0tLQoKIyBSZWZlcmVuY2VzCg==
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmA/eDowNWRgfGA/eTouNGZgCg==
'''
pack_markysource_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKZGF0ZTogMS4gQXVndXN0
IDIwMjEKYXV0aG9yOiBIZW5yeSBMZWhtYW5uCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
IFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAw
IDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4K
eG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDEx
cHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29k
ZSBvZiB0aGUgYG1hcmt5YCBEb2N1bWVudGF0aW9uLgo+IFRoaXMgZG9jdW1lbnQgcmVwcmVz
ZW50cyB0aGUgYG1hcmt5YCBzb3VyY2UgY29kZSBiZWZvcmUKPiBwcm9jZXNzaW5nIHB5dGhv
biBjb2RlIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IGl0c2VsZi4KPiBGb3IgZG9jdW1l
bnRhdGlvbiBhbmQgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJl
cG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCmBg
YHB5dGhvbgohISEgbWFya3kubWQgcmF3ID4+MQpgYGAK
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpkYXRlOiAxLiBBdWd1c3QgMjAyMQph
dXRob3I6IEhlbnJ5IExlaG1hbm4KaGVhZGVyLWluY2x1ZGVzLS1wZGY6CiAgIFx1c2VwYWNr
YWdle211bHRpY29sfQogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1h
cmt5YCBtYXJrdXAgdXNpbmcgc2ltcGxlIGV4YW1wbGVzLgo+IFRoZSBgbWFya3lgIHNvdXJj
ZSBjb2RlIG9mIHRoaXMgZG9jdW1lbnQgY2FuIGJlIHJlYWQKPiBbaGVyZV0ocXVpY2tzb3Vy
Y2UuPz8/KS4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkCj4gcGxlYXNlIHJlZmVy
IHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWht
YW5uNy9tYXJreSkuCgotLS0KCiMgSW50cm9kdWN0aW9uCgpUaGlzIGlzIGEgYG1hcmt5YCBx
dWlja3N0YXJ0IGRvY3VtZW50IGZvciBpbGx1c3RyYXRpbmcgYG1hcmt5YCBtYXJrdXAKdXNp
bmcgc2ltcGxlIGV4YW1wbGVzLiBUaGlzIGRvY3VtZW50IGlzIHRoZSByZW5kZXJlZCB2ZXJz
aW9uIG9mCnRoZSBzb3VyY2UgY29kZSBwcmVzZW50ZWQgW2hlcmVdKHF1aWNrc291cmNlLj8/
PykuIFRoZSBgbWFya3lgIG1hcmt1cAppcyBjb21wYXRpYmxlIHdpdGggc3RhbmRhcmQgTWFy
a2Rvd24gYW5kIGNhbiBiZSByZWFkIGFzLWlzLgpUaGlzIGRvY3VtZW50IHJlcHJlc2VudHMg
dGhlIG91dHB1dCBvZiBgbWFya3lgIGFmdGVyIHByb2Nlc3NpbmcKcHl0aG9uIGNvZGUsIHdo
aWNoIGlzIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IGl0c2VsZi4KSW4gb3JkZXIgdG8g
dW5kZXJzdGFuZCB0aGUgZXhhbXBsZXMgYW5kIHNlZSB0aGUgY29tcGxldGUKYG1hcmt5YCBz
eW50YXgsIHRoZSBzb3VyY2UgY29kZSBvZiB0aGlzIGZpbGUgY2FuIGJlIHJlYWQKW2hlcmVd
KHF1aWNrc291cmNlLj8/PykuIFRoZSBjb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9mIGBtYXJr
eWAKaXMgYXZhaWxhYmxlIFtoZXJlXShtYXJreS4/Pz8pCgotLS0KCiMgTWFya2Rvd24KCmBt
YXJreWAgaXMgYSBNYXJrZG93biBwcmVwcm9jZXNzb3IgYWxsb3dpbmcgdG8gdHJhbnNmb3Jt
IE1hcmtkb3duCnRleHQgdXNpbmcgcHl0aG9uLiBUaGUgcHJlcHJvY2Vzc2VkIE1hcmtkb3du
IHRleHQgaXMgcmVuZGVyZWQgdG8gYHBkZmAKYW5kIGBodG1sYCAob3RoZXIgZm9ybWF0cyB1
c2luZyBgcGFuZG9jYCkuIGBwYW5kb2NgIGhhcyBhIHBvd2VyZnVsIHNldApvZiBNYXJrZG93
biBleHRlbnNpb25zIHN1cHBvcnRpbmcgc3RydWN0dXJlZCB3cml0aW5nIGFzIHdlbGwgYXMK
YmlibGlvZ3JhcGh5LCBmaWd1cmUgcmVmZXJlbmNpbmcsIHRhYmxlIHJlZmVyZW5jaW5nLCB0
ZXgtc3R5bGUKZXF1YXRpb25zIHdpdGggcmVmZXJlbmNpbmcgZXRjLiAocmVmZXIgdG8gU2Np
ZW50aWZpYyBXcml0aW5nIGluCk1hcmtkb3duLCBbYG1hcmt5YCBEb2N1bWVudGF0aW9uXSht
YXJreS4/Pz8pKS4KClRoZSByZW5kZXJpbmcgb2YgTWFya2Rvd24gdGV4dCBpbnRvIGBodG1s
YCBhbmQgYHBkZmAgY29uc2lzdHMgb2YgdGhyZWUKc3RlcHMgd2hpY2ggYXJlIGlsbHVzdHJh
dGVkIHVzaW5nIHRoZSBgbWFya3lgIGRvY3VtZW50YXRpb24KYG1kL21hcmt5Lm1kYC4KCjEu
ICpQcmVwcm9jZXNzaW5nKiBcCiAgIChwcm9jZXNzIGBtYXJreWAgbWFya3VwLCBydW4gY29k
ZSwgZ2VuZXJhdGUgY29udGVudCkKCSogSW5wdXQ6IGBtYXJreWAgTWFya2Rvd24gdGV4dDog
YG1kL21hcmt5Lm1kYAoJKiBPdXRwdXQ6IHBhbmRvYyBNYXJrZG93biB0ZXh0OiBgYnVpbGQv
bWFya3kubWRgCjIuICpMaW5raW5nKiBcCgkoYXBwbHkgZm9ybWF0IHNwZWNpZmljIGNvZGUg
Zm9yIGBodG1sYCBhbmQgYHBkZmApCgkqIElucHV0OiBwYW5kb2MgTWFya2Rvd24gdGV4dDog
YGJ1aWxkL21hcmt5Lm1kYAoJKiBPdXRwdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZv
ciBgaHRtbGA6IGBidWlsZC9tYXJreS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtkb3duIHRl
eHQgZm9yIGBwZGZgOiBgYnVpbGQvbWFya3kucGRmLm1kYAozLiAqUmVuZGVyaW5nKiBcCiAg
IChyZW5kZXIgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudCB1c2luZyBgcGFuZG9jYCkKCSog
SW5wdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZvciBgaHRtbGA6IGBidWlsZC9tYXJr
eS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBwZGZgOiBgYnVpbGQv
bWFya3kucGRmLm1kYAoJKiBPdXRwdXQKCTEuIGBodG1sYCBkb2N1bWVudDogYGh0bWwvbWFy
a3kuaHRtbGAKCTIuIGBwZGZgIGRvY3VtZW50OiBgcGRmL21hcmt5LnBkZmAKClRoZSB3aG9s
ZSBwcm9jZXNzIGlzIGVjYXBzdWxhdGVkIGludG8gYSBweXRob24gc2NyaXB0IGFuZCBhIE1h
a2VmaWxlLgpSZW5kZXJpbmcgZG9jdW1lbnRzIHVzaW5nIGBtYXJreWAgcmVxdWlyZXMgdG8g
d3JpdGUgTWFya2Rvd24gdGV4dAphbmQgcnVuIGBtYWtlIGFsbGAuCgotLS0KCiMgQXV0b21h
dGVkIFJlcG9ydGluZwoKTWFya2Rvd24gdGV4dCB3aXRoIGVtYmVkZGVkIGNvZGUgc25pcHBl
dHMgaXMgYSBwb3dlcmZ1bCBwYXJhZGlnbSBmb3IKYXV0b21hdGVkIHRlY2huaWNhbCBhbmQg
c2NpZW50aWZpYyByZXBvcnRpbmcgYW5kIHBvc3NpYmx5IG90aGVyCmRvY3VtZW50cy4gT24g
b25lIGhhbmQgZGF0YSBjYW4gYmUgb3JnYW5pemVkIGFjY29yZGluZyB0byB0aGUgZG9jdW1l
bnQKc3RydWN0dXJlIHVzaW5nIGFsZ29yaXRobXMgZW1iZWRkZWQgaW4gdGhlIHJlcG9ydCBp
dHNlbGYsIGFuZCBvbiB0aGUKb3RoZXIgaGFuZCB0aGUgZGF0YSBjYW4gYmUgaW5zZXJ0ZWQg
aW4gdGhlIHJlcG9ydCBkaXJlY3RseSBmcm9tCnZhcmlhYmxlcy4gVGhpcyBlbGxpbWluYXRl
cyB0aGUgbmVlZCBmb3IgbWFudWFsIGNvcHlpbmcgb2YgZGF0YSBpbnRvCnRoZSB0ZXh0IGFu
ZCBhbGxvd3MgdG8gdXBkYXRlIG9yIHJlcHJvZHVjZSB0aGUgcmVwb3J0IGF1dG9tYXRpY2Fs
bHkKZm9yIHRoZSBzYW1lIGFuZCBvdGhlciBkYXRhLiBVc2luZyB0aGUgc2ltcGxlIGBtYXJr
eWAgc3ludGF4IHRoZSB1c2VyCmNhbiBjb25jZW50cmF0ZSBvbiBkb2N1bWVudGF0aW9uIHdy
aXRpbmcgZnJvbSB0aGUgTWFya2Rvd24gcGVyc3BlY3RpdmUKYW5kIGFzc2lzdCB0aGUgY3Jl
YXRpb24gb2YgZG9jdW1lbnQgY29udGVudCB1c2luZyBweXRob24gY29kZQpzbmlwcGV0cy4K
CmBwYW5kb2NgIGZpbHRlcnMgKHJlZmVyIHRvIFJlbGF0ZWQgV29yaywgW2BtYXJreWAgRG9j
dW1lbnRhdGlvbl0obWFya3kuPz8/KSkKYWxsb3cgdHJhbnNmb3JtaW5nIHRoZSBkb2N1bWVu
dCB3aGlsZSByZW5kZXJpbmcgaXQuIGBwYW5kb2NgIGZpbHRlcnMKb3BlcmF0ZSBvbiBhbiBp
bnRlcm5hbCBhYnN0cmFjdCBzeW50YXggdHJlZSAoQVNUKSByZXByZXNlbnRhdGlvbiwKdGhl
cmVmb3JlIHRoZSB1c2VyIG11c3QgZXhwcmVzcyBkeW5hbWljYWxseSBjcmVhdGVkIGRvY3Vt
ZW50IGNvbnRlbnQKYXMgbm9kZXMgaW4gdGhlIGZvcm1hdCBvZiB0aGUgQVNULiBgbWFya3lg
IHRha2VzIGEgc2xpZ2h0IGRpZmZlcmVudAphcHByb2FjaCBhbmQgb3BlcmF0ZXMgb24gdGhl
IE1hcmtkb3duIHRleHQgaXRzZWxmLCBiZWZvcmUgaXQgaXMgcGFyc2VkCmFuZCByZW5kZXJl
ZC4KClB5dGhvbiBjb2RlIGlzIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IHdpdGggYSBz
aW1wbGUgbWFya3VwIHN5bnRheApzaW1pbGFyIHRvIFtSbWFya2Rvd25dKGh0dHBzOi8vd3d3
LnJtYXJrZG93bi5vcmcpCnVzaW5nIGNvZGUgYmxvY2tzIGFuZCBpbmxpbmUgZXhwcmVzc2lv
bnMuIGBtYXJreWAgcGFyc2VzIHRoZSBjb2RlLApleGVjdXRlcyBpdCBhbmQgd3JpdGVzIHRo
ZSByZXN1bHRzIGJhY2sgaW50byB0aGUgTWFya2Rvd24gdGV4dC4gVGhlCmNvZGUgY2FuIHBy
b2R1Y2Ugb3V0cHV0IHVzaW5nIGFsZ29yaXRobXMgb3Igb3V0cHV0IGZvcm1hdHRlZCBzdHJp
bmcKdmFyaWFibGVzLiBgbWFya3lgIGFsc28gYWxsb3dzIGZvciB0aGUgaW5zZXJ0aW9uIG9m
IGZvcm1hdCBkZXBlbmRlbnQKcmF3IGNvZGUgaW4gYGh0bWxgIGFuZCAqdGV4KiAoZm9yIGBw
ZGZgICBkb2N1bWVudHMpLgoKMS4gY29kZSBzbmlwcGV0cyBhcmUgZW1iZWRkZWQgaW50byB0
aGUgZG9jdW1lbnQgdGV4dAoyLiBjb2RlIHNuaXBwZXRzIGFyZSBleGVjdXRlZCBkdXJpbmcg
cHJlcHJvY2Vzc2luZwozLiBjb2RlIHByb2R1Y2VzIHRleHQgZm9yIHRoZSBNYXJrZG93biBk
b2N1bWVudAo0LiBjb2RlIHZhcmlhYmxlcyBhcmUgZGlzcGxheWVkIGluIHRoZSBkb2N1bWVu
dCB0ZXh0CjUuIGZvcm1hdCBkZXBlbmRlbnQgY29kZSBpcyBhcHBsaWVkIGZvciBgaHRtbGAg
YW5kIGBwZGZgCgotLS0KCiMgRG93bmxvYWQgYW5kIFJ1biBgbWFya3lgCgpgbWFya3lgIGlz
IE1hcmtkb3duIHByZXByb2Nlc3NvciBhbGxvd2luZyB0byBleGVjdXRlIGVtYmVkZGVkIHB5
dGhvbgpjb2RlIGluIE1hcmtkb3duIGRvY3VtZW50cy4gQWZ0ZXIgcHJlcHJvY2Vzc2luZywg
YSByZWd1bGFyIE1hcmtkb3duCmZpbGUgaXMgcHJlc2VudCwgd2hpY2ggaXMgcmVuZGVyZWQg
aW50byBgaHRtbGAgYW5kIGBwZGZgIHVzaW5nCmBwYW5kb2NgLiBgbWFya3lgIGhhbmRsZXMg
YWxsIHRoaXMgc3RlcHMgdXNpbmcgYSBNYWtlZmlsZS4KYG1hcmt5YCBpcyBhIHNpbmdsZS1m
aWxlIHNjcmlwdCB3aGljaCBkZXBlbmRzIG9uIGBweXRob25gICg+PTMuNiksCmBwYW5kb2Ng
ICg+PTIuMTEpLCBgcHl5YW1sYCBhbmQgYHBhbmRvYy14bm9zYC4KCioqSW5zdGFsbGluZyBE
ZXBlbmRlbmNpZXMqKgoKYHBhbmRvY2AgYmluYXJpZXMgZm9yIERlYmlhbi1iYXNlZCBMaW51
eCBhcmUgcmVsZWFzZWQKW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qZ20vcGFuZG9jL3Jl
bGVhc2VzKS4KYHB5eWFtbGAgaXMgaW5zdGFsbGVkIHVzaW5nIHRoZSBsaW51eCBwYWNrYWdl
IG1hbmFnZXIgb3IgYHBpcGAgYW5kCmBwYW5kb2MteG5vc2AgY29uc2lzdHMgb2YgdGhlIGNv
bXBvbmVudHMgYGZpZ25vc2AsIGBzZWNub3NgLCBgZXFub3NgCmFuZCBgdGFibGVub3NgIHdo
aWNoIGFyZSBpbnN0YWxsZWQgdXNpbmcgYHBpcGAuIERlcGVuZGluZyBvbiB0aGUKbGludXgg
aW5zdGFsbGF0aW9uIG1heWJlIGBwaXAzYCBoYXMgdG8gYmUgdXNlZC4KCmBgYGJhc2gKcGlw
IGluc3RhbGwgcHl5YW1sCnBpcCBpbnN0YWxsIHBhbmRvYy1maWdub3MKcGlwIGluc3RhbGwg
cGFuZG9jLXNlY25vcwpwaXAgaW5zdGFsbCBwYW5kb2MtZXFub3MKcGlwIGluc3RhbGwgcGFu
ZG9jLXRhYmxlbm9zCmBgYAoKKipEb3dubG9hZCBgbWFya3lgIFNjcmlwdCoqCgpgbWFya3lg
IGlzIGRvd25sb2FkZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBgYGJhc2gK
Y2QgJEhPTUUKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreS5n
aXQKY2QgbWFya3kKYGBgCgpBbHRlcm5hdGl2ZWx5LCBtYXJreSBjYW4gYmUgb2J0YWluZWQg
ZGlyZXRseSB3aXRob3V0IGBnaXRgOgoKYGBgYmFzaApjZCAkSE9NRQpta2RpciBtYXJreQpj
ZCBtYXJreQp3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sZWhtYW5u
Ny9tYXJreS9tYWluL21hcmt5LnB5CmNobW9kICt4IG1hcmt5LnB5CmBgYAoKKipJbml0aWFs
aXplIGBtYXJreWAgRW52aXJvbm1lbnQqKgoKVGhlIGBtYXJreWAgZW52aXJvbm1lbnQgY29u
c2lzdHMgb2YgdGhlIE1ha2VmaWxlIGFuZCB0aGUgZG9jdW1lbnRhdGlvbi4KVGhlIGBtYXJr
eWAgTWFrZWZpbGUsIGRvY3VtZW50YXRpb24gYW5kIHF1aWNrc3RhcnQgYXJlIHVucGFja2Vk
IGZyb20KdGhlIGBtYXJreS5weWAgc2NyaXB0IGZpbGUgaW50byB0aGUgY3VycmVudCB3b3Jr
aW5nIGRpcmVjdG9yeS4KVGhlIGBtYXJreWAgZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQg
dXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBgYGJhc2gKY2QgJEhPTUUKY2QgbWFy
a3kKLi9tYXJreS5weSAtLWluaXQKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAuL21kL21h
cmt5Lm1kaQpXUklURSAuL21kL21hcmt5c291cmNlLm1kCldSSVRFIC4vbWQvcXVpY2tzdGFy
dC5tZApXUklURSAuL21kL3F1aWNrc291cmNlLm1kCldSSVRFIC4vbWQvZXhhbXBsZS5tZApX
UklURSAuL21kL2V4YW1wbGVzb3VyY2UubWQKV1JJVEUgLi9kYXRhL21hcmt5LmJpYgpVU0FH
RQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRtbCBodHRwZGAKMy4gYG1ha2UgYWxs
LXBkZmAKYGBgCgpEdXJpbmcgaW5pdGlhbGl6YXRpb24gYG1hcmt5YCBjcmVhdGVzIHR3byBk
aXJlY3RvcmllcyBgbWQvYCBhbmQgYGRhdGEvYC4KYG1kL2AgaXMgdGhlIGRpcmVjdG9yeSB3
aGljaCBjb250YWlucyB0aGUgTWFya2Rvd24gdGV4dCB0byBiZSByZW5kZXJlZAppbnRvIGBo
dG1sYCBhbmQgYHBkZmAuIGBkYXRhL2AgaXMgdGhlIHJlc291cmNlIGRpcmVjdG9yeSB3aGlj
aCBjb250YWlucwpiaWJsaW9ncmFwaHksIGltYWdlcywgdmlkZW9zIGFuZCBvdGhlciBhc3Nl
dHMuCgoqKlJlbmRlciBEb2N1bWVudGF0aW9uIGFuZCBFeGFtcGxlcyoqCgpJZiBhbGwgZGVw
ZW5kZW5jaWVzIGhhdmUgYmVlbiBpbnN0YWxsZWQgYWNjb3JkaW5nbHkgYW5kIHRoZSBgbWFy
a3lgCmVudmlyb25tZW50IGlzIGluaXRpYWxpemVkLCBgbWFya3lgIGNhbiBiZSB1c2VkIHRv
IHJlbmRlciBhIGxvY2FsCmNvcHkgb2YgdGhlIGRvY3VtZW50YXRpb24sIHRoZSBxdWlja3N0
YXJ0IGFuZCB0aGUgZXhhbXBsZS4KClRoZSBmb2xsb3dpbmcgY29tbWFuZHMgcmVuZGVyIHRo
ZSBNYXJrZG93biB0ZXh0IG9mIHRoZSBkb2N1bWVudGF0aW9uLgoKYGBgYmFzaApjZCAkSE9N
RQpjZCBtYXJreQptYWtlIGFsbC1wZGYKbWFrZSBhbGwtaHRtbApgYGAKCkR1cmluZyBgbWFr
ZWAgYSBuZXcgZGlyZWN0b3J5IGBidWlsZC9gIGlzIGNyZWF0ZWQsIHdoaWNoIGNvbnRhaW5z
CnRlbXBvcmFyeSBmaWxlcyAocHJlcHJvY2Vzc2VkIE1hcmtkb3duIHRleHQsIGxpbmtlZCB0
ZXh0IGZvciBgaHRtbGAKYW5kIGBwZGZgKS4gVGhlIHJlc3VsdGluZyBgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyBhcmUgcGxhY2VkIGluc2lkZQpgaHRtbC9gIGFuZCBgcGRmL2AuIEZv
ciByZW5kZXJpbmcgYHBkZmAgYSB0ZXggZW52aXJvbm1lbnQgbGlrZQpgdGV4bGl2ZWAgbmVl
ZHMgdG8gYmUgaW5zdGFsbGVkLiBGb3IgcmVuZGVyaW5nIHRoZSBgaHRtbGAgZG9jdW1lbnRz
LApgcGFuZG9jYCByZXF1aXJlcyBpbnRlcm5ldCBhY2Nlc3MsIGJlY2F1c2UgamF2YSBzY3Jp
cHRzIGFuZCBzdHlsZQpzaGVldHMgYXJlIGZldGNoZWQgZnJvbSBjb250ZW50IGRlbGl2ZXJ5
IG5ldHdvcmtzLgoKKipgbWFya3lgIE1ha2VmaWxlKioKClRoZSBgbWFya3lgIE1ha2VmaWxl
IGNvb3JkaW5hdGVzIHRoZSB0aHJlZSBzdGVwcyBvZiB0aGUgYG1hcmt5YApkb2N1bWVudCBw
cm9jZXNzaW5nIHBpcGVsaW5lOiBwcmVwcm9jZXNzaW5nLCBsaW5raW5nIGFuZCByZW5kZXJp
bmcuClRoZSBgbWFya3lgIE1ha2VmaWxlIHN1cHBvcnRzIHNldmVyYWwgdGFyZ2V0cyBmb3Ig
ZGlzcGxheWluZyBoZWxwCm9yIHJlbmRlcmluZyBhbGwsIG11bHRpcGxlIG9yIHNwZWNpZmlj
IGRvY3VtZW50cy4KCipNYWtlZmlsZSBUYXJnZXRzKgoKMS4gYG1ha2UgaGVscGA6IGRpc3Bs
YXkgaGVscCBtZXNzYWdlIG9uIHRoZSBjb25zb2xlCjIuIGBtYWtlIGNoZWF0YDogZGlzcGxh
eSB0aGUgYG1hcmt5YCBtYXJrdXAgQ2hlYXQgU2hlZXQKMy4gYG1ha2Ugc2NhbmA6IHNjYW4g
Zm9yIG5ldyBkb2N1bWVudHMgYG1kLyoubWRgIGFuZCB1cGRhdGUgTWFrZWZpbGUKNC4gYG1h
a2UgYWxsYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyoubWRgIGludG8gYGh0bWxgIGFu
ZCBgcGRmYAo1LiBgbWFrZSBhbGwtcGRmYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyou
bWRgIGludG8gYHBkZmAKNi4gYG1ha2UgYWxsLWh0bWxgOiByZW5kZXIgYWxsIGRvY3VtZW50
cyBgbWQvKi5tZGAgaW50byBgaHRtbGAKNy4gYG1ha2UgaHR0cGRgOiBzdGFydCBweXRob24g
d2Vic2VydmVyIGluIGBodG1sL2AKOC4gYG1ha2UgY2xlYW5gOiByZW1vdmUgYWxsIGZpbGVz
OiBgYnVpbGQvKmAsIGBwZGYvKmAsIGBodG1sLypgCgoqTWFrZSBTaW5nbGUgRG9jdW1lbnQq
CgpXaGVuIHJ1bm5pbmcgYG1ha2UgYWxsYCwgYG1hcmt5YCByZW5kZXJzIGFsbCBkb2N1bWVu
dHMsIHdoaWNoIGNhbgpiZSB1bmRlc2lyYWJsZSBpZiBvbmx5IG9uZSBwYXJ0aWN1bGFyIGRv
Y3VtZW50IHNoYWxsIGJlIHJlbmRlcmVkLgpCeSBgbWFrZSBzY2FuYCwgYG1hcmt5YCBzY2Fu
cyB0aGUgZGlyZWN0b3J5IGBtZC8qLm1kYCBmb3IgbmV3IE1hcmtkb3duCmRvY3VtZW50cyB0
byBiZSBwcm9jZXNzZWQuIEZvciBlYWNoIGRvY3VtZW50LCB3aGljaCBoYXMgYmVlbiBmb3Vu
ZCwKYG1hcmt5YCBzZXRzIHVwIGFsaWFzIHRhcmdldHMgaW4gb3JkZXIgdG8gZGVidWcgdGhl
IHByZXByb2Nlc3NpbmcsCmxpbmtpbmcgYW5kIHJlbmRlcmluZyBvZiB0aGlzIGRvY3VtZW50
LgoKQXNzdW1pbmcgdGhlIGRvY3VtZW50IGBtZC9tYXJreS5tZGAgc2hhbGwgYmUgcmVuZGVy
ZWQgc3RlcCBieSBzdGVwLApgbWFya3lgIGludHJvZHVjZXMgdGhlIGZvbGxvd2luZyB0YXJn
ZXRzLgoKMS4gKlByZXByb2Nlc3NpbmcqOiBgbWFrZSBtZC1tYXJreWAgXAoJKiBgbWQvbWFy
a3kubWRgIC0+IGBidWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcgYGh0bWxgKjogYG1ha2Ug
bGh0bWwtbWFya3lgIFwKCSogYGJ1aWxkL21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kuaHRt
bC5tZGAKMy4gKkxpbmtpbmcgYHBkZmAqOiBgbWFrZSBscGRmLW1hcmt5YCBcCgkqIGBidWls
ZC9tYXJreS5tZGAgLT4gYGJ1aWxkL21hcmt5LnBkZi5tZGAKNC4gKlJlbmRlcmluZyBgaHRt
bGAqOiBgbWFrZSBodG1sLW1hcmt5YAoJKiBgYnVpbGQvbWFya3kuaHRtbC5tZGAgLT4gYGh0
bWwvbWFya3kuaHRtbGAKNS4gKlJlbmRlcmluZyBgcGRmYCo6IGBtYWtlIHBkZi1tYXJreWAK
CSogYGJ1aWxkL21hcmt5LnBkZi5tZGAgLT4gYHBkZi9tYXJreS5wZGZgCgotLS0KCiMgV3Jp
dGUgQSBOZXcgRG9jdW1lbnQKCkluIG9yZGVyIHRvIHJlbmRlciBhIG5ldyBkb2N1bWVudCB0
aGUgTWFya2Rvd24gdGV4dCBuZWVkcyB0byBiZSBzYXZlZAp0byBhIGZpbGUgbG9jYXRlZCBp
biBgbWQvZXhhbXBsZS5tZGAgd2hpY2ggY2FuIGJlIGZvdW5kIHJlbmRlcmVkCltoZXJlXShl
eGFtcGxlLj8/PykuIFRoZSBmb2xsb3dpbmcgTWFya2Rvd24gc25pcHBldApjYW4gYmUgdXNl
ZCBhcyBhIHN0YXJ0aW5nIHBvaW50LgoKYGBgeWFtbAohISEgZXhhbXBsZS5tZCByYXcgPj4x
CmBgYAoKLS0tCgojIENvZGUgQmxvY2tzCgpDb2RlIGJsb2NrcyBhcmUgZW1iZWRkZWQgaW4g
TWFya2Rvd24gdXNpbmcgZmVuY2VkIGNvZGUgdXNpbmcKZWl0aGVyIHRoZSBgXCFgIG9yIGBc
ISFgIGZsYWcgZm9yIGRpc3BsYXllZCBhbmQgaGlkZGVuIGNvZGUKcmVzcGVjdGl2ZWx5LgoK
YGBgdGV4dAogICAgYGBgXCEKCUNPREVfQkxPQ0tfU0hPV04KICAgIGBgYAoKICAgIGBgYFwh
IQoJQ09ERV9CTE9DS19ISURERU4KICAgIGBgYApgYGAKCioqRGlzcGxheSBhbmQgRXhlY3V0
ZSBDb2RlKioKClRoaXMgY29kZSBibG9jayBhbm5vdGF0ZWQgd2l0aCBgIWAgaXMgZGlzcGxh
eWVkIGFuZCBleGVjdXRlZC4KCmBgYCEKCWltcG9ydCBtYXRoCgl4ID0gbWF0aC5zcXJ0KDIp
CmBgYAoKKipFeGVjdXRlIENvZGUgd2l0aG91dCBEaXNwbGF5KioKClRoZSBjb2RlIGJsb2Nr
IGFubm90YXRlZCB3aXRoIGAhYCBpcyBub3QgZGlzcGxheWVkLCBidXQgZXhlY3V0ZWQuCgpg
YGAhIQoJeSA9IHggKyAxCmBgYAoKKipEaXNwbGF5IENvZGUgYnV0IGRvIG5vdCBFeGVjdXRl
KioKClRoaXMgY29kZSBibG9jayBpcyBkaXNwbGF5ZWQgYXMgcHl0aG9uLCBidXQgbm90IGV4
ZWN1dGVkLgoKYGBgcHl0aG9uCgl6ID0gMC4vMC4KYGBgCgoqKlVzaW5nIHRoZSBQeXRob24g
YGltcG9ydGAgU3RhdGVtZW50KioKCkxhcmdlIGNvZGUgYmxvY2tzIGNhbiBiZSBpbXBvcnRl
ZCBmcm9tIHB5dGhvbiBtb2R1bGVzIGFuZCB0aGUKYGltcG9ydGAgc3RhdGVtZW50IGNhbiBi
ZSB1c2VkIGZvciBsb2FkaW5nIGluc3RhbGxlZCBsaWJyYXJpZXMuCgpgYGBweXRob24KCWlt
cG9ydCBudW1weQoJaW1wb3J0IHN5cwoJc3lzLnBhdGguYXBwZW5kKCIuIikKCSNpbXBvcnQg
bW9kdWxlX2luX3dvcmtpbmdfZGlyZWN0b3J5CmBgYAoKLS0tCgojIElubGluZSBDb2RlCgpJ
bmxpbmUgc3RhdGVtZW50cyBhcmUgZGlyZWN0bHkgZW1iZWRkZWQgaW50byB0aGUgdGV4dCBm
bG93IHVzaW5nCmV4cHJlc3Npb25zIGFuZCB2YXJpYWJsZXMgd2l0aCB0aGUgY29ycmVzcG9u
ZGluZwpzeW50YXggYGAgYFwhRVhQUkVTU0lPTmAgYGAgb3IgYGAgYFwhVkFSSUFCTEVgIGBg
LgpUaGUgb3V0cHV0IG9mIHZhcmlhYmxlcyBjYW4gYmUgZm9ybWF0dGVkIHVzaW5nIHRoZQpg
YCBgXCFWQVJJQUJMRVs6Rk9STUFUXWAgYGAgb3IgYGAgYFwhRVhQUkVTU0lPTls6Rk9STUFU
XWAgYGAKc3RhdGVtZW50IGFjY29yZGluZyB0byB0aGUgcHl0aG9uIG9wZXJhdG9yIGB7PHZh
cmlhYmxlPls6PGZvcm1hdD5dfWAKaW1wbGVtZW50ZWQgaW4gdGhlCltgc3RyLmZvcm1hdCgp
YF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1h
dHN0cmluZ3MpCnNwZWNpZmljYXRpb24gYW5kIHRoZSBvcGVyYXRvciBgezxleHByZXNzaW9u
Pls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4KW2BmYC1zdHJpbmdzXShodHRwczovL2Rv
Y3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJp
bmdzKS4KCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhlIHJlc3VsdCBvZiAkXHNx
cnR7Mn0kIGlzOgoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgbWF0aC5zcXJ0KDIuMClgCiog
Zm9ybWF0dGVkIG91dHB1dDogYCEgIiUuNGYiICUgbWF0aC5zcXJ0KDIuMClgCgpUaGUgdmFy
aWFibGUgJHgkIGlzCiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBgISB4YAoqIGZvcm1hdHRlZCBv
dXRwdXQ6IGAhIHg6LjRmYAoKVGhlIHZhcmlhYmxlICR5PXgrMSQgaXMKKiB1bmZvcm1hdHRl
ZCBvdXRwdXQ6IGAhIHlgCiogZm9ybWF0dGVkIG91dHB1dDogYCEgeTouNGZgCgooVGhlIGNv
ZGUgYmxvY2sgZm9yIHRoZSBkZWZpbml0aW9uIG9mICR5JCBpcyBoaWRkZW4uKQoKKipJbmxp
bmUgRXhwcmVzc2lvbiBPdXRwdXQqKgoKYGBgIQoJeCA9IGxpc3QocmFuZ2UoMSwgMTEpKQoJ
eSA9IFtpKmkgZm9yIGkgaW4geF0KCglkZWYgbGlzdF9zdHIoYSk6CgkJcmV0dXJuIFtzdHIo
aSkgZm9yIGkgaW4gYV0KCWRlZiBsaXN0X2FuZChhKToKCQlyZXR1cm4gIiwgIi5qb2luKGxp
c3Rfc3RyKGFbOi0xXSkpICsgIiBhbmQgIiArIHN0cihhWy0xXSkKYGBgCgpUaGUgbGlzdCBj
YW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgdGV4dC4gVGhlIHNxdWFyZSBvZiB0aGUgZmlyc3QK
YCFsZW4oeClgIG51bWJlcnMgYCFsaXN0X2FuZCh4KWAgaXMgYCFsaXN0X2FuZCh5KWAuIFNx
dWFyZSBudW1iZXJzCmFyZSBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCioqSW5s
aW5lIFN0YXRlbWVudHMgaW4gVGFibGVzKioKCmBgYCEKCWNsYXNzIHNxdWFyZToKCQlkZWYg
X19pbml0X18oc2VsZik6CgkJCXNlbGYueCA9IDAKCQlkZWYgZ2V0X3goc2VsZik6CgkJCXJl
dHVybiBzZWxmLngKCQlkZWYgbmV4dF95KHNlbGYpOgoJCQl5ID0gc2VsZi54KioyCgkJCXNl
bGYueCArPSAxCgkJCXJldHVybiB5CglzcSA9IHNxdWFyZSgpCmBgYAoKVGhlIGZvbGxvd2lu
ZyB0YWJsZSBpcyBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCnggICAgICAgICAg
ICB8eQotLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tCmAhc3EuZ2V0X3goKWB8YCFzcS5u
ZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAh
c3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgp
YHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0
X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNx
LmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAK
Ci0tLQoKIyBHZW5lcmF0ZSBNYXJrZG93biBUZXh0CgpNYXJrZG93biB0ZXh0IGNhbiBiZSBw
cm9kdWNlZCBhbGdvcml0aG1pY2FsbHkgZnJvbSBhIHB5dGhvbiBhbGdvcml0aG0KdXNpbmcg
dGhlIGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24uIFRoZSBgXygpYCBhbmQgYF9fKClgIGZ1
bmN0aW9uIGFyZQpzcGVjaWFsIG5hbWVzIHdoaWNoIGFyZSByZXNlcnZlZCBieSBgbWFya3lg
LiAocmVmZXIgdG8gR2VuZXJhdGlvbiBvZgpNYXJrZG93biBUZXh0LCBbYG1hcmt5YCBkb2N1
bWVudGF0aW9uXShtYXJreS4/Pz8pIGZvciBpbi1kZXB0aApleHBsYW5hdGlvbikuCgojIyBU
aGUgYF8oKWAgRnVuY3Rpb24KCiBUaGUgYF8oKWAgZnVuY3Rpb24gYmFzaWNseSByZXNlbWJs
ZWQgdGhlIHB5dGhvbiBgcHJpbnQoKWAgZnVuY3Rpb24uCmBtYXJreWAgZG9lcyBub3QgcGF0
Y2ggdGhlIHN0YW5kYXJkIGBwcmludCgpYCBmdW5jdGlvbiB3aGljaCBzdGlsbApkaXNwbGF5
cyB0ZXh0IGluIHRoZSBjb25zb2xlIGFuZCBub3QgaW4gdGhlIE1hcmtkb3duIHRleHQuClRo
ZSBgXygpYCBmdW5jdGlvbiBzdXBwb3J0cyBhcHBlbmRpbmcgdGV4dCB0byB0aGUgcHJldmlv
dXMgYW5kIHRoZSBuZXh0CmxpbmUgb2Ygb3V0cHV0IGJ5IHVzaW5nIGBfYCBhcyB0aGUgZmlz
dCBvciBsYXN0IHBhcmFtZXRlci4KMS4gYF8oXywgKmFyZ3MgICApYDogYXBwZW5kIHRoaXMg
b3V0cHV0IHRvIHByZXZpb3VzIG91dHB1dAoyLiBgXyhfLCAqYXJncywgXylgOiBhcHBlbmQg
dG8gcHJldmlvdXMgYW5kIG5leHQgb3V0cHV0CjMuIGBfKCAgICphcmdzLCBfKWA6IGFwcGVu
ZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1dAo0LiBgXygpYDogZGlzYWJsZSBhcHBlbmQg
ZmxhZwoKKipNb25rZXkgUGF0Y2ggYHByaW50KClgIEZ1bmN0aW9uKioKClRoZSBgcHJpbnQo
KWAgZnVuY3Rpb24gY2FuIGJlICptb25rZXkgcGF0Y2hlZCogdXNpbmcgdGhlIGZvbGxvd2lu
ZwpzdGF0bWVudCBpbiBvcmRlciB0byBjYWxsIHRoZSBgXygpYCBmdW5jdGlvbiBpbnN0ZWFk
LgoKYGBgIQoJcHJpbnQoIlByaW50IiwgInRvIiwgICJjb25zb2xlIiwgIiEiKQoJXygiUHJp
bnQiLCAidG8iLCAgIk1hcmtkb3duIiwgIiEiKQoKCXByaW50ID0gXyAjIG1vbmtleSBwYXRj
aAoJcHJpbnQoIlByaW50IiwgInRvIiwgICJNYXJrZG93biIsICIhIikKYGBgCgoqKkpvaW4g
QXJndW1lbnRzIHVzaW5nIGBzZXBgKioKClRoZSBzaWduYXR1cmUgb2YgdGhlIGBfKClgIGlz
IGBfKCphcmdzLCBzZXA9IiAiKWAuIGBzZXBgIGlzIHVzZWQgdG8Kam9pbiB0aGUgYXJndW1l
bnRzIGAqYXJnc2AgaW50byBvbmUgc3RyaW5nLgoKYGBgIQoJXygiVGhlIGZpcnN0IGZpdmUg
bmF0dXJhbCBudW1iZXJzIGFyZToiKQoJXygxLCAyLCAzLCA0LCA1LCBzZXA9IiwgIikKYGBg
CgoqKkdlbmVyYXRlIGEgVGFibGUgd2l0aCBBcHBlbmRpbmcqKgoKVGhlIGFwcGVuZCBmZWF0
dXJlIGlzIHVzZWQgdG8gY3JlYXRlIGEgdGFibGUuCgpgYGAhCglfKCJDb2x1bW4gMSIsIF8p
CglfKCJ8Q29sdW1uIDIiLCBfKQoJXygifENvbHVtbiAzIiwgXykKCV8oKQoKCV8oInwiLmpv
aW4oWyItLS0tLS0tLSJdKjMpKQoKCWZvciBpIGluIHJhbmdlKDUpOgoJCV8oIiUgOGQiICUg
KGkqMykpCgkJZm9yIGogaW4gWzEsIDJdOgoJCQlfKF8sICJ8JSA4ZCIgJSAoaSozK2opKQpg
YGAKClRoZSBhbGdvcml0aG0gcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBNYXJrZG93biB0ZXh0
LgoKYGBgbWQKQ29sdW1uIDF8Q29sdW1uIDJ8Q29sdW1uIDMKLS0tLS0tLS18LS0tLS0tLS18
LS0tLS0tLS0KICAgICAgIDB8ICAgICAgIDF8ICAgICAgIDIKICAgICAgIDN8ICAgICAgIDR8
ICAgICAgIDUKICAgICAgIDZ8ICAgICAgIDd8ICAgICAgIDgKICAgICAgIDl8ICAgICAgMTB8
ICAgICAgMTEKICAgICAgMTJ8ICAgICAgMTN8ICAgICAgMTQKYGBgCgojIyBUaGUgYF9fKClg
IEZ1bmN0aW9uCgpDb21wYXJlZCB0byB0aGUgYF8oKWAgZnVuY3Rpb24sIHRoZSBgX18oKWAg
ZnVuY3Rpb24gb25seSB0YWtlcyBvbmUKYXJndW1lbnQgYW5kIGl0cyBwdXJwb3NlIGlzIHRv
IG91dHB1dCBhIGZvcm1hdHRlZCBwYXJhZ3JhcGggd2l0aAppbmRlbnRhdGlvbi4gVGhlIHNp
Z25hdHVyZSBvZiB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIGBfKGFyZywgY3JvcD1UcnVlKWAu
CgoqKkdlbmVyYXRlIGEgUGFyYWdyYXBoIHdpdGggYGZgLVN0cmluZ3MqKgoKVGhlIGBfXygp
YCBmdW5jdGlvbiBjYW4gYmUgY29tYmluZWQgd2l0aCB0cmlwbGUgcXVvdGVkIGJsb2NrIHN0
cmluZ3MKYW5kIHRoZSBweXRob24gMyBgZmAtc3RyaW5ncyBvciBgZiIuLi4iYCBzdHJpbmcg
aW50ZXJwb2xhdGlvbiwgcmVmZXIgdG8KW2BmYC1zdHJpbmdzXShodHRwczovL2RvY3MucHl0
aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJpbmdzKS4K
CmBgYCEKCWltcG9ydCByYW5kb20KCXMgPSAwCglyYW5kb20uc2VlZChzKQoJcCA9IFtyYW5k
b20ucmFuZG9tKCkgZm9yIGkgaW4gcmFuZ2UoMyldCgoJX18oZiIiIgoJCVBhcmFtZXRlciBv
bmUgaXMge3BbMF06LjNmfSBhbmQgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHNlZWQKCQlv
ZiB0aGUgcHNldWRvIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLCB3aGljaCB3YXMgY2hvc2Vu
CgkJdG8gYmUge3N9LiBGb3IgdGhlIHNhbWUgc2VlZCBhbHdheXMgdGhlIHNhbWUgcmFuZG9t
IG51bWJlcnMKCQlhcmUgY3JlYXRlZC4gVGhlIG5leHQgdHdvIG51bWJlcnMgYXJlIHtwWzFd
Oi4zZn0gYW5kIHtwWzJdOi4zZn0uCgkJVGhlIHN1bSBvZiB0aGUgdGhyZWUgbnVtYmVycyBp
cyB7c3VtKHApOi4zZn0gYW5kIGl0IGlzCgkJeydncmVhdGVyJyBpZiBzdW0ocCkgPiAyLiBl
bHNlICdsZXNzZXIgb3IgZXF1YWwnfSB0aGFuIHR3by4KCSIiIikKYGBgCgoqKkNyb3BwaW5n
IGFuZCBJbmRlbnRhdGlvbiBvZiBPdXRwdXQqKgoKQmVmb3JlIHRoZSB0ZXh0IGdlbmVyYXRl
ZCBieSB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIHByaW50ZWQgaW50byB0aGUKZG9jdW1lbnQu
IFRoZSB0ZXh0IGlzIGNyb3BwZWQgYWNjb3JkaW5nIHRvIHRoZSBsZWFkaW5nIHdoaXRlIHNw
YWNlCm9mIHRoZSBmaXJzdCBub24tZW1wdHkgbGluZS4gVGhlIGxlYWRpbmcgd2hpdGUgc3Bh
Y2Ugb2YgdGhlIGZpcnN0Cm5vbi1lbXB0eSBsaW5lIGlzIHJlbW92ZWQgZnJvbSBhbGwgb3Ro
ZXIgbGluZXMgb2YgdGhlIG91dHB1dC4KCmBgYCEKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAx
CgkJCSogTGlzdCBMZXZlbCAyCgkJCSogTGlzdCBMZXZlbCAyCgkJCQkqIExpc3QgTGV2ZWwg
MwoJCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDEK
CSIiIikKYGBgCgpUaGUgY29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIG91dHB1
dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkqIExpc3QgTGV2ZWwgMgoJKiBMaXN0IExldmVs
IDIKCQkqIExpc3QgTGV2ZWwgMwoJKiBMaXN0IExldmVsIDIKKiBMaXN0IExldmVsIDEKKiBM
aXN0IExldmVsIDEKYGBgCgoqKkRpc2FibGUgQ3JvcHBpbmcgb2YgT3V0cHV0KioKClRoZSBj
cm9wcGluZyBpcyBkaXNhYmxlZCB1c2luZyB0aGUga2V5d29yZCBgX18odGV4dCwgY3JvcD1G
YWxzZSlgLgoKYGBgIQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEKCSIiIiwgY3JvcD1UcnVl
KQoKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgkiIiIsIGNyb3A9RmFsc2UpCmBgYAoKVGhl
IGNvZGUgYmxvY2sgcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBvdXRwdXQuCgpgYGBtZAoqIExp
c3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAyCmBgYAoKLS0tCgojIEZvcm1hdCBEZXBlbmRl
bnQgTGlua3MKCldoZW4gd3JpdGluZyBzZXZlcmFsIE1hcmtkb3duIGRvY3VtZW50cyBvZnRl
biBkb2N1bWVudHMgYXJlIGxpbmtlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgdGhlIE1h
cmtkb3duIGxpbmsgc3RhdGVtZW50CmBbTGluayBOYW1lXShmaWxlLmh0bWwpYCBvciBgW0xp
bmsgTmFtZV0oZmlsZS5wZGYpYC4KSG93ZXZlciwgd2hlbiByZW5kZXJpbmcgZG9jdW1lbnRz
IHdpdGggbGlua3MgaW50byBgaHRtbGAgYW5kIGBwZGZgCnRoZSBmaWxlIGV4dGVuc2lvbiBv
ZnRlbiBtdXN0IGJlIGFkanVzdGVkIGFjY29yZGluZyB0byB0aGUgb3V0cHV0IGZvcm1hdC4K
YG1hcmt5YCBzdXBwb3J0cyB0aGUgYC5cPz8/YCBzdGF0ZW1lbnQsIHdoaWNoIHdpbGwgYmUg
cmVwbGFjZWQgYnkKYC5odG1sYCBvciBgLnBkZmAgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQg
Zm9ybWF0LgoKYGBgbWQKW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuXD8/PykKYGBgCgp3aWxs
IGJlIHByb3Byb2Nlc3NlZCBpbnRvIHRoZSBmb2xsb3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxg
OiBgW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuaHRtbClgCiogZm9yIGBwZGZgOiBgW0xpbmsg
dG8gZG9jdW1lbnRdKGZpbGUucGRmKWAKCltMaW5rIHRvIHRoaXMgZG9jdW1lbnRdKHF1aWNr
c3RhcnQuPz8/KQoKLS0tCgojIEZvcm1hdCBEZXBlbmRlbnQgQ29kZQoKYHBhbmRvY2AgTWFy
a2Rvd24gYWxsb3dzIHRvIHdyaXRlIGZvcm1hdCBzcGVjaWZpYyBjb2RlIHdpdGhpbiBNYXJr
ZG93bgp1c2luZyBgaHRtbGAgYW5kICp0ZXgqIGZvciBgcGRmYCBkb2N1bWVudHMuIEhvd2V2
ZXIsIHdoZW4gaW5zZXJ0aW5nCnJhdyBgaHRtbGAgb3IgcmF3ICp0ZXgqIGNvZGUsIHRoZSBk
b2N1bWVudCBvbmx5IGNhbiBiZSByZW5kZXJlZCBpbnRvCmBodG1sYCBvciBgcGRmYCBhY2Nv
cmRpbmdseS4KCmBtYXJreWAgaW50cm9kdWNlcyBmb3JtYXQgY29kZXMsIHdoaWNoIGFyZSBh
cHBsaWVkIGR1cmluZyBsaW5raW5nCmFmdGVyIHByZXByb2Nlc3NpbmcuIER1cmluZyBsaW5r
aW5nIGZvcm1hdCBzcGVjaWZpYyBjb2RlcyBmb3IgYGh0bWxgCmFuZCBgcGRmYCBhcmUgYXBw
bGllZCBpbiBhIGNvbnNpc3RlbnQgbWFubmVyLCByZXN1bHRpbmcgaW4gZG9jdW1lbnRzCndp
dGggTWFya2Rvd24gYW5kIGBodG1sYCBvciBNYXJrZG93biBhbmQgKnRleCogb25seS4gVXNp
bmcgdGhpcwpwYXR0ZXJuIGBtYXJreWAgZG9jdW1lbnRzIGNvbnRhaW4gcmVndWxhciBNYXJr
ZG93biwgd2hpY2ggY2FuIGJlCnJlbmRlcmVkIGludG8gYGh0bWxgIGFuZCBgcGRmYCwgYXMg
d2VsbCBhcyBmb3JtYXQgc3BlY2lmaWMgY29kZXMKZm9yIHR3ZWFraW5nIG9yIHBvbGlzaGlu
ZyBgaHRtbGAgYW5kIGBwZGZgIG91dHB1dC4KCkZvcm1hdCBjb2RlcyBhcmUgc3BlY2lmaWVk
IGluIGNvZGUgYmxvY2tzIGFuZCBjYWxsZWQgdXNpbmcgdGhlCmlubGluZSBzeW50YXggYGAg
YFw/Rk1UQ09ERShBUkdTKWAgYGAsIHdoaWNoIGlzIHRyYW5zbGF0ZWQgaW50byB0aGUgdHdv
CmZvbGxvd2luZyBweWhvbiBmdW5jdGlvbiBjYWxscy4KMS4gYEZNVENPREVfaHRtbChBUkdT
KWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYGh0bWxgLgoyLiBgRk1UQ09ERV9wZGYoQVJH
UylgOiBjYWxsZWQgd2hlbiBsaW5rZWQgZm9yIGBwZGZgLgoKQXNzdW1pbmcgcHJlcHJvY2Vz
c2luZyB0aGUgZmlsZSBgbWQvbWFya3kubWRgLCBsaW5raW5nIGZvcm1hdCBjb2RlcwpyZXN1
bHRzIGluIHRoZSB0d28gZm9sbG93aW5nIG91dHB1dCBmaWxlcy4KMS4gYGJ1aWxkL21hcmt5
Lmh0bWwubWRgOiBjb250YWlucyBvdXRwdXQgb2YgYGh0bWxgIGZvcm1hdCBjb2Rlcy4KMi4g
YGJ1aWxkL21hcmt5LnBkZi5tZGA6IGNvbnRhaW5zIG91dHB1dCBvZiBgcGRmYCBmb3JtYXQg
Y29kZXMuCgoqKkV4YW1wbGUgTXVsdGktQ29sdW1uIFRleHQgaW4gYHBkZmAgYW5kIGBodG1s
YCoqCgpEZWZuaXRpb24gb2YgdHdvIGZvcm1hdCBjb2RlcyBgbWNvbF9iZWdpbmAgYW5kIGBt
Y29sX2VuZGAsIG9uZSBmb3IgdGhlCmJlZ2luIG9mIG11bHRpIGNvbHVtbiBhbmQgYW5vdGhl
ciBmb3IgdGhlIGVuZCBvZiB0aGUgbXVsdGkgY29sdW1uCnNlY3Rpb24uIFRoZSBmb3JtYXQg
Y29kZXMgYXJlIGFwcGVuZGVkIHdpdGggYF9odG1sYCBhbmQgYF9wZGZgCnJlc3BlY3RpdmVs
eS4KCmBgYCEKCWRlZiBtY29sX2JlZ2luX3BkZigpOiByZXR1cm4gciJcYmVnaW57bXVsdGlj
b2xzfXsyfSIKCWRlZiBtY29sX2VuZF9wZGYoKTogcmV0dXJuIHIiXGVuZHttdWx0aWNvbHN9
IgoJZGVmIG1jb2xfYmVnaW5faHRtbCgpOiByZXR1cm4gciI8ZGl2IHN0eWxlPSdjb2x1bW4t
Y291bnQ6IDI7Jz4iCglkZWYgbWNvbF9lbmRfaHRtbCgpOiByZXR1cm4gciI8L2Rpdj4iCmBg
YAoKVGhlIGBjb2x1bW4tY291bnRgIENTUyBwcm9wZXJ0eSByZXF1aXJlcyBJbnRlcm5ldCBF
eHBsb3Jlcj49MTAsCkZpcmVmb3g+PTUyLCBTYWZhcmk+PTksIE9wZXJhPj0zNyBvciBDaHJv
bWU+PTUwLCByZWZlciB0bwpbdzNzY2hvb2xzXShodHRwczovL3d3dy53M3NjaG9vbHMuY29t
L2Nzcy9jc3MzX211bHRpcGxlX2NvbHVtbnMuYXNwKS4KSW4gb3JkZXIgdG8gdXNlIHRoZSBg
bXVsdGljb2xgICp0ZXgqIHBhY2thZ2UsIHRoZSBzdGF0ZW1lbnQKYFx1c2VwYWNrYWdle211
bHRpY29sfWAgaGFzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSB5YW1sIG1ldGEgZGF0YQppbiB0
aGUgZnJvbnQgbWF0dGVyIG9mIHRoZSBNYXJrZG93biBkb2N1bWVudC4KCmA/bWNvbF9iZWdp
bigpYFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQK
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKYD9tY29sX2VuZCgpYAoKLS0tCgojIEluY2x1ZGUg
U3RhdGVtZW50CgpgbWFya3lgIGFsbG93cyB0byBpbmNsdWRlIG90aGVyIE1hcmtkb3duIHRl
eHQgdXNpbmcgdGhlIGBcISEhYCBzdGF0ZW1lbnQuClBsZWFzZSByZWZlciB0byB0aGUgYG1h
cmt5YCBkb2N1bWVudGF0aW9uIGZvciBjb21wbGV0ZSBkZXNjcmlwdGlvbgpvZiB0aGUgYFwh
ISFgIHN0YXRlbWVudC4gRHVyaW5nIHJlbmRlcmluZyBgbWFya3lgIGtlZXBzIHRyYWNrIG9m
CmluY2x1ZGVkIGZpbGVzIGFuZCBjcmVhdGVzIE1ha2VmaWxlIHJ1bGVzIGZvciBkZXBlbmRl
bnQgbWFrZS4KCmBgYG1kCgkhISEgZmlsZS5tZGkKYGBgCgotLS0KCiMgTWV0YSBEYXRhCgpg
bWFya3lgIHN1cHBvcnRzIGRvY3VtZW50IG1ldGEgZGF0YSBpbiBNYXJrZG93biBmcm9udCBt
YXR0ZXIuClRoaXMgZmVhdHVyZSBpcyBub3QgZXhwbGFpbmVkIGluIHRoZSBxdWlja3N0YXJ0
LiBQbGVhc2UgcmVmZXIKdG8gdGhlIGBtYXJreWAgZG9jdW1lbnRhdGlvbiBmb3IgZXhwbGFu
YXRpb24uCgpgYGBtZAoJLS0tCglNRVRBX0RBVEEKCS0tLQoJTUFSS0RPV04KYGBgCgotLS0K
CiMgRXNjYXBlIE1hcmt1cAoKVGhlIGBtYXJreWAgbWFya3VwIGNhbiBiZSBlc2NhcGVkLiBX
aGVuIG1hcmt1cCBpcyBlc2NhcGVkCmBtYXJreWAgcmVtb3ZlcyB0aGUgZXNjYXBlIHNlcXVl
bmNlIGFuZCBwcmludHMgb3V0IHRoZQp1bmVzY2FwZWQgc3RhdGVtZW50LgoKTWFya3VwICAg
ICAgICAgICB8RXNjYXBlIFNlcXVlbmNlCi0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0t
LS0tLQpjb2RlIGJsb2NrIGhpZGRlbnxgYCBgYGBcXCEhIGBgCmNvZGUgYmxvY2sgc2hvd24g
fGBgIGBgYFxcISBgYAppbmxpbmUgY29kZSAgICAgIHxgYCBgXFwhLi4uYCBgYApmb3JtYXQg
Y29kZSAgICAgIHxgYCBgXFw/Li4uYCBgYAppbmNsdWRlIHN0YXRlbWVudHxgXFwhISFgCmZv
cm1hdCBsaW5rICAgICAgfGAuXFw/Pz9gCgotLS0KCipUaGFua3MgZm9yIHJlYWRpbmcsIHBs
ZWFzZSB0cnkgYG1hcmt5YC4qCg==
'''
pack_quicksource_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKZGF0ZTogMS4gQXVndXN0
IDIwMjEKYXV0aG9yOiBIZW5yeSBMZWhtYW5uCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
IFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAw
IDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4K
eG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDEx
cHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29k
ZSBvZiB0aGUgYG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBg
bWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCBy
ZXByZXNlbnRzIHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3Npbmcg
cHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBk
b2N1bWVudGF0aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJr
eWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0t
LQoKYGBgcHl0aG9uCiEhISBxdWlja3N0YXJ0Lm1kIHJhdyA+PjEKYGBgCg==
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IG1hcmt5LmJpYgpoZWFkZXItaW5j
bHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgZXhhbXBsZSBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5
YCBtYXJrdXAuIFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9mIHRoaXMKPiBkb2N1bWVudCBj
YW4gYmUgcmVhZCBbaGVyZV0oZXhhbXBsZXNvdXJjZS4/Pz8pLgo+IEZvciBkb2N1bWVudGF0
aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3Np
dG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoKIyBSZWZl
cmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBz
ZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2
NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQVVBQUFBRkNBWUFBQUNOYnlibEFBQUFIRWxF
UVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERIeGdsak5CQUFPOVRYTDBZNE9Id0FBQUFCSlJV
NUVya0pnZ2c9PSl7I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQGZpZzps
YWJlbC4KCkEgIHxCICB8QyAgfEQKLS0tfC0tLXwtLS18LS0tCjAwMHwxMTF8NDQ0fDU1NQoy
MjJ8MzMzfDY2Nnw3NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBjYXB0aW9uIHsjdGJsOmxhYmVs
fQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRcbWJveHtlfV57XG1i
b3h7aX1ccGl9KzE9MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQGVx
OmxhYmVsLgoKVGhpcyBpcyBhIGNpdGF0aW9uIFtATXVsbGVyMTk5M10uCgojIGBtYXJreWAg
TWFya3VwIGZvciBFeGVjdXRpb24gb2YgRW1iZWRkZWQgUHl0aG9uIENvZGUKCioqRGlzcGxh
eWVkIENvZGUsIEV4ZWN1dGVkKioKCmBgYCEKCWltcG9ydCBtYXRoCglkZWYgbGlzdF9hbmQo
bCk6CgkJcmV0dXJuICIsICIuam9pbihzdHIoaSkgZm9yIGkgaW4gbFs6LTFdKSArICIgYW5k
ICIgKyBzdHIobFstMV0pCgoJeCA9IDIKCXkgPSBtYXRoLnNxcnQoeCkKYGBgCgoqKkhpZGRl
biBDb2RlLCBFeGVjdXRlZCoqCgpgYGAhIQoJcHJpbnQoIkhlbGxvIENvbnNvbGUhIikKYGBg
CgoqKkRpc3BsYXllZCBDb2RlLCBOb3QgRXhlY3V0ZWQqKgoKYGBgcHl0aG9uCgl4ID0gMwpg
YGAKCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhlIHNxdWFyZSByb290IG9mICR4
PWAheGAkIGlzIGAheTouM2ZgLgoKKipJbmxpbmUgRXhwcmVzc2lvbioqCgpUaGUgZmlyc3Qg
dGVuIG51bWJlcnMgYXJlIGAhbGlzdF9hbmQocmFuZ2UoMTApKWAuCgoqKkZvcm1hdCBMaW5r
cyoqCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0oZmlsZS5cPz8/KQpgYGAKCndpbGwgYmUg
cHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2luZyB0ZXh0OgoqIGZvciBgaHRtbGA6IGBb
TGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAKKiBmb3IgYHBkZmA6IGBbTGluayB0byBk
b2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8gdGhpcyBkb2N1bWVudF0oZXhhbXBsZS4/
Pz8pCgoqKkZvcm1hdCBDb2RlcyoqCgpgYGAhCglkZWYgRk1UQ09ERV9odG1sKCk6IHJldHVy
biAiSDxzdXA+VDwvc3VwPjxzdWI+TTwvc3ViPkwiCglkZWYgRk1UQ09ERV9wZGYoKTogcmV0
dXJuICJcTGFUZVgiCmBgYAoKVGhpcyBpcyBhIGAuPz8/YCBkb2N1bWVudCBhbmQgdGhlIGZv
cm1hdCBjb2RlIHJldHVybnM6IGA/Rk1UQ09ERSgpYC4KCi0tLQoKKlRoYW5rcyBmb3IgcmVh
ZGluZywgcGxlYXNlIHRyeSBgbWFya3lgLioKCi0tLQoKIyBSZWZlcmVuY2VzIHstfQo=
'''
pack_examplesource_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKZGF0ZTogMS4gQXVndXN0
IDIwMjEKYXV0aG9yOiBIZW5yeSBMZWhtYW5uCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
IFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAw
IDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4K
eG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDEx
cHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29k
ZSBvZiB0aGUgYG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBg
bWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCBy
ZXByZXNlbnRzIHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3Npbmcg
cHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBk
b2N1bWVudGF0aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJr
eWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0t
LQoKYGBgcHl0aG9uCiEhISBleGFtcGxlLm1kIHJhdyA+PjEKYGBgCg==
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "noref":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "notext":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text,
				run_marky=flag_run_marky, shift_atx=flag_shift_atx, shift_str=shift_str)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True,
	read_text=True, run_marky=True, shift_atx=0, shift_str=""):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == "":
						continue
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)
						appendbuf = ""
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					for j in run_block(fpath, n - len(code_text) - 1, n, code_text, show_code):
						md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					md_text.append(shift_str + i)
					continue
				elif i.startswith(r"\\!!!"):
					j = parse_line(fpath, n, i[2:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					j = parse_line(fpath, n, i[1:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					j = parse_line(fpath, n, i)
					if j == "":
						appendbuf = i
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return ""
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				is_shortcode = "(" in expr and expr[-1] == ")"
				if is_shortcode:
					text += run_shortcode(fpath, n, p + 2, expr)
				else:
					text += print_inline(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		def go_deeper(deeep, first=False):
			print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
			if first:
				print("# FILE", args.marky)
			if os.path.exists(deeep.tb_frame.f_code.co_filename):
				with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
					print("#", fh.read().split("\n")[deeep.tb_lineno-1])
			if deeep.tb_next != None:
				go_deeper(deeep.tb_next)
		if ex.__traceback__.tb_next:
			go_deeper(ex.__traceback__.tb_next, first=True)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def print_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % text, end="", flush=True)
	try:
		value = ("{" + text + "}").format(**exec_dict)
	except Exception as ex:
		print("")
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		p = expr.find("(")
		shexpr = expr[:p] + "_" + f + expr[p:]
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		try:
			exec_text = list()
			exec_append = False
			value = eval(shexpr, exec_dict, None)
			if not value is None:
				__(value)
			if len(exec_text) > 0:
				exec_text = "\n".join(exec_text).split("\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<<??%s %s %s??>>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text)
	try:
		value = str(eval('f"""{%s}"""' % text, exec_dict, None))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for a, b in enumerate(value.split("\n")):
		print("#    %03d" % (a + 1), b)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--md")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	p = md_text.find("<<??")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("??>>", p + 4)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+4:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + 4
			p = md_text.find("<<??", c)
		else:
			p = md_text.find("<<??", p + 4)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
