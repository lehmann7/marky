#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogYXV4ICAgICAgb25seSBNYWtlZmls
ZSBkZXBlbmRlbmN5LCBubyBpbmNsdWRlCgkjICAqIG5vZGVwICAgIGluY2x1ZGUgd2l0aG91
dCBNYWtlZmlsZSBkZXBlbmRlbmN5CgkjICAqIHJhdyAgICAgIGRvIG5vdCBwYXJzZSBmaWxl
LCBpbmNsdWRlIGFzLWlzCgkjICAqIG5vbWV0YSAgIGlnbm9yZSBhbmQgc2tpcCBhbGwgbWV0
YSBkYXRhCgkjICAqIG5vYm9keSAgIGlnbm9yZSBhbmQgc2tpcCBNYXJrZG93biBib2R5Cgkj
ICAqIG5vbWFya3kgIG5vIHByb2Nlc3Npbmcgb2YgbWFya3kgbWFya3VwCgkjICAqICEgICAg
ICAgIGluY2x1ZGUgb25seSBjb2RlIGJsb2NrcwoJIyAgKiAhISAgICAgICBpbmNsdWRlIG9u
bHkgaGlkZGVuIGNvZGUgYmxvY2tzCgkjICAqICMrTiAgICAgIGluY3JlYXNlIGxldmVsIG9m
IEFUWCBoZWFkaW5ncyBieSBOCgkjICAqID4+TiAgICAgIGluY3JlYXNlIGluZGVudGF0aW9u
IGxldmVsIGJ5IE4gdGFicwoJIyAgKiA+TiAgICAgICBpbmNyZWFzZSBpbmRlbnRhdGlvbiBs
ZXZlbCBieSBOIHNwYWNlcwoJIwoKLlBIT05ZOiBjaGVhdC1tZXRhCmNoZWF0LW1ldGE6Cgkj
CgkjIE1FVEEgREFUQQoJIwoJIyAgLS0tCgkjICB0aXRsZTogRG9jdW1lbnQKCSMgIGRhdGU6
IFRvZGF5CgkjICBhdXRob3I6IE5hbWUKCSMgIGxpbmstY2l0YXRpb25zOiB0cnVlCgkjICBi
aWJsaW9ncmFwaHk6IGJpYmwuYmliCgkjICBmb250c2l6ZS0tcGRmOiAxMXB0CgkjICBmb250
c2l6ZS0taHRtbDogMTBwdAoJIyAgaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KCSMgICAgIFx1
c2VwYWNrYWdley4uLn0KCSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgIGhlYWRlci1pbmNs
dWRlcy0taHRtbDogPgoJIyAgICAgPHNjcmlwdCAuLi4+CgkjICAgICA8bGluayAuLi4+Cgkj
ICAgICA8c3R5bGUgLi4uPgoJIyAgeG5vcy1jbGV2ZXJlZjogdHJ1ZQoJIyAgeG5vcy1jYXBp
dGFsaXNlOiB0cnVlCgkjICAtaGlkZGVuX2ZpZWxkOiB0ZXh0CgkjICAtLS0KCSMKCi5QSE9O
WTogY2hlYXQtbGluawpjaGVhdC1saW5rOgoJIwoJIyBGT1JNQVQgTElOSwoJIwoJIyAgW0xp
bmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5odG1sKQoJIyAgW0xpbmsgdG8gRG9jdW1l
bnRdKHBhdGgvdG8vZmlsZS5wZGYpCgkjICBbRm9ybWF0IExpbmsgdG8gRG9jdW1lbnRdKHBh
dGgvdG8vZmlsZS4/Pz8pCgkjICBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgZm9ybWF0IGxpbmsg
Llw/Pz8KCSMKCi5QSE9OWTogY2hlYXQtY29kZQpjaGVhdC1jb2RlOgoJIwoJIyBGT1JNQVQg
Q09ERQoJIwoJIyAgIGBgYCEKCSMgICBkZWYgdGVzdDFfaHRtbCgpOgoJIyAgICAgICBfKCJU
aGlzIGlzIEhUTUwxISIpCgkjICAgZGVmIHRlc3QxX3BkZigpOgoJIyAgICAgICByZXR1cm4g
IlRoaXMgaXMgXHtQREYxXH0hIgoJIyAgIGRlZiB0ZXN0Ml9odG1sKCk6CgkjICAgICAgIF9f
KCIiIgoJIyAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgIFRoaXMgaXMg
SFRNTDIhCgkjICAgICAgICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAiIiIpCgkjICAg
ZGVmIHRlc3QyX3BkZigpOgoJIyAgICAgICByZXR1cm4gIiIiCgkjICAgICAgICAgICBUaGlz
IGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAg
ICAgIFRoaXMgaXMgXHtQREYyXH0hCgkjICAgICAgICIiIgoJIyAgIGBgYAoJIyAgIFJ1biBG
b3JtYXQgQ29kZSBgP3Rlc3QxKClgIGFuZCBgP3Rlc3QyKClgLgoJIyAgIGBcP3Rlc3QxKClg
IGFuZCBgXD90ZXN0MigpYCBhcmUgbm90IHBhcnNlZC4KCSMKCiMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IwoKLlBIT05ZOiBhbGwKYWxsOiAkKEhUTUwpICQoUERGKQoKLlBIT05ZOiBhbGwtbWsKYWxs
LW1rOiAkKE1LKQoKLlBIT05ZOiBhbGwtbWQKYWxsLW1kOiAkKE1EKQoKLlBIT05ZOiBhbGwt
bGluawphbGwtbGluazogJChNREhUTUwpICQoTURQREYpCgouUEhPTlk6IGFsbC1odG1sCmFs
bC1odG1sOiAkKEhUTUwpCgouUEhPTlk6IGFsbC1wZGYKYWxsLXBkZjogJChQREYpCgouUEhP
Tlk6IGNsZWFuCmNsZWFuOgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8qCgou
UEhPTlk6IGh0dHBkCmh0dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2ZXIK
Ci5QSE9OWTogc2NhbgpzY2FuOiBhbGwtbWsKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKYnVpbGQv
JS5tZC5tazogbWQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21h
cmt5LnB5IC0tbWtkZXAgLS1tYXJreT0iJDwiCgpidWlsZC8lLm1kOiBidWlsZC8lLm1kLm1r
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1tZD0iJEAi
CgpidWlsZC8lLmh0bWwubWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFt
ZSAiJEAiKQoJLi9tYXJreS5weSAtLWxpbmsgaHRtbCAtLW1kPSIkPCIKCmJ1aWxkLyUucGRm
Lm1kOiBidWlsZC8lLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFy
a3kucHkgLS1saW5rIHBkZiAtLW1kPSIkPCIKCmh0bWwvJS5odG1sOiBidWlsZC8lLmh0bWwu
bWQKCWxuIC1zbmYgLi4vZGF0YSBidWlsZC9kYXRhCglta2RpciAtcCAkKHNoZWxsIGRpcm5h
bWUgIiRAIikKCWxuIC1zbmYgLi4vZGF0YSBodG1sL2RhdGEKCXBhbmRvYyAiJDwiIC0tZmls
dGVyIHBhbmRvYy14bm9zIC0tY2l0ZXByb2MgLS1mcm9tPW1hcmtkb3duK3Jhd19odG1sKyQo
TURFTCkgLS10bz1odG1sNSAtLW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9idWls
ZC8iIC0tc2VsZi1jb250YWluZWQgLS10YWJsZS1vZi1jb250ZW50cyAtLW51bWJlci1zZWN0
aW9ucyAtLWNvbHVtbnM9MQoKcGRmLyUucGRmOiBidWlsZC8lLnBkZi5tZAoJbWtkaXIgLXAg
JChzaGVsbCBkaXJuYW1lICIkQCIpCglsbiAtc25mIC4uL2RhdGEgYnVpbGQvZGF0YQoJbG4g
LXNuZiAuLi9kYXRhIHBkZi9kYXRhCglwYW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5v
cyAtLWNpdGVwcm9jIC0tZnJvbT1tYXJrZG93bityYXdfdGV4KyQoTURFTCkgLS10bz1sYXRl
eCAtLW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9idWlsZC8iIC0tdGFibGUtb2Yt
Y29udGVudHMgLS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEgLS1wZGYtZW5naW5lPXhl
bGF0ZXgKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKUFNFVURPPWhlbHAgdHJlZSBjaGVhdCBjbGVh
biBodHRwZCBzY2FuCgpJTkNGTEFHPTAKCmRlZmluZSBMT09QQk9EWQogIGlmZXEgKCQkKGZp
bHRlciAkJChQU0VVRE8pLCQkKEcpKSwpCiAgICBJTkNGTEFHPTEKICBlbmRpZgplbmRlZgoK
aWZuZXEgKCQoTUFLRUNNREdPQUxTKSwpCiAgJChmb3JlYWNoIEcsJChNQUtFQ01ER09BTFMp
LCQoZXZhbCAkKExPT1BCT0RZKSkpCmVuZGlmCgppZmVxICgkKElOQ0ZMQUcpLDEpCiAgLWlu
Y2x1ZGUgJChNSykKZW5kaWYKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwo=
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmxpbmstY2l0YXRpb25zOiB0cnVlCmJp
Ymxpb2dyYXBoeTogZGF0YS9tYXJreS5iaWIKaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KICAg
XGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVyY29sb3JzPXswIDAg
MH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1pbmNsdWRlcy0taHRt
bDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH08L3N0eWxlPgp4
bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpmb250c2l6ZTogMTFw
dAotZmlnc2l6ZTogWzEwLDhdCi1maWdkcGk6IDMwMAotdmVyc2lvbjogdW5kZWZpbmVkCgot
LS0KISEhIC4uL01ha2VmaWxlIGF1eAohISEgLi4vbWFya3kucHkgYXV4CmBgYCEhCglpbXBv
cnQgc3VicHJvY2VzcwoJTUQgPSAiTWFya2Rvd24iCglNID0gImBtYXJreWAiCglNRiA9ICJg
TWFrZWZpbGVgIgoJTVAgPSAiYG1hcmt5LnB5YCIKCU1wID0gIm1hcmt5LnB5IgoJUCA9ICJg
cGFuZG9jYCIKCU5VID0gImBudW1weWAiCglQTCA9ICJgbWF0cGxvdGxpYmAiCglSID0gIlJN
YXJrZG93biIKCVEgPSAiUXVhcnRvIgoJQlQgPSAiYCIKCVAxPSAiYF8oKWAiCglQMj0gImBf
XygpYCIKCXZlcnNpb24gPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbInB5dGhvbiIsICJt
YXJreS5weSIsCgkJIi0tdmVyc2lvbiJdKS5kZWNvZGUoInV0Zi04Iikuc3RyaXAoKQpgYGAK
Ci0tLQoKPiAqKkFic3RyYWN0KiogLS0gYCFNYCBpcyBhIHByZXByb2Nlc3NvciBmb3IgYCFN
RGAgdXNpbmcgUHl0aG9uLgo+IGAhTWAgaXMgaW5zcGlyZWQgYnkgW3BhbmRvY10oaHR0cHM6
Ly93d3cucGFuZG9jLm9yZy8pLAo+IFtgIVJgXShodHRwczovL3JtYXJrZG93bi5yc3R1ZGlv
LmNvbS8pLCBbYCFRYF0oaHR0cHM6Ly9xdWFydG8ub3JnLykuCj4gVGhpcyBkb2N1bWVudCBp
cyBjcmVhdGVkIHVzaW5nIGAhTWAgKFZlcnNpb24gYCF2ZXJzaW9uYCkgYW5kCj4gY29udGFp
bnMgZXhhbXBsZXMgd2hpY2ggaWxsdXN0cmF0ZSB0aGUgZ2VuZXJhdGlvbiBvZgo+IGRvY3Vt
ZW50IGNvbnRlbnQgZm9yIGBodG1sYCBhbmQgYHBkZmAgYW5kIHRoZSBkeW5hbWljYWwgYWRq
dXN0bWVudAo+IG9mIGAhTURgIHRleHQgZHVyaW5nIHByZXByb2Nlc3NpbmcgYmFzZWQgb24g
YHB5dGhvbmAgY29kZS4KPiBUaGUgZnVsbCByYXcgYCFNYCBzb3VyY2UgY29kZSBvZiB0aGlz
IGRvY3VtZW50YXRpb24gYXBwZW5kZWQgYXQKPiB0aGUgZW5kLiBUaGUgYG1hcmt5YCBzb3Vy
Y2UgY29kZSBvZiB0aGlzIGRvY3VtZW50IGNhbiBiZSByZWFkCj4gW2hlcmVdKG1hcmt5LXNy
Yy4/Pz8pLgo+IEZvciBtb3JlIGluZm9ybWF0aW9uIHBsZWFzZSByZWZlciB0byB0aGUKPiBb
YG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcvbWFya3kp
LAo+IFtgbWFya3lgIHF1aWNrc3RhcnRdKHF1aWNrc3RhcnQuPz8/KSBvciB0aGUKPiBzaW1w
bGUgW2BtYXJreWAgZXhhbXBsZV0oZXhhbXBsZS4/Pz8pLgoKCi0tLQoKIyBJbnRyb2R1Y3Rp
b24KCmAhTWAgaXMgYSBgIU1EYCBwcmVwcm9jZXNzb3Igd2hpY2ggdHJhbnNmb3JtcyBhIGAh
TURgIGRvY3VtZW50CnVzaW5nIHB5dGhvbi4gYCFNYCBpbXBsZW1lbnRzIG5ldyBtYXJrdXAg
d2hpY2ggY29udHJvbHMgdGhlIGV4ZWN1dGlvbgpvZiBweXRob24gY29kZSBhbmQgdGhlIGdl
bmVyYXRpb24gYW5kIG1hbmlwdWxhdGlvbiBvZiBgIU1EYCB0ZXh0LgpUaGUgYCFNYCBxdWlj
a3N0YXJ0IGNhbiBiZSBmb3VuZCBbaGVyZV0ocXVpY2tzdGFydC4/Pz8pIGFuZCBhIHZlcnkK
c2ltcGxlIGAhTWAgZXhhbXBsZSBjYW4gYmUgZm91bmQgW2hlcmVdKGV4YW1wbGUuPz8/KS4K
CmAhTWAgb25seSBkZXBlbmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgLiBgIVBgIGlzIHVzZWQg
Zm9yIHJlbmRlcmluZwp0aGUgYCFNRGAgaW50byBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIHN1
cHBvcnRzIHZhcmlvdXMgYCFNRGAKZXh0ZW5zaW9ucyBhbGxvd2luZyBmb3Igc2NpZW50aWZp
YyB3cml0aW5nIHVzaW5nIGVxdWF0aW9ucywgZmlndXJlcywKdGFibGVzLCBjaXRhdGlvbnMg
YW5kIGNvcnJlc3BvbmRpbmcgcmVmZXJlbmNpbmcgbWVjaGFuaXNtIGZvciB0aGUgbGF0dGVy
LgpgcHl5YW1sYCBpcyB1c2VkIGZvciBwYXJzaW5nIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQg
bWF0dGVyIG9mIHRoZQpgIU1EYCB0ZXh0IGlmIGl0IGlzIHByZXNlbnQuCgpXb3JrZmxvdyBm
b3IgY3JlYXRpbmcgYGh0bWxgIG9yIGBwZGZgIHVzaW5nIGAhTWAKCjEuIHVzZXIgd3JpdGVz
IGEgYCFNRGAgdGV4dCBmaWxlIGFuZCBwbGFjZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9y
eSB3aXRoIHRoZSBleHRlbnNpb24gYC5tZGAuIHRoZSBgIU1EYCB0ZXh0IGNvbnRhaW5zCnNw
ZWNpYWwgYCFNYCBtYXJrdXAgd2hpY2ggZXhlY3V0ZXMgcHl0aG9uIGNvZGUgYW5kIG1hbmlw
dWxhdGVzCnRoZSBgIU1EYCB0ZXh0LgoKMi4gYCFNYCB0cmFuc2Zvcm1zIHRoZSBmaWxlcyBp
biBgbWQvKi5tZGAgaW50byByZWd1bGFyIGAhTURgIHRleHQKYW5kIHBsYWNlcyB0aGUgdHJh
bnNmb3JtZWQgZmlsZXMgaW4gYGJ1aWxkLyoubWRgLiBUaGUgdHJhbnNmb3JtZWQgdGV4dApv
bmx5IGNvbnRhaW5zIHJlZ3VsYXIgYCFNRGAsIGFuZCBwbGFjZWhvbGRlcnMgZm9yIGZvcm1h
dCBkZXBlbmRlbnQKb3V0cHV0IGZvciBgaHRtbGAgYW5kIGBwZGZgLgoKMy4gYmVmb3JlIHJl
bmRlcmluZyBgIU1gIHJlcGxhY2VzIHBsYWNlaG9sZGVycyBmb3IgZm9ybWF0IGRlcGVuZGVu
dApvdXRwdXQgd2l0aCBjb250ZW50IGNyZWF0aW5nIGEgdGVtcG9yYXJ5IGZpbGUgd2hpY2gg
b25seSBjb250YWlucwpyZWd1bGFyIGAhTURgIHRleHQgZm9yIGBodG1sYCBhbmQgYHBkZmAg
ZG9jdW1lbnRzIGFjY29yZGluZyB0bwpgIVBgIGAhTURgIHNwZWNpZmljYXRpb24uCgo0LiB0
aGUgcmVndWxhciBgIU1EYCB0ZXh0IGluIHRoZSBmaWxlcyBgYnVpbGQvKi5tZGAgaXMgcmVu
ZGVyZWQgaW50bwpgaHRtbGAgYW5kIGBwZGZgIHVzaW5nIGAhUGAuCgpUaGUgdGhyZWUgc3Rl
cHMgYXJlIGltcGxlbWVudGVkIGluIGAhTVBgIGFuZCBhIGAhTUZgLiBUaGUKZm9sbG93aW5n
IGRvY3VtZW50IGRlc2NyaWJlcyB0aGUgc3BlY2lhbCBgIU1gIG1hcmt1cCBhbmQgc2hvd3MK
aG93IHRvIHVzZSBgIU1QYCBhbmQgdGhlIGAhTUZgLgoKLS0tCgojIFJlbGF0ZWQgV29yayB7
I3NlYzpyZWxhdGVkfQoKRm9yIHNjaWVudGlmaWMgcmVwb3J0aW5nIGFuZCB3cml0aW5nIHVz
dWFsbHkgdHlwZXNldHRpbmcgc3lzdGVtcyBvcgpjb21wbGljdGVkIFdZU0lXWUcgZWRpdG9y
cyBhcmUgdXNlZC4gSW4gb3JkZXIgdG8gc2ltcGxpZnkgdGhlIHdyaXRpbmcKZGlmZmVyZW50
IGFwcHJvYWNoZXMgYW5kIGZyYW1ld29ya3MgaGF2ZSBiZWVuIGRldmVsb3BlZC4KCiogW2Ah
UGBdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcvKSwKKiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rv
d24ucnN0dWRpby5jb20vKQoqIFtRdWFydG9dKGh0dHBzOi8vcXVhcnRvLm9yZy8pCiogW1Nj
aWVudGlmaWMgYCFNRGBdKGh0dHBzOi8vamFhbnRvbGxhbmRlci5jb20vcG9zdC9zY2llbnRp
ZmljLXdyaXRpbmctd2l0aC1tYXJrZG93bi8pCiogW1RlY2huaWNhbCBgIVBgXShodHRwczov
L2xlZS1waGlsbGlwcy5vcmcvcGFuZmx1dGUtZ251cGxvdC8pCgpBbGwgb2YgdGhvc2UgYXBw
cm9hY2hlcyB1c2UgYCFQYCBhcyBhbiB1bmRlcmx5aW5nIGZyYW1ld29yayBmb3IgZG9jdW1l
bnQKY29udmVyc2lvbi4gYCFQYCBpcyBhIHBvd2VyZnVsIGZyYW1ld29yayBmb3IgY29udmVy
c2lvbiBiZXR3ZWVuIGRpZmZlcmVudApkb2N1bWVudCBmb3JtYXRzIGluY2x1ZGluZyBgIU1g
LCBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIGltcGxlbWVudHMgYW4Kb3duIGludGVybmFsIEFT
VCwgaW4gd2hpY2ggZGlmZmVyZW50IGRvY3VtZW50IGZvcm1hdHMgY2FuIGJlIGltcG9ydGVk
IGFuZApleHBvcnRlZC4gVXNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgZG9jdW1lbnQgcmVwcmVz
ZW50YXRpb24sIGAhUGAgYWxsb3dzCnRvIG1vZGlmeSBkb2N1bWVudCB1c2luZyBmaWx0ZXJz
LCB3aGljaCBvcGVyYXRlIG9uIHRoZSBBU1QuIEZpbHRlcnMKY2FuIGJlIHdyaXR0ZW4gaW4g
W2BoYXNrZWxsYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL2ZpbHRlcnMuaHRtbCksCltgbHVhYF0o
aHR0cHM6Ly9wYW5kb2Mub3JnL2x1YS1maWx0ZXJzLmh0bWwpIGFuZApbYHB5dGhvbmBdKGh0
dHBzOi8vcGFuZG9jLm9yZy9maWx0ZXJzLmh0bWwjYnV0LWktZG9udC13YW50LXRvLWxlYXJu
LWhhc2tlbGwpLgoKV2hlcmUgYXMgYCFSYCBhbmQgYCFRYCBhcmUgaW50ZWdyYXRlZCBmcmFt
ZXdvcmtzLCB3aGljaCBhZGRpdGlvbmFsbHkKZGVwZW5kIG9uIGBrbml0cmAsIGBSU3R1ZGlv
YCwgYEp1cHl0ZXJgLCBgIU1gIGRlcGVuZHMgb24gYCFQYCBhbmQgYHB5eWFtbGAKb25seS4g
YCFNYCBuYXRpdmVseSBvbmx5IHN1cHBvcnRzIGV4ZWN1dGFibGUgcHl0aG9uIGNvZGUgYmxv
Y2tzLCBob3dldmVyLApvdGhlciBsYW5ndWFnZXMgY2FuIGJlIGV4ZWN1dGVkIHVzaW5nIHdy
YXBwZXJzLCB3aGljaCBhcmUgYXZhaWxhYmxlIGZvcgpvdGhlciBsYW5ndWFnZXMuCgotLS0K
CiMgYCFNYCBGZWF0dXJlcyB7I3NlYzpmZWF0dXJlc30KCmAhTWAgaW1wbGVtZW50cyBmb2xs
b3dpbmcgZmVhdHVyZXMgdXNpbmcgYW4gc2ltcGxlIGAhTURgLXN0eWxlIHN5bnRheC4KCjEu
IHJlYWQgYCFNRGAgbWV0YSBkYXRhIGZyb20gZnJvbnQgbWF0dGVyLApzZWUgQHNlYzptZXRh
ZGF0YQpgYGBtZAoJLS0tCgkJPGtleT46IDx2YWx1ZT4KCS0tLQpgYGAKCjIuIGV4ZWN1dGUg
YW5kIGhpZGUvc2hvdyBweXRob24gY29kZSBibG9ja3MgaW5zaWRlIGAhTURgIHRleHQsCnNl
ZSBAc2VjOmJsb2NrCmBgYG1kCglgIUJUKjNgIQoJCTxweXRob25fY29kZV9zaG93bj4KCWAh
QlQqM2AKCglgIUJUKjNgISEKCQk8cHl0aG9uX2NvZGVfaGlkZGVuPgoJYCFCVCozYApgYGAK
CjMuIGdlbmVyYXRlIGAhTURgIHRleHQgdXNpbmcgcHl0aG9uIGNvZGUsIHNlZSBAc2VjOm1k
cHJpbnQKYGBgbWQKCWAhQlQqM2AhCgkJXygiPG1hcmtkb3duX3RleHQ+IikKCQlfXygiIiIK
CQkJPG1hcmtkb3duX3RleHQ+CgkJCTxtYXJrZG93bl90ZXh0PgoJCQk8bWFya2Rvd25fdGV4
dD4KCQkiIiIpCglgIUJUKjNgCmBgYAoKNC4gZm9ybWF0IG91dHB1dCBvZiBweXRob24gdmFy
aWFibGVzIGludG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6Zm9ybWF0CmBgYG1kCglPdXRwdXQg
aW50byB0ZXh0OiBgXCE8cHl0aG9uX3ZhcmlhYmxlPmAKYGBgCgo1LiBvdXRwdXQgdGhlIHJl
c3VsdCBvZiBweXRob24gZXhwcmVzc2lvbnMgaW50byBgIU1EYCB0ZXh0LApzZWUgQHNlYzpp
bmxpbmUKYGBgbWQKCU91dHB1dCBpbnRvIHRleHQ6IGBcITxweXRob25fZXhwcmVzc2lvbj5g
CmBgYAoKNi4gaW5jbHVkZSBgIU1EYCB0ZXh0LCBtYWtlIGRlcGVuZGVuY2llcyBhbmQgZm9y
d2FyZCBtZXRhIGRhdGEsCnNlZSBAc2VjOmluY2x1ZGUgYW5kICFAc2VjOmluY21ldGEuCmBg
YG1kCgkhISEgaW5jbHVkZV9maWxlLm1kaQpgYGAKCjcuIGZvcm1hdCBsaW5rcyBpbiBgaHRt
bGAgYW5kIGBwZGZgIGRvY3VtZW50cyBmb3IKcmVmZXJlbmNpbmcgZXh0ZXJuYWwgZG9jdW1l
bnRzIG9mIHRoZSBzYW1lIGZvcm1hdCwKc2VlIEBzZWM6Zm9ybWxpbmsuCmBgYG1kCglbRm9y
bWF0IExpbmsgdG8gaHRtbC9wZGYgZG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5cPz8/KQpgYGAK
CjguIHVzZSBmb3JtYXQgY29kZXMgaW4gb3JkZXIgdG8gaW5qZWN0IGZvcm1hdCBzcGVjaWZp
Ywpjb2RlIGluIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLApzZWUgQHNlYzpmb3JtY29k
ZS4KYGBgbWQKCWAhQlQqM2AhCgkJZGVmIGNvZGVfaHRtbCgpOgoJCQlfKCI8SFRNTF9DT0RF
PiIpCgkJCXJldHVybiAiIiIKCQkJCTxNT1JFX0NPREU+CgkJCQk8TU9SRV9DT0RFPgoJCQkJ
PE1PUkVfQ09ERT4KCQkJIiIiCgkJZGVmIGNvZGVfcGRmKCk6CgkJCV9fKCIiIgoJCQkJe1RF
WF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkiIiIpCglgIUJUKjNg
CgoJRm9ybWF0IGRlcGVuZGVudCBvdXRwdXQ6IGBcIWNvZGUoKWAKYGBgCgotLS0KCiMgU2Np
ZW50aWZpYyBXcml0aW5nIGluIGAhTURgIHsjc2VjOnBhbm1kfQoKW2AhTURgXShodHRwczov
L3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjcGFuZG9jcy1tYXJrZG93bikgaXMgYSBtYXJrdXAK
bGFuZ3VhZ2UgZm9yIHRlY2huaWNhbCB3cml0aW5nLCB3aXRoIGVtcGhhc2lzIG9uIHJlYWRh
YmlsaXR5LiBgIU1EYApjYW4gYmUgcmVuZGVyZWQgaW4gbWFueSBmb3JtYXRzIGluY2x1ZGlu
ZyBgaHRtbGAgYW5kIGBwZGZgIGJ5IHVzaW5nCltgIVBgXShodHRwczovL3BhbmRvYy5vcmcv
KSBmb3IgZXhhbXBsZS4KClVzaW5nIHZhcmlvdXMgYCFNRGAgZXh0ZW5zaW9ucyBvZiBgIVBg
IGEgc3VmZmljaWVudCBzdHJ1Y3R1cmUgZm9yCndyaXRpbmcgc2NpZW50aWZpYyBkb2N1bWVu
dHMgY2FuIGJlIHJlZmxlY3RlZCB1c2luZyBgIU1EYCBzeW50YXguCmAhTWAgdXNlcyB0aGUg
Zm9sbG93aW5nIGAhUGAgYCFNRGAgZXh0ZW5zaW9ucy4KKiBwYXJzaW5nIGV4dGVuc2lvbnMK
CSogW2FsbF9zeW1ib2xzX2VzY2FwYWJsZV0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi1hbGxfc3ltYm9sc19lc2NhcGFibGUpCgkqIFtpbnRyYXdvcmRfdW5k
ZXJzY29yZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW50
cmF3b3JkX3VuZGVyc2NvcmVzKQoJKiBbZXNjYXBlZF9saW5lX2JyZWFrc10oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1lc2NhcGVkX2xpbmVfYnJlYWtzKQoJ
KiBbc3BhY2VfaW5fYXR4X2hlYWRlcl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I2V4dGVuc2lvbi1zcGFjZV9pbl9hdHhfaGVhZGVyKQoJKiBbbGlzdHNfd2l0aG91dF9wcmVj
ZWRpbmdfYmxhbmtsaW5lXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLWxpc3RzX3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZSkKKiBzdHlsaW5nIGV4dGVu
c2lvbnMKCSogW2lubGluZV9jb2RlX2F0dHJpYnV0ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5lX2NvZGVfYXR0cmlidXRlcykKCSogW3N0cmlr
ZW91dF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zdHJpa2Vv
dXQpCiogc3RydWN0dXJpbmcgZXh0ZW5zaW9ucwoJKiBbeWFtbF9tZXRhZGF0YV9ibG9ja10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi15YW1sX21ldGFkYXRh
X2Jsb2NrKQoJKiBbcGlwZV90YWJsZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tcGlwZV90YWJsZXMpCgkqIFtsaW5lX2Jsb2Nrc10oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1saW5lX2Jsb2NrcykKCSogW2ltcGxpY2l0
X2ZpZ3VyZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW1w
bGljaXRfZmlndXJlcykKCSogW2FiYnJldmlhdGlvbnNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24tYWJicmV2aWF0aW9ucykKCSogW2lubGluZV9ub3Rlc10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbmxpbmVfbm90ZXMp
CiogY29kZSBpbmplY3Rpb24KCSogW3Jhd19odG1sXShodHRwczovL3BhbmRvYy5vcmcvTUFO
VUFMLmh0bWwjZXh0ZW5zaW9uLXJhd19odG1sKQoJKiBbcmF3X3RleF0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1yYXdfdGV4KQoKYCFQYCBzdXBwb3J0cwpb
ZXF1YXRpb25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXRl
eF9tYXRoX2RvbGxhcnMpCnJlbmRlcmVkIGlubGluZSBhbmQgc2luZ2xlLWxpbmUgaW4gdGV4
LXN0eWxlIHVzaW5nIGAkLi4uJGAgYW5kIGAkJC4uLiQkYCwKW2JpYmxpb2dyYXBoeV0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2NpdGF0aW9ucykKdXNpbmcgdGhlIGAtLWNp
dGVwcm9jYCBvcHRpb24sCltzZWN0aW9uIG51bWJlcmluZ10oaHR0cHM6Ly9wYW5kb2Mub3Jn
L01BTlVBTC5odG1sI2V4dGVuc2lvbi1oZWFkZXJfYXR0cmlidXRlcykKdXNpbmcgdGhlIGAt
LW51bWJlci1zZWN0aW9uc2Agb3B0aW9uIGFuZApbdGFibGUgb2YgY29udGVudHNdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNvcHRpb24tLXRvYykKdXNpbmcgdGhlIGAtLXRh
YmxlLW9mLWNvbnRlbnRzYCBvcHRpb24uCgpgIVBgIHN1cHBvcnRzIFtgeG5vc2BdKGh0dHBz
Oi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKSBmaWx0ZXJzCmZvciByZWZlcmVu
Y2luZyBkb2N1bWVudCBjb250ZW50IGxpa2UKW2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNv
bS90b21kdWNrL3BhbmRvYy1maWdub3MjdXNhZ2UpLApbZXF1YXRpb25zXShodHRwczovL2dp
dGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZXFub3MjdXNhZ2UpLApbdGFibGVzXShodHRwczov
L2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtdGFibGVub3MjdXNhZ2UpLApbc2VjdGlvbnNd
KGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjdXNhZ2UpCmJ5IHVz
aW5nIHRoZSBgLS1maWx0ZXIgcGFuZG9jLXhub3NgIG9wdGlvbi4KYHhub3NgIGludGVncmF0
ZXMgY2xldmVyIHJlZmVyZW5jZXMsIHdoaWNoIG1lYW5zICJGaWcuIiwgIlNlYy4iLCAiRXEu
IgphbmQgIlRhYi4iIGFyZSBhZGRlZCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBjb3JyZXNwb25k
aW5nIGVsZW1lbnQuCklmIHRoZSBwcmVmaXggaXMgdG8gYmUgb21pdHRlZCwgdGhlIHJlZmVy
ZW5jZSBjYW4gYmUgd3JpdHRlbiBhcwpgXCFAcmVmOmxhYmVsYC4KCioqRXhhbXBsZSoqCmBg
YG1kCiMjIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZl
cmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFn
ZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TClVoRVVnQUFBQVVBQUFBRkNBWUFBQUNO
YnlibEFBQUFIRWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERICnhnbGpOQkFBTzlUWEww
WTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJl
bmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8
MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlv
biB7I3RibDpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQk
XG1ib3h7ZX1ee1xtYm94e2l9XHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVm
ZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNd
LgpgYGAKClRoZSBmaWxlIGBtYXJreS5iaWJgIGlzIHNwZWNpZmllZCBpbiB0aGUgbWV0YSBk
YXRhIGluIHRoZSBmcm9udAptYXR0ZXIgb2YgdGhlIGAhTURgIHRleHQgYW5kIGNvbnRhaW5z
IHRoZSBmb2xsb3dpbmcgYXJ0aWNsZS4KCmBgYGJpYnRleAohISEgLi4vZGF0YS9tYXJreS5i
aWIgcmF3CmBgYAoKKipPdXRwdXQqKgoKIyMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxh
YmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRo
ZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVV
Z0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJL
RTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9
CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0t
LXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTog
VGhpcyBpcyB0aGUgY2FwdGlvbi4geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNl
IHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9XntpXHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpU
aGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBb
QE11bGxlcjE5OTNdLgoKLS0tCgojIGAhTVBgIENvbW1hbmQtTGluZSBVc2FnZQoKIyMgYCFN
UGAgU2NyaXB0IFVzYWdlCgpgIU1gIGlzIHN1cHBsaWVkIGFzIGEgc2luZ2xlLWZpbGUgc2Ny
aXB0IHdoaWNoIGNvbnRhaW5zIHRoZSBgIU1gCmAhTUZgIGFzIHdlbGwgYXMgdGhlIGAhTWAg
ZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBgbWFya3kubWRpYAphbmQgYG1hcmt5LmJpYmAu
CgpBZnRlciBkb3dubG9hZGluZyBgIU1QYCB0aGUgc2NyaXB0IG5lZWRzIHRvIGJlIHBsYWNl
ZCBpbiBhIHByb2plY3QKd29ya2luZyBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYC4gVGhlIHNj
cmlwdCBjYW4gYmUgaW52b2tlZCB1c2luZwphIHB5dGhvbiBpbnRlcnByZXRlciBgcHl0aG9u
YCBgIU1wYCBvciBpdCBjYW4gYmUgZXhlY3V0ZWQgdXNpbmcgYQpzaGVsbDoKYGBgYmFzaAo+
IGNkIHdvcmtpbmdfZGlyCj4gY2htb2QgK3ggbWFya3kucHkKPiAuL21hcmt5LnB5CmBgYAoK
QSBuZXcgcHJvamVjdCBpcyBpbml0aWFsaXplZCBpbiB0aGUgYHdvcmtpbmdfZGlyYCB1c2lu
ZyB0aGUgYC0taW5pdGAKb3B0aW9uLiBgIU1gIGNyZWF0ZXMgYSBkaXJlY3RvcnkgdHJlZSBm
b3IgdGhlIHByb2plY3QsIHdoaWNoIGlzCmV4cGxhaW5lZCBpbiBkZXRhaWwgaW4gQHNlYzpw
cm9qZWN0LiBUaGUgYCFNYCBgIU1GYCBhbmQKZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBg
bWFya3kubWRpYCBhbmQgYG1hcmt5LmJpYmAgYXJlIGF1dG8tZ2VuZXJhdGVkCmFuZCBwbGFj
ZWQgaW5zaWRlIHRoZSBzdWJkaXJzIGBtZC9gIGFuZCBgZGF0YS9gIGluIGB3b3JraW5nX2Rp
cmAKYWNjb3JkaW5nbHkuCmBgYGJhc2gKPiBjZCB3b3JraW5nX2Rpcgo+IC4vbWFya3kucHkg
LS1pbml0CldSSVRFIC4vTWFrZWZpbGUKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAuL21k
L21hcmt5Lm1kaQpXUklURSAuL2RhdGEvbWFya3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBg
CjIuIGBtYWtlIGFsbC1odG1sIGh0dHBkYAozLiBgbWFrZSBhbGwtcGRmYApgYGAKCmAhTWAg
cmVuZGVycyB0aGUgZG9jdW1lbnRhdGlvbiB1c2luZyBgIVBgIGludG8gYGh0bWxgIGFuZApg
cGRmYCB1c2luZyBgbWFrZSBhbGxgLiBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBjYW4g
YmUgcmVuZGVyZWQgYWZ0ZXIKaW5zdGFsbGluZyB0aGUgZGVwZW5kZW5jaWVzIGBweXRob24t
cHl5YW1sYCwgYHBhbmRvY2AgYW5kIGBwYW5kb2MteG5vc2AKKGBwYW5kb2MtZmlnbm9zYCwg
YHBhbmRvYy1zZWNub3NgLCBgcGFuZG9jLWVxbm9zYCwgYHBhbmRvYy10YWJsZW5vc2ApLgpU
aGUgZGV0YWlscyBhcmUgc2hvd24gaW4gdGhlIGAhTUZgIGhlbHAgbWVzc2FnZSBpbiBAc2Vj
Om1ha2VmaWxlLgoKIyMgYCFNYCBQcm9qZWN0IFN0cnVjdHVyZSB7I3NlYzpwcm9qZWN0fQoK
QSBgIU1gIHByb2plY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlLCB3aGljaCBpcyBh
dXRvLWdlbmVyYXRlZAppbiB0aGUgcHJvamVjdCBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYCBh
ZnRlciBpbnZvY2F0aW9uIG9mCmAhTXBgIGAtLWluaXRgLgpgYGAhIQoJdGV4dCA9ICIiCglm
b3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJCSJ0cmVlIl0pLmRl
Y29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJ
dGV4dCArPSBpICsgIlxuIgpgYGAKCmBgYApgIXRleHRgCmBgYAoKQnkgaW52b2tpbmcgYG1h
a2UgYWxsYCBhbGwgZmlsZXMgYG1kLyoubWRgIGFyZSB0cmFuc2Zvcm1lZAppbnRvIGNvcnJl
c3BvbmRpbmcgYGh0bWwvKi5odG1sYCBhbmQgYHBkZi8qLnBkZmAgZmlsZXMuIEJ5Cmludm9r
aW5nIGBtYWtlIGh0dHBkYCBhIHB5dGhvbiB3ZWIgc2VydmVyIGlzIHN0YXJ0ZWQgaW4gYGh0
bWwvYC4KCkFsbCB1c2VyLWdlbmVyYXRlZCBwcm9qZWN0IGNvbnRlbnQgZ29lcyBpbnRvIGBt
ZC8qLm1kKGkpYCBmb3IKYCFNRGAgdGV4dCBhbmQgYCFNRGAgaW5jbHVkZSBmaWxlcyBhbmQg
YGRhdGEvKmAgZm9yIGltYWdlcywKYmlibGlvZ3JhcGh5LCB2aWRlb3MsIGh0bWwgZnJhbWVz
LCBldGMuLi4KCioqQVRURU5USU9OOioqIFRoZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMg
YGJ1aWxkLyoubWRgIGFyZQoqKmF1dG8tZ2VuZXJhdGVkKiouIEFsbCB1c2VyLWdlbmVyYXRl
ZCBjb250ZW50IGAqLm1kYCBhbmQgYCoubWRpYApoYXMgdG8gYmUgcGxhY2VkIGluc2lkZSB0
aGUgZGlyZWN0b3J5IGBtZC9gLiBJbnZva2luZyBgbWFrZSBjbGVhbmAKd2lsbCBkZWxldGUg
YWxsIGZpbGVzIGluIGBodG1sL2AsIGBidWlsZC9gIGFuZCBgcGRmL2AuCgojIyBgIU1gIE1h
a2VmaWxlIFVzYWdlIHsjc2VjOm1ha2VmaWxlfQoKQnkgcnVubmluZyBgbWFrZWAgb3IgYG1h
a2UgaGVscGAgaW4gdGhlIHByb2plY3QgYHdvcmtpbmdfZGlyYCB0aGUKYCFNRmAgaGVscCBp
cyBzaG93bi4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19v
dXRwdXQoWyJtYWtlIiwKCQkiaGVscCJdKS5kZWNvZGUoInV0Zi04Iikuc3BsaXQoIlxuIik6
CgkJaWYgaS5zdGFydHN3aXRoKCIjIik6CgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAK
YCF0ZXh0YApgYGAKCiMjIGAhTWAgQ2hlYXQgU2hlZXQKCkJ5IHJ1bm5pbmcgYG1ha2UgY2hl
YXRgIGluIHRoZSBwcm9qZWN0IGB3b3JraW5nX2RpcmAgdGhlIGAhTWAgY2hlYXQKc2hlZXQg
aXMgc2hvd24sIHdoaWNoIHByZXNlbnRzIGEgcXVpY2sgb3ZlcnZpZXcgb2YgYCFNYCBzcGVj
aWFsCm1hcmt1cCBmb3IgZXhlY3V0aW9uIG9mIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRp
b24gb2YgYCFNRGAgdGV4dCwKYWNjb3JkaW5nIHRvIHRoZSBmZWF0dXJlcyBkZXNjcmliZXMg
aW4gQHNlYzpmZWF0dXJlcy4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vz
cy5jaGVja19vdXRwdXQoWyJtYWtlIiwKCQkiY2hlYXQiXSkuZGVjb2RlKCJ1dGYtOCIpLnNw
bGl0KCJcbiIpOgoJCWlmIGkuc3RhcnRzd2l0aCgiIyIpOgoJCQlpID0gaS5yZXBsYWNlKHIi
Llw/Pz8iLCByIi5cXD8/PyIpCgkJCWkgPSBpLnJlcGxhY2UociIuPz8/IiwgciIuXD8/PyIp
CgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApgYGAKCi0tLQoKIyBgIU1g
IFByZXByb2Nlc3NvciBNYXJrdXAKCiMjIFlhbWwgTWV0YSBEYXRhIGluIEZyb250IE1hdHRl
ciB7I3NlYzptZXRhZGF0YX0KCk1ldGEgZGF0YSBpcyBhbm5vdGF0ZWQgaW4gdGhlIGZyb250
IG1hdHRlciBvZiBhIGAhTURgIHRleHQgZG9jdW1lbnQuClRoZSBmcm9udCBtYXR0ZXIgbXVz
dCBzdGFydCBpbiB0aGUgZmlyc3QgbGluZSB3aXRoIGAtLS1gIGFuZCBwcmVjZWRlcyBhbGwK
b3RoZXIgdGV4dCBiZWluZyBmZW5jZWQgYnkgYC0tLWAuIFRoZSBtZXRhIGRhdGEgaXMgaW4g
YHlhbWxgIGZvcm1hdC4KVGhlIGB5YW1sYCBibG9jayBpcyBwYXJzZWQgdXNpbmcgYHB5dGhv
bi1weXlhbWxgLiBCeSBkZWZhdWx0IGFsbCBtZXRhCmRhdGEgaXMgaW1wb3J0ZWQgaW50byB0
aGUgcHJlcHJvY2Vzc2VkIGRvY3VtZW50LiBJZiBhIG1ldGEKZGF0YSBrZXkgc3RhcnRzIHdp
dGggYC1gIHRoZSBrZXkgaXMgbm90IGltcG9ydGVkIGludG8gdGhlIHJlc3VsdGluZwptZXRh
IGRhdGEgb2YgdGhlIHByZXByb2Nlc3NlZCBkb2N1bWVudCwgaG93ZXZlciB0aGUga2V5IHdp
bGwgYmUKZXhwb3NlZCBpbnRvIHRoZSBweXRob24gc2NvbGUgYXMgYSBsb2NhbCB2YXJpYWJs
ZS4gSW4gdGhlIGZvbGxvd2luZwpleG1hbXBsZSBhbGwga2V5cyBleGNlcHQgYGZpZ3NpemVg
LCBgZmlnZHBpYCBhbmQgYHZlcnNpb25gIGFyZSBjb3BpZWQKaW50byB0aGUgcHJlcHJvY2Vz
c2VkIGAhTURgIGRvY3VtZW50LgoKKipFeGFtcGxlKioKYGBgeWFtbAoKLS0tCnRpdGxlOiBg
IXRpdGxlYApkYXRlOiBgRGF0ZWAKYXV0aG9yOiBgQXV0aG9yYApsaW5rLWNpdGF0aW9uczog
YCFsaW5rX2NpdGF0aW9uc2AKYmlibGlvZ3JhcGh5OiBgIWJpYmxpb2dyYXBoeWAKaGVhZGVy
LWluY2x1ZGVzLS1wZGY6ID4KICBcaHlwZXJzZXR1cHsKICBjb2xvcmxpbmtzPWZhbHNlLAog
IGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19
CmhlYWRlci1pbmNsdWRlcy0taHRtbDogPgogIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9y
ZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IGAheG5vc19jbGV2ZXJlZmAKeG5v
cy1jYXBpdGFsaXNlOiBgIXhub3NfY2FwaXRhbGlzZWAKZm9udHNpemU6IGAhZm9udHNpemVg
Ci12ZXJzaW9uOiBgIXZlcnNpb25gCi1maWdzaXplOiBgIWZpZ3NpemVgCi1maWdkcGk6IGAh
ZmlnZHBpYAoKLS0tCgpgYGAKClRoZSBtZXRhIGRhdGEgZmllbGRzCltgdGl0bGVgLCBgZGF0
ZWAsIGBhdXRob3JgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjbWV0YWRhdGEt
dmFyaWFibGVzKSwKW2BsaW5rLWNpdGF0aW9uc2BdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNvdGhlci1yZWxldmFudC1tZXRhZGF0YS1maWVsZHMpLApbYGJpYmxpb2dyYXBo
eWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNjaXRhdGlvbi1yZW5kZXJpbmcp
IGFuZApbYGhlYWRlci1pbmNsdWRlc2BdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCN2YXJpYWJsZXMtc2V0LWF1dG9tYXRpY2FsbHkpCmFyZSBwcm9jZXNzZWQgYnkgYCFQYCBk
dXJpbmcgZG9jdW1lbnQgcmVuZGVyaW5nLiBgZm9udHNpemVgIGFkanVzdHMgdGhlCmZvbnQg
c2l6ZSBpbiBbYGh0bWxgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjdmFyaWFi
bGVzLWZvci1odG1sKQphbmQgW2BwZGZgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0
bWwjdmFyaWFibGVzLWZvci1sYXRleCkgZG9jdW1lbnRzLgpUaGUgYGhlYWRlci1pbmNsdWRl
c2AgZmllbGQgaXMgdXNlZCBmb3IgdW5kZXJsaW5pbmcgbGlua3MgaW4gYHBkZmAKYW5kIGBo
dG1sYCBkb2N1bWVudHMuIFRoZSBgeG5vcy1jbGV2ZXJlZmAgYW5kIGB4bm9zLWNhcGl0YWxp
c2VgCmZpZWxkcyBhcmUgdXNlZCBieSB0aGUgW2BwYW5kb2MteG5vc2BdKGh0dHBzOi8vZ2l0
aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKQpleHRlbnNpb25zIGZvciByZWZlcmVuY2lu
ZwpbZmlndXJlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWZpZ25vcyNj
dXN0b21pemF0aW9uKSwKW3RhYmxlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFu
ZG9jLXRhYmxlbm9zI2N1c3RvbWl6YXRpb24pLApbc2VjdGlvbnNdKGh0dHBzOi8vZ2l0aHVi
LmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjY3VzdG9taXphdGlvbikgYW5kCltlcXVhdGlv
bnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1lcW5vcyNjdXN0b21pemF0
aW9uKS4KClRoZSBmaWVsZCBgaGVhZGVyLWluY2x1ZGVzYCBlbmRzIHdpdGggYC0tcGRmYCBh
bmQgYC0taHRtbGAsIHdoaWNoCnNwZWNpZmllcyBjb3JyZXNwb25kaW5nIG9wdGlvbnMgZm9y
IGdlbmVyYXRpb24gb2YgYHBkZmAgYW5kIGBodG1sYApkb2N1bWVudHMuIER1cmluZyBtYWtl
LCBgIU1gIHNjYW5zIGFsbCBtZXRhIGRhdGEgZmllbGRzLCBhbmQKZmllbGRzIHdoaWNoIGVu
ZCB3aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgIGFyZSBzZWxlY3RlZCBhbmQgZm9yd2FyZGVk
CnRvIGAhUGAgYmFzZWQgb24gdGhlIGZvcm1hdCB0byBiZSByZW5kZXJlZC4gVGhpcyB3YXMg
Zm9ybWF0IGRlcGVuZGVudAptZXRhIGRhdGEgY2FuIGJlIHNwZWNpZmllZCBpbiBgIU1gIE1h
cmtkb3duIHRleHQuCgpUaGUgYHZlcnNpb25gIGZpZWxkIGlzIGEgdXNlci1kZWZpbmVkIGZp
ZWxkCndoaWNoIHNob3dzIHRoZSB2ZXJzaW9uIG9mIHRoaXMgZG9jdW1lbnQ6ICpgIXZlcnNp
b25gKi4gYGZpZ3NpemVgIGFuZApgZmlnZHBpYCBhcmUgdXNlZCBpbiB0aGlzIGRvY3VtZW50
IHRvIGNvbnRyb2wgdGhlIGZpZ3VyZSBzaXplIGFuZApyZXNvbHV0aW9uIGluIHRoZSBgIU5V
YCBhbmQgYCFQTGAgZXhhbXBsZSwgc2VlIEBzZWM6ZXhhbXBsZXMuIFRoZSBmb250CnNpemUg
aXMgYCFmb250c2l6ZWAgYW5kIHRoZSBAZmlnOmZpZ3VyZTEsICFAZmlnOmZpZ3VyZTJfMSwK
IUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMgYW5kICFAZmlnOmZpZ3VyZTJfNCBo
YXZlIGEgc2l6ZSBvZgpgISJ4Ii5qb2luKHN0cihpKSBmb3IgaSBpbiBmaWdzaXplKWBjbS4g
VGhlIGZvbnQgc2l6ZSBhcHBsaWVzIHRvCmJvdGggZG9jdW1lbnQgdGV4dCBhbmQgZmlndXJl
IHRleHQuCgpBcyB0aGUgdXNlci1kZWZpbmVkIGZpZWxkcyBhcmUgcHJlY2VlZGVkIHdpdGgg
YC1gLCB0aGV5IGFyZSBub3QgY29waWVkCmludG8gdGhlIG1ldGEgZGF0YSBvZiB0aGUgcHJl
cHJvY2Vzc2VkIGAhTURgIHRleHQuIFRoZXkgYXJlIG9ubHkKZXhwb3NlZCBpbnRvIHRoZSBw
eXRob24gc2NvcGUgYXMgdmFyaWFibGVzIGZvciBwcm9jZXNzaW5nIHRoZSBgIU1gCmAhTURg
IHRleHQsIGFzIGRlc2NyaWJlZCBpbiBAc2VjOmluY21ldGEuCgojIyBQeXRob24gQ29kZSBC
bG9ja3MgaW5zaWRlIGAhTURgIFRleHQgeyNzZWM6YmxvY2t9CgpQeXRob24gY29kZSBjYW4g
YmUgZXhlY3V0ZWQgZHVyaW5nIHRyYW5zZm9ybWF0aW9uIG9mIHRoZSBgIU1EYCB0ZXh0LgpQ
eXRob24gY29kZSBpcyBkaXJlY3RseSB3cml0dGVuIGluc2lkZSB0aGUgYCFNRGAgdGV4dCBh
bmQgaXMgZmVuY2VkCnVzaW5nIHRoZSBgYCBgIUJUKjNgIGBgIHN0YXRlbWVudC4gVGhlIGJs
b2NrIG5lZWRzIHRvIHN0YXJ0IHdpdGggZWl0aGVyCmBcIWAgb3IgYFwhIWAuCiogYFwhYDog
VGhlIHB5dGhvbiBjb2RlIGlzIGV4ZWN1dGVkIGFuZCAqKnNob3duKiogaW4gdGhlIG91dHB1
dC4KKiBgXCEhYDogVGhlIHB5dGhvbiBjb2RlIGlzIGV4ZWN1dGVkIGFuZCAqKmhpZGRlbioq
IGluIHRoZSBvdXRwdXQuCgpgYGBtZAoJYCFCVCozYCEKCQk8cHl0aG9uX2NvZGVfc2hvd24+
CglgIUJUKjNgCgoJYCFCVCozYCEhCgkJPHB5dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AK
YGBgCgpNZXRhIGRhdGEgZnJvbSBgIU1EYCBmcm9udCBtYXR0ZXIgY2FuIGJlIHVzZWQgYXMg
bG9jYWwgdmFyaWFibGVzIGluCnB5dGhvbiBjb2RlIGJsb2Nrcy4gVGhlIGBpbXBvcnRgIHN0
YXRlbWVudCBjYW4gYmUgdXNlZCBpbiBweXRob24gY29kZQpibG9ja3MgaW4gb3JkZXIgdG8g
YWNjZXNzIGluc3RhbGxlZCBweXRob24gcGFja2FnZXMuIEFsbCBjb2RlIGJsb2NrcwpzcGFu
IG9uZSBsYXJnZSBzY29wZSBmb3Igc2hhcmluZyBmdW5jdGlvbnMgYW5kIGxvY2FsIHZhcmlh
Ymxlcy4KVXNpbmcgdGhlIGBwcmludCgpYCBmdW5jdGlvbiB0aGUgdGV4dCB3aWxsIGJlIHBy
aW50ZWQgdG8gdGhlIGNvbnNvbGUKYW5kICoqbm90KiogaW5zaWRlIHRoZSByZXN1bHRpbmcg
YCFNRGAgdGV4dC4gSW4gb3JkZXIgdG8gbW9kaWZ5CnRoZSBgIU1EYCB0ZXh0IHVzaW5nIGAh
TWAgZHVyaW5nIHByZXByb2Nlc3NpbmcsIHRoZSBgIVAxYCBzdGF0ZW1lbnQKaGFzIHRvIGJl
IHVzZWQsIHNlZSBAc2VjOm1kcHJpbnQuCgoqKkV4YW1wbGUqKgpgYGAhCglpbXBvcnQgbnVt
cHkgYXMgbnAKCWRlZiBnZXRfeChhPTApOgoJCXJldHVybiBucC5hcnJheShbNDEgKyBhXSkK
CXkgPSAxCmBgYAoKVGhpcyBpcyBhIHBhcmFncmFwaC4KCmBgYCEKCXggPSBnZXRfeCh5KQoJ
cHJpbnQoIkhlbGxvIENvbnNvbGUhIHggaXMiLCB4KQpgYGAKCiMjIEdlbmVyYXRpb24gb2Yg
YCFNRGAgVGV4dCB1c2luZyBQeXRob24gQ29kZSB7I3NlYzptZHByaW50fQoKIyMjIFRoZSBg
IVAxYCBTdGF0ZW1lbnQKClVzaW5nIHRoZSBgcHJpbnQoKWAgc3RhdGVtZW50IHRoZSB0ZXh0
IHdpbGwgYmUgcHJpbnRlZCB0byB0aGUgY29uc29sZS4KV2hlbiB1c2luZyB0aGUgYCFQMWAg
YW5kIGAhUDJgIHN0YXRlbWVudHMgbmV3IGAhTURgIHRleHQgY2FuIGJlCmluc2VydGVkIGR5
bmFtaWNhbGx5IGludG8gdGhlIGRvY3VtZW50IGR1cmluZyBwcmVwcm9jZXNzaW5nLgoKKipg
IVAxYCBTdGF0ZW1lbnQqKgoqIGBfKCphcmdzLCBzZXA9IiAiKWA6CgkxLiBjb252ZXJ0IGFy
Z3VtZW50cyB0byBzdHJpbmcKCTIuIGpvaW4gYXJndW1lbnRzIHVzaW5nIGBzZXBgCiogYF8o
XywgKmFyZ3MgICApYDogYXBwZW5kIHRvIHByZXZpb3VzIG91dHB1dAoqIGBfKF8sICphcmdz
LCBfKWA6IGFwcGVuZCB0byBwcmV2aW91cyBvdXRwdXQgYW5kIGFwcGVuZCBuZXh0IG91dHB1
dAoqIGBfKCAgICphcmdzLCBfKWA6IGFwcGVuZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1
dAoKKipgIVAyYCBTdGF0ZW1lbnQqKgoqIGBfXyhhcmcsIGNyb3A9VHJ1ZSwgc2hpZnQ9IiIp
YDoKCTEuIGNvbnZlcnQgYGFyZ2AgdG8gc3RyaW5nCgkyLiBjcm9wIGFuZCBwcmVwZW5kIGBz
aGlmdGAgc3RyaW5nIHRvIGVhY2ggbGluZQoqIGBfXyhhcmcsIF8pYDogYXBwZW5kIG5leHQg
b3V0cHV0IHRvIHRoaXMgb3V0cHV0CgoqKkNyb3AgYW5kIFNoaWZ0KioKYGBgcHkKZGVmIHRl
c3QoKToKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDEKCSIiIikK
CV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVsIDIKCQkgICAgKiBMaXN0
IExldmVsIDMKCSIiIiwgc2hpZnQ9IiAiKjQpCmBgYAoKYGBgbWQKKiBMaXN0IExldmVsIDEK
KiBMaXN0IExldmVsIDEKICAgICogTGlzdCBMZXZlbCAyCiAgICAqIExpc3QgTGV2ZWwgMgog
ICAgICAgICogTGlzdCBMZXZlbCAzCmBgYAoKKipFeGFtcGxlKioKYGBgIQoJeSArPSAxCglf
XyhmIiIiCgkJKiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259Ki4KCQkqIFRo
aXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJIiIiKQoJX18oZiIiIgoJCTEu
IFRoaXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJCTIuIFRoaXMgaXMgYG1h
cmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJIiIiLCBzaGlmdD0iICIqNCkKYGBgCgpgYGAh
CglfKCJUaGlzIiwgXykKCV8oImlzIikKCV8oXywgIiBvbmUiLCBfKQoJXygibGluZSEgbm90
IGVuZGluZyB3aXRoIFxcIikKCV8oInRoaXM/IikKYGBgCgpgYGAhCglfKGYiSGVsbG8gTWFy
a2Rvd24hIHggaXMgKip7eH0qKiBhbmQgeSBpcyAqe3l9KiIpCmBgYAoKIyMjIEluZGVudGF0
aW9uIG9mIHRoZSBgIVAxYCBTdGF0ZW1lbnQKClRoZSBgIVAxYCBzdGF0ZW1lbnQgbmVlZHMg
dG8gYmUgaW5kZW50ZWQgYWNjb3JkaW5nIHRvIHRoZSBweXRob24gcHJvZ3JhbQpmbG93IChg
Zm9yYCwgYHdoaWxlYCwgYGlmYCwgYGVsc2VgLCBgdHJ5YCwgYHdpdGhgLCBgZGVmYCwgYGNs
YXNzYCkgYW5kCnN1cHBvcnRzIGR5bmFtaWMgaW5zZXJ0aW9uIG9mIGAhTURgIHRleHQgaW50
byB0aGUgZG9jdW1lbnQgYmFzZWQKb24gbG9vcHMgYW5kIGNvbmRpdGlvbnMuCgoqKkV4YW1w
bGUgMSoqCgpgYGAhCglfKCJUaGlzIGlzIHRoZSAqKmdlbmVyYXRlZCBvdXRwdXQqKjoiKQoJ
XygiIikKCV8oIj4gVGhpcyBpcyBhICpsaXN0aW5nKjoiKQoJdGV4dCA9IFsiemVybyIsICJv
bmUiLCAidHdvIiwgInRocmVlIl0KCWZvciBpIGluIHJhbmdlKDEwKToKCQlpZiBpIDwgMjoK
CQkJXyhmIj4ge2l9IikKCQllbGlmIGkgPT0gMjoKCQkJaiA9IHRleHRbaV0KCQkJXyhmIj4g
e2p9IikKCQllbGlmIGkgPT0gMzoKCQkJXygiIikKCQllbGlmIGkgPCA3OgoJCQlfKGYiPj4g
eycgICAgJyooaS00KX0qIHtpfSIpCgkJZWxpZiBpID09IDc6CgkJCV8oIiIpCgkJZWxzZToK
CQkJaiA9IGkgLSA3CgkJCWsgPSB0ZXh0W2pdCgkJCV8oZiI+IHtqfS4ge2t9IikKYGBgCgoq
KkV4YW1wbGUgMioqCgpAdGJsOnRhYmxlMSBpcyBnZW5lcmF0ZWQgdXNpbmcgdGhlIGZvbGxv
d2luZyBweXRob24gY2xvZGUgYmxvY2suCgpgYGAhCgluID0gMTMKCWRlYyA9IFsiKiVzKiIs
ICIqKiVzKioiLCAifn4lc35+IiwgImAlc2AiLAoJCXIiJFx0aW1lc14lcyQiLCAiJFxpbmZ0
eV8lcyQiXQoJXygifCIuam9pbigiWCIqbikgKyAiXG4iICsgInwiLmpvaW4oIi0iKm4pKQoJ
Zm9yIGkgaW4gcmFuZ2Uobik6CgkJZmlsbCA9IFtjaHIob3JkKCJBIikrKDIqaSszKmspJTI2
KSBmb3IgayBpbiByYW5nZShpKzEpXQoJCWZpbGwgPSBbZGVjWyhsK2kpJWxlbihkZWMpXSVr
IGZvciBsLCBrIGluIGVudW1lcmF0ZShmaWxsKV0KCQl0ZXh0ID0gbGlzdCgiMCIpKm4KCQl0
ZXh0WyhuPj4xKS0oaT4+MSk6KG4+PjEpKyhpPj4xKV0gPSBmaWxsCgkJXygifCIuam9pbih0
ZXh0KSkKYGBgCgpUYWJsZTogVGFibGUgaXMgZ2VuZXJhdGVkIHVzaW5nIGNvZGUgYW5kIHRo
ZSBgIVAxYCBzdGF0ZW1lbnQuIHsjdGJsOnRhYmxlMX0KCiMjIEZvcm1hdHRlZCBPdXRwdXQg
b2YgUHl0aG9uIFZhcmlhYmxlcyB7I3NlYzpmb3JtYXR9CgpgIU1gIGNhbiBvdXRwdXQgcHl0
aG9uIHZhcmlhYmxlcyBpbmxpbmUgaW50byBgIU1EYCB0ZXh0IHVzaW5nCnRoZSBgYCBgXCFW
QVJJQUJMRWAgYGAgc3RhdGVtZW50LiBgVkFSSUFCTEVgIGNhbiBiZSBhbnkgcHl0aG9uIHZh
cmlhYmxlCmZyb20gYSBweXRob24gY29kZSBibG9jayBvciBtZXRhIGRhdGEgZmllbGQuIFRo
ZSBvdXRwdXQgY2FuIGJlCmZvcm1hdHRlZCB1c2luZyB0aGUgYGAgYFwhVkFSSUFCTEVbOkZP
Uk1BVF1gIGBgIHN0YXRlbWVudCBhY2NvcmRpbmcKdG8gdGhlIHB5dGhvbiBvcGVyYXRvciBg
ezx2YXJpYWJsZT5bOjxmb3JtYXQ+XX1gIGltcGxlbWVudGVkIGluIHRoZQpbYHN0ci5mb3Jt
YXQoKWBdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvbGlicmFyeS9zdHJpbmcuaHRtbCNm
b3JtYXRzdHJpbmdzKQpzcGVjaWZpY2F0aW9uLiBUaGUgYGAgYFwhVkFSSUFCTEVgIGBgIHN0
YXRlbWVudCBpcyBlc2NhcGVkCnVzaW5nIGBgIGBcXCFWQVJJQUJMRWAgYGAuCgoqKkV4YW1w
bGUqKgpgYGAhCgl4ID0gaW50KDEpCgl5ID0gZmxvYXQoMi4zKQoJeiA9IDAKCWEgPSBbMSwg
MiwgM10KCWIgPSAoNCwgNSkKYGBgCgpgYGBtZApUaGlzIGlzIGEgcGFyYWdyYXBoIGFuZCB4
IGlzIGBcIXg6MDNkYCBhbmQgeSBpcyBgXCF5Oi4yZmAuCk90aGVyIGNvbnRlbnQgaXM6IGBc
IWFgLCBgXCFiYCBhbmQgZXNjYXBpbmcgd29ya3M6IGBcXCF6YC4KYGBgCgpUaGlzIGlzIGEg
cGFyYWdyYXBoIGFuZCB4IGlzIGAheDowM2RgIGFuZCB5IGlzIGAheTouMmZgLgpPdGhlciBj
b250ZW50IGlzOiBgIWFgLCBgIWJgIGFuZCBlc2NhcGluZyB3b3JrczogYFwhemAuCgojIyBP
dXRwdXQgUmVzdWx0cyBvZiBQeXRob24gRXhwcmVzc2lvbnMgeyNzZWM6aW5saW5lfQoKYCFN
YCBvdXRwdXRzIHJlc3VsdHMgb2YgcHl0aG9uIGV4cHJlc3Npb25zIGlubGluZSBpbnRvIGAh
TURgIHRleHQKdXNpbmcgdGhlIGBgIGBcIUVYUFJFU1NJT05gIGBgIHN0YXRlbWVudC4gYEVY
UFJFU1NJT05gIGNhbiBiZSBhbnkgcHl0aG9uCmV4cHJlc3Npb24uIFRoZSBvdXRwdXQgY2Fu
IGJlIGZvcm1hdHRlZCB1c2luZyB0aGUgcHl0aG9uCmBgIGBcIUVYUFJFU1NJT05bOkZPUk1B
VF1gIGBgIHN0YXRlbWVudCBhY2NvcmRpbmcgdG8gdGhlIHB5dGhvbiBvcGVyYXRvcgpgezxl
eHByZXNzaW9uPls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4gdGhlIHB5dGhvbgpbYGZg
LXN0cmluZ3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxf
YW5hbHlzaXMuaHRtbCNmLXN0cmluZ3MpCnNwZWNpZmljYXRpb24uIFRoZSBgYCBgXCFFWFBS
RVNTSU9OYCBgYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZAp1c2luZyBgYCBgXFwhRVhQUkVTU0lP
TmAgYGAuCgoqKkV4YW1wbGUqKgpgYGBtZApUaGlzIGlzIGEgbGlzdCB3aXRoIHRoZSBudW1i
ZXJzIGBcISIsICIuam9pbihbc3RyKGkpIGZvciBpIGluIGFdKWAuClRoZSByZXN1bHQgb2Yg
dGhlIGZ1bmN0aW9uIGBnZXRfeGAgaXMgYFwhZ2V0X3goKWAgYW5kIGVzY2FwaW5nCndvcmtz
OiBgXFwhZ2V0X3goYlsxXSlbMF1gLgpgYGAKClRoaXMgaXMgYSBsaXN0IHdpdGggdGhlIG51
bWJlcnMgYCEiLCAiLmpvaW4oW3N0cihpKSBmb3IgaSBpbiBhXSlgLgpUaGUgcmVzdWx0IG9m
IHRoZSBmdW5jdGlvbiBgZ2V0X3hgIGlzIGAhZ2V0X3goKWAgYW5kIGVzY2FwaW5nCndvcmtz
OiBgXCFnZXRfeChiWzFdKVswXWAuCgojIyBJbmNsdWRlIFN0YXRlbWVudCBhbmQgTWFrZSBE
ZXBlbmRlbmNpZXMgeyNzZWM6aW5jbHVkZX0KCmAhTWAgc3VwcG9ydHMgaW5jbHVkZSBvZiBg
IU1EYCB0ZXh0IHVzaW5nIHRoZSBgXCEhIWAgc3RhdGVtZW50LgpUaGUgYFwhISFgIHN0YXRl
bWVudCBtdXN0IGJlIG9uIGEgc2luZ2xlIGxpbmUgYW5kIGZvbGxvd3MgdGhlIHBhdGgKb2Yg
dGhlIGluY2x1ZGUgZmlsZS4gVGhlIHBhdGggb2YgdGhlIGluY2x1ZGUgZmlsZSBpcyByZWxh
dGl2ZSB0bwp0aGUgcm9vdCBgIU1EYCBkb2N1bWVudCB3aGljaCBpcyBwcm9jZXNzZWQuIFRo
ZSBwYXRocyBvZiBhbGwKaW5jbHVkZWQgZmlsZXMgYXJlIGNvbGxlY3RlZCBhbmQgYSBgIU1G
YCBydWxlIGlzIGNyZWF0ZWQgYW5kCnN0b3JlZCBpbiBhIGZpbGUgKHBhdGggb2Ygb3V0cHV0
IGAhTURgIHRleHQgYXBwZW5kZWQgd2l0aCBgLm1rYCkuCgpUaGUgYFwhISFgIHN0YXRlbWVu
dCBpcyBlc2NhcGVkIHVzaW5nIGBcXCEhIWAuClRoZSBpbmNsdWRlIHN0YXRlbWVudCAqKmNh
bm5vdCoqIGJlIHVzZWQgaW4gY29kZSBibG9ja3MuIGAhTWAgYCFNRGAKdGV4dCBtdXN0IGhh
dmUgdGhlIGV4dGVuc2lvbiBgLm1kYCBhbmQgaW5jbHVkZSBmaWxlcyBtdXN0IGhhdmUgdGhl
CmV4dGVuc2lvbiBgLm1kaWAKClRoZSBpbmNsdWRlIHN0YXRlbWVudCBzdXBwb3J0cyBmbGFn
cyBmb3IgcGFyc2luZyB0aGUgaW5jbHVkZSBmaWxlLgpgYGBtZApcISEhIFBBVEgvRklMRS5t
ZGkgRkxBR1MKYGBgCgoqKkZsYWdzKioKKiBgYXV4YDogcmVmZXJlbmNlIGFzIE1ha2VmaWxl
IGRlcGVuZGVuY3ksIGJ1dCBkbyBub3QgcHJvY2VzcwoqIGBub2RlcGA6IGRvIG5vdCByZWZl
cmVuY2UgdGhpcyBmaWxlIGFzIE1ha2VmaWxlIGRlcGVuZGVuY3kKKiBgcmF3YDogdGhlIGZp
bGUgaXMgaW5jbHVkZWQgYXMtaXMgd2l0aG91dCBhbnkgcGFyc2luZwoqIGBub21ldGFgOiBt
ZXRhIGRhdGEgaW4gZnJvbnQgbWF0dGVyIGlzIHNraXBwZWQgZHVyaW5nIHBhcnNpbmcKKiBg
bm9ib2R5YDogYWxsIE1hcmtkb3duIHRleHQgaXMgc2tpcHBlZCBkdXJpbmcgcGFyc2luZwoq
IGBub21hcmt5YDogaW5jbHVkZSB0aGUgYCFNRGAgdGV4dCB3aXRob3V0IGFueSBgIU1gIHBy
b2Nlc3NpbmcKKiBgXCFgOiBvbmx5IGluY2x1ZGUgY29kZSBibG9ja3MKKiBgXCEhYDogb25s
eSBpbmNsdWRlIGhpZGRlbiBjb2RlIGJsb2NrcwoqIGA+Pk5gOiBpbmNyZWFzZSB0aGUgaW5k
ZW50YXRpb24gdXNpbmcgYE5gIHRhYnMKKiBgPk5gOiBpbmNyZWFzZSB0aGUgaW5kZW50YXRp
b24gdXNpbmcgYE5gIHNwYWNlcwoqIGAjK05gOiBpbmNyZWFzZSB0aGUgbGV2ZWwgb2YgQVRY
IGhlYWRpbmdzIGAjYC4gVGhlIGhlYWRpbmdzIGFyZQpwYXJzZWQgYWNjb3JkaW5nIHRvIGAh
UGAgZXh0ZW5zaW9ucwooW2JsYW5rX2JlZm9yZV9oZWFkZXJdKGh0dHBzOi8vcGFuZG9jLm9y
Zy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYmxhbmtfYmVmb3JlX2hlYWRlciksCltzcGFjZV9p
bl9hdHhfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LXNwYWNlX2luX2F0eF9oZWFkZXIpKQoKKipFeGFtcGxlKioKYGBgbWQKXCEhISBtYXJreS5t
ZGkgIysyClRoZSBmaWxlIHdhcyBpbmNsdWRlZDogYFwhaW5jbHVkZWRgIGFuZCAkeD1gXCF4
YCQgYW5kICR5PWBcIXlgJC4KYGBgCgohISEgbWFya3kubWRpICMrMgpUaGUgZmlsZSB3YXMg
aW5jbHVkZWQ6IGAhaW5jbHVkZWRgIGFuZCAkeD1gIXhgJCBhbmQgJHk9YCF5YCQuCgpUaGUg
ZmlsZSBgbWFya3kubWRpYCB3YXMgbG9hZGVkIHdpdGggc2hpZnRpbmcgQVRYIGhlYWRpbmdz
IGJ5IDIgd2hpY2gKbWVhbnMgYCMjYCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgaW5jbHVkZWQg
c2VjdGlvbi4gVGhlIGZpbGUgY29udGFpbnM6CmBgYG1kCiEhISBtYXJreS5tZGkgcmF3ID4+
MQpgYGAKVGhlIHVubW9kaWZpZWQgc291cmNlIHdhcyBsb2FkZWQgdXNpbmcgdGhlIGZsYWdz
IGByYXcgPj4xYC4KClRoZSBmaWxlIGBtYXJreS5tZC5ta2AgY29udGFpbnM6CmBgYE1ha2Vm
aWxlCmJ1aWxkL21hcmt5Lm1kOiBcCm1kL21hcmt5Lm1kaQoKLlBIT05ZOiBtZC1tYXJreQpt
ZC1tYXJreTogYnVpbGQvbWFya3kubWQKCi5QSE9OWTogaHRtbC1tYXJreQpodG1sLW1hcmt5
OiBodG1sL21hcmt5Lmh0bWwKCi5QSE9OWTogcGRmLW1hcmt5CnBkZi1tYXJreTogcGRmL21h
cmt5LnBkZgpgYGAKCiMjIEluY2x1ZGUgU3RhdGVtZW50IGFuZCBNZXRhIERhdGEgSW1wb3J0
IHsjc2VjOmluY21ldGF9CgpUaGUgaW5jbHVkZSBzdGF0ZW1lbnQgYFwhISFgIGxvYWRzIGFu
ZCBwYXJzZXMgYW4gYCoubWRpYCBpbmNsdWRlIGZpbGUuClRoZSBgeWFtbGAgbWV0YSBkYXRh
IGluIHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhlIGRvY3VtZW50IGFsc28gaXMgbG9hZGVkCmFu
ZCBwYXJzZWQgaWYgdGhlIGBub21ldGFgIGZsYWcgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUg
aW5jbHVkZQpzdGF0ZW1lbnQuIEFzc3VtaW5nIHRoZSByb290IGRvY3VtZW50IGFuZCB0aGUg
aW5jbHVkZWQgZG9jdW1lbnQgaGF2ZSB0aGUKZm9sbG93aW5nIG1ldGEgZGF0YS4KCioqUm9v
dCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQp3aWR0aDogMTAKaGVpZ2h0OiAyMAoKLS0tClwh
ISEgaW5jbHVkZS5tZGkKYGBgCgoqKkluY2x1ZGVkIERvY3VtZW50KioKYGBgeWFtbAoKLS0t
CmRlcHRoOiAzMAp2b2x1bWU6IDYwMDAKLXNlcmlhbDogQTU2R0hKCgotLS0KYGBgCgpCeSBk
ZWZhdWx0IGFsbCBgeWFtbGAgbWV0YSBkYXRhIGZpZWxkcyBhcmUgY29waWVkIHRvIHRoZSBt
ZXRhIGRhdGEgb2YKdGhlIHJvb3QgYCFNRGAgZG9jdW1lbnQgd2hpY2ggaXMgcHJvY2Vzc2Vk
LiBIb3dldmVyLCBpZiBhIG1ldGEgZGF0YQprZXkgaXMgcHJlY2VlZGVkIGJ5IGAtYCB0aGUg
a2V5IGlzIG5vdCBpbXBvcnRlZCBpbnRvIHRoZSByb290IGRvY3VtZW50LgpBbGwgYHlhbWxg
IG1ldGEgZGF0YSBrZXlzIHdoaWNoIHN0YXJ0IHdpdGggYC1gIGFyZSBleHBvc2VkIHRvIHRo
ZQpweXRob24gc2NvcGUgYW5kIHdpbGwgYXBwZWFyIGFzIGxvY2FsIHZhcmlhYmxlcywgYnV0
IHRoZXkgd2lsbCBub3QKYXBwZWFyIGluIHRoZSBtZXRhIGRhdGEgb2YgdGhlIGZyb250IG1h
dHRlciBpbiB0aGUgcHJlcHJvY2Vzc2VkCmAhTURgIHRleHQuIEdpdmVuIHRoZSBleGFtcGxl
IGFib3ZlLCB0aGUgcmVzdWx0aW5nIG1ldGEgZGF0YSBpbgp0aGUgZnJvbnQgbWF0dGVyIG9m
IHRoZSBwcmVwcm9jZXNzZWQgYCFNRGAgdGV4dCBsb29rcyBhcyBmb2xsb3dzLgoKKipQcmVw
cm9jZXNzZWQgRG9jdW1lbnQqKgpgYGB5YW1sCgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAK
ZGVwdGg6IDMwCnZvbHVtZTogNjAwMAoKLS0tCmBgYAoKIyMgRm9ybWF0IExpbmtzIGZvciBg
aHRtbGAgYW5kIGBwZGZgIERvY3VtZW50cyB7I3NlYzpmb3JtbGlua30KCldoZW4gd3JpdGlu
ZyBtdWx0aXBsZSBkb2N1bWVudHMsIG9mdGVuIGRvY3VtZW50cyBhcmUgcmVmZXJlbmNlZApi
ZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgbGlua3MuIEluIG9yZGVyIHRvIHJlZmVyIHRvIGV4
dGVybmFsCmBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIHRoZSBgIU1EYCBsaW5rIHN0YXRl
bWVudCBpcyB1c2VkLgpgYGBtZApbTGluayBDYXB0aW9uXShwYXRoL3RvL2ZpbGUuaHRtbCkK
W0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLnBkZikKYGBgCgpXaGVuIHVzaW5nIHJlbGF0
aXZlIHBhdGhzIGluIHRoZSBVUkwsIHRoZSBkb2N1bWVudHMgY2FuIGJlIHJlZmVyZW5jZWQK
YWNjb3JkaW5nIHRvIHRoZSBkaXJlY3RvcnkgdHJlZSBvZiB0aGUgc291cmNlIGAhTWAgYCFN
RGAgdGV4dApgbWQvKi8qLm1kYC4gSG93ZXZlciwgdGhlIHJlc3VsdGluZyBsaW5rIHdpbGwg
YmUgYSBwYXRoIHJlbGF0aXZlCnRvIHRoZSBkaXJlY3RvcnkgYGh0bWwvYCBmb3IgYGh0bWxg
IGRvY3VtZW50cyBhbmQgcmVsYXRpdmUgdG8gYHBkZi9gCmZvciBgcGRmYCBkb2N1bWVudHMu
IEFzIGFsbCBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBhcmUga2VwdCBpbgpzZXBhcmF0
ZSBkaXJlY3Rvcmllcywgb25lIGxpbmsgc3RhdGVtZW50IGNhbm5vdCBiZSB1c2VkIGZvciBy
ZW5kZXJpbmcKYGh0bWxgIGFuZCBgcGRmYCB3aXRoIGNvbnNpc3RlbnQgcGF0aHMgaW4gdGhl
IGxpbmsgc3RhdGVtZW50LgoKQnkgdXNpbmcgdGhlIGAhTWAgZm9ybWF0IGxpbmsgc3RhdGVt
ZW50IGAuXD8/P2AsIHRoZSBmaWxlIGV4dGVuc2lvbgppbiB0aGUgbGlua3MgaXMgcmVwbGFj
ZWQgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQgZm9ybWF0CnJlc3VsaW5nIGluIGNvbnNpc3Rl
bnQgbGlua3MgZm9yIGBodG1sYCBhbmQgYHBkZmAKZG9jdW1lbnRzLiBUaGUgZm9ybWF0IGxp
bmsgc3RhdGVtZW50IGNhbiBiZSBlc2NhcGVkIHVzaW5nIGAuXFw/Pz9gLgoKKipFeGFtcGxl
KioKYGBgbWQKW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0obWFya3kuXD8/PykKYGBgCgpbTGlu
ayB0byB0aGlzIERvY3VtZW50XShtYXJreS4/Pz8pCgojIyBGb3JtYXQgQ29kZXMgZm9yIGBo
dG1sYCBhbmQgYHBkZmAgRG9jdW1lbnRzIHsjc2VjOmZvcm1jb2RlfQoKT2Z0ZW4gd2hlbiB3
cml0aW5nIG1hcmtkb3duIGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cywgdGhlCmZv
cm1hdCBuZWVkcyB0byBiZSBhZGp1c3RlZCBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdC4gYCFQ
YCBgIU1EYAphbHJlYWR5IHJlbmRlcnMgYWxsIGNvbW1vbiBNYXJrZG93biBpbnRvIGBodG1s
YCBhbmQgYHBkZmAuCmAhTWAgc3VwcG9ydHMgZm9ybWF0IHNwZWNpZmljIHR3ZWFraW5nIHVz
aW5nIGZvcm1hdCBjb2Rlcy4KCkluIG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMg
Y29kZSwgYGh0bWxgIGNvZGUgb3IgYHRleGAgY29kZQpmb3IgYHBkZmAgZG9jdW1lbnRzLCB0
aGUgZm9ybWF0IGNvZGVzIGFyZSB1c2VkLiBGb3JtYXQgY29kZXMgYXJlCndyaXR0ZW4gYXMg
YGAgYFw/RlVOQ0FMTChBUkdTKWAgYGAgb3IgYGAgYFw/VkFSSUFCTEVgIGBgCndoaWNoIGFy
ZSB0cmFuc2xhdGVkIGluIHRoZSBmb2xsb3dpbmcgcHl0aG9uIGV4cHJlc3Npb25zIGJ5CnBy
ZXBlbmRpbmcgdGhlIGZvcm1hdCBgaHRtbGAgb3IgYHBkZmAgdG8gdGhlIGV4cHJlc3Npb24u
CjEuIGBodG1sRlVOQ0FMTChBUkdTKWAgYW5kIGBodG1sVkFSSUFCTEVgIGZvciBpbmplY3Rp
b24gb2YgcmF3IGBodG1sYApjb2RlIGZvciByZW5kZXJpbmcgYGh0bWxgLWJhc2VkIGRvY3Vt
ZW50cyBpbiBgIVBgLgoyLiBgcGRmRlVOQ0FMTChBUkdTKWAgYW5kIGBwZGZWQVJJQUJMRWAg
IGZvciBpbmplY3Rpb24gb2YgcmF3IGB0ZXhgCmNvZGUgaW4gYHBkZmAtYmFzZWQgZG9jdW1l
bnRzIGluIGAhUGAuCgpBbHRlcm5hdGl2ZWx5IGBcPz8/YCBjYW4gYmUgdXNlZCB0byBzcGVj
aWZ5IHRoZSBsb2NhdGlvbiB3aGVyZSB0aGUKZm9ybWF0IGlzIGluc2VydGVkLiBUaGUgdHdv
IGZvcm1hdCBjb2RlcyBgYCBgXD9GVU5DQUxMKCI/Pz8iKWAgYGAKYW5kIGBgIGBcP1ZBUklB
QkxFXz8/P2AgYGAgd291bGQgcmVzdWx0IGluIHRoZSBmb2xsb3dpbmcgcHl0aG9uCmV4cHJl
c3Npb25zLgoxLiBgRlVOQ0FMTCgiaHRtbCIpYCBhbmQgYFZBUklBQkxFX2h0bWxgIGZvciBp
bmplY3Rpb24gb2YgcmF3IGBodG1sYApjb2RlIGZvciByZW5kZXJpbmcgYGh0bWxgLWJhc2Vk
IGRvY3VtZW50cyBpbiBgIVBgLgoyLiBgRlVOQ0FMTCgicGRmIilgIGFuZCBgVkFSSUFCTEVf
cGRmYCAgZm9yIGluamVjdGlvbiBvZiByYXcgYHRleGAKY29kZSBpbiBgcGRmYC1iYXNlZCBk
b2N1bWVudHMgaW4gYCFQYC4KCkR1cmluZyBwcmVwcm9jZXNzaW5nLCBgIU1gIHByb2Nlc3Nl
cyBhbGwgZm9ybWF0IGNvZGVzIGZvciBlYWNoCmZvcm1hdCBgaHRtbGAgYW5kIGBwZGZgIGFu
ZCBjYWNoZXMgdGhlIG91dHB1dC4gQmVmb3JlIHJlbmRlcmluZwp0aGUgTWFya2Rvd24gaW4g
b25lIHBhcnRpY3VsYXIgZm9ybWF0IHVzaW5nIGAhUGAsIGAhTWAgZXh0cmFjdHMKdGhlIHJl
c3VsdHMgb2YgdGhlIGNvcnJlc3BvbmRpbmcgZm9ybWF0IGNvZGVzIGFuZCBza2lwcyB0aGUg
b3RoZXJzLgpBZGRpdGlvbmFsIGB0ZXhgIHBhY2thZ2VzIGhhdmUgdG8gYmUgaW5jbHVkZWQg
dXNpbmcgdGhlIG1ldGEgZGF0YQpmaWVsZCBgaGVhZGVyLWluY2x1ZGVzYC4KCkZvciByZXR1
cm5pbmcgdGhlIHJhdyBmb3JtYXQgY29kZSwgZWl0aGVyIHRoZSBgIVAxYCBzdGF0ZW1lbnQg
Y2FuCmJlIHVzZWQgQHNlYzptZHByaW50ICoqb3IqKiB0aGUgYHJldHVybmAgc3RhdGVtZW50
IGNhbiBiZSB1c2VkLgpJZiBib3RoIHN0YXRlbWVudHMgYXJlIG1peGVkLCB0aGUgb3V0cHV0
IHdoaWNoIGhhZCBiZWVuIHJldHVybmVkCndpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHRleHQg
Z2VuZXJhdGVkIHdpdGggdGhlIGAhUDFgIHN0YXRlbWVudC4KCioqRXhhbXBsZTogRnVuY3Rp
b25zIGFuZCBWYXJpYWJsZXMqKgpgYGAhCglkZWYgaHRtbFRlc3QxKCk6CgkJXygiPHN1cD5I
VE1MIGluIikKCQlyZXR1cm4gInN1cGVyc2NyaXB0PC9zdXA+IgoJZGVmIHBkZlRlc3QxKCk6
CgkJX18ociIiIgoJCQkke31fe1xtYm94e1BERiBpbiBzdWJzY3JpcHR9fSQKCQkiIiIpCgl0
ZXN0Ml9odG1sID0gIjxzdWI+SFRNTCBpbiBzdWJzY3JpcHQ8L3N1Yj4iCgl0ZXN0Ml9wZGYg
PSAgciIke31ee1xtYm94e1BERiBpbiBzdXBlcnNjcmlwdH19JCIKCWRlZiB0ZXN0MyhmbXQp
OgoJCXJldHVybiBmbXQudXBwZXIoKQpgYGAKCmBgYG1kClRoZSBmb3JtYXQgY29kZSBgXFw/
dGVzdDMoPz8/KWAgcmV0dXJucyB0aGUgZm9ybWF0IG9mCnRoZSBkb2N1bWVudDogYFw/dGVz
dDMoIj8/PyIpYC4KKiBgXD9UZXN0MSgpYAoqIGBcP3Rlc3QyXz8/P2AKYGBgCgpUaGUgZm9y
bWF0IGNvZGUgYFw/dGVzdDMoPz8/KWAgcmV0dXJucyB0aGUgZm9ybWF0IG9mCnRoZSBkb2N1
bWVudDogYD90ZXN0MygiPz8/IilgLgoqIGA/VGVzdDEoKWAKKiBgP3Rlc3QyXz8/P2AKCioq
RXhhbXBsZTogQ2xhc3NlcyoqCmBgYCEKCWNsYXNzIGh0bWw6CgkJZGVmIHRlc3QxKCk6CgkJ
CV8oIjxzdXA+SFRNTCBpbiIpCgkJCXJldHVybiAic3VwZXJzY3JpcHQ8L3N1cD4iCgkJdGVz
dDIgPSAiPHN1Yj5IVE1MIGluIHN1YnNjcmlwdDwvc3ViPiIKCWNsYXNzIHBkZjoKCQlkZWYg
dGVzdDEoKToKCQkJX18ociIiIgoJCQkJJHt9X3tcbWJveHtQREYgaW4gc3Vic2NyaXB0fX0k
CgkJCSIiIikKCQl0ZXN0MiA9ICByIiR7fV57XG1ib3h7UERGIGluIHN1cGVyc2NyaXB0fX0k
IgoJY2xhc3MgZG9jZm10OgoJCWRlZiBfX2luaXRfXyhzZWxmKToKCQkJc2VsZi5odG1sID0g
IkhUTUwiCgkJCXNlbGYucGRmID0gIlBERiIKCQlkZWYgZ2V0X2h0bWwoc2VsZik6CgkJCXJl
dHVybiBzZWxmLmh0bWwKCQlkZWYgZ2V0X3BkZihzZWxmKToKCQkJcmV0dXJuIHNlbGYucGRm
Cgl0ZXN0MyA9IGRvY2ZtdCgpCmBgYAoKYGBgbWQKVGhlIGZvcm1hdCBjb2RlIGBcXD90ZXN0
My5nZXRfPz8/KClgIHJldHVybnMgdGhlIGZvcm1hdCBvZgp0aGUgZG9jdW1lbnQ6IGBcP3Rl
c3QzLmdldF8/Pz8oKWAuCiogYFw/LnRlc3QxKClgCiogYFw/LnRlc3QyYApgYGAKClRoZSBm
b3JtYXQgY29kZSBgXD90ZXN0My5nZXRfPz8/KClgIHJldHVybnMgdGhlIGZvcm1hdCBvZgp0
aGUgZG9jdW1lbnQ6IGA/dGVzdDMuZ2V0Xz8/PygpYC4KKiBgPy50ZXN0MSgpYAoqIGA/LnRl
c3QyYAoKLS0tCgojIGAhTWAgYCFNRGAgRXhhbXBsZXMgeyNzZWM6ZXhhbXBsZXN9CgojIyBK
YXZhU2NyaXB0IGluIGBodG1sYCBhbmQgUGxhY2Vob2xkZXIgaW4gYHBkZmAKCldoZW4gY3Jl
YXRpbmcgYCFNRGAgdGV4dCBmb3IgYGh0bWxgIG91dHB1dCwgdGhlIHVzZXIgb2Z0ZW4gd2Fu
dHMKaW50ZXJhY3Rpdml0eSB1c2luZyB3aWRnZXRzIGxpa2Ugc2xpZGVycywgY2hlY2sgYm94
ZXMsIGRyb3AgZG93biBib3hlcwpldGMuIEhvd2V2ZXIsIHdoZW4gZXhwb3J0aW5nIGludG8g
YHBkZmAgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBiZQpyZXBsYWNlZCB3aXRoIG5vbi1pbnRl
cmFjdGl2ZSBwbGFjZWhvbGRlcnMuIEluIG9yZGVyIHRvIGRldmVsb3AgYSBzaW5nbGUKYCFN
RGAgZG9jdW1lbnQsIHdoaWNoIGNhbiBiZSByZW5kZXJlZCBpbiBgaHRtbGAgd2l0aCBpbnRl
cmFjdGl2ZQplbGVtZW50cyBhbmQgaW50byBgcGRmYCB3aXRoIHBsYWNlaG9sZGVyLCB0aGUg
YCFNYCBmb3JtYXQgY29kZXMgY2FuIGJlCnVzZWQsIHNlZSBAc2VjOmZvcm1jb2RlLiBUaGUg
Zm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhCmA8aW5wdXQgdHlwZT0icmFuZ2UiPmAgYW5k
IHR3byBgPHNwYW5zPmAgd2l0aCBgaWQ9Im15dmFsImAgYW5kCmBpZD0ibXlyZXMiYCwgaW4g
b3JkZXIgdG8gdXBkYXRlIHRoZSB2YWx1ZSBvZiAkeT1zaW4oeCkkIGluIGBodG1sYC4gRm9y
CmBwZGZgIG91dHB1dCB0aGUgZXF1YXRpb24gYW5kIHRoZSB2YWx1ZSByYW5nZSBpcyBzaG93
bi4KCioqRXhhbXBsZSoqCmBgYCEKCWRlZiByYW5nZV9odG1sKCk6CgkJX18oIiIiCgkJCSR4
XGluIFswJCA8aW5wdXQgdHlwZT0ncmFuZ2UnIHZhbHVlPScwJyBtaW49JzAnIG1heD0nMTAw
JwoJCQlvbmNoYW5nZT0iCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteXZhbCcpLmlu
bmVySFRNTCA9IHRoaXMudmFsdWU7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteXJl
cycpLmlubmVySFRNTCA9CgkJCU1hdGguc2luKHRoaXMudmFsdWUpOyI+ICQxMDBdJAoJCSIi
IikKCWRlZiByYW5nZV9wZGYoKToKCQlyZXR1cm4gIiR4XGluWzAsMTAwXSQiCglkZWYgZm9y
bXVsYV9odG1sKCk6CgkJX18oIiIiCgkJCSR5PXNpbih4KT0kIDxzcGFuIGlkPSJteXJlcyI+
MC4wMDA8L3NwYW4+CgkJCXdpdGggJHg9JCA8c3BhbiBpZD0ibXl2YWwiPjA8L3NwYW4+CgkJ
IiIiKQoJZGVmIGZvcm11bGFfcGRmKCk6CgkJcmV0dXJuICIkeT1zaW4oeCkkIgpgYGAKCmBg
YG1kCiR4JCBhbmQgJHkkIGFyZSByZWxhdGVkIHRvIGVhY2ggb3RoZXIgYnkgYFw/Zm9ybXVs
YV8/Pz8oKWAuCgokeCQgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFw/cmFuZ2VfPz8/KClgLgpg
YGAKCiR4JCBhbmQgJHkkIGFyZSByZWxhdGVkIHRvIGVhY2ggb3RoZXIgYnkgYD9mb3JtdWxh
Xz8/PygpYC4KCiR4JCBtdXN0IGJlIGluIHRoZSByYW5nZSBgP3JhbmdlXz8/PygpYC4KCiMj
IEdlbmVyYXRlIGEgRmlndXJlIG9uLXRoZS1mbHkgZHVyaW5nIFByZXByb2Nlc3NpbmcKClRo
aXMgc2VjdGlvbiBpbGx1c3RyYXRlcyBob3cgcHl0aG9uIG1vZHVsZXMgY2FuIGJlIHVzZWQg
dG8gY3JlYXRlCmRvY3VtZW50IGNvbnRlbnQuIERvY3VtZW50IGNvbnRlbnQgaXMgcGxhY2Vk
IGluc2lkZSB0aGUgYGRhdGEvYApkaXJlY3Rvcnkgb2YgdGhlIGN1cnJlbnQgcHJvamVjdCB3
b3JraW5nIGRpcmVjdG9yeSAocmVmZXIgdG8gYCFNYApwcm9qZWN0IHN0cnVjdHVyZSwgQHNl
Yzpwcm9qZWN0KQoKIVtUaGlzIEZpZ3VyZSB3YXMgZ2VuZXJhdGVkIHVzaW5nIGAhTlVgIGFu
ZApgIVBMYC5dKGZpZ3VyZTEucG5nKXsjZmlnOmZpZ3VyZTF9CgpbYCFOVWBdKGh0dHBzOi8v
d3d3Lm51bXB5Lm9yZykgYW5kIFtgIVBMYF0oaHR0cHM6Ly93d3cubWF0cGxvdGxpYi5vcmcp
CmFyZSBwb3dlcmZ1bCBweXRob24gbW9kdWxlcyBmb3IgbWF0aGVtYXRpY2FsIGNvbXB1dGlu
ZyBhbmQgcGxvdApnZW5lcmF0aW9uLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93
IHRvIGdlbmVyYXRlIEBmaWc6ZmlndXJlMQp1c2luZyBgIU5VYCBhbmQgYCFQTGAgYW5kIGlu
Y2x1ZGUgaXQgaW50byB0aGUgZG9jdW1lbnQuCgoqKkV4YW1wbGUqKgoKYGBgIQoJaW1wb3J0
IG51bXB5IGFzIG5wCglpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CglHUkVFSyA9
IGxhbWJkYSBBOiBjaHIob3JkKHUiXHUwMzkxIikgKyBvcmQoQSkgLSBvcmQoIkEiKSkKCWdy
ZWVrID0gbGFtYmRhIGE6IGNocihvcmQodSJcdTAzYjEiKSArIG9yZChhKSAtIG9yZCgiYSIp
KQoJY20yaW5jaCA9IGxhbWJkYSB4eTogdHVwbGUoaS8yLjU0IGZvciBpIGluIHh5KQoJZm9u
dHNpemUgPSBpbnQoZm9udHNpemVbOi0yXSkgIyBjb252ZXJ0IHRvIGludAoJZmlnc2l6ZSA9
IGNtMmluY2goZmlnc2l6ZSkgIyBjb252ZXJ0IGZyb20gY20gdG8gaW5jaAoJcGFyYW1zID0g
ewoJCSdmaWd1cmUuZmlnc2l6ZSc6IGZpZ3NpemUsCgkJJ2xlZ2VuZC5mb250c2l6ZSc6IGZv
bnRzaXplLAoJCSdheGVzLmxhYmVsc2l6ZSc6IGZvbnRzaXplLAoJCSdheGVzLnRpdGxlc2l6
ZSc6IGZvbnRzaXplLAoJCSd4dGljay5sYWJlbHNpemUnOiBmb250c2l6ZSwKCQkneXRpY2su
bGFiZWxzaXplJzogZm9udHNpemUsCgkJJ2ZvbnQuZmFtaWx5JzogJ1RpbWVzIE5ldyBSb21h
bicKCX0KCXBsdC5yY1BhcmFtcy51cGRhdGUocGFyYW1zKQoJeCA9IG5wLnJhbmRvbS5yYW5k
KDUwKQoJeSA9IG5wLnJhbmRvbS5yYW5kKDUwKQoJcGx0LmZpZ3VyZSgpCglwbHQuc2NhdHRl
cih4LCB5LCBsYWJlbD0iUmFuZG9tIENvb3JkaW5hdGVzIikKCXRleHQgPSAiIi5qb2luKFtn
cmVlayhpKSBmb3IgaSBpbiBbImEiLCAiYiIsICJjIiwgImQiXV0pCglwbHQuYW5ub3RhdGUo
dGV4dCwgeHk9KDAuNSwwLjUpLCB4eXRleHQ9KDAuMjUsMC4yNSksCgkJYXJyb3dwcm9wcz1k
aWN0KGFycm93c3R5bGU9Jy0+Jyxsdz0xLjUpKQoJcGx0LnRpdGxlKCJUd28gUmFuZG9tIERh
dGFzZXRzIikKCXBsdC54bGFiZWwociJEYXRhICMxIC0gJFxtYXRoZGVmYXVsdHslc18xfSQi
ICUgR1JFRUsoIkMiKSkKCXBsdC55bGFiZWwociJEYXRhICMyIC0gJFxtYXRoZGVmYXVsdHsl
c18yfSQiICUgR1JFRUsoIkQiKSkKCXBsdC5ncmlkKCkKCXBsdC5sZWdlbmQoKQoJcGx0LnRp
Z2h0X2xheW91dCgpCglwbHQuc2F2ZWZpZygiYnVpbGQvZmlndXJlMS5wbmciLCBkcGk9Zmln
ZHBpKQoJcGx0LmNsb3NlKCJhbGwiKQpgYGAKCmBgYG1kCiFbVGhpcyBGaWd1cmUgd2FzIGdl
bmVyYXRlZCB1c2luZyBgIU5VYAphbmQgYCFQTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpmaWd1
cmUxfQpgYGAKCiMjIEdlbmVyYXRlIGEgU2VxdWVuY2Ugb2YgRmlndXJlcyBvbi10aGUtZmx5
CgpUaGlzIHNlY3Rpb24gaWxsdXN0cmF0ZXMgaG93IGEgc2VxdWVuY2Ugb2YgY29tcGxleCBm
aWd1cmVzIGNhbiBiZQpnZW5lcmF0ZWQgdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBob3cg
dGhlIGZpZ3VyZXMgYXJlIGZvcm1hdHRlZAp1c2luZyBweXRob24gYW5kIHJlZmVyZW5jZWQg
dXNpbmcgYCFNYC4KClN1cHBvc2Ugb25lIGV4cGVyaW1lbnQgd2hpY2ggY2FuIGJlIHJ1biBp
biBmb3VyIGRpZmZlcmVudCBzZXR1cHMgd2l0aApkaWZmZXJlbnQgdmFsdWVzIGZvciAkXGxh
bWJkYT0kCmAhIiwgIi5qb2luKFsiKCVkKSAkJS4yZiRubSIlKGssIDEyNS4zMyprKSBmb3Ig
ayBpbiByYW5nZSgxLCA1KV0pYC4KRWFjaCBydW4gb2YgdGhlIGV4cGVyaW1lbnQgdXNpbmcg
c2V0dXAgKDEpLS0oNCksIHR3byBhZGRpdGlvbmFsCnBhcmFtZXRlcnMgJFx2YXJlcHNpbG9u
JCBhbmQgJFxhbHBoYSQgYXJlIHZhcnJpZWQgYmV0d2VlbgokMTAuMlxsZG90czMwLjZcJSQg
YW5kICQwLjFcbGRvdHMwLjMkSHogcmVzcGVjdGl2ZWx5LgoKVGhlIHJlc3VsdHMgb2YgdGhl
IGV4cGVyaW1lbnRzIGZvciB0aGUgc2V0dXBzICgxKS0tKDQpIGFyZSBzdW1tYXJpemVkCmlu
IHRoZSBAZmlnOmZpZ3VyZTJfMSwgIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMg
YW5kCiFAZmlnOmZpZ3VyZTJfNC4KCioqRXhhbXBsZSoqCgpgYGAhCgluID0gMTAwCglhbHBo
YSA9IHUiXHUwM2IxIgoJZXBzaWxvbiA9IHUiXHUwM2I1IgoJbGFtZGEgPSB1Ilx1MDNiYiIK
CWYgPSBsYW1iZGEgeCwgYSwgYjogYSoobnAuc3FydCh4KStiKm5wLnNpbih4KmIpKQoJZyA9
IGxhbWJkYSB4LCBhICxiLCBjOiBucC5mYWJzKGYoeCwgYSwgYikgLSBmKGMsIGEsIGIpKSAr
IGMKCWRhdCA9IG5wLnplcm9zKChuLTEsIDMsIDMsIDQpLCBkdHlwZT1ucC5mbG9hdDMyKQoJ
Y29scyA9IFsicmVkIiwgImdyZWVuIiwgImJsdWUiXQoJbWFyayA9IFsibyIsICJ4IiwgIjwi
XQoJeCA9IG5wLmFycmF5KFs1MC4qeC9uIGZvciB4IGluIHJhbmdlKDEsIG4pXSwgZHR5cGU9
bnAuZmxvYXQzMikKCWZvciBrLCBjIGluIGVudW1lcmF0ZShbMTAuLCAyMC4sIDMwLiwgNDAu
XSk6CgkJZm9yIGksIGEgaW4gZW51bWVyYXRlKFsxLCAyLCA0XSk6CgkJCWZvciBqLCBiIGlu
IGVudW1lcmF0ZShbMC4yLCAwLjQsIDAuNl0pOgoJCQkJZGF0WzosIGksIGosIGtdID0gZyh4
LCBhLCBiLCBjKQoJCXBsdC5maWd1cmUoKQoJCWZvciBqIGluIHJhbmdlKDMpOgoJCQlmb3Ig
aSBpbiByYW5nZSgzKToKCQkJCWxhYmVsX2kgPSAiJXM9JS4xZiUlIiAlIChlcHNpbG9uLCAo
aSsxKSoxMC4yKSBcCgkJCQkJaWYgaiA9PSAwIGVsc2UgTm9uZQoJCQkJbGFiZWxfaiA9ICIl
cz0lLjFmSHoiICUgKGFscGhhLCAoaisxKS8xMC4pIFwKCQkJCQlpZiBpID09IDAgZWxzZSBO
b25lCgkJCQl5ID0gZGF0WzosIGksIGosIGtdLmZsYXR0ZW4oKQoJCQkJcGx0LnBsb3QoeCwg
eSwgY29sb3I9Y29sc1tpXSwgbHc9MC43NSwgbGFiZWw9bGFiZWxfaSkKCQkJCXBsdC5zY2F0
dGVyKHhbMTo6NF0sIHlbMTo6NF0sIGNvbG9yPSJibGFjayIsCgkJCQkJbWFya2VyPW1hcmtb
al0sIGx3PTAuNSwgcz01LCBsYWJlbD1sYWJlbF9qKQoJCWsgPSBrICsgMQoJCWt2YWwgPSBr
KjEyNS4zMwoJCXBsdC50aXRsZSgiRXhwZXJpbWVudCBTZXR1cCAjJWQ6ICVzPSUuMmZubSIg
JSAoaywgbGFtZGEsIGt2YWwpKQoJCXBsdC54bGFiZWwoIlRpbWUgW3NdIikKCQlwbHQueWxh
YmVsKCJJbnRlbnNpdHkgW2tnL3PCs10iKQoJCXBsdC5ncmlkKCkKCQlwbHQubGVnZW5kKCkK
CQlwbHQudGlnaHRfbGF5b3V0KCkKCQlwbHQuc2F2ZWZpZygiYnVpbGQvZmlndXJlMi0lZC5w
bmciICUgaywgZHBpPWZpZ2RwaSkKCQlwbHQuY2xvc2UoImFsbCIpCgkJX18oZiIiIgoJCQkh
W1RoaXMgaXMgdGhlIHJlc3VsdCBvZiB0aGUgZXhwZXJpbWVudCBhY2NvcmRpbmcKCQkJdG8g
dGhlIHNldHVwICN7a30gd2l0aCAke2xhbWRhfT17a3ZhbH0kbm0uIFRoZSBwYXJhbWV0ZXJz
CgkJCSR7ZXBzaWxvbn0kIGFuZCAke2FscGhhfSQgYXJlIHZhcnJpZWQgYmV0d2VlbgoJCQkk
MTAuMlxsZG90czMwLjZcJSQgYW5kICQwLjFcbGRvdHMwLjMkSHoKCQkJcmVzcGVjdGl2ZWx5
Ll0oZmlndXJlMi17a30ucG5nKXt7I2ZpZzpmaWd1cmUyX3trfX19CgoJCSIiIikKYGBgCgot
LS0KCipUaGFua3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCgotLS0KCiMg
UmVmZXJlbmNlcwo=
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmAheDowNWRgfGAheTouNGZgCg==
'''
pack_marky_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIERvY3VtZW50YXRpb24uCj4gVGhpcyBkb2N1
bWVudCByZXByZXNlbnRzIHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nl
c3NpbmcgcHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+
IEZvciBkb2N1bWVudGF0aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4g
W2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5
KS4KCi0tLQoKYGBgcHl0aG9uCiEhISBtYXJreS5tZCByYXcgPj4xCmBgYAo=
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpoZWFkZXItaW5jbHVkZXMtLXBkZjoK
ICAgXHVzZXBhY2thZ2V7bXVsdGljb2x9CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFs
c2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1Mv
VS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6
aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNh
cGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3Qq
KiAtLSBUaGlzIGlzIGEgYG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvcgo+IGlsbHVz
dHJhdGluZyBgbWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhlIGBt
YXJreWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJl
XShxdWljay1zcmMuPz8/KS4KPiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIg
dG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1h
bm43L21hcmt5KSwKPiBbYG1hcmt5YCBkb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pIG9yIHRo
ZQo+IHNpbXBsZSBbYG1hcmt5YCBleGFtcGxlXShleGFtcGxlLj8/PykuCgotLS0KCiMgSW50
cm9kdWN0aW9uCgpUaGlzIGlzIGEgYG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvciBp
bGx1c3RyYXRpbmcgYG1hcmt5YCBtYXJrdXAKdXNpbmcgc2ltcGxlIGV4YW1wbGVzLiBUaGlz
IGRvY3VtZW50IGlzIHRoZSByZW5kZXJlZCB2ZXJzaW9uIG9mCnRoZSBzb3VyY2UgY29kZSBw
cmVzZW50ZWQgW2hlcmVdKHF1aWNrLXNyYy4/Pz8pLiBUaGUgYG1hcmt5YCBtYXJrdXAKaXMg
Y29tcGF0aWJsZSB3aXRoIHN0YW5kYXJkIE1hcmtkb3duIGFuZCBjYW4gYmUgcmVhZCBhcy1p
cy4KVGhpcyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBvdXRwdXQgb2YgYG1hcmt5YCBhZnRl
ciBwcm9jZXNzaW5nCnB5dGhvbiBjb2RlLCB3aGljaCBpcyBlbWJlZGRlZCBpbnRvIHRoZSBk
b2N1bWVudCBpdHNlbGYuCkluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhlIGV4YW1wbGVzIGFu
ZCBzZWUgdGhlIGNvbXBsZXRlCmBtYXJreWAgc3ludGF4LCB0aGUgc291cmNlIGNvZGUgb2Yg
dGhpcyBmaWxlIGNhbiBiZSByZWFkCltoZXJlXShxdWljay1zcmMuPz8/KS4gVGhlIGNvbXBs
ZXRlIGRvY3VtZW50YXRpb24gb2YgYG1hcmt5YAppcyBhdmFpbGFibGUgW2hlcmVdKG1hcmt5
Lj8/PykKCi0tLQoKIyBNYXJrZG93bgoKYG1hcmt5YCBpcyBhIE1hcmtkb3duIHByZXByb2Nl
c3NvciBhbGxvd2luZyB0byB0cmFuc2Zvcm0gTWFya2Rvd24KdGV4dCB1c2luZyBweXRob24u
IFRoZSBwcmVwcm9jZXNzZWQgTWFya2Rvd24gdGV4dCBpcyByZW5kZXJlZCB0byBgcGRmYAph
bmQgYGh0bWxgIChvdGhlciBmb3JtYXRzIHVzaW5nIGBwYW5kb2NgKS4gYHBhbmRvY2AgaGFz
IGEgcG93ZXJmdWwgc2V0Cm9mIE1hcmtkb3duIGV4dGVuc2lvbnMgc3VwcG9ydGluZyBzdHJ1
Y3R1cmVkIHdyaXRpbmcgYXMgd2VsbCBhcwpiaWJsaW9ncmFwaHksIGZpZ3VyZSByZWZlcmVu
Y2luZywgdGFibGUgcmVmZXJlbmNpbmcsIHRleC1zdHlsZQplcXVhdGlvbnMgd2l0aCByZWZl
cmVuY2luZyBldGMuIChyZWZlciB0byBTY2llbnRpZmljIFdyaXRpbmcgaW4KTWFya2Rvd24s
IFtgbWFya3lgIERvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykpLgoKVGhlIHJlbmRlcmluZyBv
ZiBNYXJrZG93biB0ZXh0IGludG8gYGh0bWxgIGFuZCBgcGRmYCBjb25zaXN0cyBvZiB0aHJl
ZQpzdGVwcyB3aGljaCBhcmUgaWxsdXN0cmF0ZWQgdXNpbmcgdGhlIGBtYXJreWAgZG9jdW1l
bnRhdGlvbgpgbWQvbWFya3kubWRgLgoKMS4gKlByZXByb2Nlc3NpbmcqIFwKICAgKHByb2Nl
c3MgYG1hcmt5YCBtYXJrdXAsIHJ1biBjb2RlLCBnZW5lcmF0ZSBjb250ZW50KQoJKiBJbnB1
dDogYG1hcmt5YCBNYXJrZG93biB0ZXh0OiBgbWQvbWFya3kubWRgCgkqIE91dHB1dDogcGFu
ZG9jIE1hcmtkb3duIHRleHQ6IGBidWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcqIFwKCShh
cHBseSBmb3JtYXQgc3BlY2lmaWMgY29kZSBmb3IgYGh0bWxgIGFuZCBgcGRmYCkKCSogSW5w
dXQ6IHBhbmRvYyBNYXJrZG93biB0ZXh0OiBgYnVpbGQvbWFya3kubWRgCgkqIE91dHB1dAoJ
MS4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBodG1sYDogYGJ1aWxkL21hcmt5Lmh0bWwu
bWRgCgkyLiBwYW5kb2MgTWFya2Rvd24gdGV4dCBmb3IgYHBkZmA6IGBidWlsZC9tYXJreS5w
ZGYubWRgCjMuICpSZW5kZXJpbmcqIFwKICAgKHJlbmRlciBgaHRtbGAgYW5kIGBwZGZgIGRv
Y3VtZW50IHVzaW5nIGBwYW5kb2NgKQoJKiBJbnB1dAoJMS4gcGFuZG9jIE1hcmtkb3duIHRl
eHQgZm9yIGBodG1sYDogYGJ1aWxkL21hcmt5Lmh0bWwubWRgCgkyLiBwYW5kb2MgTWFya2Rv
d24gdGV4dCBmb3IgYHBkZmA6IGBidWlsZC9tYXJreS5wZGYubWRgCgkqIE91dHB1dAoJMS4g
YGh0bWxgIGRvY3VtZW50OiBgaHRtbC9tYXJreS5odG1sYAoJMi4gYHBkZmAgZG9jdW1lbnQ6
IGBwZGYvbWFya3kucGRmYAoKVGhlIHdob2xlIHByb2Nlc3MgaXMgZWNhcHN1bGF0ZWQgaW50
byBhIHB5dGhvbiBzY3JpcHQgYW5kIGEgTWFrZWZpbGUuClJlbmRlcmluZyBkb2N1bWVudHMg
dXNpbmcgYG1hcmt5YCByZXF1aXJlcyB0byB3cml0ZSBNYXJrZG93biB0ZXh0CmFuZCBydW4g
YG1ha2UgYWxsYC4KCi0tLQoKIyBBdXRvbWF0ZWQgUmVwb3J0aW5nCgpNYXJrZG93biB0ZXh0
IHdpdGggZW1iZWRkZWQgY29kZSBzbmlwcGV0cyBpcyBhIHBvd2VyZnVsIHBhcmFkaWdtIGZv
cgphdXRvbWF0ZWQgdGVjaG5pY2FsIGFuZCBzY2llbnRpZmljIHJlcG9ydGluZyBhbmQgcG9z
c2libHkgb3RoZXIKZG9jdW1lbnRzLiBPbiBvbmUgaGFuZCBkYXRhIGNhbiBiZSBvcmdhbml6
ZWQgYWNjb3JkaW5nIHRvIHRoZSBkb2N1bWVudApzdHJ1Y3R1cmUgdXNpbmcgYWxnb3JpdGht
cyBlbWJlZGRlZCBpbiB0aGUgcmVwb3J0IGl0c2VsZiwgYW5kIG9uIHRoZQpvdGhlciBoYW5k
IHRoZSBkYXRhIGNhbiBiZSBpbnNlcnRlZCBpbiB0aGUgcmVwb3J0IGRpcmVjdGx5IGZyb20K
dmFyaWFibGVzLiBUaGlzIGVsbGltaW5hdGVzIHRoZSBuZWVkIGZvciBtYW51YWwgY29weWlu
ZyBvZiBkYXRhIGludG8KdGhlIHRleHQgYW5kIGFsbG93cyB0byB1cGRhdGUgb3IgcmVwcm9k
dWNlIHRoZSByZXBvcnQgYXV0b21hdGljYWxseQpmb3IgdGhlIHNhbWUgYW5kIG90aGVyIGRh
dGEuIFVzaW5nIHRoZSBzaW1wbGUgYG1hcmt5YCBzeW50YXggdGhlIHVzZXIKY2FuIGNvbmNl
bnRyYXRlIG9uIGRvY3VtZW50YXRpb24gd3JpdGluZyBmcm9tIHRoZSBNYXJrZG93biBwZXJz
cGVjdGl2ZQphbmQgYXNzaXN0IHRoZSBjcmVhdGlvbiBvZiBkb2N1bWVudCBjb250ZW50IHVz
aW5nIHB5dGhvbiBjb2RlCnNuaXBwZXRzLgoKYHBhbmRvY2AgZmlsdGVycyAocmVmZXIgdG8g
UmVsYXRlZCBXb3JrLCBbYG1hcmt5YCBEb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pKQphbGxv
dyB0cmFuc2Zvcm1pbmcgdGhlIGRvY3VtZW50IHdoaWxlIHJlbmRlcmluZyBpdC4gYHBhbmRv
Y2AgZmlsdGVycwpvcGVyYXRlIG9uIGFuIGludGVybmFsIGFic3RyYWN0IHN5bnRheCB0cmVl
IChBU1QpIHJlcHJlc2VudGF0aW9uLAp0aGVyZWZvcmUgdGhlIHVzZXIgbXVzdCBleHByZXNz
IGR5bmFtaWNhbGx5IGNyZWF0ZWQgZG9jdW1lbnQgY29udGVudAphcyBub2RlcyBpbiB0aGUg
Zm9ybWF0IG9mIHRoZSBBU1QuIGBtYXJreWAgdGFrZXMgYSBzbGlnaHQgZGlmZmVyZW50CmFw
cHJvYWNoIGFuZCBvcGVyYXRlcyBvbiB0aGUgTWFya2Rvd24gdGV4dCBpdHNlbGYsIGJlZm9y
ZSBpdCBpcyBwYXJzZWQKYW5kIHJlbmRlcmVkLgoKUHl0aG9uIGNvZGUgaXMgZW1iZWRkZWQg
aW50byB0aGUgZG9jdW1lbnQgd2l0aCBhIHNpbXBsZSBtYXJrdXAgc3ludGF4CnNpbWlsYXIg
dG8gW1JtYXJrZG93bl0oaHR0cHM6Ly93d3cucm1hcmtkb3duLm9yZykKdXNpbmcgY29kZSBi
bG9ja3MgYW5kIGlubGluZSBleHByZXNzaW9ucy4gYG1hcmt5YCBwYXJzZXMgdGhlIGNvZGUs
CmV4ZWN1dGVzIGl0IGFuZCB3cml0ZXMgdGhlIHJlc3VsdHMgYmFjayBpbnRvIHRoZSBNYXJr
ZG93biB0ZXh0LiBUaGUKY29kZSBjYW4gcHJvZHVjZSBvdXRwdXQgdXNpbmcgYWxnb3JpdGht
cyBvciBvdXRwdXQgZm9ybWF0dGVkIHN0cmluZwp2YXJpYWJsZXMuIGBtYXJreWAgYWxzbyBh
bGxvd3MgZm9yIHRoZSBpbnNlcnRpb24gb2YgZm9ybWF0IGRlcGVuZGVudApyYXcgY29kZSBp
biBgaHRtbGAgYW5kICp0ZXgqIChmb3IgYHBkZmAgIGRvY3VtZW50cykuCgoxLiBjb2RlIHNu
aXBwZXRzIGFyZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCB0ZXh0CjIuIGNvZGUgc25p
cHBldHMgYXJlIGV4ZWN1dGVkIGR1cmluZyBwcmVwcm9jZXNzaW5nCjMuIGNvZGUgcHJvZHVj
ZXMgdGV4dCBmb3IgdGhlIE1hcmtkb3duIGRvY3VtZW50CjQuIGNvZGUgdmFyaWFibGVzIGFy
ZSBkaXNwbGF5ZWQgaW4gdGhlIGRvY3VtZW50IHRleHQKNS4gZm9ybWF0IGRlcGVuZGVudCBj
b2RlIGlzIGFwcGxpZWQgZm9yIGBodG1sYCBhbmQgYHBkZmAKCi0tLQoKIyBEb3dubG9hZCBh
bmQgUnVuIGBtYXJreWAKCmBtYXJreWAgaXMgTWFya2Rvd24gcHJlcHJvY2Vzc29yIGFsbG93
aW5nIHRvIGV4ZWN1dGUgZW1iZWRkZWQgcHl0aG9uCmNvZGUgaW4gTWFya2Rvd24gZG9jdW1l
bnRzLiBBZnRlciBwcmVwcm9jZXNzaW5nLCBhIHJlZ3VsYXIgTWFya2Rvd24KZmlsZSBpcyBw
cmVzZW50LCB3aGljaCBpcyByZW5kZXJlZCBpbnRvIGBodG1sYCBhbmQgYHBkZmAgdXNpbmcK
YHBhbmRvY2AuIGBtYXJreWAgaGFuZGxlcyBhbGwgdGhpcyBzdGVwcyB1c2luZyBhIE1ha2Vm
aWxlLgpgbWFya3lgIGlzIGEgc2luZ2xlLWZpbGUgc2NyaXB0IHdoaWNoIGRlcGVuZHMgb24g
YHB5dGhvbmAgKD49My42KSwKYHBhbmRvY2AgKD49Mi4xMSksIGBweXlhbWxgIGFuZCBgcGFu
ZG9jLXhub3NgLgoKKipJbnN0YWxsaW5nIERlcGVuZGVuY2llcyoqCgpgcGFuZG9jYCBiaW5h
cmllcyBmb3IgRGViaWFuLWJhc2VkIExpbnV4IGFyZSByZWxlYXNlZApbaGVyZV0oaHR0cHM6
Ly9naXRodWIuY29tL2pnbS9wYW5kb2MvcmVsZWFzZXMpLgpgcHl5YW1sYCBpcyBpbnN0YWxs
ZWQgdXNpbmcgdGhlIGxpbnV4IHBhY2thZ2UgbWFuYWdlciBvciBgcGlwYCBhbmQKYHBhbmRv
Yy14bm9zYCBjb25zaXN0cyBvZiB0aGUgY29tcG9uZW50cyBgZmlnbm9zYCwgYHNlY25vc2As
IGBlcW5vc2AKYW5kIGB0YWJsZW5vc2Agd2hpY2ggYXJlIGluc3RhbGxlZCB1c2luZyBgcGlw
YC4gRGVwZW5kaW5nIG9uIHRoZQpsaW51eCBpbnN0YWxsYXRpb24gbWF5YmUgYHBpcDNgIGhh
cyB0byBiZSB1c2VkLgoKYGBgYmFzaApwaXAgaW5zdGFsbCBweXlhbWwKcGlwIGluc3RhbGwg
cGFuZG9jLWZpZ25vcwpwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCnBpcCBpbnN0YWxsIHBh
bmRvYy1lcW5vcwpwaXAgaW5zdGFsbCBwYW5kb2MtdGFibGVub3MKYGBgCgoqKkRvd25sb2Fk
IGBtYXJreWAgU2NyaXB0KioKCmBtYXJreWAgaXMgZG93bmxvYWRlZCB1c2luZyB0aGUgZm9s
bG93aW5nIGNvbW1hbmRzLgoKYGBgYmFzaApjZCAkSE9NRQpnaXQgY2xvbmUgaHR0cHM6Ly9n
aXRodWIuY29tL2xlaG1hbm43L21hcmt5LmdpdApjZCBtYXJreQpgYGAKCkFsdGVybmF0aXZl
bHksIG1hcmt5IGNhbiBiZSBvYnRhaW5lZCBkaXJldGx5IHdpdGhvdXQgYGdpdGA6CgpgYGBi
YXNoCmNkICRIT01FCm1rZGlyIG1hcmt5CmNkIG1hcmt5CndnZXQgaHR0cHM6Ly9yYXcuZ2l0
aHVidXNlcmNvbnRlbnQuY29tL2xlaG1hbm43L21hcmt5L21haW4vbWFya3kucHkKY2htb2Qg
K3ggbWFya3kucHkKYGBgCgoqKkluaXRpYWxpemUgYG1hcmt5YCBFbnZpcm9ubWVudCoqCgpU
aGUgYG1hcmt5YCBlbnZpcm9ubWVudCBjb25zaXN0cyBvZiB0aGUgTWFrZWZpbGUgYW5kIHRo
ZSBkb2N1bWVudGF0aW9uLgpUaGUgYG1hcmt5YCBNYWtlZmlsZSwgZG9jdW1lbnRhdGlvbiBh
bmQgcXVpY2tzdGFydCBhcmUgdW5wYWNrZWQgZnJvbQp0aGUgYG1hcmt5LnB5YCBzY3JpcHQg
ZmlsZSBpbnRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LgpUaGUgYG1hcmt5YCBl
bnZpcm9ubWVudCBpcyBpbml0aWFsaXplZCB1c2luZyB0aGUgZm9sbG93aW5nIGNvbW1hbmRz
LgoKYGBgYmFzaApjZCAkSE9NRQpjZCBtYXJreQouL21hcmt5LnB5IC0taW5pdApXUklURSAu
L21kL21hcmt5Lm1kCldSSVRFIC4vbWQvbWFya3kubWRpCldSSVRFIC4vbWQvbWFya3ktc3Jj
Lm1kCldSSVRFIC4vbWQvcXVpY2tzdGFydC5tZApXUklURSAuL21kL3F1aWNrLXNyYy5tZApX
UklURSAuL21kL2V4YW1wbGUubWQKV1JJVEUgLi9tZC9leGFtcGxlLXNyYy5tZApXUklURSAu
L2RhdGEvbWFya3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBgCjIuIGBtYWtlIGFsbC1odG1s
IGh0dHBkYAozLiBgbWFrZSBhbGwtcGRmYApgYGAKCkR1cmluZyBpbml0aWFsaXphdGlvbiBg
bWFya3lgIGNyZWF0ZXMgdHdvIGRpcmVjdG9yaWVzIGBtZC9gIGFuZCBgZGF0YS9gLgpgbWQv
YCBpcyB0aGUgZGlyZWN0b3J5IHdoaWNoIGNvbnRhaW5zIHRoZSBNYXJrZG93biB0ZXh0IHRv
IGJlIHJlbmRlcmVkCmludG8gYGh0bWxgIGFuZCBgcGRmYC4gYGRhdGEvYCBpcyB0aGUgcmVz
b3VyY2UgZGlyZWN0b3J5IHdoaWNoIGNvbnRhaW5zCmJpYmxpb2dyYXBoeSwgaW1hZ2VzLCB2
aWRlb3MgYW5kIG90aGVyIGFzc2V0cy4KCioqUmVuZGVyIERvY3VtZW50YXRpb24gYW5kIEV4
YW1wbGVzKioKCklmIGFsbCBkZXBlbmRlbmNpZXMgaGF2ZSBiZWVuIGluc3RhbGxlZCBhY2Nv
cmRpbmdseSBhbmQgdGhlIGBtYXJreWAKZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQsIGBt
YXJreWAgY2FuIGJlIHVzZWQgdG8gcmVuZGVyIGEgbG9jYWwKY29weSBvZiB0aGUgZG9jdW1l
bnRhdGlvbiwgdGhlIHF1aWNrc3RhcnQgYW5kIHRoZSBleGFtcGxlLgoKVGhlIGZvbGxvd2lu
ZyBjb21tYW5kcyByZW5kZXIgdGhlIE1hcmtkb3duIHRleHQgb2YgdGhlIGRvY3VtZW50YXRp
b24uCgpgYGBiYXNoCmNkICRIT01FCmNkIG1hcmt5Cm1ha2UgYWxsLXBkZgptYWtlIGFsbC1o
dG1sCmBgYAoKRHVyaW5nIGBtYWtlYCBhIG5ldyBkaXJlY3RvcnkgYGJ1aWxkL2AgaXMgY3Jl
YXRlZCwgd2hpY2ggY29udGFpbnMKdGVtcG9yYXJ5IGZpbGVzIChwcmVwcm9jZXNzZWQgTWFy
a2Rvd24gdGV4dCwgbGlua2VkIHRleHQgZm9yIGBodG1sYAphbmQgYHBkZmApLiBUaGUgcmVz
dWx0aW5nIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIGFyZSBwbGFjZWQgaW5zaWRlCmBo
dG1sL2AgYW5kIGBwZGYvYC4gRm9yIHJlbmRlcmluZyBgcGRmYCBhIHRleCBlbnZpcm9ubWVu
dCBsaWtlCmB0ZXhsaXZlYCBuZWVkcyB0byBiZSBpbnN0YWxsZWQuIEZvciByZW5kZXJpbmcg
dGhlIGBodG1sYCBkb2N1bWVudHMsCmBwYW5kb2NgIHJlcXVpcmVzIGludGVybmV0IGFjY2Vz
cywgYmVjYXVzZSBqYXZhIHNjcmlwdHMgYW5kIHN0eWxlCnNoZWV0cyBhcmUgZmV0Y2hlZCBm
cm9tIGNvbnRlbnQgZGVsaXZlcnkgbmV0d29ya3MuCgoqKmBtYXJreWAgTWFrZWZpbGUqKgoK
VGhlIGBtYXJreWAgTWFrZWZpbGUgY29vcmRpbmF0ZXMgdGhlIHRocmVlIHN0ZXBzIG9mIHRo
ZSBgbWFya3lgCmRvY3VtZW50IHByb2Nlc3NpbmcgcGlwZWxpbmU6IHByZXByb2Nlc3Npbmcs
IGxpbmtpbmcgYW5kIHJlbmRlcmluZy4KVGhlIGBtYXJreWAgTWFrZWZpbGUgc3VwcG9ydHMg
c2V2ZXJhbCB0YXJnZXRzIGZvciBkaXNwbGF5aW5nIGhlbHAKb3IgcmVuZGVyaW5nIGFsbCwg
bXVsdGlwbGUgb3Igc3BlY2lmaWMgZG9jdW1lbnRzLgoKKk1ha2VmaWxlIFRhcmdldHMqCgox
LiBgbWFrZSBoZWxwYDogZGlzcGxheSBoZWxwIG1lc3NhZ2Ugb24gdGhlIGNvbnNvbGUKMi4g
YG1ha2UgY2hlYXRgOiBkaXNwbGF5IHRoZSBgbWFya3lgIG1hcmt1cCBDaGVhdCBTaGVldAoz
LiBgbWFrZSBzY2FuYDogc2NhbiBmb3IgbmV3IGRvY3VtZW50cyBgbWQvKi5tZGAgYW5kIHVw
ZGF0ZSBNYWtlZmlsZQo0LiBgbWFrZSBhbGxgOiByZW5kZXIgYWxsIGRvY3VtZW50cyBgbWQv
Ki5tZGAgaW50byBgaHRtbGAgYW5kIGBwZGZgCjUuIGBtYWtlIGFsbC1wZGZgOiByZW5kZXIg
YWxsIGRvY3VtZW50cyBgbWQvKi5tZGAgaW50byBgcGRmYAo2LiBgbWFrZSBhbGwtaHRtbGA6
IHJlbmRlciBhbGwgZG9jdW1lbnRzIGBtZC8qLm1kYCBpbnRvIGBodG1sYAo3LiBgbWFrZSBo
dHRwZGA6IHN0YXJ0IHB5dGhvbiB3ZWJzZXJ2ZXIgaW4gYGh0bWwvYAo4LiBgbWFrZSBjbGVh
bmA6IHJlbW92ZSBhbGwgZmlsZXM6IGBidWlsZC8qYCwgYHBkZi8qYCwgYGh0bWwvKmAKCipN
YWtlIFNpbmdsZSBEb2N1bWVudCoKCldoZW4gcnVubmluZyBgbWFrZSBhbGxgLCBgbWFya3lg
IHJlbmRlcnMgYWxsIGRvY3VtZW50cywgd2hpY2ggY2FuCmJlIHVuZGVzaXJhYmxlIGlmIG9u
bHkgb25lIHBhcnRpY3VsYXIgZG9jdW1lbnQgc2hhbGwgYmUgcmVuZGVyZWQuCkJ5IGBtYWtl
IHNjYW5gLCBgbWFya3lgIHNjYW5zIHRoZSBkaXJlY3RvcnkgYG1kLyoubWRgIGZvciBuZXcg
TWFya2Rvd24KZG9jdW1lbnRzIHRvIGJlIHByb2Nlc3NlZC4gRm9yIGVhY2ggZG9jdW1lbnQs
IHdoaWNoIGhhcyBiZWVuIGZvdW5kLApgbWFya3lgIHNldHMgdXAgYWxpYXMgdGFyZ2V0cyBp
biBvcmRlciB0byBkZWJ1ZyB0aGUgcHJlcHJvY2Vzc2luZywKbGlua2luZyBhbmQgcmVuZGVy
aW5nIG9mIHRoaXMgZG9jdW1lbnQuCgpBc3N1bWluZyB0aGUgZG9jdW1lbnQgYG1kL21hcmt5
Lm1kYCBzaGFsbCBiZSByZW5kZXJlZCBzdGVwIGJ5IHN0ZXAsCmBtYXJreWAgaW50cm9kdWNl
cyB0aGUgZm9sbG93aW5nIHRhcmdldHMuCgoxLiAqUHJlcHJvY2Vzc2luZyo6IGBtYWtlIG1k
LW1hcmt5YCBcCgkqIGBtZC9tYXJreS5tZGAgLT4gYGJ1aWxkL21hcmt5Lm1kYAoyLiAqTGlu
a2luZyBgaHRtbGAqOiBgbWFrZSBsaHRtbC1tYXJreWAgXAoJKiBgYnVpbGQvbWFya3kubWRg
IC0+IGBidWlsZC9tYXJreS5odG1sLm1kYAozLiAqTGlua2luZyBgcGRmYCo6IGBtYWtlIGxw
ZGYtbWFya3lgIFwKCSogYGJ1aWxkL21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kucGRmLm1k
YAo0LiAqUmVuZGVyaW5nIGBodG1sYCo6IGBtYWtlIGh0bWwtbWFya3lgCgkqIGBidWlsZC9t
YXJreS5odG1sLm1kYCAtPiBgaHRtbC9tYXJreS5odG1sYAo1LiAqUmVuZGVyaW5nIGBwZGZg
KjogYG1ha2UgcGRmLW1hcmt5YAoJKiBgYnVpbGQvbWFya3kucGRmLm1kYCAtPiBgcGRmL21h
cmt5LnBkZmAKCi0tLQoKIyBXcml0ZSBBIE5ldyBEb2N1bWVudAoKSW4gb3JkZXIgdG8gcmVu
ZGVyIGEgbmV3IGRvY3VtZW50IHRoZSBNYXJrZG93biB0ZXh0IG5lZWRzIHRvIGJlIHNhdmVk
CnRvIGEgZmlsZSBsb2NhdGVkIGluIGBtZC9leGFtcGxlLm1kYCB3aGljaCBjYW4gYmUgZm91
bmQgcmVuZGVyZWQKW2hlcmVdKGV4YW1wbGUuPz8/KS4gVGhlIGZvbGxvd2luZyBNYXJrZG93
biBzbmlwcGV0CmNhbiBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQuCgpgYGB5YW1sCiEh
ISBleGFtcGxlLm1kIHJhdyA+PjEKYGBgCgotLS0KCiMgQ29kZSBCbG9ja3MKCkNvZGUgYmxv
Y2tzIGFyZSBlbWJlZGRlZCBpbiBNYXJrZG93biB1c2luZyBmZW5jZWQgY29kZSB1c2luZwpl
aXRoZXIgdGhlIGBcIWAgb3IgYFwhIWAgZmxhZyBmb3IgZGlzcGxheWVkIGFuZCBoaWRkZW4g
Y29kZQpyZXNwZWN0aXZlbHkuCgpgYGB0ZXh0CiAgICBgYGBcIQoJQ09ERV9CTE9DS19TSE9X
TgogICAgYGBgCgogICAgYGBgXCEhCglDT0RFX0JMT0NLX0hJRERFTgogICAgYGBgCmBgYAoK
KipEaXNwbGF5IGFuZCBFeGVjdXRlIENvZGUqKgoKVGhpcyBjb2RlIGJsb2NrIGFubm90YXRl
ZCB3aXRoIGAhYCBpcyBkaXNwbGF5ZWQgYW5kIGV4ZWN1dGVkLgoKYGBgIQoJaW1wb3J0IG1h
dGgKCXggPSBtYXRoLnNxcnQoMikKYGBgCgoqKkV4ZWN1dGUgQ29kZSB3aXRob3V0IERpc3Bs
YXkqKgoKVGhlIGNvZGUgYmxvY2sgYW5ub3RhdGVkIHdpdGggYCFgIGlzIG5vdCBkaXNwbGF5
ZWQsIGJ1dCBleGVjdXRlZC4KCmBgYCEhCgl5ID0geCArIDEKYGBgCgoqKkRpc3BsYXkgQ29k
ZSBidXQgZG8gbm90IEV4ZWN1dGUqKgoKVGhpcyBjb2RlIGJsb2NrIGlzIGRpc3BsYXllZCBh
cyBweXRob24sIGJ1dCBub3QgZXhlY3V0ZWQuCgpgYGBweXRob24KCXogPSAwLi8wLgpgYGAK
CioqVXNpbmcgdGhlIFB5dGhvbiBgaW1wb3J0YCBTdGF0ZW1lbnQqKgoKTGFyZ2UgY29kZSBi
bG9ja3MgY2FuIGJlIGltcG9ydGVkIGZyb20gcHl0aG9uIG1vZHVsZXMgYW5kIHRoZQpgaW1w
b3J0YCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQgZm9yIGxvYWRpbmcgaW5zdGFsbGVkIGxpYnJh
cmllcy4KCmBgYHB5dGhvbgoJaW1wb3J0IG51bXB5CglpbXBvcnQgc3lzCglzeXMucGF0aC5h
cHBlbmQoIi4iKQoJI2ltcG9ydCBtb2R1bGVfaW5fd29ya2luZ19kaXJlY3RvcnkKYGBgCgot
LS0KCiMgSW5saW5lIENvZGUKCklubGluZSBzdGF0ZW1lbnRzIGFyZSBkaXJlY3RseSBlbWJl
ZGRlZCBpbnRvIHRoZSB0ZXh0IGZsb3cgdXNpbmcKZXhwcmVzc2lvbnMgYW5kIHZhcmlhYmxl
cyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nCnN5bnRheCBgYCBgXCFFWFBSRVNTSU9OYCBgYCBv
ciBgYCBgXCFWQVJJQUJMRWAgYGAuClRoZSBvdXRwdXQgb2YgdmFyaWFibGVzIGNhbiBiZSBm
b3JtYXR0ZWQgdXNpbmcgdGhlCmBgIGBcIVZBUklBQkxFWzpGT1JNQVRdYCBgYCBvciBgYCBg
XCFFWFBSRVNTSU9OWzpGT1JNQVRdYCBgYApzdGF0ZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBw
eXRob24gb3BlcmF0b3IgYHs8dmFyaWFibGU+Wzo8Zm9ybWF0Pl19YAppbXBsZW1lbnRlZCBp
biB0aGUKW2BzdHIuZm9ybWF0KClgXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJh
cnkvc3RyaW5nLmh0bWwjZm9ybWF0c3RyaW5ncykKc3BlY2lmaWNhdGlvbiBhbmQgdGhlIG9w
ZXJhdG9yIGB7PGV4cHJlc3Npb24+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbgpbYGZg
LXN0cmluZ3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxf
YW5hbHlzaXMuaHRtbCNmLXN0cmluZ3MpLgoKKipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoq
CgpUaGUgcmVzdWx0IG9mICRcc3FydHsyfSQgaXM6CiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBg
ISBtYXRoLnNxcnQoMi4wKWAKKiBmb3JtYXR0ZWQgb3V0cHV0OiBgISAiJS40ZiIgJSBtYXRo
LnNxcnQoMi4wKWAKClRoZSB2YXJpYWJsZSAkeCQgaXMKKiB1bmZvcm1hdHRlZCBvdXRwdXQ6
IGAhIHhgCiogZm9ybWF0dGVkIG91dHB1dDogYCEgeDouNGZgCgpUaGUgdmFyaWFibGUgJHk9
eCsxJCBpcwoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgeWAKKiBmb3JtYXR0ZWQgb3V0cHV0
OiBgISB5Oi40ZmAKCihUaGUgY29kZSBibG9jayBmb3IgdGhlIGRlZmluaXRpb24gb2YgJHkk
IGlzIGhpZGRlbi4pCgoqKklubGluZSBFeHByZXNzaW9uIE91dHB1dCoqCgpgYGAhCgl4ID0g
bGlzdChyYW5nZSgxLCAxMSkpCgl5ID0gW2kqaSBmb3IgaSBpbiB4XQoKCWRlZiBsaXN0X3N0
cihhKToKCQlyZXR1cm4gW3N0cihpKSBmb3IgaSBpbiBhXQoJZGVmIGxpc3RfYW5kKGEpOgoJ
CXJldHVybiAiLCAiLmpvaW4obGlzdF9zdHIoYVs6LTFdKSkgKyAiIGFuZCAiICsgc3RyKGFb
LTFdKQpgYGAKClRoZSBsaXN0IGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSB0ZXh0LiBUaGUg
c3F1YXJlIG9mIHRoZSBmaXJzdApgIWxlbih4KWAgbnVtYmVycyBgIWxpc3RfYW5kKHgpYCBp
cyBgIWxpc3RfYW5kKHkpYC4gU3F1YXJlIG51bWJlcnMKYXJlIGNvbXB1dGVkIGFjY29yZGlu
ZyB0byAkeT14XjIkLgoKKipJbmxpbmUgU3RhdGVtZW50cyBpbiBUYWJsZXMqKgoKYGBgIQoJ
Y2xhc3Mgc3F1YXJlOgoJCWRlZiBfX2luaXRfXyhzZWxmKToKCQkJc2VsZi54ID0gMAoJCWRl
ZiBnZXRfeChzZWxmKToKCQkJcmV0dXJuIHNlbGYueAoJCWRlZiBuZXh0X3koc2VsZik6CgkJ
CXkgPSBzZWxmLngqKjIKCQkJc2VsZi54ICs9IDEKCQkJcmV0dXJuIHkKCXNxID0gc3F1YXJl
KCkKYGBgCgpUaGUgZm9sbG93aW5nIHRhYmxlIGlzIGNvbXB1dGVkIGFjY29yZGluZyB0byAk
eT14XjIkLgoKeCAgICAgICAgICAgIHx5Ci0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0K
YCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95
KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5l
eHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFz
cS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClg
fGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRf
eCgpYHxgIXNxLm5leHRfeSgpYAoKLS0tCgojIEdlbmVyYXRlIE1hcmtkb3duIFRleHQKCk1h
cmtkb3duIHRleHQgY2FuIGJlIHByb2R1Y2VkIGFsZ29yaXRobWljYWxseSBmcm9tIGEgcHl0
aG9uIGFsZ29yaXRobQp1c2luZyB0aGUgYF8oKWAgYW5kIGBfXygpYCBmdW5jdGlvbi4gVGhl
IGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24gYXJlCnNwZWNpYWwgbmFtZXMgd2hpY2ggYXJl
IHJlc2VydmVkIGJ5IGBtYXJreWAuIChyZWZlciB0byBHZW5lcmF0aW9uIG9mCk1hcmtkb3du
IFRleHQsIFtgbWFya3lgIGRvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykgZm9yIGluLWRlcHRo
CmV4cGxhbmF0aW9uKS4KCiMjIFRoZSBgXygpYCBGdW5jdGlvbgoKIFRoZSBgXygpYCBmdW5j
dGlvbiBiYXNpY2x5IHJlc2VtYmxlZCB0aGUgcHl0aG9uIGBwcmludCgpYCBmdW5jdGlvbi4K
YG1hcmt5YCBkb2VzIG5vdCBwYXRjaCB0aGUgc3RhbmRhcmQgYHByaW50KClgIGZ1bmN0aW9u
IHdoaWNoIHN0aWxsCmRpc3BsYXlzIHRleHQgaW4gdGhlIGNvbnNvbGUgYW5kIG5vdCBpbiB0
aGUgTWFya2Rvd24gdGV4dC4KVGhlIGBfKClgIGZ1bmN0aW9uIHN1cHBvcnRzIGFwcGVuZGlu
ZyB0ZXh0IHRvIHRoZSBwcmV2aW91cyBhbmQgdGhlIG5leHQKbGluZSBvZiBvdXRwdXQgYnkg
dXNpbmcgYF9gIGFzIHRoZSBmaXN0IG9yIGxhc3QgcGFyYW1ldGVyLgoxLiBgXyhfLCAqYXJn
cyAgIClgOiBhcHBlbmQgdGhpcyBvdXRwdXQgdG8gcHJldmlvdXMgb3V0cHV0CjIuIGBfKF8s
ICphcmdzLCBfKWA6IGFwcGVuZCB0byBwcmV2aW91cyBhbmQgbmV4dCBvdXRwdXQKMy4gYF8o
ICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQgb3V0cHV0IHRvIHRoaXMgb3V0cHV0CjQuIGBf
KClgOiBkaXNhYmxlIGFwcGVuZCBmbGFnCgoqKk1vbmtleSBQYXRjaCBgcHJpbnQoKWAgRnVu
Y3Rpb24qKgoKVGhlIGBwcmludCgpYCBmdW5jdGlvbiBjYW4gYmUgKm1vbmtleSBwYXRjaGVk
KiB1c2luZyB0aGUgZm9sbG93aW5nCnN0YXRtZW50IGluIG9yZGVyIHRvIGNhbGwgdGhlIGBf
KClgIGZ1bmN0aW9uIGluc3RlYWQuCgpgYGAhCglwcmludCgiUHJpbnQiLCAidG8iLCAgImNv
bnNvbGUiLCAiISIpCglfKCJQcmludCIsICJ0byIsICAiTWFya2Rvd24iLCAiISIpCgoJcHJp
bnQgPSBfICMgbW9ua2V5IHBhdGNoCglwcmludCgiUHJpbnQiLCAidG8iLCAgIk1hcmtkb3du
IiwgIiEiKQpgYGAKCioqSm9pbiBBcmd1bWVudHMgdXNpbmcgYHNlcGAqKgoKVGhlIHNpZ25h
dHVyZSBvZiB0aGUgYF8oKWAgaXMgYF8oKmFyZ3MsIHNlcD0iICIpYC4gYHNlcGAgaXMgdXNl
ZCB0bwpqb2luIHRoZSBhcmd1bWVudHMgYCphcmdzYCBpbnRvIG9uZSBzdHJpbmcuCgpgYGAh
CglfKCJUaGUgZmlyc3QgZml2ZSBuYXR1cmFsIG51bWJlcnMgYXJlOiIpCglfKDEsIDIsIDMs
IDQsIDUsIHNlcD0iLCAiKQpgYGAKCioqR2VuZXJhdGUgYSBUYWJsZSB3aXRoIEFwcGVuZGlu
ZyoqCgpUaGUgYXBwZW5kIGZlYXR1cmUgaXMgdXNlZCB0byBjcmVhdGUgYSB0YWJsZS4KCmBg
YCEKCV8oIkNvbHVtbiAxIiwgXykKCV8oInxDb2x1bW4gMiIsIF8pCglfKCJ8Q29sdW1uIDMi
LCBfKQoJXygpCgoJXygifCIuam9pbihbIi0tLS0tLS0tIl0qMykpCgoJZm9yIGkgaW4gcmFu
Z2UoNSk6CgkJXygiJSA4ZCIgJSAoaSozKSkKCQlmb3IgaiBpbiBbMSwgMl06CgkJCV8oXywg
InwlIDhkIiAlIChpKjMraikpCmBgYAoKVGhlIGFsZ29yaXRobSBwcm9kdWNlcyB0aGUgZm9s
bG93aW5nIE1hcmtkb3duIHRleHQuCgpgYGBtZApDb2x1bW4gMXxDb2x1bW4gMnxDb2x1bW4g
MwotLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLQogICAgICAgMHwgICAgICAgMXwgICAgICAg
MgogICAgICAgM3wgICAgICAgNHwgICAgICAgNQogICAgICAgNnwgICAgICAgN3wgICAgICAg
OAogICAgICAgOXwgICAgICAxMHwgICAgICAxMQogICAgICAxMnwgICAgICAxM3wgICAgICAx
NApgYGAKCiMjIFRoZSBgX18oKWAgRnVuY3Rpb24KCkNvbXBhcmVkIHRvIHRoZSBgXygpYCBm
dW5jdGlvbiwgdGhlIGBfXygpYCBmdW5jdGlvbiBvbmx5IHRha2VzIG9uZQphcmd1bWVudCBh
bmQgaXRzIHB1cnBvc2UgaXMgdG8gb3V0cHV0IGEgZm9ybWF0dGVkIHBhcmFncmFwaCB3aXRo
CmluZGVudGF0aW9uLiBUaGUgc2lnbmF0dXJlIG9mIHRoZSBgX18oKWAgZnVuY3Rpb24gaXMg
YF8oYXJnLCBjcm9wPVRydWUpYC4KCioqR2VuZXJhdGUgYSBQYXJhZ3JhcGggd2l0aCBgZmAt
U3RyaW5ncyoqCgpUaGUgYF9fKClgIGZ1bmN0aW9uIGNhbiBiZSBjb21iaW5lZCB3aXRoIHRy
aXBsZSBxdW90ZWQgYmxvY2sgc3RyaW5ncwphbmQgdGhlIHB5dGhvbiAzIGBmYC1zdHJpbmdz
IG9yIGBmIi4uLiJgIHN0cmluZyBpbnRlcnBvbGF0aW9uLCByZWZlciB0bwpbYGZgLXN0cmlu
Z3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxfYW5hbHlz
aXMuaHRtbCNmLXN0cmluZ3MpLgoKYGBgIQoJaW1wb3J0IHJhbmRvbQoJcyA9IDAKCXJhbmRv
bS5zZWVkKHMpCglwID0gW3JhbmRvbS5yYW5kb20oKSBmb3IgaSBpbiByYW5nZSgzKV0KCglf
XyhmIiIiCgkJUGFyYW1ldGVyIG9uZSBpcyB7cFswXTouM2Z9IGFuZCB0aGUgdmFsdWUgZGVw
ZW5kcyBvbiB0aGUgc2VlZAoJCW9mIHRoZSBwc2V1ZG8gcmFuZG9tIG51bWJlciBnZW5lcmF0
b3IsIHdoaWNoIHdhcyBjaG9zZW4KCQl0byBiZSB7c30uIEZvciB0aGUgc2FtZSBzZWVkIGFs
d2F5cyB0aGUgc2FtZSByYW5kb20gbnVtYmVycwoJCWFyZSBjcmVhdGVkLiBUaGUgbmV4dCB0
d28gbnVtYmVycyBhcmUge3BbMV06LjNmfSBhbmQge3BbMl06LjNmfS4KCQlUaGUgc3VtIG9m
IHRoZSB0aHJlZSBudW1iZXJzIGlzIHtzdW0ocCk6LjNmfSBhbmQgaXQgaXMKCQl7J2dyZWF0
ZXInIGlmIHN1bShwKSA+IDIuIGVsc2UgJ2xlc3NlciBvciBlcXVhbCd9IHRoYW4gdHdvLgoJ
IiIiKQpgYGAKCioqQ3JvcHBpbmcgYW5kIEluZGVudGF0aW9uIG9mIE91dHB1dCoqCgpCZWZv
cmUgdGhlIHRleHQgZ2VuZXJhdGVkIGJ5IHRoZSBgX18oKWAgZnVuY3Rpb24gaXMgcHJpbnRl
ZCBpbnRvIHRoZQpkb2N1bWVudC4gVGhlIHRleHQgaXMgY3JvcHBlZCBhY2NvcmRpbmcgdG8g
dGhlIGxlYWRpbmcgd2hpdGUgc3BhY2UKb2YgdGhlIGZpcnN0IG5vbi1lbXB0eSBsaW5lLiBU
aGUgbGVhZGluZyB3aGl0ZSBzcGFjZSBvZiB0aGUgZmlyc3QKbm9uLWVtcHR5IGxpbmUgaXMg
cmVtb3ZlZCBmcm9tIGFsbCBvdGhlciBsaW5lcyBvZiB0aGUgb3V0cHV0LgoKYGBgIQoJX18o
IiIiCgkJKiBMaXN0IExldmVsIDEKCQkJKiBMaXN0IExldmVsIDIKCQkJKiBMaXN0IExldmVs
IDIKCQkJCSogTGlzdCBMZXZlbCAzCgkJCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVs
IDEKCQkqIExpc3QgTGV2ZWwgMQoJIiIiKQpgYGAKClRoZSBjb2RlIGJsb2NrIHByb2R1Y2Vz
IHRoZSBmb2xsb3dpbmcgb3V0cHV0LgoKYGBgbWQKKiBMaXN0IExldmVsIDEKCSogTGlzdCBM
ZXZlbCAyCgkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAzCgkqIExpc3QgTGV2ZWwg
MgoqIExpc3QgTGV2ZWwgMQoqIExpc3QgTGV2ZWwgMQpgYGAKCioqRGlzYWJsZSBDcm9wcGlu
ZyBvZiBPdXRwdXQqKgoKVGhlIGNyb3BwaW5nIGlzIGRpc2FibGVkIHVzaW5nIHRoZSBrZXl3
b3JkIGBfXyh0ZXh0LCBjcm9wPUZhbHNlKWAuCgpgYGAhCglfXygiIiIKCQkqIExpc3QgTGV2
ZWwgMQoJIiIiLCBjcm9wPVRydWUpCgoJX18oIiIiCgkJKiBMaXN0IExldmVsIDIKCSIiIiwg
Y3JvcD1GYWxzZSkKYGBgCgpUaGUgY29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5n
IG91dHB1dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDIKYGBgCgot
LS0KCiMgRm9ybWF0IERlcGVuZGVudCBMaW5rcwoKV2hlbiB3cml0aW5nIHNldmVyYWwgTWFy
a2Rvd24gZG9jdW1lbnRzIG9mdGVuIGRvY3VtZW50cyBhcmUgbGlua2VkCmJldHdlZW4gZWFj
aCBvdGhlciB1c2luZyB0aGUgTWFya2Rvd24gbGluayBzdGF0ZW1lbnQKYFtMaW5rIE5hbWVd
KGZpbGUuaHRtbClgIG9yIGBbTGluayBOYW1lXShmaWxlLnBkZilgLgpIb3dldmVyLCB3aGVu
IHJlbmRlcmluZyBkb2N1bWVudHMgd2l0aCBsaW5rcyBpbnRvIGBodG1sYCBhbmQgYHBkZmAK
dGhlIGZpbGUgZXh0ZW5zaW9uIG9mdGVuIG11c3QgYmUgYWRqdXN0ZWQgYWNjb3JkaW5nIHRv
IHRoZSBvdXRwdXQgZm9ybWF0LgpgbWFya3lgIHN1cHBvcnRzIHRoZSBgLlw/Pz9gIHN0YXRl
bWVudCwgd2hpY2ggd2lsbCBiZSByZXBsYWNlZCBieQpgLmh0bWxgIG9yIGAucGRmYCBkZXBl
bmRpbmcgb24gdGhlIG91dHB1dCBmb3JtYXQuCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0o
ZmlsZS5cPz8/KQpgYGAKCndpbGwgYmUgcHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2lu
ZyB0ZXh0OgoqIGZvciBgaHRtbGA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAK
KiBmb3IgYHBkZmA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8g
dGhpcyBkb2N1bWVudF0ocXVpY2tzdGFydC4/Pz8pCgotLS0KCiMgRm9ybWF0IERlcGVuZGVu
dCBDb2RlCgpgcGFuZG9jYCBNYXJrZG93biBhbGxvd3MgdG8gd3JpdGUgZm9ybWF0IHNwZWNp
ZmljIGNvZGUgd2l0aGluIE1hcmtkb3duCnVzaW5nIGBodG1sYCBhbmQgKnRleCogZm9yIGBw
ZGZgIGRvY3VtZW50cy4gSG93ZXZlciwgd2hlbiBpbnNlcnRpbmcKcmF3IGBodG1sYCBvciBy
YXcgKnRleCogY29kZSwgdGhlIGRvY3VtZW50IG9ubHkgY2FuIGJlIHJlbmRlcmVkIGludG8K
YGh0bWxgIG9yIGBwZGZgIGFjY29yZGluZ2x5LiBUaGlzIGlzIG9ubHkgYSBzaG9ydCBzdW1t
YXJ5LCBmb3IgYW4KaW4tZGVwdGggZXhwbGFuYXRpb24gb2YgYWxsIGZlYXR1cmVzIHBsZWFz
ZSByZWZlciB0byBGb3JtYXQgQ29kZXMsCltgbWFya3lgIGRvY3VtZW50YXRpb25dKG1hcmt5
Lj8/PykuCgpgbWFya3lgIGludHJvZHVjZXMgZm9ybWF0IGNvZGVzLCB3aGljaCBhcmUgYXBw
bGllZCBkdXJpbmcgbGlua2luZwphZnRlciBwcmVwcm9jZXNzaW5nLiBEdXJpbmcgbGlua2lu
ZyBmb3JtYXQgc3BlY2lmaWMgY29kZXMgZm9yIGBodG1sYAphbmQgYHBkZmAgYXJlIGFwcGxp
ZWQgaW4gYSBjb25zaXN0ZW50IG1hbm5lciwgcmVzdWx0aW5nIGluIGRvY3VtZW50cwp3aXRo
IE1hcmtkb3duIGFuZCBgaHRtbGAgb3IgTWFya2Rvd24gYW5kICp0ZXgqIG9ubHkuIFVzaW5n
IHRoaXMKcGF0dGVybiBgbWFya3lgIGRvY3VtZW50cyBjb250YWluIHJlZ3VsYXIgTWFya2Rv
d24sIHdoaWNoIGNhbiBiZQpyZW5kZXJlZCBpbnRvIGBodG1sYCBhbmQgYHBkZmAsIGFzIHdl
bGwgYXMgZm9ybWF0IHNwZWNpZmljIGNvZGVzCmZvciB0d2Vha2luZyBvciBwb2xpc2hpbmcg
YGh0bWxgIGFuZCBgcGRmYCBvdXRwdXQuCgpGb3JtYXQgY29kZXMgYXJlIHNwZWNpZmllZCBp
biBjb2RlIGJsb2NrcyBhbmQgY2FsbGVkIHVzaW5nIHRoZQppbmxpbmUgc3ludGF4IGBgIGBc
P0ZVTkNBTEwoQVJHUylgIGBgIG9yIGBgIGBcP1ZBUklBQkxFKEFSR1MpYCBgYCwKd2hpY2gg
aXMgdHJhbnNsYXRlZCBpbnRvIHRoZSBmb2xsb3dpbmcgcHlob24gZnVuY3Rpb24gY2FsbHMu
CjEuIGBodG1sRk1UQ09ERShBUkdTKWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYGh0bWxg
LgoyLiBgcGRmRk1UQ09ERShBUkdTKWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYHBkZmAu
CgpBc3N1bWluZyBwcmVwcm9jZXNzaW5nIHRoZSBmaWxlIGBtZC9tYXJreS5tZGAsIGxpbmtp
bmcgZm9ybWF0IGNvZGVzCnJlc3VsdHMgaW4gdGhlIHR3byBmb2xsb3dpbmcgb3V0cHV0IGZp
bGVzLgoxLiBgYnVpbGQvbWFya3kuaHRtbC5tZGA6IGNvbnRhaW5zIG91dHB1dCBvZiBgaHRt
bGAgZm9ybWF0IGNvZGVzLgoyLiBgYnVpbGQvbWFya3kucGRmLm1kYDogY29udGFpbnMgb3V0
cHV0IG9mIGBwZGZgIGZvcm1hdCBjb2Rlcy4KCioqRXhhbXBsZSAxOiBNdWx0aS1Db2x1bW4g
VGV4dCBpbiBgcGRmYCBhbmQgYGh0bWxgKioKCkRlZm5pdGlvbiBvZiB0d28gZm9ybWF0IGNv
ZGVzIGBtY29sX2JlZ2luYCBhbmQgYG1jb2xfZW5kYCwgb25lIGZvciB0aGUKYmVnaW4gb2Yg
bXVsdGkgY29sdW1uIGFuZCBhbm90aGVyIGZvciB0aGUgZW5kIG9mIHRoZSBtdWx0aSBjb2x1
bW4Kc2VjdGlvbi4gVGhlIGZvcm1hdCBjb2RlcyBhcmUgYXBwZW5kZWQgd2l0aCBgX2h0bWxg
IGFuZCBgX3BkZmAKcmVzcGVjdGl2ZWx5LgoKYGBgIQoJZGVmIHBkZl9tY29sX2JlZ2luKCk6
IHJldHVybiByIlxiZWdpbnttdWx0aWNvbHN9ezJ9IgoJZGVmIHBkZl9tY29sX2VuZCgpOiBy
ZXR1cm4gciJcZW5ke211bHRpY29sc30iCglkZWYgaHRtbF9tY29sX2JlZ2luKCk6IHJldHVy
biByIjxkaXYgc3R5bGU9J2NvbHVtbi1jb3VudDogMjsnPiIKCWRlZiBodG1sX21jb2xfZW5k
KCk6IHJldHVybiByIjwvZGl2PiIKYGBgCgpUaGUgYGNvbHVtbi1jb3VudGAgQ1NTIHByb3Bl
cnR5IHJlcXVpcmVzIEludGVybmV0IEV4cGxvcmVyPj0xMCwKRmlyZWZveD49NTIsIFNhZmFy
aT49OSwgT3BlcmE+PTM3IG9yIENocm9tZT49NTAsIHJlZmVyIHRvClt3M3NjaG9vbHNdKGh0
dHBzOi8vd3d3Lnczc2Nob29scy5jb20vY3NzL2NzczNfbXVsdGlwbGVfY29sdW1ucy5hc3Ap
LgpJbiBvcmRlciB0byB1c2UgdGhlIGBtdWx0aWNvbGAgKnRleCogcGFja2FnZSwgdGhlIHN0
YXRlbWVudApgXHVzZXBhY2thZ2V7bXVsdGljb2x9YCBoYXMgdG8gYmUgaW5jbHVkZWQgaW4g
dGhlIHlhbWwgbWV0YSBkYXRhCmluIHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhlIE1hcmtkb3du
IGRvY3VtZW50LgoKYD9fbWNvbF9iZWdpbigpYFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKYD9fbWNv
bF9lbmQoKWAKCioqRXhhbXBsZSAyOiBNdWx0aS1Db2x1bW4gVGV4dCBpbiBgcGRmYCBhbmQg
YGh0bWxgKioKCmBgYCEKCWRlZiBwZGZfbWNvbCh0ZXh0KTogcmV0dXJuIHIiXGJlZ2lue211
bHRpY29sc317Mn0iICsgdGV4dCArIHIiXGVuZHttdWx0aWNvbHN9IgoJZGVmIGh0bWxfbWNv
bCh0ZXh0KTogcmV0dXJuIHIiPGRpdiBzdHlsZT0nY29sdW1uLWNvdW50OiAyOyc+IiArIHIi
PC9kaXY+IgpgYGAKCmA/X21jb2woIiIiClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQKIiIiKWAKCi0tLQoKIyBJbmNsdWRlIFN0YXRlbWVudAoKYG1hcmt5YCBhbGxvd3Mg
dG8gaW5jbHVkZSBvdGhlciBNYXJrZG93biB0ZXh0IHVzaW5nIHRoZSBgXCEhIWAgc3RhdGVt
ZW50LgpQbGVhc2UgcmVmZXIgdG8gdGhlIGBtYXJreWAgZG9jdW1lbnRhdGlvbiBmb3IgY29t
cGxldGUgZGVzY3JpcHRpb24Kb2YgdGhlIGBcISEhYCBzdGF0ZW1lbnQuIER1cmluZyByZW5k
ZXJpbmcgYG1hcmt5YCBrZWVwcyB0cmFjayBvZgppbmNsdWRlZCBmaWxlcyBhbmQgY3JlYXRl
cyBNYWtlZmlsZSBydWxlcyBmb3IgZGVwZW5kZW50IG1ha2UuCgpgYGBtZAoJISEhIGZpbGUu
bWRpCmBgYAoKLS0tCgojIE1ldGEgRGF0YQoKYG1hcmt5YCBzdXBwb3J0cyBkb2N1bWVudCBt
ZXRhIGRhdGEgaW4gTWFya2Rvd24gZnJvbnQgbWF0dGVyLgpUaGlzIGZlYXR1cmUgaXMgbm90
IGV4cGxhaW5lZCBpbiB0aGUgcXVpY2tzdGFydC4gUGxlYXNlIHJlZmVyCnRvIHRoZSBgbWFy
a3lgIGRvY3VtZW50YXRpb24gZm9yIGV4cGxhbmF0aW9uLgoKYGBgbWQKCS0tLQoJTUVUQV9E
QVRBCgktLS0KCU1BUktET1dOCmBgYAoKLS0tCgojIEVzY2FwZSBNYXJrdXAKClRoZSBgbWFy
a3lgIG1hcmt1cCBjYW4gYmUgZXNjYXBlZC4gV2hlbiBtYXJrdXAgaXMgZXNjYXBlZApgbWFy
a3lgIHJlbW92ZXMgdGhlIGVzY2FwZSBzZXF1ZW5jZSBhbmQgcHJpbnRzIG91dCB0aGUKdW5l
c2NhcGVkIHN0YXRlbWVudC4KCk1hcmt1cCAgICAgICAgICAgfEVzY2FwZSBTZXF1ZW5jZXxV
bnNlY2FwZWQgU2VxdWVuY2UKLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0t
LS0tLS0tLS0tLS0tLS0tCmNvZGUgYmxvY2sgaGlkZGVufGBgIGBgYFxcISEgYGAgIHxgYCBg
YGBcISEgYGAKY29kZSBibG9jayBzaG93biB8YGAgYGBgXFwhIGBgICAgfGBgIGBgYFwhIGBg
CmlubGluZSBjb2RlICAgICAgfGBgIGBcXCEuLi5gIGBgIHxgYCBgXCEuLi5gIGBgCmZvcm1h
dCBjb2RlICAgICAgfGBgIGBcXD8uLi5gIGBgIHxgYCBgXD8uLi5gIGBgCmluY2x1ZGUgc3Rh
dGVtZW50fGBcXCEhIWAgICAgICAgIHxgXCEhIWAKZm9ybWF0IGxpbmsgICAgICB8YC5cXD8/
P2AgICAgICAgfGAuXD8/P2AKCi0tLQoKKlRoYW5rcyBmb3IgcmVhZGluZywgcGxlYXNlIHRy
eSBgbWFya3lgLioK
'''
pack_quick_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIHF1aWNrc3RhcnQubWQgcmF3ID4+MQpgYGAK
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IGRhdGEvbWFya3kuYmliCmhlYWRl
ci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAg
IGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9
fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBi
b3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxp
c2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBU
aGlzIGlzIGEgYG1hcmt5YCBleGFtcGxlIGRvY3VtZW50IGZvcgo+IGlsbHVzdHJhdGluZyBg
bWFya3lgIG1hcmt1cC4gVGhlIGBtYXJreWAgc291cmNlIGNvZGUgb2YgdGhpcwo+IGRvY3Vt
ZW50IGNhbiBiZSByZWFkIFtoZXJlXShleGFtcGxlLXNyYy4/Pz8pLgo+IEZvciBtb3JlIGlu
Zm9ybWF0aW9uIHBsZWFzZSByZWZlciB0byB0aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XSho
dHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcvbWFya3kpLAo+IFtgbWFya3lgIGRvY3VtZW50
YXRpb25dKG1hcmt5Lj8/Pykgb3IgdGhlCj4gW2BtYXJreWAgcXVpY2tzdGFydF0ocXVpY2tz
dGFydC4/Pz8pLgoKLS0tCgojIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRo
aXMgaXMgYSByZWZlcmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlv
bl0oZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBVUFB
QUFGQ0FZQUFBQ05ieWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4Z2xq
TkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBp
cyBhIHJlZmVyZW5jZSB0byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0t
LXwtLS0KMDAwfDExMXw0NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMg
dGhlIGNhcHRpb24geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6
bGFiZWwuCgokJFxtYm94e2V9XntcbWJveHtpfVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhp
cyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BN
dWxsZXIxOTkzXS4KCiMgYG1hcmt5YCBNYXJrdXAgZm9yIEV4ZWN1dGlvbiBvZiBFbWJlZGRl
ZCBQeXRob24gQ29kZQoKKipEaXNwbGF5ZWQgQ29kZSwgRXhlY3V0ZWQqKgoKYGBgIQoJaW1w
b3J0IG1hdGgKCWRlZiBsaXN0X2FuZChsKToKCQlyZXR1cm4gIiwgIi5qb2luKHN0cihpKSBm
b3IgaSBpbiBsWzotMV0pICsgIiBhbmQgIiArIHN0cihsWy0xXSkKCgl4ID0gMgoJeSA9IG1h
dGguc3FydCh4KQpgYGAKCioqSGlkZGVuIENvZGUsIEV4ZWN1dGVkKioKCmBgYCEhCglwcmlu
dCgiSGVsbG8gQ29uc29sZSEiKQpgYGAKCioqRGlzcGxheWVkIENvZGUsIE5vdCBFeGVjdXRl
ZCoqCgpgYGBweXRob24KCXggPSAzCmBgYAoKKipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoq
CgpUaGUgc3F1YXJlIHJvb3Qgb2YgJHg9YCF4YCQgaXMgYCF5Oi4zZmAuCgoqKklubGluZSBF
eHByZXNzaW9uKioKClRoZSBmaXJzdCB0ZW4gbnVtYmVycyBhcmUgYCFsaXN0X2FuZChyYW5n
ZSgxMCkpYC4KCioqRm9ybWF0IExpbmtzKioKCmBgYG1kCltMaW5rIHRvIGRvY3VtZW50XShm
aWxlLlw/Pz8pCmBgYAoKd2lsbCBiZSBwcm9wcm9jZXNzZWQgaW50byB0aGUgZm9sbG93aW5n
IHRleHQ6CiogZm9yIGBodG1sYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLmh0bWwpYAoq
IGZvciBgcGRmYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLnBkZilgCgpbTGluayB0byB0
aGlzIGRvY3VtZW50XShleGFtcGxlLj8/PykKCioqRm9ybWF0IENvZGVzKioKCmBgYCEKCWRl
ZiBodG1sX0ZNVENPREUoKTogcmV0dXJuICJIPHN1cD5UPC9zdXA+PHN1Yj5NPC9zdWI+TCIK
CWRlZiBwZGZfRk1UQ09ERSgpOiByZXR1cm4gIlxMYVRlWCIKYGBgCgpUaGlzIGlzIGEgYD9f
Rk1UQ09ERSgpYCBkb2N1bWVudC4KCi0tLQoKKlRoYW5rcyBmb3IgcmVhZGluZywgcGxlYXNl
IHRyeSBgbWFya3lgLioKCi0tLQoKIyBSZWZlcmVuY2VzIHstfQo=
'''
pack_example_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIGV4YW1wbGUubWQgcmF3ID4+MQpgYGAK
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	flag_only_code = 0
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "nodep":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "nobody":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			elif f.startswith("!!"):
				flag_only_code = 2 # only hidden code
			elif f.startswith("!"):
				flag_only_code = 1 # shown and hidden code
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text, run_marky=flag_run_marky,
				shift_atx=flag_shift_atx, shift_str=shift_str, code_only=flag_only_code)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True, read_text=True,
	run_marky=True, shift_atx=0, shift_str="", code_only=0):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			if code_only > 0:
				print("ERROR: opposing flags: code_only and not run_marky")
				exit(1)
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == None:
						continue
					else:
						for k in j.split("\n"):
							if code_only == 0: md_text.append(shift_str + k)
						appendbuf = ""
						continue
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if code_only == 0 and show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					if code_only == 2 and show_code:
						pass
					else:
						rl = run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)
					if code_only == 0:
						for j in rl:
							md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					if code_only == 0: md_text.append(shift_str + i)
				elif i.startswith(r"\\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[2:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[1:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					if code_only == 0:
						j = parse_line(fpath, n, i)
						if j == None:
							appendbuf = i
						else:
							for k in j.split("\n"):
								md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return None
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				text += run_shortcode(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def print_trace(ex):
	def go_deeper(deeep, first=False):
		print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
		if first:
			print("# FILE", args.marky)
		if os.path.exists(deeep.tb_frame.f_code.co_filename):
			with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
				print("#", fh.read().split("\n")[deeep.tb_lineno-1])
		if deeep.tb_next != None:
			go_deeper(deeep.tb_next)
	if ex.__traceback__.tb_next:
		go_deeper(ex.__traceback__.tb_next, first=True)

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		print_trace(ex)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		if "???" in expr:
			shexpr = expr.replace("???", f).strip()
		else:
			shexpr = f + expr.strip()
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		exec_text = list()
		exec_append = False
		try:
			value = eval(shexpr, exec_dict, None)
		except Exception as ex:
			print_trace(ex)
			print("ERROR", type(ex), str(ex))
			exit(1)
		if not value is None:
			__(value)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<?%s %s %s?>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def print_inline(fpath, n, i, text):
	text = text.strip()
	shcode = ""
	for f in ["html", "pdf"]:
		if ":" in text:
			p = text.find(":")
			expr = text[0:p] + "_" + f + text[p:]
		else:
			expr = text + "_" + f
		print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % expr, end="", flush=True)
		try:
			value = ("{" + expr + "}").format(**exec_dict)
		except Exception as ex:
			print("")
			print("ERROR", type(ex), str(ex))
			exit(1)
		if "\n" in value:
			print("")
			print("# OUT")
			for a, b in enumerate(value.split("\n")):
				print("#    %03d" % (a + 1), b)
		else:
			print(" ->", value)
		shcode += "<?%s %s %s?>" % (f, value, f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text, end="", flush=True)
	try:
		if not "'''" in text:
			value = str(eval("f'''{%s}'''" % text, exec_dict, None))
		elif not '"""' in text:
			value = str(eval('f"""{%s}"""' % text, exec_dict, None))
		else:
			raise ValueError("\"\"\" and ''' in expression:", text)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		print("# OUT")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--marky")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	lsep = 2
	p = md_text.find("<?")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("?>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<?", c)
		else:
			p = md_text.find("<?", p + lsep)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
