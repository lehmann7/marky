#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgaW1wb3J0IHN5cwoJIyAgc3lzLnBhdGguYXBwZW5kKCIuIikKCSMgIGltcG9ydCBteW1v
ZHVsZQoJIyAgbmV3X3ZhcnMgPSB7ImEiOiAxLCAiYiI6IDJ9CgkjICBnbG9iYWxzKCkudXBk
YXRlKG5ld192YXJzKQoJIyAgYGBgCgkjCgkjICBgYGA/CgkjICBwcmludCgiVGhlIGNvZGUg
aXMgc2hvd24gaW4gdGhlIGRvY3VtZW50LCIpCgkjICBwcmludCgiYnV0IHByaW50ZWQgdGV4
dCBpcyBzaG93biBpbiBjb25zb2xlLiIpCgkjICBfKCJUaGlzIHRleHQgaXMgaW5zZXJ0ZWQg
aW50byBNYXJrZG93biIsIF8pCgkjICBfKF8sICJvdXRwdXQgYW5kIGFwcGVuZGVkIHRvIHBy
ZXYgbGluZS4iKQoJIyAgXygxLCAyLCAzLCBbNCwgNSxdLCAiYSIsICJiIiwgc2VwPSIsICIp
CgkjICBfXygiIiIKCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJIyAg
ICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAgICAqIFRoaXMgaXMgY3Jv
cHBlZCBhbmQgc2hpZnRlZC4KCSMgICIiIiwgY3JvcD1UcnVlLCBzaGlmdD0pCgkjICBgYGAK
CSMKCi5QSE9OWTogY2hlYXQtaW5saW5lCmNoZWF0LWlubGluZToKCSMKCSMgSU5MSU5FLUVY
UFJFU1NJT04KCSMKCSMgIFRoaXMgaXMgYSBQYXJhZ3JhcGggd2l0aCBhbiBgITxleHByZXNz
aW9uPmAuCgkjICBUaGlzIGBcITxleHByZXNzaW9uPmAgd2lsbCBub3QgYmUgcGFyc2VkLgoJ
IwoJIyAgVGhlIGFscGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3
KV1gLgoJIyAgVGhlIGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywg
J0cnXS4KCSMKCSMgIEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDEx
KSkpYC4KCSMgIEEgbmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4K
CSMKCi5QSE9OWTogY2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVE
IE9VVFBVVAoJIwoJIyAgYGBgIQoJIyAgdmFsdWUgPSBmbG9hdCgxLjIzNDUpCgkjICBgYGAK
CSMgIFRoZSBudW1iZXIgYD92YWx1ZWAgaXMgbm90IGZvcm1hdHRlZC4KCSMgIFRoZSBudW1i
ZXIgMS4yMzQ1IGlzIG5vdCBmb3JtYXR0ZWQuCgkjCgkjICBUaGUgbnVtYmVyIGA/dmFsdWU6
LjJmYCBpcyBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjMgaXMgZm9ybWF0dGVkLgoJ
IwoJIyAgVGhlIGBcIXZhbHVlYCBpcyBub3QgcGFyc2VkLgoJIwoKLlBIT05ZOiBjaGVhdC1p
bmNsdWRlCmNoZWF0LWluY2x1ZGU6CgkjCgkjIElOQ0xVREUtU1RBVEVNRU5UCgkjCgkjICAh
ISEgcGF0aC9pbmNsLm1kaSBGTEFHUwoJIyAgXCEhISBUaGlzIGlzIG5vdCBwYXJzZWQgYXMg
aW5jbHVkZSBzdGF0ZW1lbnQuCgkjCgkjIEZsYWdzOgoJIyAgKiByYXc6ICAgICBpbmNsdWRl
IHdpdGhvdXQgYW55IHBhcnNpbmcKCSMgICogbm9tZXRhOiAgaW5jbHVkZSBhbmQgaWdub3Jl
IGFsbCBtZXRhIGRhdGEKCSMgICogbm90ZXh0OiAgaW5jbHVkZSBhbmQgaWdub3JlIGFsbCBN
YXJrZG93biB0ZXh0CgkjICAqIG5vbWFya3k6IGluY2x1ZGUgYnV0IGRvIG5vdCBwcm9jZXNz
IG1hcmt5IG1hcmt1cAoJIyAgKiAjK046ICAgICBpbmNyZWFzZSBsZXZlbCBvZiBBVFggaGVh
ZGluZ3MgYnkgTgoJIyAgKiA+Pk46ICAgICBpbmNyZWFzZSBpbmRlbnRhdGlvbiBsZXZlbCBi
eSBOIHRhYnMKCSMgICogPk46ICAgICAgaW5jcmVhc2UgaW5kZW50YXRpb24gbGV2ZWwgYnkg
TiBzcGFjZXMKCSMgICogbm9yZWY6ICAgaW5jbHVkZSB3aXRob3V0IE1ha2VmaWxlIGRlcGVu
ZGVuY3kKCSMgICogYXV4OiAgICAgb25seSBNYWtlZmlsZSBkZXBlbmRlbmN5IGJ1dCBubyBw
YXJzaW5nCgkjCgouUEhPTlk6IGNoZWF0LW1ldGEKY2hlYXQtbWV0YToKCSMKCSMgTUVUQSBE
QVRBCgkjCgkjICAtLS0KCSMgIHRpdGxlOiBEb2N1bWVudAoJIyAgZGF0ZTogVG9kYXkKCSMg
IGF1dGhvcjogTmFtZQoJIyAgbGluay1jaXRhdGlvbnM6IHRydWUKCSMgIGJpYmxpb2dyYXBo
eTogYmlibC5iaWIKCSMgIGZvbnRzaXplLS1wZGY6IDExcHQKCSMgIGZvbnRzaXplLS1odG1s
OiAxMHB0CgkjICBoZWFkZXItaW5jbHVkZXMtLXBkZjogPgoJIyAgICAgXHVzZXBhY2thZ2V7
Li4ufQoJIyAgICAgXHVzZXBhY2thZ2V7Li4ufQoJIyAgaGVhZGVyLWluY2x1ZGVzLS1odG1s
OiA+CgkjICAgICA8c2NyaXB0IC4uLj4KCSMgICAgIDxsaW5rIC4uLj4KCSMgICAgIDxzdHls
ZSAuLi4+CgkjICB4bm9zLWNsZXZlcmVmOiB0cnVlCgkjICB4bm9zLWNhcGl0YWxpc2U6IHRy
dWUKCSMgIC1oaWRkZW5fZmllbGQ6IHRleHQKCSMgIC0tLQoJIwoKLlBIT05ZOiBjaGVhdC1s
aW5rCmNoZWF0LWxpbms6CgkjCgkjIEZPUk1BVCBMSU5LCgkjCgkjICBbTGluayB0byBEb2N1
bWVudF0ocGF0aC90by9maWxlLmh0bWwpCgkjICBbTGluayB0byBEb2N1bWVudF0ocGF0aC90
by9maWxlLnBkZikKCSMgIFtGb3JtYXQgTGluayB0byBEb2N1bWVudF0ocGF0aC90by9maWxl
Lj8/PykKCSMgIFRoaXMgaXMgbm90IHBhcnNlZCBhcyBmb3JtYXQgbGluayAuXD8/PwoJIwoK
LlBIT05ZOiBjaGVhdC1jb2RlCmNoZWF0LWNvZGU6CgkjCgkjIEZPUk1BVCBDT0RFCgkjCgkj
ICAgYGBgPwoJIyAgIGRlZiB0ZXN0MV9odG1sKCk6CgkjICAgICAgIF8oIlRoaXMgaXMgSFRN
TDEhIikKCSMgICBkZWYgdGVzdDFfcGRmKCk6CgkjICAgICAgIHJldHVybiAiVGhpcyBpcyBc
e1BERjFcfSEiCgkjICAgZGVmIHRlc3QyX2h0bWwoKToKCSMgICAgICAgX18oIiIiCgkjICAg
ICAgICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMg
ICAgICAgICAgIFRoaXMgaXMgSFRNTDIhCgkjICAgICAgICIiIikKCSMgICBkZWYgdGVzdDJf
cGRmKCk6CgkjICAgICAgIHJldHVybiAiIiIKCSMgICAgICAgICAgIFRoaXMgaXMgXHtQREYy
XH0hCgkjICAgICAgICAgICBUaGlzIGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgVGhpcyBp
cyBce1BERjJcfSEKCSMgICAgICAgIiIiCgkjICAgYGBgCgkjICAgUnVuIEZvcm1hdCBDb2Rl
IGA/dGVzdDEoKWAgYW5kIGA/dGVzdDIoKWAuCgkjICAgYD9cdGVzdDEoKWAgYW5kIGA/XHRl
c3QyKClgIGFyZSBub3QgcGFyc2VkLgoJIwoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgouUEhPTlk6
IGFsbAphbGw6ICQoSFRNTCkgJChQREYpCgouUEhPTlk6IGFsbC1tawphbGwtbWs6ICQoTUsp
CgouUEhPTlk6IGFsbC1tZAphbGwtbWQ6ICQoTUQpCgouUEhPTlk6IGFsbC1saW5rCmFsbC1s
aW5rOiAkKE1ESFRNTCkgJChNRFBERikKCi5QSE9OWTogYWxsLWh0bWwKYWxsLWh0bWw6ICQo
SFRNTCkKCi5QSE9OWTogYWxsLXBkZgphbGwtcGRmOiAkKFBERikKCi5QSE9OWTogY2xlYW4K
Y2xlYW46CglybSAtcmYgLi9idWlsZC8qIC4vaHRtbC8qIC4vcGRmLyoKCi5QSE9OWTogaHR0
cGQKaHR0cGQ6CgljZCBodG1sICYmIHB5dGhvbiAtbSBodHRwLnNlcnZlcgoKLlBIT05ZOiBz
Y2FuCnNjYW46IGFsbC1tawoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpidWlsZC8lLm1kLm1rOiBt
ZC8lLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1t
a2RlcCAtLW1hcmt5PSIkPCIKCmJ1aWxkLyUubWQ6IGJ1aWxkLyUubWQubWsKCW1rZGlyIC1w
ICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJreS5weSAtLW1kPSIkQCIKCmJ1aWxkLyUu
aHRtbC5tZDogYnVpbGQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgku
L21hcmt5LnB5IC0tbGluayBodG1sIC0tbWQ9IiQ8IgoKYnVpbGQvJS5wZGYubWQ6IGJ1aWxk
LyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJreS5weSAtLWxp
bmsgcGRmIC0tbWQ9IiQ8IgoKaHRtbC8lLmh0bWw6IGJ1aWxkLyUuaHRtbC5tZAoJbWtkaXIg
LXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCglsbiAtc25mIC4uL2RhdGEgaHRtbC9kYXRhCglw
YW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5vcyAtLWNpdGVwcm9jIC0tZnJvbT1tYXJr
ZG93bityYXdfaHRtbCskKE1ERUwpIC0tdG89aHRtbDUgLS1vdXRwdXQ9IiRAIiAtLXJlc291
cmNlLXBhdGg9Ii4vZGF0YS8iIC0tbWF0aGpheCAtLXNlbGYtY29udGFpbmVkIC0tdGFibGUt
b2YtY29udGVudHMgLS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEKCnBkZi8lLnBkZjog
YnVpbGQvJS5wZGYubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNu
ZiAuLi9kYXRhIHBkZi9kYXRhCglwYW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5vcyAt
LWNpdGVwcm9jIC0tZnJvbT1tYXJrZG93bityYXdfdGV4KyQoTURFTCkgLS10bz1sYXRleCAt
LW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9kYXRhLyIgLS10YWJsZS1vZi1jb250
ZW50cyAtLW51bWJlci1zZWN0aW9ucyAtLWNvbHVtbnM9MSAtLXBkZi1lbmdpbmU9eGVsYXRl
eAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpQU0VVRE89aGVscCB0cmVlIGNoZWF0IGNsZWFuIGh0
dHBkIHNjYW4KCklOQ0ZMQUc9MAoKZGVmaW5lIExPT1BCT0RZCiAgaWZlcSAoJCQoZmlsdGVy
ICQkKFBTRVVETyksJCQoRykpLCkKICAgIElOQ0ZMQUc9MQogIGVuZGlmCmVuZGVmCgppZm5l
cSAoJChNQUtFQ01ER09BTFMpLCkKICAkKGZvcmVhY2ggRywkKE1BS0VDTURHT0FMUyksJChl
dmFsICQoTE9PUEJPRFkpKSkKZW5kaWYKCmlmZXEgKCQoSU5DRkxBRyksMSkKICAtaW5jbHVk
ZSAkKE1LKQplbmRpZgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmRhdGU6IDEuIEF1Z3VzdCAyMDIxCmF1
dGhvcjogSGVucnkgTGVobWFubgpsaW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6
IG1hcmt5LmJpYgpoZWFkZXItaW5jbHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xv
cmxpbmtzPWZhbHNlLAogICBhbGxib3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVy
c3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4q
IHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRy
dWUKeG5vcy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRzaXplOiAxMXB0Ci1maWdzaXplOiBbMTAs
OF0KLWZpZ2RwaTogMzAwCi12ZXJzaW9uOiB1bmRlZmluZWQKCi0tLQohISEgLi4vTWFrZWZp
bGUgYXV4CiEhISAuLi9tYXJreS5weSBhdXgKYGBgIQoJaW1wb3J0IHN1YnByb2Nlc3MKCU1E
ID0gIk1hcmtkb3duIgoJTSA9ICJgbWFya3lgIgoJTUYgPSAiYE1ha2VmaWxlYCIKCU1QID0g
ImBtYXJreS5weWAiCglNcCA9ICJtYXJreS5weSIKCVAgPSAiYHBhbmRvY2AiCglOVSA9ICJg
bnVtcHlgIgoJUEwgPSAiYG1hdHBsb3RsaWJgIgoJUiA9ICJSTWFya2Rvd24iCglRID0gIlF1
YXJ0byIKCUJUID0gImAiCglQMT0gImBfKClgIgoJUDI9ICJgX18oKWAiCgl2ZXJzaW9uID0g
c3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJweXRob24iLCAibWFya3kucHkiLAoJCSItLXZl
cnNpb24iXSkuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkKYGBgCgotLS0KCj4gKipBYnN0cmFj
dCoqIC0tIGA/TWAgaXMgYSBwcmVwcm9jZXNzb3IgZm9yIGA/TURgIHVzaW5nIFB5dGhvbi4K
PiBgP01gIGlzIGluc3BpcmVkIGJ5IFtwYW5kb2NdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcv
KSwKPiBbYD9SYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20vKSwgW2A/UWBdKGh0
dHBzOi8vcXVhcnRvLm9yZy8pLgo+IFRoaXMgZG9jdW1lbnQgaXMgY3JlYXRlZCB1c2luZyBg
P01gIChWZXJzaW9uIGA/dmVyc2lvbmApIGFuZAo+IGNvbnRhaW5zIGV4YW1wbGVzIHdoaWNo
IGlsbHVzdHJhdGUgdGhlIGdlbmVyYXRpb24gb2YKPiBkb2N1bWVudCBjb250ZW50IGZvciBg
aHRtbGAgYW5kIGBwZGZgIGFuZCB0aGUgZHluYW1pY2FsIGFkanVzdG1lbnQKPiBvZiBgP01E
YCB0ZXh0IGR1cmluZyBwcmVwcm9jZXNzaW5nIGJhc2VkIG9uIGBweXRob25gIGNvZGUuCj4g
VGhlIGZ1bGwgcmF3IGA/TWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudGF0aW9uIGFw
cGVuZGVkIGF0Cj4gdGhlIGVuZC4KCi0tLQoKIyBJbnRyb2R1Y3Rpb24KCmA/TWAgaXMgYSBg
P01EYCBwcmVwcm9jZXNzb3Igd2hpY2ggdHJhbnNmb3JtcyBhIGA/TURgIGRvY3VtZW50CnVz
aW5nIHB5dGhvbi4gYD9NYCBpbXBsZW1lbnRzIG5ldyBtYXJrdXAgd2hpY2ggY29udHJvbHMg
dGhlIGV4ZWN1dGlvbgpvZiBweXRob24gY29kZSBhbmQgdGhlIGdlbmVyYXRpb24gYW5kIG1h
bmlwdWxhdGlvbiBvZiBgP01EYCB0ZXh0LgoKYD9NYCBvbmx5IGRlcGVuZHMgb24gYD9QYCBh
bmQgYHB5eWFtbGAuIGA/UGAgaXMgdXNlZCBmb3IgcmVuZGVyaW5nCnRoZSBgP01EYCBpbnRv
IGBodG1sYCBhbmQgYHBkZmAuIGA/UGAgc3VwcG9ydHMgdmFyaW91cyBgP01EYApleHRlbnNp
b25zIGFsbG93aW5nIGZvciBzY2llbnRpZmljIHdyaXRpbmcgdXNpbmcgZXF1YXRpb25zLCBm
aWd1cmVzLAp0YWJsZXMsIGNpdGF0aW9ucyBhbmQgY29ycmVzcG9uZGluZyByZWZlcmVuY2lu
ZyBtZWNoYW5pc20gZm9yIHRoZSBsYXR0ZXIuCmBweXlhbWxgIGlzIHVzZWQgZm9yIHBhcnNp
bmcgbWV0YSBkYXRhIGluIHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhlCmA/TURgIHRleHQgaWYg
aXQgaXMgcHJlc2VudC4KCldvcmtmbG93IGZvciBjcmVhdGluZyBgaHRtbGAgb3IgYHBkZmAg
dXNpbmcgYD9NYAoKMS4gdXNlciB3cml0ZXMgYSBgP01EYCB0ZXh0IGZpbGUgYW5kIHBsYWNl
cyBpdCBpbiBgbWQvKi5tZGAKZGlyZWN0b3J5IHdpdGggdGhlIGV4dGVuc2lvbiBgLm1kYC4g
dGhlIGA/TURgIHRleHQgY29udGFpbnMKc3BlY2lhbCBgP01gIG1hcmt1cCB3aGljaCBleGVj
dXRlcyBweXRob24gY29kZSBhbmQgbWFuaXB1bGF0ZXMKdGhlIGA/TURgIHRleHQuCgoyLiBg
P01gIHRyYW5zZm9ybXMgdGhlIGZpbGVzIGluIGBtZC8qLm1kYCBpbnRvIHJlZ3VsYXIgYD9N
RGAgdGV4dAphbmQgcGxhY2VzIHRoZSB0cmFuc2Zvcm1lZCBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAuIFRoZSB0cmFuc2Zvcm1lZCB0ZXh0Cm9ubHkgY29udGFpbnMgcmVndWxhciBgP01EYCwg
YW5kIHBsYWNlaG9sZGVycyBmb3IgZm9ybWF0IGRlcGVuZGVudApvdXRwdXQgZm9yIGBodG1s
YCBhbmQgYHBkZmAuCgozLiBiZWZvcmUgcmVuZGVyaW5nIGA/TWAgcmVwbGFjZXMgcGxhY2Vo
b2xkZXJzIGZvciBmb3JtYXQgZGVwZW5kZW50Cm91dHB1dCB3aXRoIGNvbnRlbnQgY3JlYXRp
bmcgYSB0ZW1wb3JhcnkgZmlsZSB3aGljaCBvbmx5IGNvbnRhaW5zCnJlZ3VsYXIgYD9NRGAg
dGV4dCBmb3IgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgYWNjb3JkaW5nIHRvCmA/UGAg
YD9NRGAgc3BlY2lmaWNhdGlvbi4KCjQuIHRoZSByZWd1bGFyIGA/TURgIHRleHQgaW4gdGhl
IGZpbGVzIGBidWlsZC8qLm1kYCBpcyByZW5kZXJlZCBpbnRvCmBodG1sYCBhbmQgYHBkZmAg
dXNpbmcgYD9QYC4KClRoZSB0aHJlZSBzdGVwcyBhcmUgaW1wbGVtZW50ZWQgaW4gYD9NUGAg
YW5kIGEgYD9NRmAuIFRoZQpmb2xsb3dpbmcgZG9jdW1lbnQgZGVzY3JpYmVzIHRoZSBzcGVj
aWFsIGA/TWAgbWFya3VwIGFuZCBzaG93cwpob3cgdG8gdXNlIGA/TVBgIGFuZCB0aGUgYD9N
RmAuCgotLS0KCiMgUmVsYXRlZCBXb3JrIHsjc2VjOnJlbGF0ZWR9CgpGb3Igc2NpZW50aWZp
YyByZXBvcnRpbmcgYW5kIHdyaXRpbmcgdXN1YWxseSB0eXBlc2V0dGluZyBzeXN0ZW1zIG9y
CmNvbXBsaWN0ZWQgV1lTSVdZRyBlZGl0b3JzIGFyZSB1c2VkLiBJbiBvcmRlciB0byBzaW1w
bGlmeSB0aGUgd3JpdGluZwpkaWZmZXJlbnQgYXBwcm9hY2hlcyBhbmQgZnJhbWV3b3JrcyBo
YXZlIGJlZW4gZGV2ZWxvcGVkLgoKKiBbYD9QYF0oaHR0cHM6Ly93d3cucGFuZG9jLm9yZy8p
LAoqIFtgP1JgXShodHRwczovL3JtYXJrZG93bi5yc3R1ZGlvLmNvbS8pCiogW1F1YXJ0b10o
aHR0cHM6Ly9xdWFydG8ub3JnLykKKiBbU2NpZW50aWZpYyBgP01EYF0oaHR0cHM6Ly9qYWFu
dG9sbGFuZGVyLmNvbS9wb3N0L3NjaWVudGlmaWMtd3JpdGluZy13aXRoLW1hcmtkb3duLykK
KiBbVGVjaG5pY2FsIGA/UGBdKGh0dHBzOi8vbGVlLXBoaWxsaXBzLm9yZy9wYW5mbHV0ZS1n
bnVwbG90LykKCkFsbCBvZiB0aG9zZSBhcHByb2FjaGVzIHVzZSBgP1BgIGFzIGFuIHVuZGVy
bHlpbmcgZnJhbWV3b3JrIGZvciBkb2N1bWVudApjb252ZXJzaW9uLiBgP1BgIGlzIGEgcG93
ZXJmdWwgZnJhbWV3b3JrIGZvciBjb252ZXJzaW9uIGJldHdlZW4gZGlmZmVyZW50CmRvY3Vt
ZW50IGZvcm1hdHMgaW5jbHVkaW5nIGA/TWAsIGBodG1sYCBhbmQgYHBkZmAuIGA/UGAgaW1w
bGVtZW50cyBhbgpvd24gaW50ZXJuYWwgQVNULCBpbiB3aGljaCBkaWZmZXJlbnQgZG9jdW1l
bnQgZm9ybWF0cyBjYW4gYmUgaW1wb3J0ZWQgYW5kCmV4cG9ydGVkLiBVc2luZyB0aGlzIGlu
dGVybWVkaWF0ZSBkb2N1bWVudCByZXByZXNlbnRhdGlvbiwgYD9QYCBhbGxvd3MKdG8gbW9k
aWZ5IGRvY3VtZW50IHVzaW5nIGZpbHRlcnMsIHdoaWNoIG9wZXJhdGUgb24gdGhlIEFTVC4g
RmlsdGVycwpjYW4gYmUgd3JpdHRlbiBpbiBbYGhhc2tlbGxgXShodHRwczovL3BhbmRvYy5v
cmcvZmlsdGVycy5odG1sKSwKW2BsdWFgXShodHRwczovL3BhbmRvYy5vcmcvbHVhLWZpbHRl
cnMuaHRtbCkgYW5kCltgcHl0aG9uYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL2ZpbHRlcnMuaHRt
bCNidXQtaS1kb250LXdhbnQtdG8tbGVhcm4taGFza2VsbCkuCgpXaGVyZSBhcyBgP1JgIGFu
ZCBgP1FgIGFyZSBpbnRlZ3JhdGVkIGZyYW1ld29ya3MsIHdoaWNoIGFkZGl0aW9uYWxseQpk
ZXBlbmQgb24gYGtuaXRyYCwgYFJTdHVkaW9gLCBgSnVweXRlcmAsIGA/TWAgZGVwZW5kcyBv
biBgP1BgIGFuZCBgcHl5YW1sYApvbmx5LiBgP01gIG5hdGl2ZWx5IG9ubHkgc3VwcG9ydHMg
ZXhlY3V0YWJsZSBweXRob24gY29kZSBibG9ja3MsIGhvd2V2ZXIsCm90aGVyIGxhbmd1YWdl
cyBjYW4gYmUgZXhlY3V0ZWQgdXNpbmcgd3JhcHBlcnMsIHdoaWNoIGFyZSBhdmFpbGFibGUg
Zm9yCm90aGVyIGxhbmd1YWdlcy4KCi0tLQoKIyBgP01gIEZlYXR1cmVzIHsjc2VjOmZlYXR1
cmVzfQoKYD9NYCBpbXBsZW1lbnRzIGZvbGxvd2luZyBmZWF0dXJlcyB1c2luZyBhbiBzaW1w
bGUgYD9NRGAtc3R5bGUgc3ludGF4LgoKMS4gcmVhZCBgP01EYCBtZXRhIGRhdGEgZnJvbSBm
cm9udCBtYXR0ZXIsCnNlZSBAc2VjOm1ldGFkYXRhCmBgYG1kCgktLS0KCQk8a2V5PjogPHZh
bHVlPgoJLS0tCmBgYAoKMi4gZXhlY3V0ZSBhbmQgaGlkZS9zaG93IHB5dGhvbiBjb2RlIGJs
b2NrcyBpbnNpZGUgYD9NRGAgdGV4dCwKc2VlIEBzZWM6YmxvY2sKYGBgbWQKCWAhQlQqM2Ah
CgkJPHB5dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AKCglgIUJUKjNgPwoJCTxweXRob25f
Y29kZV9zaG93bj4KCWAhQlQqM2AKYGBgCgozLiBnZW5lcmF0ZSBgP01EYCB0ZXh0IHVzaW5n
IHB5dGhvbiBjb2RlLCBzZWUgQHNlYzptZHByaW50CmBgYG1kCglgIUJUKjNgIQoJCV8oIjxt
YXJrZG93bl90ZXh0PiIpCgkJX18oIiIiCgkJCTxtYXJrZG93bl90ZXh0PgoJCQk8bWFya2Rv
d25fdGV4dD4KCQkJPG1hcmtkb3duX3RleHQ+CgkJIiIiKQoJYCFCVCozYApgYGAKCjQuIGZv
cm1hdCBvdXRwdXQgb2YgcHl0aG9uIHZhcmlhYmxlcyBpbnRvIGA/TURgIHRleHQsCnNlZSBA
c2VjOmZvcm1hdApgYGBtZAoJT3V0cHV0IGludG8gdGV4dDogYFw/PHB5dGhvbl92YXJpYWJs
ZT5gCmBgYAoKNS4gb3V0cHV0IHRoZSByZXN1bHQgb2YgcHl0aG9uIGV4cHJlc3Npb25zIGlu
dG8gYD9NRGAgdGV4dCwKc2VlIEBzZWM6aW5saW5lCmBgYG1kCglPdXRwdXQgaW50byB0ZXh0
OiBgXCE8cHl0aG9uX2V4cHJlc3Npb24+YApgYGAKCjYuIGluY2x1ZGUgYD9NRGAgdGV4dCwg
bWFrZSBkZXBlbmRlbmNpZXMgYW5kIGZvcndhcmQgbWV0YSBkYXRhLApzZWUgQHNlYzppbmNs
dWRlIGFuZCAhQHNlYzppbmNtZXRhLgpgYGBtZAoJISEhIGluY2x1ZGVfZmlsZS5tZGkKYGBg
Cgo3LiBmb3JtYXQgbGlua3MgaW4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgZm9yCnJl
ZmVyZW5jaW5nIGV4dGVybmFsIGRvY3VtZW50cyBvZiB0aGUgc2FtZSBmb3JtYXQsCnNlZSBA
c2VjOmZvcm1saW5rLgpgYGBtZAoJW0Zvcm1hdCBMaW5rIHRvIGh0bWwvcGRmIGRvY3VtZW50
XShwYXRoL3RvL2ZpbGUuXD8/PykKYGBgCgo4LiB1c2UgZm9ybWF0IGNvZGVzIGluIG9yZGVy
IHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMKY29kZSBpbiBgaHRtbGAgYW5kIGBwZGZgIGRv
Y3VtZW50cywKc2VlIEBzZWM6Zm9ybWNvZGUuCmBgYG1kCglgIUJUKjNgIQoJCWRlZiBjb2Rl
X2h0bWwoKToKCQkJXygiPEhUTUxfQ09ERT4iKQoJCQlyZXR1cm4gIiIiCgkJCQk8TU9SRV9D
T0RFPgoJCQkJPE1PUkVfQ09ERT4KCQkJCTxNT1JFX0NPREU+CgkJCSIiIgoJCWRlZiBjb2Rl
X3BkZigpOgoJCQlfXygiIiIKCQkJCXtURVhfQ09ERX0KCQkJCXtURVhfQ09ERX0KCQkJCXtU
RVhfQ09ERX0KCQkJIiIiKQoJYCFCVCozYAoKCUZvcm1hdCBkZXBlbmRlbnQgb3V0cHV0OiBg
XD9jb2RlKClgCmBgYAoKLS0tCgojIFNjaWVudGlmaWMgV3JpdGluZyBpbiBgP01EYCB7I3Nl
YzpwYW5tZH0KCltgP01EYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3BhbmRv
Y3MtbWFya2Rvd24pIGlzIGEgbWFya3VwCmxhbmd1YWdlIGZvciB0ZWNobmljYWwgd3JpdGlu
Zywgd2l0aCBlbXBoYXNpcyBvbiByZWFkYWJpbGl0eS4gYD9NRGAKY2FuIGJlIHJlbmRlcmVk
IGluIG1hbnkgZm9ybWF0cyBpbmNsdWRpbmcgYGh0bWxgIGFuZCBgcGRmYCBieSB1c2luZwpb
YD9QYF0oaHR0cHM6Ly9wYW5kb2Mub3JnLykgZm9yIGV4YW1wbGUuCgpVc2luZyB2YXJpb3Vz
IGA/TURgIGV4dGVuc2lvbnMgb2YgYD9QYCBhIHN1ZmZpY2llbnQgc3RydWN0dXJlIGZvcgp3
cml0aW5nIHNjaWVudGlmaWMgZG9jdW1lbnRzIGNhbiBiZSByZWZsZWN0ZWQgdXNpbmcgYD9N
RGAgc3ludGF4LgpgP01gIHVzZXMgdGhlIGZvbGxvd2luZyBgP1BgIGA/TURgIGV4dGVuc2lv
bnMuCiogcGFyc2luZyBleHRlbnNpb25zCgkqIFthbGxfc3ltYm9sc19lc2NhcGFibGVdKGh0
dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYWxsX3N5bWJvbHNfZXNj
YXBhYmxlKQoJKiBbaW50cmF3b3JkX3VuZGVyc2NvcmVzXShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWludHJhd29yZF91bmRlcnNjb3JlcykKCSogW2VzY2Fw
ZWRfbGluZV9icmVha3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNp
b24tZXNjYXBlZF9saW5lX2JyZWFrcykKCSogW3NwYWNlX2luX2F0eF9oZWFkZXJdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3BhY2VfaW5fYXR4X2hlYWRl
cikKCSogW2xpc3RzX3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZV0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1saXN0c193aXRob3V0X3ByZWNlZGluZ19i
bGFua2xpbmUpCiogc3R5bGluZyBleHRlbnNpb25zCgkqIFtpbmxpbmVfY29kZV9hdHRyaWJ1
dGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWlubGluZV9j
b2RlX2F0dHJpYnV0ZXMpCgkqIFtzdHJpa2VvdXRdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNleHRlbnNpb24tc3RyaWtlb3V0KQoqIHN0cnVjdHVyaW5nIGV4dGVuc2lvbnMK
CSogW3lhbWxfbWV0YWRhdGFfYmxvY2tdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24teWFtbF9tZXRhZGF0YV9ibG9jaykKCSogW3BpcGVfdGFibGVzXShodHRw
czovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXBpcGVfdGFibGVzKQoJKiBb
bGluZV9ibG9ja3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24t
bGluZV9ibG9ja3MpCgkqIFtpbXBsaWNpdF9maWd1cmVzXShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWltcGxpY2l0X2ZpZ3VyZXMpCgkqIFthYmJyZXZpYXRp
b25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWFiYnJldmlh
dGlvbnMpCgkqIFtpbmxpbmVfbm90ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24taW5saW5lX25vdGVzKQoqIGNvZGUgaW5qZWN0aW9uCgkqIFtyYXdfaHRt
bF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1yYXdfaHRtbCkK
CSogW3Jhd190ZXhdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24t
cmF3X3RleCkKCmA/UGAgc3VwcG9ydHMKW2VxdWF0aW9uc10oaHR0cHM6Ly9wYW5kb2Mub3Jn
L01BTlVBTC5odG1sI2V4dGVuc2lvbi10ZXhfbWF0aF9kb2xsYXJzKQpyZW5kZXJlZCBpbmxp
bmUgYW5kIHNpbmdsZS1saW5lIGluIHRleC1zdHlsZSB1c2luZyBgJC4uLiRgIGFuZCBgJCQu
Li4kJGAsCltiaWJsaW9ncmFwaHldKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNj
aXRhdGlvbnMpCnVzaW5nIHRoZSBgLS1jaXRlcHJvY2Agb3B0aW9uLApbc2VjdGlvbiBudW1i
ZXJpbmddKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taGVhZGVy
X2F0dHJpYnV0ZXMpCnVzaW5nIHRoZSBgLS1udW1iZXItc2VjdGlvbnNgIG9wdGlvbiBhbmQK
W3RhYmxlIG9mIGNvbnRlbnRzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjb3B0
aW9uLS10b2MpCnVzaW5nIHRoZSBgLS10YWJsZS1vZi1jb250ZW50c2Agb3B0aW9uLgoKYD9Q
YCBzdXBwb3J0cyBbYHhub3NgXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mt
eG5vcykgZmlsdGVycwpmb3IgcmVmZXJlbmNpbmcgZG9jdW1lbnQgY29udGVudCBsaWtlCltm
aWd1cmVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZmlnbm9zI3VzYWdl
KSwKW2VxdWF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWVxbm9z
I3VzYWdlKSwKW3RhYmxlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXRh
Ymxlbm9zI3VzYWdlKSwKW3NlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9w
YW5kb2Mtc2Vjbm9zI3VzYWdlKQpieSB1c2luZyB0aGUgYC0tZmlsdGVyIHBhbmRvYy14bm9z
YCBvcHRpb24uCmB4bm9zYCBpbnRlZ3JhdGVzIGNsZXZlciByZWZlcmVuY2VzLCB3aGljaCBt
ZWFucyAiRmlnLiIsICJTZWMuIiwgIkVxLiIKYW5kICJUYWIuIiBhcmUgYWRkZWQgYXV0b21h
dGljYWxseSB0byB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LgpJZiB0aGUgcHJlZml4IGlz
IHRvIGJlIG9taXR0ZWQsIHRoZSByZWZlcmVuY2UgY2FuIGJlIHdyaXR0ZW4gYXMKYFwhQHJl
ZjpsYWJlbGAuCgoqKkV4YW1wbGUqKgpgYGBtZAojIyBSZWZlcmVuY2VkIFNlY3Rpb24geyNz
ZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBzZWM6bGFiZWwuCgohW1RoaXMg
aXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFO
UwpVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJ
QVhESUJLRTBESAp4Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1RXJrSmdnZz09KXsjZmln
OmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxD
ICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoK
VGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVm
ZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9XntcbWJveHtpfVxwaX0rMT0wJCR7
I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwuCgpUaGlzIGlz
IGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KYGBgCgpUaGUgZmlsZSBgbWFya3kuYmliYCBp
cyBzcGVjaWZpZWQgaW4gdGhlIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQKbWF0dGVyIG9mIHRo
ZSBgP01EYCB0ZXh0IGFuZCBjb250YWlucyB0aGUgZm9sbG93aW5nIGFydGljbGUuCgpgYGBi
aWJ0ZXgKISEhIC4uL2RhdGEvbWFya3kuYmliIHJhdwpgYGAKCioqT3V0cHV0KioKCiMjIFJl
ZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8g
QHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFnZS9wbmc7YmFz
ZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBVUFBQUFGQ0FZQUFBQ05ieWJsQUFBQUhF
bEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJK
UlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZmln
OmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1
CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24uIHsjdGJsOmxh
YmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRcbWJveHtlfV57
aVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFi
ZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KCi0tLQoKIyBgP01QYCBD
b21tYW5kLUxpbmUgVXNhZ2UKCiMjIGA/TVBgIFNjcmlwdCBVc2FnZQoKYD9NYCBpcyBzdXBw
bGllZCBhcyBhIHNpbmdsZS1maWxlIHNjcmlwdCB3aGljaCBjb250YWlucyB0aGUgYD9NYApg
P01GYCBhcyB3ZWxsIGFzIHRoZSBgP01gIGRvY3VtZW50YXRpb24gYG1hcmt5Lm1kYCwgYG1h
cmt5Lm1kaWAKYW5kIGBtYXJreS5iaWJgLgoKQWZ0ZXIgZG93bmxvYWRpbmcgYD9NUGAgdGhl
IHNjcmlwdCBuZWVkcyB0byBiZSBwbGFjZWQgaW4gYSBwcm9qZWN0CndvcmtpbmcgZGlyZWN0
b3J5IGB3b3JraW5nX2RpcmAuIFRoZSBzY3JpcHQgY2FuIGJlIGludm9rZWQgdXNpbmcKYSBw
eXRob24gaW50ZXJwcmV0ZXIgYHB5dGhvbmAgYD9NcGAgb3IgaXQgY2FuIGJlIGV4ZWN1dGVk
IHVzaW5nIGEKc2hlbGw6CmBgYGJhc2gKPiBjZCB3b3JraW5nX2Rpcgo+IGNobW9kICt4IG1h
cmt5LnB5Cj4gLi9tYXJreS5weQpgYGAKCkEgbmV3IHByb2plY3QgaXMgaW5pdGlhbGl6ZWQg
aW4gdGhlIGB3b3JraW5nX2RpcmAgdXNpbmcgdGhlIGAtLWluaXRgCm9wdGlvbi4gYD9NYCBj
cmVhdGVzIGEgZGlyZWN0b3J5IHRyZWUgZm9yIHRoZSBwcm9qZWN0LCB3aGljaCBpcwpleHBs
YWluZWQgaW4gZGV0YWlsIGluIEBzZWM6cHJvamVjdC4gVGhlIGA/TWAgYD9NRmAgYW5kCmRv
Y3VtZW50YXRpb24gYG1hcmt5Lm1kYCwgYG1hcmt5Lm1kaWAgYW5kIGBtYXJreS5iaWJgIGFy
ZSBhdXRvLWdlbmVyYXRlZAphbmQgcGxhY2VkIGluc2lkZSB0aGUgc3ViZGlycyBgbWQvYCBh
bmQgYGRhdGEvYCBpbiBgd29ya2luZ19kaXJgCmFjY29yZGluZ2x5LgpgYGBiYXNoCj4gY2Qg
d29ya2luZ19kaXIKPiAuL21hcmt5LnB5IC0taW5pdApXUklURSAuL01ha2VmaWxlCldSSVRF
IC4vbWQvbWFya3kubWQKV1JJVEUgLi9tZC9tYXJreS5tZGkKV1JJVEUgLi9kYXRhL21hcmt5
LmJpYgpVU0FHRQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRtbCBodHRwZGAKMy4g
YG1ha2UgYWxsLXBkZmAKYGBgCgpgP01gIHJlbmRlcnMgdGhlIGRvY3VtZW50YXRpb24gdXNp
bmcgYD9QYCBpbnRvIGBodG1sYCBhbmQKYHBkZmAgdXNpbmcgYG1ha2UgYWxsYC4gYGh0bWxg
IGFuZCBgcGRmYCBkb2N1bWVudHMgY2FuIGJlIHJlbmRlcmVkIGFmdGVyCmluc3RhbGxpbmcg
dGhlIGRlcGVuZGVuY2llcyBgcHl0aG9uLXB5eWFtbGAsIGBwYW5kb2NgIGFuZCBgcGFuZG9j
LXhub3NgCihgcGFuZG9jLWZpZ25vc2AsIGBwYW5kb2Mtc2Vjbm9zYCwgYHBhbmRvYy1lcW5v
c2AsIGBwYW5kb2MtdGFibGVub3NgKS4KVGhlIGRldGFpbHMgYXJlIHNob3duIGluIHRoZSBg
P01GYCBoZWxwIG1lc3NhZ2UgaW4gQHNlYzptYWtlZmlsZS4KCiMjIGA/TWAgUHJvamVjdCBT
dHJ1Y3R1cmUgeyNzZWM6cHJvamVjdH0KCkEgYD9NYCBwcm9qZWN0IGhhcyB0aGUgZm9sbG93
aW5nIHN0cnVjdHVyZSwgd2hpY2ggaXMgYXV0by1nZW5lcmF0ZWQKaW4gdGhlIHByb2plY3Qg
ZGlyZWN0b3J5IGB3b3JraW5nX2RpcmAgYWZ0ZXIgaW52b2NhdGlvbiBvZgpgP01wYCBgLS1p
bml0YC4KYGBgIQoJdGV4dCA9ICIiCglmb3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1
dChbIm1ha2UiLAoJCSJ0cmVlIl0pLmRlY29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlp
ZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJdGV4dCArPSBpICsgIlxuIgpgYGAKCmBgYApgP3Rl
eHRgCmBgYAoKQnkgaW52b2tpbmcgYG1ha2UgYWxsYCBhbGwgZmlsZXMgYG1kLyoubWRgIGFy
ZSB0cmFuc2Zvcm1lZAppbnRvIGNvcnJlc3BvbmRpbmcgYGh0bWwvKi5odG1sYCBhbmQgYHBk
Zi8qLnBkZmAgZmlsZXMuIEJ5Cmludm9raW5nIGBtYWtlIGh0dHBkYCBhIHB5dGhvbiB3ZWIg
c2VydmVyIGlzIHN0YXJ0ZWQgaW4gYGh0bWwvYC4KCkFsbCB1c2VyLWdlbmVyYXRlZCBwcm9q
ZWN0IGNvbnRlbnQgZ29lcyBpbnRvIGBtZC8qLm1kKGkpYCBmb3IKYD9NRGAgdGV4dCBhbmQg
YD9NRGAgaW5jbHVkZSBmaWxlcyBhbmQgYGRhdGEvKmAgZm9yIGltYWdlcywKYmlibGlvZ3Jh
cGh5LCB2aWRlb3MsIGh0bWwgZnJhbWVzLCBldGMuLi4KCioqQVRURU5USU9OOioqIFRoZSBm
aWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMgYGJ1aWxkLyoubWRgIGFyZQoqKmF1dG8tZ2VuZXJh
dGVkKiouIEFsbCB1c2VyLWdlbmVyYXRlZCBjb250ZW50IGAqLm1kYCBhbmQgYCoubWRpYApo
YXMgdG8gYmUgcGxhY2VkIGluc2lkZSB0aGUgZGlyZWN0b3J5IGBtZC9gLiBJbnZva2luZyBg
bWFrZSBjbGVhbmAKd2lsbCBkZWxldGUgYWxsIGZpbGVzIGluIGBodG1sL2AsIGBidWlsZC9g
IGFuZCBgcGRmL2AuCgojIyBgP01gIE1ha2VmaWxlIFVzYWdlIHsjc2VjOm1ha2VmaWxlfQoK
QnkgcnVubmluZyBgbWFrZWAgb3IgYG1ha2UgaGVscGAgaW4gdGhlIHByb2plY3QgYHdvcmtp
bmdfZGlyYCB0aGUKYD9NRmAgaGVscCBpcyBzaG93bi4KYGBgIQoJdGV4dCA9ICIiCglmb3Ig
aSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJCSJoZWxwIl0pLmRlY29k
ZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJdGV4
dCArPSBpICsgIlxuIgpgYGAKCmBgYApgP3RleHRgCmBgYAoKIyMgYD9NYCBDaGVhdCBTaGVl
dAoKQnkgcnVubmluZyBgbWFrZSBjaGVhdGAgaW4gdGhlIHByb2plY3QgYHdvcmtpbmdfZGly
YCB0aGUgYD9NYCBjaGVhdApzaGVldCBpcyBzaG93biwgd2hpY2ggcHJlc2VudHMgYSBxdWlj
ayBvdmVydmlldyBvZiBgP01gIHNwZWNpYWwKbWFya3VwIGZvciBleGVjdXRpb24gb2YgcHl0
aG9uIGNvZGUgYW5kIG1hbmlwdWxhdGlvbiBvZiBgP01EYCB0ZXh0LAphY2NvcmRpbmcgdG8g
dGhlIGZlYXR1cmVzIGRlc2NyaWJlcyBpbiBAc2VjOmZlYXR1cmVzLgpgYGAhCgl0ZXh0ID0g
IiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsibWFrZSIsCgkJImNoZWF0
Il0pLmRlY29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMi
KToKCQkJaSA9IGkucmVwbGFjZShyIi5cPz8/IiwgciIuXFw/Pz8iKQoJCQlpID0gaS5yZXBs
YWNlKHIiLj8/PyIsIHIiLlw/Pz8iKQoJCQl0ZXh0ICs9IGkgKyAiXG4iCmBgYAoKYGBgCmA/
dGV4dGAKYGBgCgotLS0KCiMgYD9NYCBQcmVwcm9jZXNzb3IgTWFya3VwCgojIyBZYW1sIE1l
dGEgRGF0YSBpbiBGcm9udCBNYXR0ZXIgeyNzZWM6bWV0YWRhdGF9CgpNZXRhIGRhdGEgaXMg
YW5ub3RhdGVkIGluIHRoZSBmcm9udCBtYXR0ZXIgb2YgYSBgP01EYCB0ZXh0IGRvY3VtZW50
LgpUaGUgZnJvbnQgbWF0dGVyIG11c3Qgc3RhcnQgaW4gdGhlIGZpcnN0IGxpbmUgd2l0aCBg
LS0tYCBhbmQgcHJlY2VkZXMgYWxsCm90aGVyIHRleHQgYmVpbmcgZmVuY2VkIGJ5IGAtLS1g
LiBUaGUgbWV0YSBkYXRhIGlzIGluIGB5YW1sYCBmb3JtYXQuClRoZSBgeWFtbGAgYmxvY2sg
aXMgcGFyc2VkIHVzaW5nIGBweXRob24tcHl5YW1sYC4gQnkgZGVmYXVsdCBhbGwgbWV0YQpk
YXRhIGlzIGltcG9ydGVkIGludG8gdGhlIHByZXByb2Nlc3NlZCBkb2N1bWVudC4gSWYgYSBt
ZXRhCmRhdGEga2V5IHN0YXJ0cyB3aXRoIGAtYCB0aGUga2V5IGlzIG5vdCBpbXBvcnRlZCBp
bnRvIHRoZSByZXN1bHRpbmcKbWV0YSBkYXRhIG9mIHRoZSBwcmVwcm9jZXNzZWQgZG9jdW1l
bnQsIGhvd2V2ZXIgdGhlIGtleSB3aWxsIGJlCmV4cG9zZWQgaW50byB0aGUgcHl0aG9uIHNj
b2xlIGFzIGEgbG9jYWwgdmFyaWFibGUuIEluIHRoZSBmb2xsb3dpbmcKZXhtYW1wbGUgYWxs
IGtleXMgZXhjZXB0IGBmaWdzaXplYCwgYGZpZ2RwaWAgYW5kIGB2ZXJzaW9uYCBhcmUgY29w
aWVkCmludG8gdGhlIHByZXByb2Nlc3NlZCBgP01EYCBkb2N1bWVudC4KCioqRXhhbXBsZSoq
CmBgYHlhbWwKCi0tLQp0aXRsZTogYD90aXRsZWAKZGF0ZTogYD9kYXRlYAphdXRob3I6IGA/
YXV0aG9yYApsaW5rLWNpdGF0aW9uczogYD9saW5rX2NpdGF0aW9uc2AKYmlibGlvZ3JhcGh5
OiBgP2JpYmxpb2dyYXBoeWAKaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KICBcaHlwZXJzZXR1
cHsKICBjb2xvcmxpbmtzPWZhbHNlLAogIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogIHBk
ZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1pbmNsdWRlcy0taHRtbDogPgogIDxz
dHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVy
ZWY6IGA/eG5vc19jbGV2ZXJlZmAKeG5vcy1jYXBpdGFsaXNlOiBgP3hub3NfY2FwaXRhbGlz
ZWAKZm9udHNpemU6IGA/Zm9udHNpemVgCi12ZXJzaW9uOiBgP3ZlcnNpb25gCi1maWdzaXpl
OiBgP2ZpZ3NpemVgCi1maWdkcGk6IGA/ZmlnZHBpYAoKLS0tCgpgYGAKClRoZSBtZXRhIGRh
dGEgZmllbGRzCltgdGl0bGVgLCBgZGF0ZWAsIGBhdXRob3JgXShodHRwczovL3BhbmRvYy5v
cmcvTUFOVUFMLmh0bWwjbWV0YWRhdGEtdmFyaWFibGVzKSwKW2BsaW5rLWNpdGF0aW9uc2Bd
KGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNvdGhlci1yZWxldmFudC1tZXRhZGF0
YS1maWVsZHMpLApbYGJpYmxpb2dyYXBoeWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwu
aHRtbCNjaXRhdGlvbi1yZW5kZXJpbmcpIGFuZApbYGhlYWRlci1pbmNsdWRlc2BdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJpYWJsZXMtc2V0LWF1dG9tYXRpY2FsbHkp
CmFyZSBwcm9jZXNzZWQgYnkgYD9QYCBkdXJpbmcgZG9jdW1lbnQgcmVuZGVyaW5nLiBgZm9u
dHNpemVgIGFkanVzdHMgdGhlCmZvbnQgc2l6ZSBpbiBbYGh0bWxgXShodHRwczovL3BhbmRv
Yy5vcmcvTUFOVUFMLmh0bWwjdmFyaWFibGVzLWZvci1odG1sKQphbmQgW2BwZGZgXShodHRw
czovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjdmFyaWFibGVzLWZvci1sYXRleCkgZG9jdW1l
bnRzLgpUaGUgYGhlYWRlci1pbmNsdWRlc2AgZmllbGQgaXMgdXNlZCBmb3IgdW5kZXJsaW5p
bmcgbGlua3MgaW4gYHBkZmAKYW5kIGBodG1sYCBkb2N1bWVudHMuIFRoZSBgeG5vcy1jbGV2
ZXJlZmAgYW5kIGB4bm9zLWNhcGl0YWxpc2VgCmZpZWxkcyBhcmUgdXNlZCBieSB0aGUgW2Bw
YW5kb2MteG5vc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKQpl
eHRlbnNpb25zIGZvciByZWZlcmVuY2luZwpbZmlndXJlc10oaHR0cHM6Ly9naXRodWIuY29t
L3RvbWR1Y2svcGFuZG9jLWZpZ25vcyNjdXN0b21pemF0aW9uKSwKW3RhYmxlc10oaHR0cHM6
Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXRhYmxlbm9zI2N1c3RvbWl6YXRpb24pLApb
c2VjdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjY3Vz
dG9taXphdGlvbikgYW5kCltlcXVhdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNr
L3BhbmRvYy1lcW5vcyNjdXN0b21pemF0aW9uKS4KClRoZSBmaWVsZCBgaGVhZGVyLWluY2x1
ZGVzYCBlbmRzIHdpdGggYC0tcGRmYCBhbmQgYC0taHRtbGAsIHdoaWNoCnNwZWNpZmllcyBj
b3JyZXNwb25kaW5nIG9wdGlvbnMgZm9yIGdlbmVyYXRpb24gb2YgYHBkZmAgYW5kIGBodG1s
YApkb2N1bWVudHMuIER1cmluZyBtYWtlLCBgP01gIHNjYW5zIGFsbCBtZXRhIGRhdGEgZmll
bGRzLCBhbmQKZmllbGRzIHdoaWNoIGVuZCB3aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgIGFy
ZSBzZWxlY3RlZCBhbmQgZm9yd2FyZGVkCnRvIGA/UGAgYmFzZWQgb24gdGhlIGZvcm1hdCB0
byBiZSByZW5kZXJlZC4gVGhpcyB3YXMgZm9ybWF0IGRlcGVuZGVudAptZXRhIGRhdGEgY2Fu
IGJlIHNwZWNpZmllZCBpbiBgP01gIE1hcmtkb3duIHRleHQuCgpUaGUgYHZlcnNpb25gIGZp
ZWxkIGlzIGEgdXNlci1kZWZpbmVkIGZpZWxkCndoaWNoIHNob3dzIHRoZSB2ZXJzaW9uIG9m
IHRoaXMgZG9jdW1lbnQ6ICpgP3ZlcnNpb25gKi4gYGZpZ3NpemVgIGFuZApgZmlnZHBpYCBh
cmUgdXNlZCBpbiB0aGlzIGRvY3VtZW50IHRvIGNvbnRyb2wgdGhlIGZpZ3VyZSBzaXplIGFu
ZApyZXNvbHV0aW9uIGluIHRoZSBgP05VYCBhbmQgYD9QTGAgZXhhbXBsZSwgc2VlIEBzZWM6
ZXhhbXBsZXMuIFRoZSBmb250CnNpemUgaXMgYD9mb250c2l6ZWAgYW5kIHRoZSBAZmlnOmZp
Z3VyZTEsICFAZmlnOmZpZ3VyZTJfMSwKIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUy
XzMgYW5kICFAZmlnOmZpZ3VyZTJfNCBoYXZlIGEgc2l6ZSBvZgpgISJ4Ii5qb2luKHN0cihp
KSBmb3IgaSBpbiBmaWdzaXplKWBjbS4gVGhlIGZvbnQgc2l6ZSBhcHBsaWVzIHRvCmJvdGgg
ZG9jdW1lbnQgdGV4dCBhbmQgZmlndXJlIHRleHQuCgpBcyB0aGUgdXNlci1kZWZpbmVkIGZp
ZWxkcyBhcmUgcHJlY2VlZGVkIHdpdGggYC1gLCB0aGV5IGFyZSBub3QgY29waWVkCmludG8g
dGhlIG1ldGEgZGF0YSBvZiB0aGUgcHJlcHJvY2Vzc2VkIGA/TURgIHRleHQuIFRoZXkgYXJl
IG9ubHkKZXhwb3NlZCBpbnRvIHRoZSBweXRob24gc2NvcGUgYXMgdmFyaWFibGVzIGZvciBw
cm9jZXNzaW5nIHRoZSBgP01gCmA/TURgIHRleHQsIGFzIGRlc2NyaWJlZCBpbiBAc2VjOmlu
Y21ldGEuCgojIyBQeXRob24gQ29kZSBCbG9ja3MgaW5zaWRlIGA/TURgIFRleHQgeyNzZWM6
YmxvY2t9CgpQeXRob24gY29kZSBjYW4gYmUgZXhlY3V0ZWQgZHVyaW5nIHRyYW5zZm9ybWF0
aW9uIG9mIHRoZSBgP01EYCB0ZXh0LgpQeXRob24gY29kZSBpcyBkaXJlY3RseSB3cml0dGVu
IGluc2lkZSB0aGUgYD9NRGAgdGV4dCBhbmQgaXMgZmVuY2VkCnVzaW5nIHRoZSBgYCBgIUJU
KjNgIGBgIHN0YXRlbWVudC4gVGhlIGJsb2NrIG5lZWRzIHRvIHN0YXJ0IHdpdGggZWl0aGVy
CmAhYCBvciBgP2AuCiogYCFgOiBUaGUgcHl0aG9uIGNvZGUgaXMgZXhlY3V0ZWQgYW5kICoq
aGlkZGVuKiogaW4gdGhlIG91dHB1dC4KKiBgP2A6IFRoZSBweXRob24gY29kZSBpcyBleGVj
dXRlZCBhbmQgKipzaG93bioqIGluIHRoZSBvdXRwdXQuCgpgYGBtZAoJYCFCVCozYCEKCQk8
cHl0aG9uX2NvZGVfaGlkZGVuPgoJYCFCVCozYAoKCWAhQlQqM2A/CgkJPHB5dGhvbl9jb2Rl
X3Nob3duPgoJYCFCVCozYApgYGAKCk1ldGEgZGF0YSBmcm9tIGA/TURgIGZyb250IG1hdHRl
ciBjYW4gYmUgdXNlZCBhcyBsb2NhbCB2YXJpYWJsZXMgaW4KcHl0aG9uIGNvZGUgYmxvY2tz
LiBUaGUgYGltcG9ydGAgc3RhdGVtZW50IGNhbiBiZSB1c2VkIGluIHB5dGhvbiBjb2RlCmJs
b2NrcyBpbiBvcmRlciB0byBhY2Nlc3MgaW5zdGFsbGVkIHB5dGhvbiBwYWNrYWdlcy4gQWxs
IGNvZGUgYmxvY2tzCnNwYW4gb25lIGxhcmdlIHNjb3BlIGZvciBzaGFyaW5nIGZ1bmN0aW9u
cyBhbmQgbG9jYWwgdmFyaWFibGVzLgpVc2luZyB0aGUgYHByaW50KClgIGZ1bmN0aW9uIHRo
ZSB0ZXh0IHdpbGwgYmUgcHJpbnRlZCB0byB0aGUgY29uc29sZQphbmQgKipub3QqKiBpbnNp
ZGUgdGhlIHJlc3VsdGluZyBgP01EYCB0ZXh0LiBJbiBvcmRlciB0byBtb2RpZnkKdGhlIGA/
TURgIHRleHQgdXNpbmcgYD9NYCBkdXJpbmcgcHJlcHJvY2Vzc2luZywgdGhlIGA/UDFgIHN0
YXRlbWVudApoYXMgdG8gYmUgdXNlZCwgc2VlIEBzZWM6bWRwcmludC4KCioqRXhhbXBsZSoq
CmBgYD8KCWltcG9ydCBudW1weSBhcyBucAoJZGVmIGdldF94KGE9MCk6CgkJcmV0dXJuIG5w
LmFycmF5KFs0MSArIGFdKQoJeSA9IDEKYGBgCgpUaGlzIGlzIGEgcGFyYWdyYXBoLgoKYGBg
PwoJeCA9IGdldF94KHkpCglwcmludCgiSGVsbG8gQ29uc29sZSEgeCBpcyIsIHgpCmBgYAoK
IyMgR2VuZXJhdGlvbiBvZiBgP01EYCBUZXh0IHVzaW5nIFB5dGhvbiBDb2RlIHsjc2VjOm1k
cHJpbnR9CgojIyMgVGhlIGA/UDFgIFN0YXRlbWVudAoKVXNpbmcgdGhlIGBwcmludCgpYCBz
dGF0ZW1lbnQgdGhlIHRleHQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xlLgpXaGVu
IHVzaW5nIHRoZSBgP1AxYCBhbmQgYD9QMmAgc3RhdGVtZW50cyBuZXcgYD9NRGAgdGV4dCBj
YW4gYmUKaW5zZXJ0ZWQgZHluYW1pY2FsbHkgaW50byB0aGUgZG9jdW1lbnQgZHVyaW5nIHBy
ZXByb2Nlc3NpbmcuCgoqKmA/UDFgIFN0YXRlbWVudCoqCiogYF8oKmFyZ3MsIHNlcD0iICIp
YDoKCTEuIGNvbnZlcnQgYXJndW1lbnRzIHRvIHN0cmluZwoJMi4gam9pbiBhcmd1bWVudHMg
dXNpbmcgYHNlcGAKKiBgXyhfLCAqYXJncyAgIClgOiBhcHBlbmQgdG8gcHJldmlvdXMgb3V0
cHV0CiogYF8oXywgKmFyZ3MsIF8pYDogYXBwZW5kIHRvIHByZXZpb3VzIG91dHB1dCBhbmQg
YXBwZW5kIG5leHQgb3V0cHV0CiogYF8oICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQgb3V0
cHV0IHRvIHRoaXMgb3V0cHV0CgoqKmA/UDJgIFN0YXRlbWVudCoqCiogYF9fKGFyZywgY3Jv
cD1UcnVlLCBzaGlmdD0iIilgOgoJMS4gY29udmVydCBgYXJnYCB0byBzdHJpbmcKCTIuIGNy
b3AgYW5kIHByZXBlbmQgYHNoaWZ0YCBzdHJpbmcgdG8gZWFjaCBsaW5lCiogYF9fKGFyZywg
XylgOiBhcHBlbmQgbmV4dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKCioqQ3JvcCBhbmQgU2hp
ZnQqKgpgYGBweQpkZWYgdGVzdCgpOgoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEKCQkqIExp
c3QgTGV2ZWwgMQoJIiIiKQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDIKCQkqIExpc3QgTGV2
ZWwgMgoJCSAgICAqIExpc3QgTGV2ZWwgMwoJIiIiLCBzaGlmdD0iICIqNCkKYGBgCgpgYGBt
ZAoqIExpc3QgTGV2ZWwgMQoqIExpc3QgTGV2ZWwgMQogICAgKiBMaXN0IExldmVsIDIKICAg
ICogTGlzdCBMZXZlbCAyCiAgICAgICAgKiBMaXN0IExldmVsIDMKYGBgCgoqKkV4YW1wbGUq
KgpgYGA/Cgl5ICs9IDEKCV9fKGYiIiIKCQkqIFRoaXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7
dmVyc2lvbn0qLgoJCSogVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgki
IiIpCglfXyhmIiIiCgkJMS4gVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSou
CgkJMi4gVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkiIiIsIHNoaWZ0
PSIgIio0KQpgYGAKCmBgYD8KCV8oIlRoaXMiLCBfKQoJXygiaXMiKQoJXyhfLCAiIG9uZSIs
IF8pCglfKCJsaW5lISBub3QgZW5kaW5nIHdpdGggXFwiKQoJXygidGhpcz8iKQpgYGAKCmBg
YD8KCV8oZiJIZWxsbyBNYXJrZG93biEgeCBpcyAqKnt4fSoqIGFuZCB5IGlzICp7eX0qIikK
YGBgCgojIyMgSW5kZW50YXRpb24gb2YgdGhlIGA/UDFgIFN0YXRlbWVudAoKVGhlIGA/UDFg
IHN0YXRlbWVudCBuZWVkcyB0byBiZSBpbmRlbnRlZCBhY2NvcmRpbmcgdG8gdGhlIHB5dGhv
biBwcm9ncmFtCmZsb3cgKGBmb3JgLCBgd2hpbGVgLCBgaWZgLCBgZWxzZWAsIGB0cnlgLCBg
d2l0aGAsIGBkZWZgLCBgY2xhc3NgKSBhbmQKc3VwcG9ydHMgZHluYW1pYyBpbnNlcnRpb24g
b2YgYD9NRGAgdGV4dCBpbnRvIHRoZSBkb2N1bWVudCBiYXNlZApvbiBsb29wcyBhbmQgY29u
ZGl0aW9ucy4KCioqRXhhbXBsZSAxKioKCmBgYD8KCV8oIlRoaXMgaXMgdGhlICoqZ2VuZXJh
dGVkIG91dHB1dCoqOiIpCglfKCIiKQoJXygiPiBUaGlzIGlzIGEgKmxpc3RpbmcqOiIpCgl0
ZXh0ID0gWyJ6ZXJvIiwgIm9uZSIsICJ0d28iLCAidGhyZWUiXQoJZm9yIGkgaW4gcmFuZ2Uo
MTApOgoJCWlmIGkgPCAyOgoJCQlfKGYiPiB7aX0iKQoJCWVsaWYgaSA9PSAyOgoJCQlqID0g
dGV4dFtpXQoJCQlfKGYiPiB7an0iKQoJCWVsaWYgaSA9PSAzOgoJCQlfKCIiKQoJCWVsaWYg
aSA8IDc6CgkJCV8oZiI+PiB7JyAgICAnKihpLTQpfSoge2l9IikKCQllbGlmIGkgPT0gNzoK
CQkJXygiIikKCQllbHNlOgoJCQlqID0gaSAtIDcKCQkJayA9IHRleHRbal0KCQkJXyhmIj4g
e2p9LiB7a30iKQpgYGAKCioqRXhhbXBsZSAyKioKCkB0Ymw6dGFibGUxIGlzIGdlbmVyYXRl
ZCB1c2luZyB0aGUgZm9sbG93aW5nIHB5dGhvbiBjbG9kZSBibG9jay4KCmBgYD8KCW4gPSAx
MwoJZGVjID0gWyIqJXMqIiwgIioqJXMqKiIsICJ+fiVzfn4iLCAiYCVzYCIsCgkJciIkXHRp
bWVzXiVzJCIsICIkXGluZnR5XyVzJCJdCglfKCJ8Ii5qb2luKCJYIipuKSArICJcbiIgKyAi
fCIuam9pbigiLSIqbikpCglmb3IgaSBpbiByYW5nZShuKToKCQlmaWxsID0gW2NocihvcmQo
IkEiKSsoMippKzMqayklMjYpIGZvciBrIGluIHJhbmdlKGkrMSldCgkJZmlsbCA9IFtkZWNb
KGwraSklbGVuKGRlYyldJWsgZm9yIGwsIGsgaW4gZW51bWVyYXRlKGZpbGwpXQoJCXRleHQg
PSBsaXN0KCIwIikqbgoJCXRleHRbKG4+PjEpLShpPj4xKToobj4+MSkrKGk+PjEpXSA9IGZp
bGwKCQlfKCJ8Ii5qb2luKHRleHQpKQpgYGAKClRhYmxlOiBUYWJsZSBpcyBnZW5lcmF0ZWQg
dXNpbmcgY29kZSBhbmQgdGhlIGA/UDFgIHN0YXRlbWVudC4geyN0Ymw6dGFibGUxfQoKIyMg
Rm9ybWF0dGVkIE91dHB1dCBvZiBQeXRob24gVmFyaWFibGVzIHsjc2VjOmZvcm1hdH0KCmA/
TWAgY2FuIG91dHB1dCBweXRob24gdmFyaWFibGVzIGlubGluZSBpbnRvIGA/TURgIHRleHQg
dXNpbmcKdGhlIGBgIGBcP1ZBUklBQkxFYCBgYCBzdGF0ZW1lbnQuIGBWQVJJQUJMRWAgY2Fu
IGJlIGFueSBweXRob24gdmFyaWFibGUKZnJvbSBhIHB5dGhvbiBjb2RlIGJsb2NrIG9yIG1l
dGEgZGF0YSBmaWVsZC4gVGhlIG91dHB1dCBjYW4gYmUKZm9ybWF0dGVkIHVzaW5nIHRoZSBg
YCBgXD9WQVJJQUJMRVs6Rk9STUFUXWAgYGAgc3RhdGVtZW50IGFjY29yZGluZwp0byB0aGUg
cHl0aG9uIG9wZXJhdG9yIGB7PHZhcmlhYmxlPls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQg
aW4gdGhlCltgc3RyLmZvcm1hdCgpYF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJy
YXJ5L3N0cmluZy5odG1sI2Zvcm1hdHN0cmluZ3MpCnNwZWNpZmljYXRpb24uIFRoZSBgYCBg
XD9WQVJJQUJMRWAgYGAgc3RhdGVtZW50IGlzIGVzY2FwZWQKdXNpbmcgYGAgYFxcP1ZBUklB
QkxFYCBgYC4KCioqRXhhbXBsZSoqCmBgYD8KCXggPSBpbnQoMSkKCXkgPSBmbG9hdCgyLjMp
Cgl6ID0gMAoJYSA9IFsxLCAyLCAzXQoJYiA9ICg0LCA1KQpgYGAKCmBgYG1kClRoaXMgaXMg
YSBwYXJhZ3JhcGggYW5kIHggaXMgYFw/eDowM2RgIGFuZCB5IGlzIGBcP3k6LjJmYC4KT3Ro
ZXIgY29udGVudCBpczogYFw/YWAsIGBcP2JgIGFuZCBlc2NhcGluZyB3b3JrczogYFxcP3pg
LgpgYGAKClRoaXMgaXMgYSBwYXJhZ3JhcGggYW5kIHggaXMgYD94OjAzZGAgYW5kIHkgaXMg
YD95Oi4yZmAuCk90aGVyIGNvbnRlbnQgaXM6IGA/YWAsIGA/YmAgYW5kIGVzY2FwaW5nIHdv
cmtzOiBgXD96YC4KCiMjIE91dHB1dCBSZXN1bHRzIG9mIFB5dGhvbiBFeHByZXNzaW9ucyB7
I3NlYzppbmxpbmV9CgpgP01gIG91dHB1dHMgcmVzdWx0cyBvZiBweXRob24gZXhwcmVzc2lv
bnMgaW5saW5lIGludG8gYD9NRGAgdGV4dAp1c2luZyB0aGUgYGAgYFwhRVhQUkVTU0lPTmAg
YGAgc3RhdGVtZW50LiBgRVhQUkVTU0lPTmAgY2FuIGJlIGFueSBweXRob24KZXhwcmVzc2lv
bi4gVGhlIGBgIGBcIUVYUFJFU1NJT05gIGBgIHN0YXRlbWVudCBpcyBlc2NhcGVkCnVzaW5n
IGBgIGBcXCFFWFBSRVNTSU9OYCBgYC4KCioqRXhhbXBsZSoqCmBgYG1kClRoaXMgaXMgYSBs
aXN0IHdpdGggdGhlIG51bWJlcnMgYFwhIiwgIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gYV0p
YC4KVGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gYGdldF94YCBpcyBgXCFnZXRfeCgpYCBh
bmQgZXNjYXBpbmcKd29ya3M6IGBcXCFnZXRfeChiWzFdKVswXWAuCmBgYAoKVGhpcyBpcyBh
IGxpc3Qgd2l0aCB0aGUgbnVtYmVycyBgISIsICIuam9pbihbc3RyKGkpIGZvciBpIGluIGFd
KWAuClRoZSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGBnZXRfeGAgaXMgYCFnZXRfeCgpYCBh
bmQgZXNjYXBpbmcKd29ya3M6IGBcIWdldF94KGJbMV0pWzBdYC4KCiMjIEluY2x1ZGUgU3Rh
dGVtZW50IGFuZCBNYWtlIERlcGVuZGVuY2llcyB7I3NlYzppbmNsdWRlfQoKYD9NYCBzdXBw
b3J0cyBpbmNsdWRlIG9mIGA/TURgIHRleHQgdXNpbmcgdGhlIGBcISEhYCBzdGF0ZW1lbnQu
ClRoZSBgXCEhIWAgc3RhdGVtZW50IG11c3QgYmUgb24gYSBzaW5nbGUgbGluZSBhbmQgZm9s
bG93cyB0aGUgcGF0aApvZiB0aGUgaW5jbHVkZSBmaWxlLiBUaGUgcGF0aCBvZiB0aGUgaW5j
bHVkZSBmaWxlIGlzIHJlbGF0aXZlIHRvCnRoZSByb290IGA/TURgIGRvY3VtZW50IHdoaWNo
IGlzIHByb2Nlc3NlZC4gVGhlIHBhdGhzIG9mIGFsbAppbmNsdWRlZCBmaWxlcyBhcmUgY29s
bGVjdGVkIGFuZCBhIGA/TUZgIHJ1bGUgaXMgY3JlYXRlZCBhbmQKc3RvcmVkIGluIGEgZmls
ZSAocGF0aCBvZiBvdXRwdXQgYD9NRGAgdGV4dCBhcHBlbmRlZCB3aXRoIGAubWtgKS4KClRo
ZSBgXCEhIWAgc3RhdGVtZW50IGlzIGVzY2FwZWQgdXNpbmcgYFxcISEhYC4KVGhlIGluY2x1
ZGUgc3RhdGVtZW50ICoqY2Fubm90KiogYmUgdXNlZCBpbiBjb2RlIGJsb2Nrcy4gYD9NYCBg
P01EYAp0ZXh0IG11c3QgaGF2ZSB0aGUgZXh0ZW5zaW9uIGAubWRgIGFuZCBpbmNsdWRlIGZp
bGVzIG11c3QgaGF2ZSB0aGUKZXh0ZW5zaW9uIGAubWRpYAoKVGhlIGluY2x1ZGUgc3RhdGVt
ZW50IHN1cHBvcnRzIGZsYWdzIGZvciBwYXJzaW5nIHRoZSBpbmNsdWRlIGZpbGUuCmBgYG1k
ClwhISEgUEFUSC9GSUxFLm1kaSBGTEFHUwpgYGAKCioqRmxhZ3MqKgoqIGByYXdgOiB0aGUg
ZmlsZSBpcyBpbmNsdWRlZCBhcyBpcyB3aXRob3V0IGFueSBwYXJzaW5nCiogYG5vbWV0YWA6
IG1ldGEgZGF0YSBpbiBmcm9udCBtYXR0ZXIgaXMgc2tpcHBlZCBkdXJpbmcgcGFyc2luZwoq
IGBub3RleHRgOiBhbGwgTWFya2Rvd24gdGV4dCBpcyBza2lwcGVkIGR1cmluZyBwYXJzaW5n
CiogYG5vbWFya3lgOiBpbmNsdWRlIHRoZSBgP01EYCB0ZXh0IHdpdGhvdXQgYW55IGA/TWAg
cHJvY2Vzc2luZwoqIGAjK05gOiBpbmNyZWFzZSB0aGUgbGV2ZWwgb2YgQVRYIGhlYWRpbmdz
IGAjYC4gVGhlIGhlYWRpbmdzIGFyZQpwYXJzZWQgYWNjb3JkaW5nIHRvIGA/UGAgZXh0ZW5z
aW9ucwooW2JsYW5rX2JlZm9yZV9oZWFkZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwu
aHRtbCNleHRlbnNpb24tYmxhbmtfYmVmb3JlX2hlYWRlciksCltzcGFjZV9pbl9hdHhfaGVh
ZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXNwYWNlX2lu
X2F0eF9oZWFkZXIpKQoqIGA+Pk5gOiBpbmNyZWFzZSB0aGUgaW5kZW50YXRpb24gdXNpbmcg
YE5gIHRhYnMKKiBgPk5gOiBpbmNyZWFzZSB0aGUgaW5kZW50YXRpb24gdXNpbmcgYE5gIHNw
YWNlcwoqIGBub3JlZmA6IGRvIG5vdCByZWZlcmVuY2UgdGhpcyBmaWxlIGFzIE1ha2VmaWxl
IGRlcGVuZGVuY3kKKiBgYXV4YDogcmVmZXJlbmNlIGFzIE1ha2VmaWxlIGRlcGVuZGVuY3ks
IGJ1dCBkbyBub3QgcHJvY2VzcwoKKipFeGFtcGxlKioKYGBgbWQKXCEhISBtYXJreS5tZGkg
IysyClRoZSBmaWxlIHdhcyBpbmNsdWRlZDogYFw/aW5jbHVkZWRgIGFuZCAkeD1gXD94YCQg
YW5kICR5PWBcP3lgJC4KYGBgCgohISEgbWFya3kubWRpICMrMgpUaGUgZmlsZSB3YXMgaW5j
bHVkZWQ6IGA/aW5jbHVkZWRgIGFuZCAkeD1gP3hgJCBhbmQgJHk9YD95YCQuCgpUaGUgZmls
ZSBgbWFya3kubWRpYCB3YXMgbG9hZGVkIHdpdGggc2hpZnRpbmcgQVRYIGhlYWRpbmdzIGJ5
IDIgd2hpY2gKbWVhbnMgYCMjYCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgaW5jbHVkZWQgc2Vj
dGlvbi4gVGhlIGZpbGUgY29udGFpbnM6CmBgYG1kCiEhISBtYXJreS5tZGkgcmF3ID4+MQpg
YGAKVGhlIHVubW9kaWZpZWQgc291cmNlIHdhcyBsb2FkZWQgdXNpbmcgdGhlIGZsYWdzIGBy
YXcgPj4xYC4KClRoZSBmaWxlIGBtYXJreS5tZC5ta2AgY29udGFpbnM6CmBgYE1ha2VmaWxl
CmJ1aWxkL21hcmt5Lm1kOiBcCm1kL21hcmt5Lm1kaQoKLlBIT05ZOiBtZC1tYXJreQptZC1t
YXJreTogYnVpbGQvbWFya3kubWQKCi5QSE9OWTogaHRtbC1tYXJreQpodG1sLW1hcmt5OiBo
dG1sL21hcmt5Lmh0bWwKCi5QSE9OWTogcGRmLW1hcmt5CnBkZi1tYXJreTogcGRmL21hcmt5
LnBkZgpgYGAKCiMjIEluY2x1ZGUgU3RhdGVtZW50IGFuZCBNZXRhIERhdGEgSW1wb3J0IHsj
c2VjOmluY21ldGF9CgpUaGUgaW5jbHVkZSBzdGF0ZW1lbnQgYFwhISFgIGxvYWRzIGFuZCBw
YXJzZXMgYW4gYCoubWRpYCBpbmNsdWRlIGZpbGUuClRoZSBgeWFtbGAgbWV0YSBkYXRhIGlu
IHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhlIGRvY3VtZW50IGFsc28gaXMgbG9hZGVkCmFuZCBw
YXJzZWQgaWYgdGhlIGBub21ldGFgIGZsYWcgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgaW5j
bHVkZQpzdGF0ZW1lbnQuIEFzc3VtaW5nIHRoZSByb290IGRvY3VtZW50IGFuZCB0aGUgaW5j
bHVkZWQgZG9jdW1lbnQgaGF2ZSB0aGUKZm9sbG93aW5nIG1ldGEgZGF0YS4KCioqUm9vdCBE
b2N1bWVudCoqCmBgYHlhbWwKCi0tLQp3aWR0aDogMTAKaGVpZ2h0OiAyMAoKLS0tClwhISEg
aW5jbHVkZS5tZGkKYGBgCgoqKkluY2x1ZGVkIERvY3VtZW50KioKYGBgeWFtbAoKLS0tCmRl
cHRoOiAzMAp2b2x1bWU6IDYwMDAKLXNlcmlhbDogQTU2R0hKCgotLS0KYGBgCgpCeSBkZWZh
dWx0IGFsbCBgeWFtbGAgbWV0YSBkYXRhIGZpZWxkcyBhcmUgY29waWVkIHRvIHRoZSBtZXRh
IGRhdGEgb2YKdGhlIHJvb3QgYD9NRGAgZG9jdW1lbnQgd2hpY2ggaXMgcHJvY2Vzc2VkLiBI
b3dldmVyLCBpZiBhIG1ldGEgZGF0YQprZXkgaXMgcHJlY2VlZGVkIGJ5IGAtYCB0aGUga2V5
IGlzIG5vdCBpbXBvcnRlZCBpbnRvIHRoZSByb290IGRvY3VtZW50LgpBbGwgYHlhbWxgIG1l
dGEgZGF0YSBrZXlzIHdoaWNoIHN0YXJ0IHdpdGggYC1gIGFyZSBleHBvc2VkIHRvIHRoZQpw
eXRob24gc2NvcGUgYW5kIHdpbGwgYXBwZWFyIGFzIGxvY2FsIHZhcmlhYmxlcywgYnV0IHRo
ZXkgd2lsbCBub3QKYXBwZWFyIGluIHRoZSBtZXRhIGRhdGEgb2YgdGhlIGZyb250IG1hdHRl
ciBpbiB0aGUgcHJlcHJvY2Vzc2VkCmA/TURgIHRleHQuIEdpdmVuIHRoZSBleGFtcGxlIGFi
b3ZlLCB0aGUgcmVzdWx0aW5nIG1ldGEgZGF0YSBpbgp0aGUgZnJvbnQgbWF0dGVyIG9mIHRo
ZSBwcmVwcm9jZXNzZWQgYD9NRGAgdGV4dCBsb29rcyBhcyBmb2xsb3dzLgoKKipQcmVwcm9j
ZXNzZWQgRG9jdW1lbnQqKgpgYGB5YW1sCgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAKZGVw
dGg6IDMwCnZvbHVtZTogNjAwMAoKLS0tCmBgYAoKIyMgRm9ybWF0IExpbmtzIGZvciBgaHRt
bGAgYW5kIGBwZGZgIERvY3VtZW50cyB7I3NlYzpmb3JtbGlua30KCldoZW4gd3JpdGluZyBt
dWx0aXBsZSBkb2N1bWVudHMsIG9mdGVuIGRvY3VtZW50cyBhcmUgcmVmZXJlbmNlZApiZXR3
ZWVuIGVhY2ggb3RoZXIgdXNpbmcgbGlua3MuIEluIG9yZGVyIHRvIHJlZmVyIHRvIGV4dGVy
bmFsCmBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIHRoZSBgP01EYCBsaW5rIHN0YXRlbWVu
dCBpcyB1c2VkLgpgYGBtZApbTGluayBDYXB0aW9uXShwYXRoL3RvL2ZpbGUuaHRtbCkKW0xp
bmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLnBkZikKYGBgCgpXaGVuIHVzaW5nIHJlbGF0aXZl
IHBhdGhzIGluIHRoZSBVUkwsIHRoZSBkb2N1bWVudHMgY2FuIGJlIHJlZmVyZW5jZWQKYWNj
b3JkaW5nIHRvIHRoZSBkaXJlY3RvcnkgdHJlZSBvZiB0aGUgc291cmNlIGA/TWAgYD9NRGAg
dGV4dApgbWQvKi8qLm1kYC4gSG93ZXZlciwgdGhlIHJlc3VsdGluZyBsaW5rIHdpbGwgYmUg
YSBwYXRoIHJlbGF0aXZlCnRvIHRoZSBkaXJlY3RvcnkgYGh0bWwvYCBmb3IgYGh0bWxgIGRv
Y3VtZW50cyBhbmQgcmVsYXRpdmUgdG8gYHBkZi9gCmZvciBgcGRmYCBkb2N1bWVudHMuIEFz
IGFsbCBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBhcmUga2VwdCBpbgpzZXBhcmF0ZSBk
aXJlY3Rvcmllcywgb25lIGxpbmsgc3RhdGVtZW50IGNhbm5vdCBiZSB1c2VkIGZvciByZW5k
ZXJpbmcKYGh0bWxgIGFuZCBgcGRmYCB3aXRoIGNvbnNpc3RlbnQgcGF0aHMgaW4gdGhlIGxp
bmsgc3RhdGVtZW50LgoKQnkgdXNpbmcgdGhlIGA/TWAgZm9ybWF0IGxpbmsgc3RhdGVtZW50
IGAuXD8/P2AsIHRoZSBmaWxlIGV4dGVuc2lvbgppbiB0aGUgbGlua3MgaXMgcmVwbGFjZWQg
ZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQgZm9ybWF0CnJlc3VsaW5nIGluIGNvbnNpc3RlbnQg
bGlua3MgZm9yIGBodG1sYCBhbmQgYHBkZmAKZG9jdW1lbnRzLiBUaGUgZm9ybWF0IGxpbmsg
c3RhdGVtZW50IGNhbiBiZSBlc2NhcGVkIHVzaW5nIGAuXFw/Pz9gLgoKKipFeGFtcGxlKioK
YGBgbWQKW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0obWFya3kuXD8/PykKYGBgCgpbTGluayB0
byB0aGlzIERvY3VtZW50XShtYXJreS4/Pz8pCgojIyBGb3JtYXQgQ29kZXMgZm9yIGBodG1s
YCBhbmQgYHBkZmAgRG9jdW1lbnRzIHsjc2VjOmZvcm1jb2RlfQoKT2Z0ZW4gd2hlbiB3cml0
aW5nIG1hcmtkb3duIGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cywgdGhlCmZvcm1h
dCBuZWVkcyB0byBiZSBhZGp1c3RlZCBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdC4gYD9QYCBg
P01EYAphbHJlYWR5IHJlbmRlcnMgYWxsIGNvbW1vbiBNYXJrZG93biBpbnRvIGBodG1sYCBh
bmQgYHBkZmAuCmA/TWAgc3VwcG9ydHMgZm9ybWF0IHNwZWNpZmljIHR3ZWFraW5nIHVzaW5n
IGZvcm1hdCBjb2Rlcy4KCkluIG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMgY29k
ZSwgYGh0bWxgIGNvZGUgb3IgYHRleGAgY29kZQpmb3IgYHBkZmAgZG9jdW1lbnRzLCB0aGUg
Zm9ybWF0IGNvZGVzIGFyZSB1c2VkLiBBIGZvcm1hdCBjb2RlIGlzCndyaXR0ZW4gYXMgYGAg
YFw/Q09ERShBUkdTKWAgYGAgd2hpY2ggaXMgdHJhbnNsYXRlZCBpbiB0d28gcHl0aG9uCmZ1
bmN0aW9uIGNhbGxzOgoxLiBgQ09ERV9odG1sKEFSR1MpYDogZm9ybWF0IGNvZGUgZm9yIGlu
amVjdGlvbiBvZiByYXcgYGh0bWxgCmNvZGUgZm9yIHJlbmRlcmluZyBgaHRtbGAtYmFzZWQg
ZG9jdW1lbnRzIGluIGA/UGAuCjIuIGBDT0RFX3BkZihBUkdTKWA6IGZvcm1hdCBjb2RlIGZv
ciBpbmplY3Rpb24gb2YgcmF3IGB0ZXhgCmNvZGUgaW4gYHBkZmAtYmFzZWQgZG9jdW1lbnRz
IGluIGA/UGAuCgpEdXJpbmcgcHJlcHJvY2Vzc2luZywgYD9NYCBwcm9jZXNzZXMgYWxsIGZv
cm1hdCBjb2RlcyBmb3IgZWFjaApmb3JtYXQgYGh0bWxgIGFuZCBgcGRmYCBhbmQgY2FjaGVz
IHRoZSBvdXRwdXQuIEJlZm9yZSByZW5kZXJpbmcKdGhlIE1hcmtkb3duIGluIG9uZSBwYXJ0
aWN1bGFyIGZvcm1hdCB1c2luZyBgP1BgLCBgP01gIGV4dHJhY3RzCnRoZSByZXN1bHRzIG9m
IHRoZSBjb3JyZXNwb25kaW5nIGZvcm1hdCBjb2RlcyBhbmQgc2tpcHMgdGhlIG90aGVycy4K
QWRkaXRpb25hbCBgdGV4YCBwYWNrYWdlcyBoYXZlIHRvIGJlIGluY2x1ZGVkIHVzaW5nIHRo
ZSBtZXRhIGRhdGEKZmllbGQgYGhlYWRlci1pbmNsdWRlc2AuCgpGb3IgcmV0dXJuaW5nIHRo
ZSByYXcgZm9ybWF0IGNvZGUsIGVpdGhlciB0aGUgYD9QMWAgc3RhdGVtZW50IGNhbgpiZSB1
c2VkIEBzZWM6bWRwcmludCAqKm9yKiogdGhlIGByZXR1cm5gIHN0YXRlbWVudCBjYW4gYmUg
dXNlZC4KSWYgYm90aCBzdGF0ZW1lbnRzIGFyZSBtaXhlZCwgdGhlIG91dHB1dCB3aGljaCBo
YWQgYmVlbiByZXR1cm5lZAp3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSB0ZXh0IGdlbmVyYXRl
ZCB3aXRoIHRoZSBgP1AxYCBzdGF0ZW1lbnQuCgoqKkV4YW1wbGUqKgpgYGA/CglkZWYgdGVz
dDFfaHRtbCgpOgoJCV8oIlRoaXMgaXMgSFRNTDEgYW5kIikKCQlyZXR1cm4gIml0IGdvZXMg
b24gaGVyZSEiCglkZWYgdGVzdDFfcGRmKCk6CgkJX18oIiIiCgkJCVRoaXMgaXMgXHtQREYx
XH0gYW5kCgkJIiIiKQoJZGVmIHRlc3QyX2h0bWwoKToKCQlyZXR1cm4gIiIiCgkJCVRoaXMg
aXMgSFRNTDIhCgkJIiIiCglkZWYgdGVzdDJfcGRmKCk6CgkJcGFzcwpgYGAKCmBgYG1kClRo
ZSBvdXRwdXQgb2YgdGhlIGZvcm1hdCBjb2RlIGBcXD90ZXN0MSgpYCBpcyAiYFw/dGVzdDEo
KWAiIGFuZApgXFw/dGVzdDIoKWAgaXMgImBcP3Rlc3QyKClgIiAoaW4gSFRNTCBpdCBpcyBu
b3QgZW1wdHkpLgpgYGAKClRoZSBvdXRwdXQgb2YgdGhlIGZvcm1hdCBjb2RlIGBcP3Rlc3Qx
KClgIGlzICJgP3Rlc3QxKClgIiBhbmQKYFw/dGVzdDIoKWAgaXMgImA/dGVzdDIoKWAiIChp
biBIVE1MIGl0IGlzIG5vdCBlbXB0eSkuCgotLS0KCiMgYD9NYCBgP01EYCBFeGFtcGxlcyB7
I3NlYzpleGFtcGxlc30KCiMjIEphdmFTY3JpcHQgaW4gYGh0bWxgIGFuZCBQbGFjZWhvbGRl
ciBpbiBgcGRmYAoKV2hlbiBjcmVhdGluZyBgP01EYCB0ZXh0IGZvciBgaHRtbGAgb3V0cHV0
LCB0aGUgdXNlciBvZnRlbiB3YW50cwppbnRlcmFjdGl2aXR5IHVzaW5nIHdpZGdldHMgbGlr
ZSBzbGlkZXJzLCBjaGVjayBib3hlcywgZHJvcCBkb3duIGJveGVzCmV0Yy4gSG93ZXZlciwg
d2hlbiBleHBvcnRpbmcgaW50byBgcGRmYCB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlCnJl
cGxhY2VkIHdpdGggbm9uLWludGVyYWN0aXZlIHBsYWNlaG9sZGVycy4gSW4gb3JkZXIgdG8g
ZGV2ZWxvcCBhIHNpbmdsZQpgP01EYCBkb2N1bWVudCwgd2hpY2ggY2FuIGJlIHJlbmRlcmVk
IGluIGBodG1sYCB3aXRoIGludGVyYWN0aXZlCmVsZW1lbnRzIGFuZCBpbnRvIGBwZGZgIHdp
dGggcGxhY2Vob2xkZXIsIHRoZSBgP01gIGZvcm1hdCBjb2RlcyBjYW4gYmUKdXNlZCwgc2Vl
IEBzZWM6Zm9ybWNvZGUuIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZWZpbmVzIGEKYDxpbnB1
dCB0eXBlPSJyYW5nZSI+YCBhbmQgdHdvIGA8c3BhbnM+YCB3aXRoIGBpZD0ibXl2YWwiYCBh
bmQKYGlkPSJteXJlcyJgLCBpbiBvcmRlciB0byB1cGRhdGUgdGhlIHZhbHVlIG9mICR5PXNp
bih4KSQgaW4gYGh0bWxgLiBGb3IKYHBkZmAgb3V0cHV0IHRoZSBlcXVhdGlvbiBhbmQgdGhl
IHZhbHVlIHJhbmdlIGlzIHNob3duLgoKKipFeGFtcGxlKioKYGBgPwoJZGVmIHJhbmdlX2h0
bWwoKToKCQlfXygiIiIKCQkJJHhcaW4gWzAkIDxpbnB1dCB0eXBlPSdyYW5nZScgdmFsdWU9
JzAnIG1pbj0nMCcgbWF4PScxMDAnCgkJCW9uY2hhbmdlPSIKCQkJZG9jdW1lbnQuZ2V0RWxl
bWVudEJ5SWQoJ215dmFsJykuaW5uZXJIVE1MID0gdGhpcy52YWx1ZTsKCQkJZG9jdW1lbnQu
Z2V0RWxlbWVudEJ5SWQoJ215cmVzJykuaW5uZXJIVE1MID0KCQkJTWF0aC5zaW4odGhpcy52
YWx1ZSk7Ij4gJDEwMF0kCgkJIiIiKQoJZGVmIHJhbmdlX3BkZigpOgoJCXJldHVybiAiJHhc
aW5bMCwxMDBdJCIKCWRlZiBmb3JtdWxhX2h0bWwoKToKCQlfXygiIiIKCQkJJHk9c2luKHgp
PSQgPHNwYW4gaWQ9Im15cmVzIj4wLjAwMDwvc3Bhbj4KCQkJd2l0aCAkeD0kIDxzcGFuIGlk
PSJteXZhbCI+MDwvc3Bhbj4KCQkiIiIpCglkZWYgZm9ybXVsYV9wZGYoKToKCQlyZXR1cm4g
IiR5PXNpbih4KSQiCmBgYAoKYGBgbWQKJHgkIGFuZCAkeSQgYXJlIHJlbGF0ZWQgdG8gZWFj
aCBvdGhlciBieSBgXD9mb3JtdWxhKClgLgoKJHgkIG11c3QgYmUgaW4gdGhlIHJhbmdlIGBc
P3JhbmdlKClgLgpgYGAKCiR4JCBhbmQgJHkkIGFyZSByZWxhdGVkIHRvIGVhY2ggb3RoZXIg
YnkgYD9mb3JtdWxhKClgLgoKJHgkIG11c3QgYmUgaW4gdGhlIHJhbmdlIGA/cmFuZ2UoKWAu
CgojIyBHZW5lcmF0ZSBhIEZpZ3VyZSBvbi10aGUtZmx5IGR1cmluZyBQcmVwcm9jZXNzaW5n
CgpUaGlzIHNlY3Rpb24gaWxsdXN0cmF0ZXMgaG93IHB5dGhvbiBtb2R1bGVzIGNhbiBiZSB1
c2VkIHRvIGNyZWF0ZQpkb2N1bWVudCBjb250ZW50LiBEb2N1bWVudCBjb250ZW50IGlzIHBs
YWNlZCBpbnNpZGUgdGhlIGBkYXRhL2AKZGlyZWN0b3J5IG9mIHRoZSBjdXJyZW50IHByb2pl
Y3Qgd29ya2luZyBkaXJlY3RvcnkgKHJlZmVyIHRvIGA/TWAKcHJvamVjdCBzdHJ1Y3R1cmUs
IEBzZWM6cHJvamVjdCkKCiFbVGhpcyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2luZyBgP05V
YCBhbmQKYD9QTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpmaWd1cmUxfQoKW2A/TlVgXShodHRw
czovL3d3dy5udW1weS5vcmcpIGFuZCBbYD9QTGBdKGh0dHBzOi8vd3d3Lm1hdHBsb3RsaWIu
b3JnKQphcmUgcG93ZXJmdWwgcHl0aG9uIG1vZHVsZXMgZm9yIG1hdGhlbWF0aWNhbCBjb21w
dXRpbmcgYW5kIHBsb3QKZ2VuZXJhdGlvbi4gVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dz
IGhvdyB0byBnZW5lcmF0ZSBAZmlnOmZpZ3VyZTEKdXNpbmcgYD9OVWAgYW5kIGA/UExgIGFu
ZCBpbmNsdWRlIGl0IGludG8gdGhlIGRvY3VtZW50LgoKKipFeGFtcGxlKioKCmBgYD8KCWlt
cG9ydCBudW1weSBhcyBucAoJaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoJR1JF
RUsgPSBsYW1iZGEgQTogY2hyKG9yZCh1Ilx1MDM5MSIpICsgb3JkKEEpIC0gb3JkKCJBIikp
CglncmVlayA9IGxhbWJkYSBhOiBjaHIob3JkKHUiXHUwM2IxIikgKyBvcmQoYSkgLSBvcmQo
ImEiKSkKCWNtMmluY2ggPSBsYW1iZGEgeHk6IHR1cGxlKGkvMi41NCBmb3IgaSBpbiB4eSkK
CWZvbnRzaXplID0gaW50KGZvbnRzaXplWzotMl0pICMgY29udmVydCB0byBpbnQKCWZpZ3Np
emUgPSBjbTJpbmNoKGZpZ3NpemUpICMgY29udmVydCBmcm9tIGNtIHRvIGluY2gKCXBhcmFt
cyA9IHsKCQknZmlndXJlLmZpZ3NpemUnOiBmaWdzaXplLAoJCSdsZWdlbmQuZm9udHNpemUn
OiBmb250c2l6ZSwKCQknYXhlcy5sYWJlbHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy50aXRs
ZXNpemUnOiBmb250c2l6ZSwKCQkneHRpY2subGFiZWxzaXplJzogZm9udHNpemUsCgkJJ3l0
aWNrLmxhYmVsc2l6ZSc6IGZvbnRzaXplLAoJCSdmb250LmZhbWlseSc6ICdUaW1lcyBOZXcg
Um9tYW4nCgl9CglwbHQucmNQYXJhbXMudXBkYXRlKHBhcmFtcykKCXggPSBucC5yYW5kb20u
cmFuZCg1MCkKCXkgPSBucC5yYW5kb20ucmFuZCg1MCkKCXBsdC5maWd1cmUoKQoJcGx0LnNj
YXR0ZXIoeCwgeSwgbGFiZWw9IlJhbmRvbSBDb29yZGluYXRlcyIpCgl0ZXh0ID0gIiIuam9p
bihbZ3JlZWsoaSkgZm9yIGkgaW4gWyJhIiwgImIiLCAiYyIsICJkIl1dKQoJcGx0LmFubm90
YXRlKHRleHQsIHh5PSgwLjUsMC41KSwgeHl0ZXh0PSgwLjI1LDAuMjUpLAoJCWFycm93cHJv
cHM9ZGljdChhcnJvd3N0eWxlPSctPicsbHc9MS41KSkKCXBsdC50aXRsZSgiVHdvIFJhbmRv
bSBEYXRhc2V0cyIpCglwbHQueGxhYmVsKHIiRGF0YSAjMSAtICRcbWF0aGRlZmF1bHR7JXNf
MX0kIiAlIEdSRUVLKCJDIikpCglwbHQueWxhYmVsKHIiRGF0YSAjMiAtICRcbWF0aGRlZmF1
bHR7JXNfMn0kIiAlIEdSRUVLKCJEIikpCglwbHQuZ3JpZCgpCglwbHQubGVnZW5kKCkKCXBs
dC50aWdodF9sYXlvdXQoKQoJcGx0LnNhdmVmaWcoImRhdGEvZmlndXJlMS5wbmciLCBkcGk9
ZmlnZHBpKQoJcGx0LmNsb3NlKCJhbGwiKQpgYGAKCmBgYG1kCiFbVGhpcyBGaWd1cmUgd2Fz
IGdlbmVyYXRlZCB1c2luZyBgP05VYAphbmQgYD9QTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpm
aWd1cmUxfQpgYGAKCiMjIEdlbmVyYXRlIGEgU2VxdWVuY2Ugb2YgRmlndXJlcyBvbi10aGUt
Zmx5CgpUaGlzIHNlY3Rpb24gaWxsdXN0cmF0ZXMgaG93IGEgc2VxdWVuY2Ugb2YgY29tcGxl
eCBmaWd1cmVzIGNhbiBiZQpnZW5lcmF0ZWQgdXNpbmcgYD9OVWAgYW5kIGA/UExgIGFuZCBo
b3cgdGhlIGZpZ3VyZXMgYXJlIGZvcm1hdHRlZAp1c2luZyBweXRob24gYW5kIHJlZmVyZW5j
ZWQgdXNpbmcgYD9NYC4KClN1cHBvc2Ugb25lIGV4cGVyaW1lbnQgd2hpY2ggY2FuIGJlIHJ1
biBpbiBmb3VyIGRpZmZlcmVudCBzZXR1cHMgd2l0aApkaWZmZXJlbnQgdmFsdWVzIGZvciAk
XGxhbWJkYT0kCmAhIiwgIi5qb2luKFsiKCVkKSAkJS4yZiRubSIlKGssIDEyNS4zMyprKSBm
b3IgayBpbiByYW5nZSgxLCA1KV0pYC4KRWFjaCBydW4gb2YgdGhlIGV4cGVyaW1lbnQgdXNp
bmcgc2V0dXAgKDEpLS0oNCksIHR3byBhZGRpdGlvbmFsCnBhcmFtZXRlcnMgJFx2YXJlcHNp
bG9uJCBhbmQgJFxhbHBoYSQgYXJlIHZhcnJpZWQgYmV0d2VlbgokMTAuMlxsZG90czMwLjZc
JSQgYW5kICQwLjFcbGRvdHMwLjMkSHogcmVzcGVjdGl2ZWx5LgoKVGhlIHJlc3VsdHMgb2Yg
dGhlIGV4cGVyaW1lbnRzIGZvciB0aGUgc2V0dXBzICgxKS0tKDQpIGFyZSBzdW1tYXJpemVk
CmluIHRoZSBAZmlnOmZpZ3VyZTJfMSwgIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUy
XzMgYW5kCiFAZmlnOmZpZ3VyZTJfNC4KCioqRXhhbXBsZSoqCgpgYGA/CgluID0gMTAwCglh
bHBoYSA9IHUiXHUwM2IxIgoJZXBzaWxvbiA9IHUiXHUwM2I1IgoJbGFtZGEgPSB1Ilx1MDNi
YiIKCWYgPSBsYW1iZGEgeCwgYSwgYjogYSoobnAuc3FydCh4KStiKm5wLnNpbih4KmIpKQoJ
ZyA9IGxhbWJkYSB4LCBhICxiLCBjOiBucC5mYWJzKGYoeCwgYSwgYikgLSBmKGMsIGEsIGIp
KSArIGMKCWRhdCA9IG5wLnplcm9zKChuLTEsIDMsIDMsIDQpLCBkdHlwZT1ucC5mbG9hdDMy
KQoJY29scyA9IFsicmVkIiwgImdyZWVuIiwgImJsdWUiXQoJbWFyayA9IFsibyIsICJ4Iiwg
IjwiXQoJeCA9IG5wLmFycmF5KFs1MC4qeC9uIGZvciB4IGluIHJhbmdlKDEsIG4pXSwgZHR5
cGU9bnAuZmxvYXQzMikKCWZvciBrLCBjIGluIGVudW1lcmF0ZShbMTAuLCAyMC4sIDMwLiwg
NDAuXSk6CgkJZm9yIGksIGEgaW4gZW51bWVyYXRlKFsxLCAyLCA0XSk6CgkJCWZvciBqLCBi
IGluIGVudW1lcmF0ZShbMC4yLCAwLjQsIDAuNl0pOgoJCQkJZGF0WzosIGksIGosIGtdID0g
Zyh4LCBhLCBiLCBjKQoJCXBsdC5maWd1cmUoKQoJCWZvciBqIGluIHJhbmdlKDMpOgoJCQlm
b3IgaSBpbiByYW5nZSgzKToKCQkJCWxhYmVsX2kgPSAiJXM9JS4xZiUlIiAlIChlcHNpbG9u
LCAoaSsxKSoxMC4yKSBcCgkJCQkJaWYgaiA9PSAwIGVsc2UgTm9uZQoJCQkJbGFiZWxfaiA9
ICIlcz0lLjFmSHoiICUgKGFscGhhLCAoaisxKS8xMC4pIFwKCQkJCQlpZiBpID09IDAgZWxz
ZSBOb25lCgkJCQl5ID0gZGF0WzosIGksIGosIGtdLmZsYXR0ZW4oKQoJCQkJcGx0LnBsb3Qo
eCwgeSwgY29sb3I9Y29sc1tpXSwgbHc9MC43NSwgbGFiZWw9bGFiZWxfaSkKCQkJCXBsdC5z
Y2F0dGVyKHhbMTo6NF0sIHlbMTo6NF0sIGNvbG9yPSJibGFjayIsCgkJCQkJbWFya2VyPW1h
cmtbal0sIGx3PTAuNSwgcz01LCBsYWJlbD1sYWJlbF9qKQoJCWsgPSBrICsgMQoJCWt2YWwg
PSBrKjEyNS4zMwoJCXBsdC50aXRsZSgiRXhwZXJpbWVudCBTZXR1cCAjJWQ6ICVzPSUuMmZu
bSIgJSAoaywgbGFtZGEsIGt2YWwpKQoJCXBsdC54bGFiZWwoIlRpbWUgW3NdIikKCQlwbHQu
eWxhYmVsKCJJbnRlbnNpdHkgW2tnL3PCs10iKQoJCXBsdC5ncmlkKCkKCQlwbHQubGVnZW5k
KCkKCQlwbHQudGlnaHRfbGF5b3V0KCkKCQlwbHQuc2F2ZWZpZygiZGF0YS9maWd1cmUyLSVk
LnBuZyIgJSBrLCBkcGk9ZmlnZHBpKQoJCXBsdC5jbG9zZSgiYWxsIikKCQlfXyhmIiIiCgkJ
CSFbVGhpcyBpcyB0aGUgcmVzdWx0IG9mIHRoZSBleHBlcmltZW50IGFjY29yZGluZwoJCQl0
byB0aGUgc2V0dXAgI3trfSB3aXRoICR7bGFtZGF9PXtrdmFsfSRubS4gVGhlIHBhcmFtZXRl
cnMKCQkJJHtlcHNpbG9ufSQgYW5kICR7YWxwaGF9JCBhcmUgdmFycmllZCBiZXR3ZWVuCgkJ
CSQxMC4yXGxkb3RzMzAuNlwlJCBhbmQgJDAuMVxsZG90czAuMyRIegoJCQlyZXNwZWN0aXZl
bHkuXShmaWd1cmUyLXtrfS5wbmcpe3sjZmlnOmZpZ3VyZTJfe2t9fX0KCgkJIiIiKQpgYGAK
Ci0tLQoKIyBgP01gIFNvdXJjZSBmb3IgdGhpcyBEb2N1bWVudAoKYGBgcHl0aG9uCiEhISBt
YXJreS5tZCByYXcgPj4xCmBgYAoKLS0tCgojIFJlZmVyZW5jZXMK
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmA/eDowNWRgfGA/eTouNGZgCg==
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpkYXRlOiAxLiBBdWd1c3QgMjAyMQph
dXRob3I6IEhlbnJ5IExlaG1hbm4KaGVhZGVyLWluY2x1ZGVzLS1wZGY6CiAgIFx1c2VwYWNr
YWdle211bHRpY29sfQogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1h
cmt5YCBtYXJrdXAgdXNpbmcgc2ltcGxlIGV4YW1wbGVzLgoKLS0tCgojIEludHJvZHVjdGlv
bgoKVGhpcyBpcyBhIGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IgaWxsdXN0cmF0
aW5nIGBtYXJreWAgbWFya3VwCnVzaW5nIHNpbXBsZSBleGFtcGxlcy4gVGhpcyBkb2N1bWVu
dCBpcyB0aGUgcmVuZGVyZWQgdmVyc2lvbiBvZgp0aGUgc291cmNlIGNvZGUgcHJlc2VudGVk
IFtoZXJlXShxdWlja3NvdXJjZS4/Pz8pLiBUaGUgYG1hcmt5YCBtYXJrdXAKaXMgY29tcGF0
aWJsZSB3aXRoIHN0YW5kYXJkIE1hcmtkb3duIGFuZCBjYW4gYmUgcmVhZCBhcy1pcy4KVGhp
cyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBvdXRwdXQgb2YgYG1hcmt5YCBhZnRlciBwcm9j
ZXNzaW5nCnB5dGhvbiBjb2RlLCB3aGljaCBpcyBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVu
dCBpdHNlbGYuCkluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhlIGV4YW1wbGVzIGFuZCBzZWUg
dGhlIGNvbXBsZXRlCmBtYXJreWAgc3ludGF4LCB0aGUgc291cmNlIGNvZGUgb2YgdGhpcyBm
aWxlIGNhbiBiZSByZWFkCltoZXJlXShxdWlja3NvdXJjZS4/Pz8pLiBUaGUgY29tcGxldGUg
ZG9jdW1lbnRhdGlvbiBvZiBgbWFya3lgCmlzIGF2YWlsYWJsZSBbaGVyZV0obWFya3kuPz8/
KQoKLS0tCgojIE1hcmtkb3duCgpgbWFya3lgIGlzIGEgTWFya2Rvd24gcHJlcHJvY2Vzc29y
IGFsbG93aW5nIHRvIHRyYW5zZm9ybSBNYXJrZG93bgp0ZXh0IHVzaW5nIHB5dGhvbi4gVGhl
IHByZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0IGlzIHJlbmRlcmVkIHRvIGBwZGZgCmFuZCBg
aHRtbGAgKG90aGVyIGZvcm1hdHMgdXNpbmcgYHBhbmRvY2ApLiBgcGFuZG9jYCBoYXMgYSBw
b3dlcmZ1bCBzZXQKb2YgTWFya2Rvd24gZXh0ZW5zaW9ucyBzdXBwb3J0aW5nIHN0cnVjdHVy
ZWQgd3JpdGluZyBhcyB3ZWxsIGFzCmJpYmxpb2dyYXBoeSwgZmlndXJlIHJlZmVyZW5jaW5n
LCB0YWJsZSByZWZlcmVuY2luZywgdGV4LXN0eWxlCmVxdWF0aW9ucyB3aXRoIHJlZmVyZW5j
aW5nIGV0Yy4gKHJlZmVyIHRvIFNjaWVudGlmaWMgV3JpdGluZyBpbgpNYXJrZG93biwgW2Bt
YXJreWAgRG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSkuCgpUaGUgcmVuZGVyaW5nIG9mIE1h
cmtkb3duIHRleHQgaW50byBgaHRtbGAgYW5kIGBwZGZgIGNvbnNpc3RzIG9mIHRocmVlCnN0
ZXBzIHdoaWNoIGFyZSBpbGx1c3RyYXRlZCB1c2luZyB0aGUgYG1hcmt5YCBkb2N1bWVudGF0
aW9uCmBtZC9tYXJreS5tZGAuCgoxLiAqUHJlcHJvY2Vzc2luZyogXAogICAocHJvY2VzcyBg
bWFya3lgIG1hcmt1cCwgcnVuIGNvZGUsIGdlbmVyYXRlIGNvbnRlbnQpCgkqIElucHV0OiBg
bWFya3lgIE1hcmtkb3duIHRleHQ6IGBtZC9tYXJreS5tZGAKCSogT3V0cHV0OiBwYW5kb2Mg
TWFya2Rvd24gdGV4dDogYGJ1aWxkL21hcmt5Lm1kYAoyLiAqTGlua2luZyogXAoJKGFwcGx5
IGZvcm1hdCBzcGVjaWZpYyBjb2RlIGZvciBgaHRtbGAgYW5kIGBwZGZgKQoJKiBJbnB1dDog
cGFuZG9jIE1hcmtkb3duIHRleHQ6IGBidWlsZC9tYXJreS5tZGAKCSogT3V0cHV0CgkxLiBw
YW5kb2MgTWFya2Rvd24gdGV4dCBmb3IgYGh0bWxgOiBgYnVpbGQvbWFya3kuaHRtbC5tZGAK
CTIuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZvciBgcGRmYDogYGJ1aWxkL21hcmt5LnBkZi5t
ZGAKMy4gKlJlbmRlcmluZyogXAogICAocmVuZGVyIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1l
bnQgdXNpbmcgYHBhbmRvY2ApCgkqIElucHV0CgkxLiBwYW5kb2MgTWFya2Rvd24gdGV4dCBm
b3IgYGh0bWxgOiBgYnVpbGQvbWFya3kuaHRtbC5tZGAKCTIuIHBhbmRvYyBNYXJrZG93biB0
ZXh0IGZvciBgcGRmYDogYGJ1aWxkL21hcmt5LnBkZi5tZGAKCSogT3V0cHV0CgkxLiBgaHRt
bGAgZG9jdW1lbnQ6IGBodG1sL21hcmt5Lmh0bWxgCgkyLiBgcGRmYCBkb2N1bWVudDogYHBk
Zi9tYXJreS5wZGZgCgpUaGUgd2hvbGUgcHJvY2VzcyBpcyBlY2Fwc3VsYXRlZCBpbnRvIGEg
cHl0aG9uIHNjcmlwdCBhbmQgYSBNYWtlZmlsZS4KUmVuZGVyaW5nIGRvY3VtZW50cyB1c2lu
ZyBgbWFya3lgIHJlcXVpcmVzIHRvIHdyaXRlIE1hcmtkb3duIHRleHQKYW5kIHJ1biBgbWFr
ZSBhbGxgLgoKLS0tCgojIEF1dG9tYXRlZCBSZXBvcnRpbmcKCk1hcmtkb3duIHRleHQgd2l0
aCBlbWJlZGRlZCBjb2RlIHNuaXBwZXRzIGlzIGEgcG93ZXJmdWwgcGFyYWRpZ20gZm9yCmF1
dG9tYXRlZCB0ZWNobmljYWwgYW5kIHNjaWVudGlmaWMgcmVwb3J0aW5nIGFuZCBwb3NzaWJs
eSBvdGhlcgpkb2N1bWVudHMuIE9uIG9uZSBoYW5kIGRhdGEgY2FuIGJlIG9yZ2FuaXplZCBh
Y2NvcmRpbmcgdG8gdGhlIGRvY3VtZW50CnN0cnVjdHVyZSB1c2luZyBhbGdvcml0aG1zIGVt
YmVkZGVkIGluIHRoZSByZXBvcnQgaXRzZWxmLCBhbmQgb24gdGhlCm90aGVyIGhhbmQgdGhl
IGRhdGEgY2FuIGJlIGluc2VydGVkIGluIHRoZSByZXBvcnQgZGlyZWN0bHkgZnJvbQp2YXJp
YWJsZXMuIFRoaXMgZWxsaW1pbmF0ZXMgdGhlIG5lZWQgZm9yIG1hbnVhbCBjb3B5aW5nIG9m
IGRhdGEgaW50bwp0aGUgdGV4dCBhbmQgYWxsb3dzIHRvIHVwZGF0ZSBvciByZXByb2R1Y2Ug
dGhlIHJlcG9ydCBhdXRvbWF0aWNhbGx5CmZvciB0aGUgc2FtZSBhbmQgb3RoZXIgZGF0YS4g
VXNpbmcgdGhlIHNpbXBsZSBgbWFya3lgIHN5bnRheCB0aGUgdXNlcgpjYW4gY29uY2VudHJh
dGUgb24gZG9jdW1lbnRhdGlvbiB3cml0aW5nIGZyb20gdGhlIE1hcmtkb3duIHBlcnNwZWN0
aXZlCmFuZCBhc3Npc3QgdGhlIGNyZWF0aW9uIG9mIGRvY3VtZW50IGNvbnRlbnQgdXNpbmcg
cHl0aG9uIGNvZGUKc25pcHBldHMuCgpgcGFuZG9jYCBmaWx0ZXJzIChyZWZlciB0byBSZWxh
dGVkIFdvcmssIFtgbWFya3lgIERvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykpCmFsbG93IHRy
YW5zZm9ybWluZyB0aGUgZG9jdW1lbnQgd2hpbGUgcmVuZGVyaW5nIGl0LiBgcGFuZG9jYCBm
aWx0ZXJzCm9wZXJhdGUgb24gYW4gaW50ZXJuYWwgYWJzdHJhY3Qgc3ludGF4IHRyZWUgKEFT
VCkgcmVwcmVzZW50YXRpb24sCnRoZXJlZm9yZSB0aGUgdXNlciBtdXN0IGV4cHJlc3MgZHlu
YW1pY2FsbHkgY3JlYXRlZCBkb2N1bWVudCBjb250ZW50CmFzIG5vZGVzIGluIHRoZSBmb3Jt
YXQgb2YgdGhlIEFTVC4gYG1hcmt5YCB0YWtlcyBhIHNsaWdodCBkaWZmZXJlbnQKYXBwcm9h
Y2ggYW5kIG9wZXJhdGVzIG9uIHRoZSBNYXJrZG93biB0ZXh0IGl0c2VsZiwgYmVmb3JlIGl0
IGlzIHBhcnNlZAphbmQgcmVuZGVyZWQuCgpQeXRob24gY29kZSBpcyBlbWJlZGRlZCBpbnRv
IHRoZSBkb2N1bWVudCB3aXRoIGEgc2ltcGxlIG1hcmt1cCBzeW50YXgKc2ltaWxhciB0byBb
Um1hcmtkb3duXShodHRwczovL3d3dy5ybWFya2Rvd24ub3JnKQp1c2luZyBjb2RlIGJsb2Nr
cyBhbmQgaW5saW5lIGV4cHJlc3Npb25zLiBgbWFya3lgIHBhcnNlcyB0aGUgY29kZSwKZXhl
Y3V0ZXMgaXQgYW5kIHdyaXRlcyB0aGUgcmVzdWx0cyBiYWNrIGludG8gdGhlIE1hcmtkb3du
IHRleHQuIFRoZQpjb2RlIGNhbiBwcm9kdWNlIG91dHB1dCB1c2luZyBhbGdvcml0aG1zIG9y
IG91dHB1dCBmb3JtYXR0ZWQgc3RyaW5nCnZhcmlhYmxlcy4gYG1hcmt5YCBhbHNvIGFsbG93
cyBmb3IgdGhlIGluc2VydGlvbiBvZiBmb3JtYXQgZGVwZW5kZW50CnJhdyBjb2RlIGluIGBo
dG1sYCBhbmQgKnRleCogKGZvciBgcGRmYCAgZG9jdW1lbnRzKS4KCjEuIGNvZGUgc25pcHBl
dHMgYXJlIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IHRleHQKMi4gY29kZSBzbmlwcGV0
cyBhcmUgZXhlY3V0ZWQgZHVyaW5nIHByZXByb2Nlc3NpbmcKMy4gY29kZSBwcm9kdWNlcyB0
ZXh0IGZvciB0aGUgTWFya2Rvd24gZG9jdW1lbnQKNC4gY29kZSB2YXJpYWJsZXMgYXJlIGRp
c3BsYXllZCBpbiB0aGUgZG9jdW1lbnQgdGV4dAo1LiBmb3JtYXQgZGVwZW5kZW50IGNvZGUg
aXMgYXBwbGllZCBmb3IgYGh0bWxgIGFuZCBgcGRmYAoKLS0tCgojIEJ1aWxkIGBtYXJreWAg
RG9jdW1lbnRhdGlvbiBhbmQgRXhhbXBsZXMKCmBtYXJreWAgaXMgYSBzaW5nbGUtZmlsZSBz
dGFuZCBhbG9uZSBzY3JpcHQgd2hpY2ggZGVwZW5kcyBvbgpgcHl0aG9uYCAoPj0zLjYpLCBg
cGFuZG9jYCAoPj0yLjExKSwgYHB5eWFtbGAgYW5kIGBwYW5kb2MteG5vc2AuCgoqKkluc3Rh
bGxpbmcgRGVwZW5kZW5jaWVzKioKCmBwYW5kb2NgIGJpbmFyaWVzIGZvciBEZWJpYW4tYmFz
ZWQgTGludXggYXJlIHJlbGVhc2VkCltoZXJlXShodHRwczovL2dpdGh1Yi5jb20vamdtL3Bh
bmRvYy9yZWxlYXNlcykuCmBweXlhbWxgIGlzIGluc3RhbGxlZCB1c2luZyB0aGUgbGludXgg
cGFja2FnZSBtYW5hZ2VyIG9yIGBwaXBgIGFuZApgcGFuZG9jLXhub3NgIGNvbnNpc3RzIG9m
IHRoZSBjb21wb25lbnRzIGBmaWdub3NgLCBgc2Vjbm9zYCwgYGVxbm9zYAphbmQgYHRhYmxl
bm9zYCB3aGljaCBhcmUgaW5zdGFsbGVkIHVzaW5nIGBwaXBgLiBEZXBlbmRpbmcgb24gdGhl
CmxpbnV4IGluc3RhbGxhdGlvbiBtYXliZSBgcGlwM2AgaGFzIHRvIGJlIHVzZWQuCgpgYGBi
YXNoCnBpcCBpbnN0YWxsIHB5eWFtbApwaXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCnBpcCBp
bnN0YWxsIHBhbmRvYy1zZWNub3MKcGlwIGluc3RhbGwgcGFuZG9jLWVxbm9zCnBpcCBpbnN0
YWxsIHBhbmRvYy10YWJsZW5vcwpgYGAKCioqRG93bmxvYWQgYG1hcmt5YCBTY3JpcHQqKgoK
YG1hcmt5YCBpcyBkb3dubG9hZGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMuCgpg
YGBiYXNoCmNkICRIT01FCm1rZGlyIG1hcmt5CmNkIG1hcmt5CndnZXQgaHR0cDovL3ZyLnR1
LWZyZWliZXJnLmRlL35sZWhtYW5uNy9tYXJreS5weQpjaG1vZCAreCBtYXJreS5weQpgYGAK
CioqSW5pdGlhbGl6ZSBgbWFya3lgIEVudmlyb25tZW50KioKClRoZSBgbWFya3lgIGVudmly
b25tZW50IGlzIGluaXRpYWxpemVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMuClRo
ZSBgbWFya3lgIE1ha2VmaWxlLCBkb2N1bWVudGF0aW9uIGFuZCBxdWlja3N0YXJ0IGFyZSB1
bnBhY2tlZCBmcm9tCnRoZSBgbWFya3lgIHNjcmlwdCBmaWxlIGludG8gdGhlIGN1cnJlbnQg
d29ya2luZyBkaXJlY3RvcnkuCgpgYGBiYXNoCmNkICRIT01FCmNkIG1hcmt5Ci4vbWFya3ku
cHkgLS1pbml0CldSSVRFIC4vbWQvbWFya3kubWQKV1JJVEUgLi9tZC9tYXJreS5tZGkKV1JJ
VEUgLi9kYXRhL21hcmt5LmJpYgpXUklURSAuL21kL3F1aWNrc3RhcnQubWQKV1JJVEUgLi9t
ZC9xdWlja3NvdXJjZS5tZApVU0FHRQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRt
bCBodHRwZGAKMy4gYG1ha2UgYWxsLXBkZmAKYGBgCgpEdXJpbmcgaW5pdGlhbGl6YXRpb24g
YG1hcmt5YCBjcmVhdGVzIHR3byBkaXJlY3RvcmllcyBgbWQvYCBhbmQgYGRhdGEvYC4KYG1k
L2AgaXMgdGhlIGRpcmV0b3J5IHdoaWNoIGNvbnRhaW5zIHRoZSBNYXJrZG93biB0ZXh0IHRv
IGJlIHJlbmRlcmVkCmludG8gYGh0bWxgIGFuZCBgcGRmYC4gYGRhdGEvYCBpcyB0aGUgcmVz
b3VyY2UgZGlyZXRvcnkgd2hpY2ggY29udGFpbnMKc2NyaXB0cywgaW1hZ2VzLCB2aWRlb3Mg
YW5kIG90aGVyIGFzc2V0cy4KCioqUmVuZGVyIERvY3VtZW50YXRpb24gYW5kIEV4YW1wbGVz
KioKCklmIGFsbCBkZXBlbmRlbmNpZXMgaGF2ZSBiZWVuIGluc3RhbGxlZCBhY2NvcmRpbmds
eSBhbmQgdGhlIGBtYXJreWAKZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQsIGBtYXJreWAg
Y2FuIGJlIHVzZWQgdG8gcmVuZGVyIGEgbG9jYWwKY29weSBvZiB0aGUgZG9jdW1lbnRhdGlv
biBhbmQgdGhlIHF1aWNrc3RhcnQuCgpUaGUgZm9sbG93aW5nIGNvbW1hbmRzIHJlbmRlciB0
aGUgTWFya2Rvd24gdGV4dCBvZiB0aGUgZG9jdW1lbnRhdGlvbi4KCmBgYGJhc2gKY2QgJEhP
TUUKY2QgbWFya3kKbWFrZSBhbGwKYGBgCgpEdXJpbmcgYG1ha2VgIGEgbmV3IGRpcmVjdG9y
eSBgYnVpbGQvYCBpcyBjcmVhdGVkLCB3aGljaCBjb250YWlucwp0ZW1wb3JhcnkgZmlsZXMg
KHByZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0LCBsaW5rZWQgdGV4dCBmb3IgYGh0bWxgCmFu
ZCBgcGRmYCkuIFRoZSByZXN1bHRpbmcgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgYXJl
IHBsYWNlZCBpbnNpZGUKYGh0bWwvYCBhbmQgYHBkZi9gLgoKKipgbWFya3lgIE1ha2VmaWxl
KioKClRoZSBgbWFya3lgIE1ha2VmaWxlIGNvb3JkaW5hdGVzIHRoZSB0aHJlZSBzdGVwcyBv
ZiB0aGUgYG1hcmt5YApkb2N1bWVudCBwaXBlbGluZSBwcmVwcm9jZXNzaW5nLCBsaW5raW5n
IGFuZCByZW5kZXJpbmcuClRoZSBgbWFya3lgIE1ha2VmaWxlIHN1cHBvcnRzIHNldmVyYWwg
b3B0aW9ucyBmb3IgZGlzcGxheWluZyBoZWxwCm9yIHJlbmRlcmluZyBhbGwsIG11bHRpcGxl
IG9yIHNpbmdsZSBmaWxlcy4KCipNYWtlZmlsZSBUYXJnZXRzKgoKMS4gYG1ha2UgaGVscGA6
IGRpc3BsYXkgaGVscCBtZXNzYWdlIG9uIHRoZSBjb25zb2xlCjIuIGBtYWtlIGNoZWF0YDog
ZGlzcGxheSB0aGUgYG1hcmt5YCBtYXJrdXAgQ2hlYXQgU2hlZXQKMy4gYG1ha2Ugc2NhbmA6
IHNjYW4gZm9yIG5ldyBkb2N1bWVudHMgYG1kLyoubWRgIGFuZCB1cGRhdGUgTWFrZWZpbGUK
NC4gYG1ha2UgYWxsYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyoubWRgIGludG8gYGh0
bWxgIGFuZCBgcGRmYAo1LiBgbWFrZSBhbGwtcGRmYDogcmVuZGVyIGFsbCBkb2N1bWVudHMg
YG1kLyoubWRgIGludG8gYHBkZmAKNi4gYG1ha2UgYWxsLWh0bWxgOiByZW5kZXIgYWxsIGRv
Y3VtZW50cyBgbWQvKi5tZGAgaW50byBgaHRtbGAKNy4gYG1ha2UgaHR0cGRgOiBzdGFydCBw
eXRob24gd2Vic2VydmVyIGluIGBodG1sL2AKOC4gYG1ha2UgY2xlYW5gOiByZW1vdmUgYWxs
IGZpbGVzOiBgYnVpbGQvKmAsIGBwZGYvKmAsIGBodG1sLypgCgoqTWFrZSBTaW5nbGUgRG9j
dW1lbnQqCgpXaGVuIHJ1bm5pbmcgYG1ha2UgYWxsYCwgYG1hcmt5YCByZW5kZXJzIGFsbCBk
b2N1bWVudHMsIHdoaWNoIGNhbgpiZSB1bmRlc2lyYWJsZSBpZiBvbmx5IG9uZSBwYXJ0aWN1
bGFyIGRvY3VtZW50IHNoYWxsIGJlIHJlbmRlcmVkLgpCeSBgbWFrZSBzY2FuYCwgYG1hcmt5
YCBzY2FucyB0aGUgZGlyZWN0b3J5IGBtZC8qLm1kYCBmb3IgbmV3IE1hcmtkb3duCmRvY3Vt
ZW50cyB0byBiZSBwcm9jZXNzZWQuIEZvciBlYWNoIGRvY3VtZW50LCB3aGljaCBoYXMgYmVl
biBmb3VuZCwKYG1hcmt5YCBzZXRzIHVwIGFsaWFzIHRhcmdldHMgaW4gb3JkZXIgdG8gZGVi
dWcgdGhlIHByZXByb2Nlc3NpbmcsCmxpbmtpbmcgYW5kIHJlbmRlcmluZyBvZiB0aGlzIGRv
Y3VtZW50LgoKQXNzdW1pbmcgdGhlIGRvY3VtZW50IGBtZC9tYXJreS5tZGAgc2hhbGwgYmUg
cmVuZGVyZWQgc3RlcCBieSBzdGVwLApgbWFya3lgIGludHJvZHVjZXMgdGhlIGZvbGxvd2lu
ZyB0YXJnZXRzLgoKMS4gKlByZXByb2Nlc3NpbmcqOiBgbWQvbWFya3kubWRgIC0+IGBidWls
ZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcgYGh0bWxgKjogYGJ1aWxkL21hcmt5Lm1kYCAtPiBg
YnVpbGQvbWFya3kuaHRtbC5tZGAKMy4gKkxpbmtpbmcgYHBkZmAqOiBgYnVpbGQvbWFya3ku
bWRgIC0+IGBidWlsZC9tYXJreS5wZGYubWRgCjQuICpSZW5kZXJpbmcgYGh0bWxgKjogYGJ1
aWxkL21hcmt5Lmh0bWwubWRgIC0+IGBodG1sL21hcmt5Lmh0bWxgCjUuICpSZW5kZXJpbmcg
YHBkZmAqOiBgYnVpbGQvbWFya3kucGRmLm1kYCAtPiBgcGRmL21hcmt5LnBkZmAKCi0tLQoK
IyBXcml0ZSBBIE5ldyBEb2N1bWVudAoKSW4gb3JkZXIgdG8gcmVuZGVyIGEgbmV3IGRvY3Vt
ZW50IHRoZSBNYXJrZG93biB0ZXh0IG5lZWRzIHRvIGJlIHNhdmVkCnRvIGEgZmlsZSBsb2Nh
dGVkIGluIGBtZC9leGFtcGxlLm1kYCB3aGljaCBjYW4gYmUgZm91bmQgcmVuZGVyZWQKW2hl
cmVdKGV4YW1wbGUuPz8/KS4gVGhlIGZvbGxvd2luZyBNYXJrZG93biBzbmlwcGV0CmNhbiBi
ZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQuCgpgYGB5YW1sCiEhISBleGFtcGxlLm1kIHJh
dyA+PjEKYGBgCgotLS0KCiMgQ29kZSBCbG9ja3MKCkNvZGUgYmxvY2tzIGFyZSBlbWJlZGRl
ZCBpbiBNYXJrZG93biB1c2luZyBmZW5jZWQgY29kZSB1c2luZwplaXRoZXIgdGhlIGAhYCBv
ciBgP2AgZmxhZyBmb3IgaGlkZGVuIGFuZCBkaXNwbGF5ZWQgY29kZQpyZXNwZWN0aXZlbHku
CgpgYGB0ZXh0CiAgICBgYGBcIQoJQ09ERV9CTE9DS19ISURERU4KICAgIGBgYAoKICAgIGBg
YFw/CglDT0RFX0JMT0NLX1NIT1dOCiAgICBgYGAKYGBgCgoqKkRpc3BsYXkgYW5kIEV4ZWN1
dGUgQ29kZSoqCgpUaGlzIGNvZGUgYmxvY2sgYW5ub3RhdGVkIHdpdGggYD9gIGlzIGRpc3Bs
YXllZCBhbmQgZXhlY3V0ZWQuCgpgYGA/CglpbXBvcnQgbWF0aAoJeCA9IG1hdGguc3FydCgy
KQpgYGAKCioqRXhlY3V0ZSBDb2RlIHdpdGhvdXQgRGlzcGxheSoqCgpUaGUgY29kZSBibG9j
ayBhbm5vdGF0ZWQgd2l0aCBgIWAgaXMgbm90IGRpc3BsYXllZCwgYnV0IGV4ZWN1dGVkLgoK
YGBgIQoJeSA9IHggKyAxCmBgYAoKKipEaXNwbGF5IENvZGUgYnV0IGRvIG5vdCBFeGVjdXRl
KioKClRoaXMgY29kZSBibG9jayBpcyBkaXNwbGF5ZWQgYXMgcHl0aG9uLCBidXQgbm90IGV4
ZWN1dGVkLgoKYGBgcHl0aG9uCgl6ID0gMC4vMC4KYGBgCgoqKlVzaW5nIHRoZSBQeXRob24g
YGltcG9ydGAgU3RhdGVtZW50KioKCkxhcmdlIGNvZGUgYmxvY2tzIGNhbiBiZSBpbXBvcnRl
ZCBmcm9tIHB5dGhvbiBtb2R1bGVzIGFuZCB0aGUKYGltcG9ydGAgc3RhdGVtZW50IGNhbiBi
ZSB1c2VkIGZvciBsb2FkaW5nIGluc3RhbGxlZCBsaWJyYXJpZXMuCgpgYGBweXRob24KCWlt
cG9ydCBudW1weQoJaW1wb3J0IHN5cwoJc3lzLnBhdGguYXBwZW5kKCIuIikKCSNpbXBvcnQg
bW9kdWxlX2luX3dvcmtpbmdfZGlyZWN0b3J5CmBgYAoKLS0tCgojIElubGluZSBFeHByZXNz
aW9ucwoKSW5saW5lIHN0YXRlbWVudHMgYXJlIGRpcmVjdGx5IGVtYmVkZGVkIGludG8gdGhl
IHRleHQgZmxvdyB1c2luZwpleHByZXNzaW9ucyBhbmQgdmFyaWFibGVzIHdpdGggdGhlIGNv
cnJlc3BvbmRpbmcKc3ludGF4IGBgIGBcIUVYUFJFU1NJT05gIGBgIG9yIGBgIGBcP1ZBUklB
QkxFYCBgYC4KVGhlIG91dHB1dCBvZiB2YXJpYWJsZXMgY2FuIGJlIGZvcm1hdHRlZCB1c2lu
ZyB0aGUKYGAgYFw/VkFSSUFCTEVbOkZPUk1BVF1gIGBgIHN0YXRlbWVudCBhY2NvcmRpbmcK
dG8gdGhlIHB5dGhvbiBvcGVyYXRvciBgezx2YXJpYWJsZT5bOjxmb3JtYXQ+XX1gIGltcGxl
bWVudGVkIGluIHRoZQpbYHN0ci5mb3JtYXQoKWBdKGh0dHBzOi8vZG9jcy5weXRob24ub3Jn
LzMvbGlicmFyeS9zdHJpbmcuaHRtbCNmb3JtYXRzdHJpbmdzKQpzcGVjaWZpY2F0aW9uLgoK
KipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoqCgpUaGUgcmVzdWx0IG9mICRcc3FydHsyfSQg
aXM6CiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBgISBtYXRoLnNxcnQoMi4wKWAKKiBmb3JtYXR0
ZWQgb3V0cHV0OiBgISAiJS40ZiIgJSBtYXRoLnNxcnQoMi4wKWAKClRoZSB2YXJpYWJsZSAk
eCQgaXMKKiB1bmZvcm1hdHRlZCBvdXRwdXQ6IGA/IHhgCiogZm9ybWF0dGVkIG91dHB1dDog
YD8geDouNGZgCgpUaGUgdmFyaWFibGUgJHk9eCsxJCBpcwoqIHVuZm9ybWF0dGVkIG91dHB1
dDogYD8geWAKKiBmb3JtYXR0ZWQgb3V0cHV0OiBgPyB5Oi40ZmAKCihUaGUgY29kZSBibG9j
ayBmb3IgdGhlIGRlZmluaXRpb24gb2YgJHkkIGlzIGhpZGRlbi4pCgoqKklubGluZSBFeHBy
ZXNzaW9uIE91dHB1dCoqCgpgYGA/Cgl4ID0gbGlzdChyYW5nZSgxLCAxMSkpCgl5ID0gW2kq
aSBmb3IgaSBpbiB4XQoKCWRlZiBsaXN0X3N0cihhKToKCQlyZXR1cm4gW3N0cihpKSBmb3Ig
aSBpbiBhXQoJZGVmIGxpc3RfYW5kKGEpOgoJCXJldHVybiAiLCAiLmpvaW4obGlzdF9zdHIo
YVs6LTFdKSkgKyAiIGFuZCAiICsgc3RyKGFbLTFdKQpgYGAKClRoZSBsaXN0IGNhbiBiZSBp
bnNlcnRlZCBpbnRvIHRoZSB0ZXh0LiBUaGUgc3F1YXJlIG9mIHRoZSBmaXJzdApgIWxlbih4
KWAgbnVtYmVycyBgIWxpc3RfYW5kKHgpYCBpcyBgIWxpc3RfYW5kKHkpYC4gU3F1YXJlIG51
bWJlcnMKYXJlIGNvbXB1dGVkIGFjY29yZGluZyB0byAkeT14XjIkLgoKKipJbmxpbmUgU3Rh
dGVtZW50cyBpbiBUYWJsZXMqKgoKYGBgPwoJY2xhc3Mgc3F1YXJlOgoJCWRlZiBfX2luaXRf
XyhzZWxmKToKCQkJc2VsZi54ID0gMAoJCWRlZiBnZXRfeChzZWxmKToKCQkJcmV0dXJuIHNl
bGYueAoJCWRlZiBuZXh0X3koc2VsZik6CgkJCXkgPSBzZWxmLngqKjIKCQkJc2VsZi54ICs9
IDEKCQkJcmV0dXJuIHkKCXNxID0gc3F1YXJlKCkKYGBgCgpUaGUgZm9sbG93aW5nIHRhYmxl
IGlzIGNvbXB1dGVkIGFjY29yZGluZyB0byAkeT14XjIkLgoKeCAgICAgICAgICAgIHx5Ci0t
LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0KYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgp
YApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0
X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3Eu
bmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxg
IXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3go
KWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYAoKLS0tCgoj
IEdlbmVyYXRlIE1hcmtkb3duIFRleHQKCk1hcmtkb3duIHRleHQgY2FuIGJlIHByb2R1Y2Vk
IGFsZ29yaXRobWljYWxseSBmcm9tIGEgcHl0aG9uIGFsZ29yaXRobQp1c2luZyB0aGUgYF8o
KWAgYW5kIGBfXygpYCBmdW5jdGlvbi4gVGhlIGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24g
YXJlCnNwZWNpYWwgbmFtZXMgd2hpY2ggYXJlIHJlc2VydmVkIGJ5IGBtYXJreWAuIChyZWZl
ciB0byBHZW5lcmF0aW9uIG9mCk1hcmtkb3duIFRleHQsIFtgbWFya3lgIGRvY3VtZW50YXRp
b25dKG1hcmt5Lj8/PykgZm9yIGluLWRlcHRoCmV4cGxhbmF0aW9uKS4KCiMjIFRoZSBgXygp
YCBGdW5jdGlvbgoKIFRoZSBgXygpYCBmdW5jdGlvbiBiYXNpY2x5IHJlc2VtYmxlZCB0aGUg
cHl0aG9uIGBwcmludCgpYCBmdW5jdGlvbi4KYG1hcmt5YCBkb2VzIG5vdCBwYXRjaCB0aGUg
c3RhbmRhcmQgYHByaW50KClgIGZ1bmN0aW9uIHdoaWNoIHN0aWxsCmRpc3BsYXlzIHRleHQg
aW4gdGhlIGNvbnNvbGUgYW5kIG5vdCBpbiB0aGUgTWFya2Rvd24gdGV4dC4KVGhlIGBfKClg
IGZ1bmN0aW9uIHN1cHBvcnRzIGFwcGVuZGluZyB0ZXh0IHRvIHRoZSBwcmV2aW91cyBhbmQg
dGhlIG5leHQKbGluZSBvZiBvdXRwdXQgYnkgdXNpbmcgYF9gIGFzIHRoZSBmaXN0IG9yIGxh
c3QgcGFyYW1ldGVyLgoxLiBgXyhfLCAqYXJncyAgIClgOiBhcHBlbmQgdGhpcyBvdXRwdXQg
dG8gcHJldmlvdXMgb3V0cHV0CjIuIGBfKF8sICphcmdzLCBfKWA6IGFwcGVuZCB0byBwcmV2
aW91cyBhbmQgbmV4dCBvdXRwdXQKMy4gYF8oICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQg
b3V0cHV0IHRvIHRoaXMgb3V0cHV0CjQuIGBfKClgOiBkaXNhYmxlIGFwcGVuZCBmbGFnCgoq
Kk1vbmtleSBQYXRjaCBgcHJpbnQoKWAgRnVuY3Rpb24qKgoKVGhlIGBwcmludCgpYCBmdW5j
dGlvbiBjYW4gYmUgKm1vbmtleSBwYXRjaGVkKiB1c2luZyB0aGUgZm9sbG93aW5nCnN0YXRt
ZW50IGluIG9yZGVyIHRvIGNhbGwgdGhlIGBfKClgIGZ1bmN0aW9uIGluc3RlYWQuCgpgYGA/
CglwcmludCgiUHJpbnQiLCAidG8iLCAgImNvbnNvbGUiLCAiISIpCglfKCJQcmludCIsICJ0
byIsICAiTWFya2Rvd24iLCAiISIpCgoJcHJpbnQgPSBfICMgbW9ua2V5IHBhdGNoCglwcmlu
dCgiUHJpbnQiLCAidG8iLCAgIk1hcmtkb3duIiwgIiEiKQpgYGAKCioqSm9pbiBBcmd1bWVu
dHMgdXNpbmcgYHNlcGAqKgoKVGhlIHNpZ25hdHVyZSBvZiB0aGUgYF8oKWAgaXMgYF8oKmFy
Z3MsIHNlcD0iICIpYC4gYHNlcGAgaXMgdXNlZCB0bwpqb2luIHRoZSBhcmd1bWVudHMgYCph
cmdzYCBpbnRvIG9uZSBzdHJpbmcuCgpgYGA/CglfKCJUaGUgZmlyc3QgZml2ZSBuYXR1cmFs
IG51bWJlcnMgYXJlOiIpCglfKDEsIDIsIDMsIDQsIDUsIHNlcD0iLCAiKQpgYGAKCioqR2Vu
ZXJhdGUgYSBUYWJsZSB3aXRoIEFwcGVuZGluZyoqCgpUaGUgYXBwZW5kIGZlYXR1cmUgaXMg
dXNlZCB0byBjcmVhdGUgYSB0YWJsZS4KCmBgYD8KCV8oIkNvbHVtbiAxIiwgXykKCV8oInxD
b2x1bW4gMiIsIF8pCglfKCJ8Q29sdW1uIDMiLCBfKQoJXygpCgoJXygifCIuam9pbihbIi0t
LS0tLS0tIl0qMykpCgoJZm9yIGkgaW4gcmFuZ2UoNSk6CgkJXygiJSA4ZCIgJSAoaSozKSkK
CQlmb3IgaiBpbiBbMSwgMl06CgkJCV8oXywgInwlIDhkIiAlIChpKjMraikpCmBgYAoKVGhl
IGFsZ29yaXRobSBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIE1hcmtkb3duIHRleHQuCgpgYGBt
ZApDb2x1bW4gMXxDb2x1bW4gMnxDb2x1bW4gMwotLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0t
LQogICAgICAgMHwgICAgICAgMXwgICAgICAgMgogICAgICAgM3wgICAgICAgNHwgICAgICAg
NQogICAgICAgNnwgICAgICAgN3wgICAgICAgOAogICAgICAgOXwgICAgICAxMHwgICAgICAx
MQogICAgICAxMnwgICAgICAxM3wgICAgICAxNApgYGAKCiMjIFRoZSBgX18oKWAgRnVuY3Rp
b24KCkNvbXBhcmVkIHRvIHRoZSBgXygpYCBmdW5jdGlvbiwgdGhlIGBfXygpYCBmdW5jdGlv
biBvbmx5IHRha2VzIG9uZQphcmd1bWVudCBhbmQgaXRzIHB1cnBvc2UgaXMgdG8gb3V0cHV0
IGEgZm9ybWF0dGVkIHBhcmFncmFwaCB3aXRoCmluZGVudGF0aW9uLiBUaGUgc2lnbmF0dXJl
IG9mIHRoZSBgX18oKWAgZnVuY3Rpb24gaXMgYF8oYXJnLCBjcm9wPVRydWUpYC4KCioqR2Vu
ZXJhdGUgYSBQYXJhZ3JhcGggd2l0aCBgZmAtU3RyaW5ncyoqCgpUaGUgYF9fKClgIGZ1bmN0
aW9uIGNhbiBiZSBjb21iaW5lZCB3aXRoIHRyaXBsZSBxdW90ZWQgYmxvY2sgc3RyaW5ncwpg
IiIiYCBvciBgJycnYCBhbmQgdGhlIHB5dGhvbiAzIGBmYC1zdHJpbmdzIG9yIGBmIi4uLiJg
IHN0cmluZwppbnRlcnBvbGF0aW9uLCByZWZlciB0byB0aGUKW3B5dGhvbiBtYW51YWxdKGh0
dHBzOi8vd3d3LnB5dGhvbi5vcmcvZGV2L3BlcHMvcGVwLTA0OTgvI3N1cHBvcnRpbmctZnVs
bC1weXRob24tZXhwcmVzc2lvbnMpCgpgYGA/CglpbXBvcnQgcmFuZG9tCglzID0gMAoJcmFu
ZG9tLnNlZWQocykKCXAgPSBbcmFuZG9tLnJhbmRvbSgpIGZvciBpIGluIHJhbmdlKDMpXQoK
CV9fKGYiIiIKCQlQYXJhbWV0ZXIgb25lIGlzIHtwWzBdOi4zZn0gYW5kIHRoZSB2YWx1ZSBk
ZXBlbmRzIG9uIHRoZSBzZWVkCgkJb2YgdGhlIHBzZXVkbyByYW5kb20gbnVtYmVyIGdlbmVy
YXRvciwgd2hpY2ggd2FzIGNob3NlbgoJCXRvIGJlIHtzfS4gRm9yIHRoZSBzYW1lIHNlZWQg
YWx3YXlzIHRoZSBzYW1lIHJhbmRvbSBudW1iZXJzCgkJYXJlIGNyZWF0ZWQuIFRoZSBuZXh0
IHR3byBudW1iZXJzIGFyZSB7cFsxXTouM2Z9IGFuZCB7cFsyXTouM2Z9LgoJCVRoZSBzdW0g
b2YgdGhlIHRocmVlIG51bWJlcnMgaXMge3N1bShwKTouM2Z9IGFuZCBpdCBpcwoJCXsnZ3Jl
YXRlcicgaWYgc3VtKHApID4gMi4gZWxzZSAnbGVzc2VyIG9yIGVxdWFsJ30gdGhhbiB0d28u
CgkiIiIpCmBgYAoKKipDcm9wcGluZyBhbmQgSW5kZW50YXRpb24gb2YgT3V0cHV0KioKCkJl
Zm9yZSB0aGUgdGV4dCBnZW5lcmF0ZWQgYnkgdGhlIGBfXygpYCBmdW5jdGlvbiBpcyBwcmlu
dGVkIGludG8gdGhlCmRvY3VtZW50LiBUaGUgdGV4dCBpcyBjcm9wcGVkIGFjY29yZGluZyB0
byB0aGUgbGVhZGluZyB3aGl0ZSBzcGFjZQpvZiB0aGUgZmlyc3Qgbm9uLWVtcHR5IGxpbmUu
IFRoZSBsZWFkaW5nIHdoaXRlIHNwYWNlIG9mIHRoZSBmaXJzdApub24tZW1wdHkgbGluZSBp
cyByZW1vdmVkIGZyb20gYWxsIG90aGVyIGxpbmVzIG9mIHRoZSBvdXRwdXQuCgpgYGA/Cglf
XygiIiIKCQkqIExpc3QgTGV2ZWwgMQoJCQkqIExpc3QgTGV2ZWwgMgoJCQkqIExpc3QgTGV2
ZWwgMgoJCQkJKiBMaXN0IExldmVsIDMKCQkJKiBMaXN0IExldmVsIDIKCQkqIExpc3QgTGV2
ZWwgMQoJCSogTGlzdCBMZXZlbCAxCgkiIiIpCmBgYAoKVGhlIGNvZGUgYmxvY2sgcHJvZHVj
ZXMgdGhlIGZvbGxvd2luZyBvdXRwdXQuCgpgYGBtZAoqIExpc3QgTGV2ZWwgMQoJKiBMaXN0
IExldmVsIDIKCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVsIDMKCSogTGlzdCBMZXZl
bCAyCiogTGlzdCBMZXZlbCAxCiogTGlzdCBMZXZlbCAxCmBgYAoKKipEaXNhYmxlIENyb3Bw
aW5nIG9mIE91dHB1dCoqCgpUaGUgY3JvcHBpbmcgaXMgZGlzYWJsZWQgdXNpbmcgdGhlIGtl
eXdvcmQgYF9fKHRleHQsIGNyb3A9RmFsc2UpYC4KCmBgYD8KCV9fKCIiIgoJCSogTGlzdCBM
ZXZlbCAxCgkiIiIsIGNyb3A9VHJ1ZSkKCglfXygiIiIKCQkqIExpc3QgTGV2ZWwgMgoJIiIi
LCBjcm9wPUZhbHNlKQpgYGAKClRoZSBjb2RlIGJsb2NrIHByb2R1Y2VzIHRoZSBmb2xsb3dp
bmcgb3V0cHV0LgoKYGBgbWQKKiBMaXN0IExldmVsIDEKCQkqIExpc3QgTGV2ZWwgMgpgYGAK
Ci0tLQoKIyBGb3JtYXQgRGVwZW5kZW50IExpbmtzCgpXaGVuIHdyaXRpbmcgc2V2ZXJhbCBN
YXJrZG93biBkb2N1bWVudHMgb2Z0ZW4gZG9jdW1lbnRzIGFyZSBsaW5rZWQKYmV0d2VlbiBl
YWNoIG90aGVyIHVzaW5nIHRoZSBNYXJrZG93biBsaW5rIHN0YXRlbWVudApgW0xpbmsgTmFt
ZV0oZmlsZS5odG1sKWAgb3IgYFtMaW5rIE5hbWVdKGZpbGUucGRmKWAuCkhvd2V2ZXIsIHdo
ZW4gcmVuZGVyaW5nIGRvY3VtZW50cyB3aXRoIGxpbmtzIGludG8gYGh0bWxgIGFuZCBgcGRm
YAp0aGUgZmlsZSBleHRlbnNpb24gb2Z0ZW4gbXVzdCBiZSBhZGp1c3RlZCBhY2NvcmRpbmcg
dG8gdGhlIG91dHB1dCBmb3JtYXQuCmBtYXJreWAgc3VwcG9ydHMgdGhlIGAuXD8/P2Agc3Rh
dGVtZW50LCB3aGljaCB3aWxsIGJlIHJlcGxhY2VkIGJ5CmAuaHRtbGAgb3IgYC5wZGZgIGRl
cGVuZGluZyBvbiB0aGUgb3V0cHV0IGZvcm1hdC4KCmBgYG1kCltMaW5rIHRvIGRvY3VtZW50
XShmaWxlLlw/Pz8pCmBgYAoKd2lsbCBiZSBwcm9wcm9jZXNzZWQgaW50byB0aGUgZm9sbG93
aW5nIHRleHQ6CiogZm9yIGBodG1sYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLmh0bWwp
YAoqIGZvciBgcGRmYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLnBkZilgCgpbTGluayB0
byB0aGlzIGRvY3VtZW50XShxdWlja3N0YXJ0Lj8/PykKCi0tLQoKIyBGb3JtYXQgRGVwZW5k
ZW50IENvZGUKCmBwYW5kb2NgIE1hcmtkb3duIGFsbG93cyB0byB3cml0ZSBmb3JtYXQgc3Bl
Y2lmaWMgY29kZSB3aXRoaW4gTWFya2Rvd24KdXNpbmcgYGh0bWxgIGFuZCAqdGV4KiBmb3Ig
YHBkZmAgZG9jdW1lbnRzLiBIb3dldmVyLCB3aGVuIGluc2VydGluZwpyYXcgYGh0bWxgIG9y
IHJhdyAqdGV4KiBjb2RlLCB0aGUgZG9jdW1lbnQgb25seSBjYW4gYmUgcmVuZGVyZWQgaW50
bwpgaHRtbGAgb3IgYHBkZmAgYWNjb3JkaW5nbHkuCgpgbWFya3lgIGludHJvZHVjZXMgZm9y
bWF0IGNvZGVzLCB3aGljaCBhcmUgYXBwbGllZCBkdXJpbmcgbGlua2luZwphZnRlciBwcmVw
cm9jZXNzaW5nLiBEdXJpbmcgbGlua2luZyBmb3JtYXQgc3BlY2lmaWMgY29kZXMgZm9yIGBo
dG1sYAphbmQgYHBkZmAgYXJlIGFwcGxpZWQgaW4gYSBjb25zaXN0ZW50IG1hbm5lciwgcmVz
dWx0aW5nIGluIGRvY3VtZW50cwp3aXRoIE1hcmtkb3duIGFuZCBgaHRtbGAgb3IgTWFya2Rv
d24gYW5kICp0ZXgqIG9ubHkuIFVzaW5nIHRoaXMKcGF0dGVybiBgbWFya3lgIGRvY3VtZW50
cyBjb250YWluIHJlZ3VsYXIgTWFya2Rvd24sIHdoaWNoIGNhbiBiZQpyZW5kZXJlZCBpbnRv
IGBodG1sYCBhbmQgYHBkZmAsIGFzIHdlbGwgYXMgZm9ybWF0IHNwZWNpZmljIGNvZGVzCmZv
ciB0d2Vha2luZyBvciBwb2xpc2hpbmcgYGh0bWxgIGFuZCBgcGRmYCBvdXRwdXQuCgpGb3Jt
YXQgY29kZXMgYXJlIHNwZWNpZmllZCBpbiBjb2RlIGJsb2NrcyBhbmQgY2FsbGVkIHVzaW5n
IHRoZQppbmxpbmUgc3ludGF4IGBgIGBcP0ZNVENPREUoQVJHUylgIGBgLCB3aGljaCBpcyB0
cmFuc2xhdGVkIGludG8gdGhlIHR3bwpmb2xsb3dpbmcgcHlob24gZnVuY3Rpb24gY2FsbHMu
CjEuIGBGTVRDT0RFX2h0bWwoQVJHUylgOiBjYWxsZWQgd2hlbiBsaW5rZWQgZm9yIGBodG1s
YC4KMi4gYEZNVENPREVfcGRmKEFSR1MpYDogY2FsbGVkIHdoZW4gbGlua2VkIGZvciBgcGRm
YC4KCkFzc3VtaW5nIHByZXByb2Nlc3NpbmcgdGhlIGZpbGUgYG1kL21hcmt5Lm1kYCwgbGlu
a2luZyBmb3JtYXQgY29kZXMKcmVzdWx0cyBpbiB0aGUgdHdvIGZvbGxvd2luZyBvdXRwdXQg
ZmlsZXMuCjEuIGBidWlsZC9tYXJreS5odG1sLm1kYDogY29udGFpbnMgb3V0cHV0IG9mIGBo
dG1sYCBmb3JtYXQgY29kZXMuCjIuIGBidWlsZC9tYXJreS5wZGYubWRgOiBjb250YWlucyBv
dXRwdXQgb2YgYHBkZmAgZm9ybWF0IGNvZGVzLgoKKipFeGFtcGxlIE11bHRpLUNvbHVtbiBU
ZXh0IGluIGBwZGZgIGFuZCBgaHRtbGAqKgoKRGVmbml0aW9uIG9mIHR3byBmb3JtYXQgY29k
ZXMgYG1jb2xfYmVnaW5gIGFuZCBgbWNvbF9lbmRgLCBvbmUgZm9yIHRoZQpiZWdpbiBvZiBt
dWx0aSBjb2x1bW4gYW5kIGFub3RoZXIgZm9yIHRoZSBlbmQgb2YgdGhlIG11bHRpIGNvbHVt
bgpzZWN0aW9uLiBUaGUgZm9ybWF0IGNvZGVzIGFyZSBhcHBlbmRlZCB3aXRoIGBfaHRtbGAg
YW5kIGBfcGRmYApyZXNwZWN0aXZlbHkuCgpgYGA/CglkZWYgbWNvbF9iZWdpbl9wZGYoKTog
cmV0dXJuIHIiXGJlZ2lue211bHRpY29sc317Mn0iCglkZWYgbWNvbF9lbmRfcGRmKCk6IHJl
dHVybiByIlxlbmR7bXVsdGljb2xzfSIKCWRlZiBtY29sX2JlZ2luX2h0bWwoKTogcmV0dXJu
IHIiPGRpdiBzdHlsZT0nY29sdW1uLWNvdW50OiAyOyc+IgoJZGVmIG1jb2xfZW5kX2h0bWwo
KTogcmV0dXJuIHIiPC9kaXY+IgpgYGAKCj4gKFRoZSBgY29sdW1uLWNvdW50YCBDU1MgcHJv
cGVydHkgcmVxdWlyZXMgSW50ZXJuZXQgRXhwbG9yZXI+PTEwLAo+IEZpcmVmb3g+PTUyLCBT
YWZhcmk+PTksIE9wZXJhPj0zNyBvciBDaHJvbWU+PTUwLCByZWZlciB0bwo+IFt3M3NjaG9v
bHNdKGh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vY3NzL2NzczNfbXVsdGlwbGVfY29sdW1u
cy5hc3ApLikKCgpJbiBvcmRlciB0byB1c2UgdGhlIGBtdWx0aWNvbGAgKnRleCogcGFja2Fn
ZSwgdGhlIHN0YXRlbWVudApgXHVzZXBhY2thZ2V7bXVsdGljb2x9YCBoYXMgdG8gYmUgaW5j
bHVkZWQgaW4gdGhlIHlhbWwgbWV0YSBkYXRhCgpgP21jb2xfYmVnaW4oKWAKVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0CmA/bWNvbF9lbmQoKWAK
'''
pack_quicksource_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKZGF0ZTogMS4gQXVndXN0
IDIwMjEKYXV0aG9yOiBIZW5yeSBMZWhtYW5uCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
IFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAw
IDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4K
eG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDEx
cHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29k
ZSBvZiB0aGUgYG1hcmt5YCBxdWlja3N0YXJ0Cj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGlu
ZyBgbWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhlIGBtYXJreWAg
bWFya3VwIGlzIGNvbXBhdGlibGUgd2l0aCBzdGFuZGFyZCBNYXJrZG93biBhbmQgY2FuIGJl
Cj4gcmVhZCBhcy1pcy4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBgbWFya3lgIHNv
dXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50
byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IFRoZSBjb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9m
IGBtYXJreWAgaXMgYXZhaWxhYmxlCj4gW2hlcmVdKG1hcmt5Lj8/PykKCi0tLQoKYGBgcHl0
aG9uCiEhISBxdWlja3N0YXJ0Lm1kIHJhdyA+PjEKYGBgCg==
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IG1hcmt5LmJpYgpoZWFkZXItaW5j
bHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCiMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxh
YmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRo
ZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVV
Z0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJL
RTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9
CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0t
LXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTog
VGhpcyBpcyB0aGUgY2FwdGlvbiB7I3RibDpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2Ug
dG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7ZX1ee1xtYm94e2l9XHBpfSsxPTAkJHsjZXE6bGFi
ZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRh
dGlvbiBbQE11bGxlcjE5OTNdLgoKIyBgbWFya3lgIE1hcmt1cAoKKipIaWRkZW4gQ29kZSwg
RXhlY3V0ZWQqKgoKYGBgIQoJaW1wb3J0IG1hdGgKCXByaW50KCJIZWxsbyBDb25zb2xlISIp
CmBgYAoKKipEaXNwbGF5ZWQgQ29kZSwgRXhlY3V0ZWQqKgoKYGBgPwoJZGVmIGxpc3RfYW5k
KGwpOgoJCXJldHVybiAiLCAiLmpvaW4oc3RyKGkpIGZvciBpIGluIGxbOi0xXSkgKyAiIGFu
ZCAiICsgc3RyKGxbLTFdKQoKCXggPSAyCgl5ID0gbWF0aC5zcXJ0KHgpCmBgYAoKKipEaXNw
bGF5ZWQgQ29kZSwgTm90IEV4ZWN1dGVkKioKCmBgYHB5dGhvbgoJeCA9IDMKYGBgCgoqKklu
bGluZSBGb3JtYXR0ZWQgT3V0cHV0KioKClRoZSBzcXVhcmUgcm9vdCBvZiAkeD1gIXhgJCBp
cyBgIXk6LjNmYC4KCioqSW5saW5lIEV4cHJlc3Npb24qKgoKVGhlIGZpcnN0IHRlbiBudW1i
ZXJzIGFyZSBgIWxpc3RfYW5kKHJhbmdlKDEwKSlgLgoKKipGb3JtYXQgTGlua3MqKgoKYGBg
bWQKW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuXD8/PykKYGBgCgp3aWxsIGJlIHByb3Byb2Nl
c3NlZCBpbnRvIHRoZSBmb2xsb3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxgOiBgW0xpbmsgdG8g
ZG9jdW1lbnRdKGZpbGUuaHRtbClgCiogZm9yIGBwZGZgOiBgW0xpbmsgdG8gZG9jdW1lbnRd
KGZpbGUucGRmKWAKCltMaW5rIHRvIHRoaXMgZG9jdW1lbnRdKGV4YW1wbGUuPz8/KQoKKipG
b3JtYXQgQ29kZXMqKgoKYGBgPwoJZGVmIEZNVENPREVfaHRtbCgpOiByZXR1cm4gIkg8c3Vw
PlQ8L3N1cD48c3ViPk08L3N1Yj5MIgoJZGVmIEZNVENPREVfcGRmKCk6IHJldHVybiAiXExh
VGVYIgpgYGAKClRoaXMgaXMgYSBgLj8/P2AgZG9jdW1lbnQgYW5kIHRoZSBmb3JtYXQgY29k
ZSByZXR1cm5zOiBgP0ZNVENPREUoKWAuCgojIFJlZmVyZW5jZXMgey19CgogYGBgIQogCVJV
TiBBTkQgU0hPVwogYGBgCgogYGBgISEKIAlSVU4gQU5EIEhJREUKIGBgYAoKIGAhRVhQUkVT
U0lPTjpGT1JNQVRgCgogYD9GT1JNQVRDT0RFKClgCgogYGBgP3BkZgogCUNPREUKIGBgYAoK
IGBgYD9odG1sCiAJQ09ERQogYGBgCg==
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "noref":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "notext":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text,
				run_marky=flag_run_marky, shift_atx=flag_shift_atx, shift_str=shift_str)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True,
	read_text=True, run_marky=True, shift_atx=0, shift_str=""):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == "":
						continue
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)
						appendbuf = ""
				if i == "```!" or i == "```?":
					show_code = (i[3] == "?")
					code_text = []
				elif i == "```" and not code_text is None:
					if show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					for nn, j in enumerate(run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)):
						#k = parse_line("<module> <sring>", nn, j)
						md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					md_text.append(shift_str + i)
					continue
				elif i.startswith(r"\\!!!"):
					j = parse_line(fpath, n, i[2:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					j = parse_line(fpath, n, i[1:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					j = parse_line(fpath, n, i)
					if j == "":
						appendbuf = i
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return ""
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				is_shortcode = "(" in expr and expr[-1] == ")"
				if is_shortcode:
					text += run_shortcode(fpath, n, p + 2, expr)
				else:
					text += print_inline(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("# ```%s" % ("?" if flag_show else "!"), fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		def go_deeper(deeep, first=False):
			print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
			if first:
				print("# FILE", args.marky)
			if os.path.exists(deeep.tb_frame.f_code.co_filename):
				with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
					print("#", fh.read().split("\n")[deeep.tb_lineno-1])
			if deeep.tb_next != None:
				go_deeper(deeep.tb_next)
		if ex.__traceback__.tb_next:
			go_deeper(ex.__traceback__.tb_next, first=True)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def print_inline(fpath, n, i, text):
	print("# `?`", fpath, "%d:%d" % (n, i), "{%s}" % text, end="", flush=True)
	try:
		value = ("{" + text + "}").format(**exec_dict)
	except Exception as ex:
		print("")
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		p = expr.find("(")
		shexpr = expr[:p] + "_" + f + expr[p:]
		print("# `?()`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		try:
			exec_text = list()
			exec_append = False
			value = eval(shexpr, exec_dict, None)
			if not value is None:
				__(value)
			if len(exec_text) > 0:
				exec_text = "\n".join(exec_text).split("\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<<??%s %s %s??>>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text)
	try:
		value = str(eval('f"""{%s}"""' % text, exec_dict, None))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for a, b in enumerate(value.split("\n")):
		print("#    %03d" % (a + 1), b)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/quickstart.md",
	"./md/quicksource.md",
	"./md/example.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--md")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	p = md_text.find("<<??")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("??>>", p + 4)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+4:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + 4
			p = md_text.find("<<??", c)
		else:
			p = md_text.find("<<??", p + 4)
	newtext += md_text[c:]
	if args.md.endswith(".md"):
		outfile = args.md[0:-2] + args.link + ".md"
	else:
		outfile = args.md + args.link + ".md"
	write_file(outfile, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n\n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
