#!/usr/bin/env python3
# -*- coding: utf-8 -*-

########################################################################
# marky Markdown Preprocessor ###########################################
########################################################################

# Quick Make Example Project
############################
#
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make scan html-all pdf-all httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/

########################################################################

import sys
import argparse
import glob
import os
import base64
import yaml

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("# ERROR", type(ex), str(ex))
		sys.exit(1)

########################################################################

_MARKY_VERSION = (0, 9)

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###
pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgouUEhPTlk6IGhlbHAKaGVscDoKCSMgbWFya3kgREVQRU5E
RU5DSUVTCgkjIyMjIyMjIyMjIyMjIyMjIyMjIwoJIyAqIHBhbmRvYyA+PSAyLjEwCgkjICog
cGlwIGluc3RhbGwgcGFuZG9jLWZpZ25vcwoJIyAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAqIHBpcCBpbnN0YWxsIHBhbmRvYy1zZWNub3MKCSMgKiBwaXAgaW5zdGFsbCBwYW5k
b2MtdGFibGVub3MKCSMgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAqIHBpcCBpbnN0
YWxsIHB5eWFtbAoJIwoJIyBBVFRFTlRJT04KCSMjIyMjIyMjIyMjCgkjIEFsbCBmaWxlcyBp
biBgYnVpbGQvKi5tZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkIQoJ
IyBVc2VyIGZpbGVzIGAqLm1kYCBoYXZlIHRvIGJlIHBsYWNlZCBpbiBgbWQvKi5tZGAhCgkj
IGBtYWtlIGNsZWFuYCBkZWxldGVzIGFsbCBmaWxlcyBpbiBgYnVpbGQvYCwgYGh0bWwvYCBh
bmQgYHBkZi9gLgoJIwoJIyBtYXJreSBVVElMUwoJIyMjIyMjIyMjIyMjIwoJIyAqIG1ha2Ug
aGVscCAgICAgICAgICAgIC0gc2hvdyB0aGlzICpIZWxwIE1lc3NhZ2UqCgkjICogbWFrZSB0
cmVlICAgICAgICAgICAgLSBzaG93IHRoZSAqUHJvamVjdCBUcmVlKgoJIyAqIG1ha2UgaHR0
cGQgICAgICAgICAgIC0gcnVuIHB5dGhvbiAtbSBodHRwZC5zZXJ2ZXIgaW4gYGh0bWwvYAoJ
IyAqIG1ha2UgY2xlYW4gICAgICAgICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypg
LCBgcGRmLypgCgkjICogbWFrZSBzY2FuICAgICAgICAgICAgLSBidWlsZCBtYWtlIGRlcHM6
IGBidWlsZC8qLm1ha2VgCgkjICogbWFrZSBsaXN0ICAgICAgICAgICAgLSBsaXN0IGFsbCBz
Y2FubmVkIGZpbGVzIGFuZCB0YXJnZXRzCgkjCgkjIG1hcmt5IEJVSUxEIEFMTAoJIyMjIyMj
IyMjIyMjIyMjIyMKCSMgKiBtYWtlIGJ1aWxkICAgICAgICAgICAtPiBgYnVpbGQvKi57aHRt
bCxwZGZ9Lm1kYAoJIyAqIG1ha2UgdGV4ICAgICAgICAgICAgIC0+IGBidWlsZC8qLnRleGAK
CSMgKiBtYWtlIGh0bWwgICAgICAgICAgICAtPiBgaHRtbC8qLmh0bWxgCgkjICogbWFrZSBw
ZGYgICAgICAgICAgICAgLT4gYHBkZi8qLnBkZmAKCSMgKiBtYWtlIGFsbCAgICAgICAgICAg
ICAtPiBgaHRtbC8qLmh0bWxgLCBgcGRmLyoucGRmYAoJIwoJIyBtYXJreSBCVUlMRCBGSUxF
CgkjIyMjIyMjIyMjIyMjIyMjIyMKCSMgKiBtYWtlIGJ1aWxkL2ZpbGUgICAgICAtPiBgYnVp
bGQvZmlsZS57aHRtbCxwZGZ9Lm1kYAoJIyAqIG1ha2UgYnVpbGQvZmlsZS50ZXggIC0+IGBi
dWlsZC9maWxlLnRleGAKCSMgKiBtYWtlIGh0bWwvZmlsZSAgICAgICAtPiBgaHRtbC9maWxl
Lmh0bWxgCgkjICogbWFrZSBwZGYvZmlsZSAgICAgICAgLT4gYHBkZi9wZGYuaHRtbGAKCSMK
CSMgRVhBTVBMRQoJIyMjIyMjIyMjCgkjIDEuIHJ1biBgbWFrZSBzY2FuIGh0bWwvZmlsZS5o
dG1sIGh0dHBkYDoKCSMgICAgKiBnZW5lcmF0ZSBgYnVpbGQvZmlsZS5tYWtlYAoJIyAgICAq
IHRyYW5zZm9ybSBgbWQvZmlsZS5tZGAgLT4gYGh0bWwvZmlsZS5odG1sYAoJIyAgICAqIHN0
YXJ0IGEgcHl0aG9uIGh0dHBkIHNlcnZlciBpbiBgaHRtbGAKCSMgMi4gcnVuIGBtYWtlIHNj
YW4gcGRmL2ZpbGUucGRmYAoJIyAgICAqIGdlbmVyYXRlIGBidWlsZC9maWxlLm1ha2VgCgkj
ICAgICogdHJhbnNmb3JtIGBtZC9maWxlLm1kYCAtPiBgcGRmL2ZpbGUucGRmYAoJIwoKLlBI
T05ZOiB0cmVlCnRyZWU6CgkjIFBST0pFQ1QgVFJFRQoJIyMjIyMjIyMjIyMjIyMKCSMgPHdv
cmtpbmdfZGlyPgoJIyB8LSBtYXJreS5weSAgICAgICAgICAgIC0gbWFya3kgZXhlY3V0YWJs
ZQoJIyB8LSBNYWtlZmlsZSAgICAgICAgKCopIC0gbWFya3kgTWFrZWZpbGUKCSMgfC0gcGFu
ZG9jLXJ1biAgICAgICgqKSAtIHBhbmRvYyB3cmFwcGVyCgkjIHwtIG1kLyAgICAgICAgICAg
ICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJIyB8ICB8LSAqLm1kICAgICAgICAgICAgIC0g
dXNlciBNYXJrZG93biB0ZXh0CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSB1c2VyIGRh
dGEgZGlyCgkjIHwgIHwtICouKiAgICAgICAgICAgICAgICB1c2VyIGRhdGEgZmlsZXMKCSMg
fC0gYnVpbGQvICAgICAgICAgICgqKSAtIGJ1aWxkIE1hcmtkb3duIGRpcgoJIyB8ICB8LSAq
LnB5ICAgICAgICAgKCopIC0gTWFya2Rvd24gbWFya3kgY29kZQoJIyB8ICB8LSAqLm1ha2Ug
ICAgICAgKCopIC0gTWFrZWZpbGUgcnVsZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAt
IE1hcmtkb3duIGZvciBodG1sIGZvcm1hdAoJIyB8ICB8LSAqLnBkZi5tZCAgICAgKCopIC0g
TWFya2Rvd24gZm9yIHBkZiBmb3JtYXQKCSMgfC0gaHRtbC8qLmh0bWwgICAgICgqKSAtIHJl
bmRlcmVkIGh0bWwgZGlyCgkjIHwtIHBkZi8qLnBkZiAgICAgICAoKikgLSByZW5kZXJlZCBw
ZGYgZGlyCgkjCgkjICgqKSBkaXJlY3Rvcmllcy9maWxlcyBhcmUgYXV0by1nZW5lcmF0ZWQg
dXNpbmcKCSMgICAgYC4vbWFya3kucHkgLS1pbml0YCBhbmQgYG1ha2Ugc2NhbsK0CgkjCgou
UEhPTlk6IGNsZWFuCmNsZWFuOgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8q
CgouUEhPTlk6IGh0dHBkCmh0dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2
ZXIKCi5QSE9OWTogc2NhbgpzY2FuOgoJLi9tYXJreS5weSAtLXNjYW4KCiMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIwoKYWxsX21kOj0KYWxsX2J1aWxkOj0KYWxsX2h0bWw6PQphbGxfcGRmOj0KYWxs
X3RleDo9CgotaW5jbHVkZSBidWlsZC8qLm1ha2UgYnVpbGQvKiovKi5tYWtlCgojIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMKCi5QSE9OWTogbGluawpidWlsZDogJChhbGxfYnVpbGQpCgouUEhPTlk6
IGh0bWwKaHRtbDogJChhbGxfaHRtbCkKCi5QSE9OWTogcGRmCnBkZjogJChhbGxfcGRmKQoK
LlBIT05ZOiB0ZXgKdGV4OiAkKGFsbF90ZXgpCgouUEhPTlk6IGFsbAphbGw6IGh0bWwgcGRm
CgouUEhPTlk6IGxpc3QKbGlzdDoKCSMgbWFya3kgVEFSR0VUUwoJIyMjIyMjIyMjIyMjIyMj
CgkjICogYG1ha2Ugc2NhbmAgLS0gRklMRVM6JChhbGxfbWQpCgkjICogYG1ha2UgYnVpbGRg
IC0tIGBtYWtlJChhbGxfYnVpbGQpYAoJIyAqIGBtYWtlIGh0bWxgIC0tIGBtYWtlJChhbGxf
aHRtbClgCgkjICogYG1ha2UgcGRmYCAtLSBgbWFrZSQoYWxsX3BkZilgCgkjICogYG1ha2Ug
dGV4YCAtLSBgbWFrZSQoYWxsX3RleClgCgkjCg==
'''
pack_pandoc_run = '''
IyEvYmluL2Jhc2gKClsgJCMgPT0gMCBdICYmIGVjaG8gIiIiCiMgVXNhZ2U6ICQwOiA8Rk9S
TUFUPiA8SU5GSUxFPiA8T1VURklMRT4KIyBFeGFtcGxlOgojICQwIGh0bWwgYnVpbGQvZmls
ZS5odG1sLm1kIGh0bWwvZmlsZS5odG1sCiMgJDAgcGRmIGJ1aWxkL2ZpbGUucGRmLm1kIHBk
Zi9maWxlLnBkZgoiIiIgJiYgZXhpdCAxCgpQQU5ET0M9cGFuZG9jCgpNREVYVD1cCmFsbF9z
eW1ib2xzX2VzY2FwYWJsZStcCmludHJhd29yZF91bmRlcnNjb3JlcytcCmVzY2FwZWRfbGlu
ZV9icmVha3MrXApzcGFjZV9pbl9hdHhfaGVhZGVyK1wKbGlzdHNfd2l0aG91dF9wcmVjZWRp
bmdfYmxhbmtsaW5lK1wKaW5saW5lX2NvZGVfYXR0cmlidXRlcytcCnN0cmlrZW91dCtcCnlh
bWxfbWV0YWRhdGFfYmxvY2srXApwaXBlX3RhYmxlcytcCmxpbmVfYmxvY2tzK1wKaW1wbGlj
aXRfZmlndXJlcytcCmFiYnJldmlhdGlvbnMrXAppbmxpbmVfbm90ZXMKClBET1BUPSIiIgot
LXRhYmxlLW9mLWNvbnRlbnRzCi0tbnVtYmVyLXNlY3Rpb25zCiIiIgoKaWYgWyAkMSA9PSBo
dG1sIF0gOyB0aGVuCiRQQU5ET0MgIiQyIiBcCi0tZmlsdGVyIHBhbmRvYy14bm9zIFwKLS1j
aXRlcHJvYyBcCi0tZnJvbT1tYXJrZG93bityYXdfaHRtbCskTURFWFQgXAotLXRvPWh0bWw1
IFwKLS1zZWxmLWNvbnRhaW5lZCBcCi0tb3V0cHV0PSIkMyIgXAotLXJlc291cmNlLXBhdGg9
Ii4vYnVpbGQvIiBcCiRQRE9QVApmaQoKaWYgWyAkMSA9PSBwZGYgXSA7IHRoZW4KJFBBTkRP
QyAiJDIiIFwKLS1maWx0ZXIgcGFuZG9jLXhub3MgXAotLWNpdGVwcm9jIFwKLS1mcm9tPW1h
cmtkb3duK3Jhd190ZXgrJE1ERVhUIFwKLS10bz1sYXRleCBcCi0tb3V0cHV0PSIkMyIgXAot
LXJlc291cmNlLXBhdGg9Ii4vYnVpbGQvIiBcCi0tcGRmLWVuZ2luZT14ZWxhdGV4IFwKJFBE
T1BUCmZpCgppZiBbICQxID09IHRleCBdIDsgdGhlbgokUEFORE9DICIkMiIgXAotLWZpbHRl
ciBwYW5kb2MteG5vcyBcCi0tY2l0ZXByb2MgXAotLWZyb209bWFya2Rvd24rcmF3X3RleCsk
TURFWFQgXAotLXRvPWxhdGV4IFwKLS1vdXRwdXQ9IiQzIiBcCi0tcmVzb3VyY2UtcGF0aD0i
Li9idWlsZC8iIFwKJFBET1BUCmZpCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBEb2N1bWVudGF0aW9uICIKdGl0bGUtLXBkZjogIi0tIGBw
ZGZgIgp0aXRsZS0taHRtbDogIi0tIGBodG1sYCIKYmlibGlvZ3JhcGh5OiBkYXRhL21hcmt5
LmJpYgpoZWFkZXItaW5jbHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtz
PWZhbHNlLAogICBhbGxib3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9
ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94
LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5v
cy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KPD8KY29sID0gZm10Y29k
ZSgKCWh0bWw9IjxzcGFuIHN0eWxlPSdjb2xvcjp7MX07Jz57MH08L3NwYW4+IiwKCXBkZj1y
Ilx0ZXh0Y29sb3J7e3sxfX19e3t7MH19fSIKKQpkZWYgdGV4dF9wcm9jKGNtZCwgY3JvcD1U
cnVlKToKCWltcG9ydCBzdWJwcm9jZXNzIGFzIHNwCgl0ZXh0ID0gIiIKCWZvciBpIGluIHNw
LmNoZWNrX291dHB1dChjbWQuc3BsaXQoKSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIp
OgoJCWlmIG5vdCBjcm9wOgoJCQl0ZXh0ICs9IGkgKyAiXG4iCgkJZWxpZiBpLnN0YXJ0c3dp
dGgoIiMgIik6CgkJCXRleHQgKz0gaVsyOl0gKyAiXG4iCgkJZWxpZiBpID09ICIjIjoKCQkJ
dGV4dCArPSAiXG4iCgkJZWxpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJdGV4dCArPSBpICsg
IlxuIgoJcmV0dXJuIHRleHQKdmVyc2lvbiA9IHRleHRfcHJvYygicHl0aG9uIG1hcmt5LnB5
IC0tdmVyc2lvbiIsIGNyb3A9RmFsc2UpLnN0cmlwKCkKPz4KLS0tCgo+ICoqQWJzdHJhY3Qq
KiAtLSBgbWFya3lgIGlzIGEgcHJlcHJvY2Vzc29yIHdpdGggYW4gZWFzeSBhbmQgaW50dWl0
aXZlCj4gc3ludGF4IGZvciBleGVjdXRpb24gb2YgZW1iZWRkZWQge3tjb2woInB5aG9uIiwi
Ymx1ZSIpfX0gY29kZSBkdXJpbmcgcmVuZGVyaW5nCj4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1
bWVudHMgZnJvbSBNYXJrZG93biB0ZXh0Lgo+IFRoaXMgZG9jdW1lbnQgaXMgY3JlYXRlZCB1
c2luZyBgbWFya3lgLCB2ZXJzaW9uICp7e3ZlcnNpb259fSouCj4gRm9yIG1vcmUgaW5mb3Jt
YXRpb24gcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRvcnldKGh0dHBz
Oi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCiMgYG1hcmt5YCBEeW5hbWlj
IE1hcmtkb3duCgpgbWFya3lgIGlzIGEgTWFya2Rvd24gcHJlcHJvY2Vzc29yIHdoaWNoIHRy
YW5zZm9ybXMgYSBNYXJrZG93biBkb2N1bWVudAp1c2luZyBweXRob24uIGBtYXJreWAgaW1w
bGVtZW50cyB0aHJlZSBzdGF0ZW1lbnRzIHdpdGggZXh0cmVtZWx5IGVhc3kKYW5kIGludHVp
dGl2ZSBzeW50YXgsIHdoaWNoIGFyZSBlbWJlZGRlZCBkaXJlY3RseSBpbiB0aGUgTWFya2Rv
d24gdGV4dDoKCjEuIGA8XD8uLi4/XD5gOiBQeXRob24gY29kZSBibG9jay4KMi4gYHtcey4u
Ln1cfWA6IGBmYC1zdHJpbmcgb3V0cHV0IGludG8gTWFya2Rvd24uCjMuIGBfX18oKWA6IEZ1
bmN0aW9uIGZvciBvdXRwdXQgaW50byBNYXJrZG93bi4KClVzaW5nIGA8XD8uLi4/XD5gIGFu
ZCBge1x7Li4ufVx9YCBweXRob24gcHJvY2Vzc2luZyBhbmQgYGZgLXN0cmluZyBvdXRwdXQK
aXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIHRoZSBNYXJrZG93biB0ZXh0LiBVc2luZyB0
aGUgYF9fXygpYApmdW5jdGlvbiB0ZXh0IGlzIGdlbmVyYXRlZCBmcm9tIHB5dGhvbiBhbGdv
cml0aG1zIGFuZApkeW5hbWljYWxseSBpbnNlcnRlZCBpbnRvIHRoZSByZXN1bHRpbmcgTWFy
a2Rvd24uCgpUaGUgZm9sbG93aW5nIGV4YW1wbGUgY2FuIGJlIHByb2R1Y2VkIGJ5IGp1c3Qg
Y2FsbGluZwpgbWFrZSBwZGYvZmlsZWAgb3IgYG1ha2UgaHRtbC9maWxlYC4KCiMjIyMgRXhh
bXBsZTogYG1kL2ZpbGUubWRgIHstfQpgYGBtYXJrZG93bgotLS0KdGl0bGU6IEFuIEV4YW1w
bGUKLS0tCjxcPwpkZWYgY2FwX2ZpcnN0KHgpOgoJcmV0dXJuICIgIi5qb2luKFtpWzBdLnVw
cGVyKCkgKyBpWzE6XSBmb3IgaSBpbiBpLnNwbGl0KCldKQpmb3IgaSBpbiBbInZlcnkiLCAi
bm90IHNvIl06Cgk/XD4KKip7XHtjYXBfZmlyc3QoaSl9XH0gU2VjdGlvbioqCgpUbyBkYXkg
aXMgYSB7XHtpfVx9IHZlcnkgbmljZSBkYXkuClRoZSBzdW4gaXMgc2hpbmluZyB7XHtpfVx9
IGJyaWdodCBhbmQKdGhlIGJpcmRzIGFyZSBzaW5naW5nIHtce2l9XH0gbG91ZCBhbmQKZmx5
IHtce2l9XH0gaGlnaCBpbiB0aGUge1x7aX1cfSBibHVlIHNreS4KCTxcPwo/XD4KYGBgCiMj
IyMgT3V0cHV0IGBidWlsZC9maWxlLm1kYCB7LX0KYGBgbWFya2Rvd24KLS0tCnRpdGxlOiBB
biBFeGFtcGxlCi0tLQo8PwpkZWYgY2FwX2ZpcnN0KHgpOgoJcmV0dXJuICIgIi5qb2luKFtp
WzBdLnVwcGVyKCkgKyBpWzE6XSBmb3IgaSBpbiBpLnNwbGl0KCldKQpmb3IgaSBpbiBbInZl
cnkiLCAibm90IHNvIl06Cgk/PgoqKnt7Y2FwX2ZpcnN0KGkpfX0gU2VjdGlvbioqCgpUbyBk
YXkgaXMgYSB7e2l9fSB2ZXJ5IG5pY2UgZGF5LgpUaGUgc3VuIGlzIHNoaW5pbmcge3tpfX0g
YnJpZ2h0IGFuZAp0aGUgYmlyZHMgYXJlIHNpbmdpbmcge3tpfX0gbG91ZCBhbmQKZmx5IHt7
aX19IGhpZ2ggaW4gdGhlIHt7aX19IGJsdWUgc2t5LgoJPD8KPz4KYGBgCgojIEhvdyBkb2Vz
IGBtYXJreWAgd29yayBpbnRlcm5hbGx5PwoKYG1hcmt5YCB1c2VzIGFuIGV4dHJlbWVseSBz
aW1wbGUgbWVjaGFuaXNtIGZvciBnZW5lcmF0aW5nIGEgcHl0aG9uIHByb2dyYW1tCmZyb20g
dGhlIE1hcmtkb3duIHRleHQuIFVzaW5nIHRoZSBgPFw/Li4uP1w+YCBhbmQgYHtcey4uLn1c
fWAgc3RhdGVtZW50LApQeXRob24gY29kZSBpcyBlbWJlZGRlZCBpbnRvIHRoZSBNYXJrZG93
biB0ZXh0IGFuZCB0cmFuc2xhdGVkIGludG8gYSBzZXJpZXMKb2YgY2FsbHMgdG8gdGhlIGBf
X18oKWAgZnVuY3Rpb24gdXNpbmcgYGZgLXN0cmluZ3MgYXMgYXJndW1lbnRzLCB3aGVyZQpw
eXRob24gdmFyaWFibGVzIGFyZSByZWZlcmVuY2VkLiBUaGlzIHJlc3VsdHMgaW50byBhIHB5
dGhvbiBwcm9ncmFtCndoaWNoIGNhbiBnZW5lcmF0ZSBNYXJrZG93biB0ZXh0IGFsZ29yaXRo
bWljYWxseS4KCiMjIyMgRXhhbXBsZTogYG1kL2ZpbGUubWRgIHstfQpgYGBwaHAKKiBUaGlz
IGlzIHtmaXJzdH0uIDxcPwp4ID0gMSAjIHRoaXMgaXMgY29kZQpmb3IgaSBpbiByYW5nZSgz
KToKCWlmIHg6CgkJP1w+Cntce2krMX1cfS4gVGhlIHZhbHVlIGlzIHtce1x7eH1cfVx9Lgo8
XD8KCWVsc2U6CgkJP1w+e1x7aSsxfVx9LiBUaGUgdmFsdWUgaXMgemVyby4KPFw/Cgl4ID0g
MAo/XD4qIFRoaXMgaXMgbGFzdC4KYGBgClRoZSBmaWxlIHByb2R1Y2VzIHRoZSBmb2xsb3dp
bmcgTWFya2Rvd24gb3V0cHV0LgoKIyMjIyBPdXRwdXQ6IE1hcmtkb3duIHstfQpgYGBiYXNo
CiogVGhpcyBpcyB7Zmlyc3R9LiA8Pwp4ID0gMSAjIHRoaXMgaXMgY29kZQpmb3IgaSBpbiBy
YW5nZSgzKToKCWlmIHg6CgkJPz4Ke3tpKzF9fS4gVGhlIHZhbHVlIGlzIHt7e3h9fX0uCjw/
CgllbHNlOgoJCT8+e3tpKzF9fS4gVGhlIHZhbHVlIGlzIHplcm8uCjw/Cgl4ID0gMAo/Piog
VGhpcyBpcyBsYXN0LgpgYGAKCmBtYXJreWAgdHJhbnNmb3JtcyB0aGUgTWFya2Rvd24gaW50
byBQeXRob24gc291cmNlIGNvZGUuCkV4ZWN1dGlvbiBvZiB0aGUgUHl0aG9uIHNvdXJjZSBj
b2RlIHlpZWxkcyB0aGUgbmV3IE1hcmtkb3duIHRleHQuCgojIyMjIE91dHB1dDogYGJ1aWxk
L2ZpbGUucHlgIHstfQpgYGBweXRob24KX19fKHJmIiIiKiBUaGlzIGlzIHtce2ZpcnN0fVx9
LiAiIiIsIF9fXyk7CnggPSAxICMgdGhpcyBpcyBjb2RlCmZvciBpIGluIHJhbmdlKDMpOgoJ
aWYgeDoKCQlfX18ocmYiIiIKe2krMX0uIFRoZSB2YWx1ZSBpcyB7XHtce3h9XH1cfS4KIiIi
LCBfX18pOwoJZWxzZToKCQlfX18ocmYiIiJ7aSsxfS4gVGhlIHZhbHVlIGlzIHplcm8uCiIi
IiwgX19fKTsKCXggPSAwCl9fXyhyZiIiIiogVGhpcyBpcyBsYXN0LgoiIiIsIF9fXyk7CmBg
YAoKIyBRdWljayBTdGFydAoKIyMgYG1hcmt5YCBEZXBlbmRlbmNpZXMKCmBtYXJreWAgZGVw
ZW5kcyBvbiBgcGFuZG9jYCBhbmQgYHB5eWFtbGAuIGBwYW5kb2NgIGlzIHVzZWQgZm9yIHJl
bmRlcmluZwp0aGUgTWFya2Rvd24gaW50byBgaHRtbGAgYW5kIGBwZGZgLiBgbWFya3lgIHVz
ZXMKW3BhbmRvY10oaHR0cHM6Ly93d3cucGFuZG9jLm9yZy8pIGZvciByZW5kZXJpbmcgYGh0
bWxgIGFuZCBgcGRmYC4KYHBhbmRvYz49Mi4xMGAgcmVsZWFzZXMgY2FuIGJlIGZvdW5kClto
ZXJlXShodHRwczovL2dpdGh1Yi5jb20vamdtL3BhbmRvYy9yZWxlYXNlcykuClRoZSBvdGhl
ciBwYWNrYWdlcyBjYW4gYmUgaW5zdGFsbGVkIHdpdGggYHBpcGAuCgpgYGBiYXNoCnBpcCBp
bnN0YWxsIHBhbmRvYy1maWdub3MKcGlwIGluc3RhbGwgcGFuZG9jLWVxbm9zCnBpcCBpbnN0
YWxsIHBhbmRvYy1zZWNub3MKcGlwIGluc3RhbGwgcGFuZG9jLXRhYmxlbm9zCnBpcCBpbnN0
YWxsIHBhbmRvYy14bm9zCnBpcCBpbnN0YWxsIHB5eWFtbApgYGAKCiMjIGBtYXJreWAgV29y
a2Zsb3cKCldvcmtmbG93IGZvciBjcmVhdGluZyBgaHRtbGAgb3IgYHBkZmAgdXNpbmcgYG1h
cmt5YCBieQppbnZvY2F0aW9uIG9mIGBtYWtlIHNjYW4gYWxsYC4KCiptYWtlKnwxLiAqd3Jp
dGUqICB8ICB8Mi4gKmJ1aWxkKiAgICAgICAgICB8ICB8My4gKnJlbmRlcioKLS0tLS0tfC0t
LS0tLS0tLS0tLXwtLXwtLS0tLS0tLS0tLS0tLS0tLS0tLXwtLXwtLS0tLS0tLS0tLS0tLS0t
CmBwZGZgIHwgICAgICAgICAgICB8ICB8YGJ1aWxkL2ZpbGUuaHRtbC5tZGB8LT58YGh0bWwv
ZmlsZS5odG1sYApgLWAgICB8YG1kL2ZpbGUubWRgfC0+fCAgICAgICAgICAgICAgICAgICAg
fCAgfApgaGZtbGB8ICAgICAgICAgICAgfCAgfGBidWlsZC9maWxlLnBkZi5tZGAgfC0+fGBw
ZGYvZmlsZS5wZGZgCgoxLiAqKndyaXRlKio6IHVzZXIgd3JpdGVzIGEgTWFya2Rvd24gdGV4
dCBmaWxlIGFuZCBwbGFjZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9yeSB3aXRoIHRoZSBl
eHRlbnNpb24gYC5tZGAuCjIuICoqYnVpbGQqKjogbWFya3lgIHRyYW5zZm9ybXMgdGhlIGZp
bGVzIGluIGBtZC8qLm1kYCBpbnRvIHJlZ3VsYXIgTWFya2Rvd24gdGV4dAphbmQgcGxhY2Vz
IHRoZSB0cmFuc2Zvcm1lZCBmaWxlcyBpbiBgYnVpbGQvYC4KMy4gKipyZW5kZXIqKjogdGhl
IHJlZ3VsYXIgTWFya2Rvd24gdGV4dCBpbiB0aGUgZmlsZXMgYGJ1aWxkLyoubWRgIGlzIHJl
bmRlcmVkIGludG8KYGh0bWxgIGFuZCBgcGRmYCB1c2luZyBgcGFuZG9jYC4KClRoZSB0aHJl
ZSBzdGVwcyBhcmUgaW1wbGVtZW50ZWQgaW4gYSBNYWtlZmlsZS4KCiMjIERvd25sb2FkIGFu
ZCBJbml0aWFsaXplCgpgbWFya3lgIGlzIHN1cHBsaWVkIGFzIGEgc2luZ2xlLWZpbGUgc2Ny
aXB0IHdoaWNoIGF1dG9tYXRpY2FsbHkKc2V0cyB1cCB0aGUgcHJvamVjdCBzdHJ1Y3R1cmUg
Y29udGFpbmluZyBhbGwgc2NyaXB0cwpyZXF1aXJlZCBmb3IgcHJvY2Vzc2luZyBhbmQgcmVu
ZGVyaW5nIE1hcmtkb3duLgoKRm9yIGV4YW1wbGUsIGRvd25sb2FkIGBtYXJreWAgZnJvbSBn
aXRodWIuCmBgYGJhc2gKZ2l0IGNsb25lIGh0dHBzOi8vbGVobWFubjcuZ2l0aHViLmNvbS9t
YXJreS5naXQKY2QgbWFya3kKYGBgCgpBZnRlciBkb3dubG9hZCwgdGhlIGBtYXJreWAgZW52
aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQgdXNpbmcgYG1hcmt5YC4KYGBgYmFzaAouL21hcmt5
LnB5IC0taW5pdAojIG1rZGlyIGJ1aWxkLwojIG1rZGlyIGRhdGEKIyBta2RpciBtZC8KIyBX
UklURSBNYWtlZmlsZQojIFdSSVRFIHBhbmRvYy1ydW4KIyBXUklURSBtZC9tYXJreS5tZAoj
IFdSSVRFIC5naXRpZ25vcmUKIyBVU0FHRQptYWtlIGhlbHAKYGBgCgojIyBgbWFya3lgIEVu
dmlyb25tZW50CgpEdXJpbmcgaW5pdGlhbGl6YXRpb24sIGBtYXJreWAgY3JlYXRlcyBkaXJl
Y3RvcmllcyBhbmQgZmlsZXMuCkFmdGVyIGluaXRpYWxpemF0aW9uLCB0aGUgZm9sbG93aW5n
IHN0cnVjdHVyZSBpcyBhdXRvLWdlbmVyYXRlZAppbiB0aGUgcHJvamVjdCBkaXJlY3Rvcnku
IGBtYXJreWAgc2hvd3MgdGhlIHByb2plY3Qgc3RydWN0dXJlCndoZW4gaW52b2tpbmcgYG1h
a2UgdHJlZWAuCmBgYGJhc2gKPD8KX19fKHRleHRfcHJvYygibWFrZSB0cmVlIikpCj8+CmBg
YAoKVGhlIHNjcmlwdCBgcGFuZG9jLXJ1bmAgY2FuIGJlIGFkanVzdGVkIGluIGNhc2Ugc3Bl
Y2lmaWMKYHBhbmRvY2Agb3B0aW9ucyBhcmUgcmVxdWlyZWQgZm9yIHJlbmRlcmluZyB0aGUg
YGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMuCgojIyBEb2N1bWVudCBSZW5kZXJpbmcKCkJ5
IGludm9raW5nIGBtYWtlIGFsbGAgYWxsIGZpbGVzIGBtZC8qLm1kYCBhcmUgdHJhbnNmb3Jt
ZWQKaW50byBjb3JyZXNwb25kaW5nIGBodG1sLyouaHRtbGAgYW5kIGBwZGYvKi5wZGZgIGZp
bGVzLiBCeQppbnZva2luZyBgbWFrZSBodHRwZGAgYSBweXRob24gd2ViIHNlcnZlciBpcyBz
dGFydGVkIGluIGBodG1sL2AuCgpBbGwgdXNlci1nZW5lcmF0ZWQgTWFya2Rvd24gY29udGVu
dCBnb2VzIGludG8gYG1kLypgIHVzZXItZ2VuZXJhdGVkCmRhdGEgZmlsZXMgZ28gaW50byBg
ZGF0YS8qYC4KCioqQVRURU5USU9OOioqIFRoZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMg
YGJ1aWxkLypgIGFyZQoqKmF1dG8tZ2VuZXJhdGVkKiouIEFsbCB1c2VyIGZpbGVzIGhhdmUg
dG8gYmUgcGxhY2VkIGluc2lkZSB0aGUKZGlyZWN0b3J5IGBtZC8qYC4gSW52b2tpbmcgYG1h
a2UgY2xlYW5gIHdpbGwgKipkZWxldGUgYWxsIGZpbGVzKioKaW4gYGh0bWwvYCwgYGJ1aWxk
L2AgYW5kIGBwZGYvYC4KCiMjIEludGVncmF0ZWQgRG9jdW1lbnRhdGlvbgoKYG1hcmt5YCBo
YXMgYW4gaW50ZWdyYXRlZCBlbnZpcm9ubWVudC4gVXNpbmcgYG1ha2UgaGVscGAgZGlzcGxh
eXMKYSBzaG9ydCBpbmZvIGFib3V0IHRoZSBgbWFya3lgIGRlcGVuZGVuY2llcywgbWFrZSB0
YXJnZXRzIGFuZApleGFtcGxlcy4KYGBgYmFzaAo8PwpfX18odGV4dF9wcm9jKCJtYWtlIGhl
bHAiKSkKPz4KYGBgCgojIGBtYXJreWAgRmVhdHVyZXMKClBsYWNlIGEgbmV3IGZpbGUgaW4g
YG1kL2ZpbGUubWRgIGFuZCBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KYGBgYmFzaAp0
b3VjaCBtZC9maWxlLm1kCmBgYAoKYG1hcmt5YCBkaXNjb3ZlcnMgdGhlIG5ldyBkb2N1bWVu
dCB3aGVuIGludm9raW5nIGBtYWtlIHNjYW5gLgpgYGBiYXNoCm1ha2Ugc2NhbgojIFdSSVRF
IGJ1aWxkL2ZpbGUubWFrZQpgYGAKCmBtYXJreWAgcmVuZGVycyBgaHRtbGAgYW5kIGBwZGZg
IHVzaW5nIG1ha2UgdGFyZ2V0cy4KYGBgYmFzaAptYWtlIGh0bWwvZmlsZQptYWtlIHBkZi9m
aWxlCmBgYAoKIyMgTWV0YSBEYXRhIGluIEZyb250IE1hdHRlcgoKSWYgZG9jdW1lbnQgc3Rh
cnRzIHdpdGggYC0tLWAsIHlhbWwgaXMgdXNlZCB0byBwYXJzZQp0aGUgZnJvbnQgbWF0dGVy
IGJsb2NrIGRlbGltaXRlZCBieSBgLS0tYC4KQWxsIG1ldGEgZGF0YSBrZXlzIHdpbGwgYmUg
ZXhwb3NlZCBpbnRvIHRoZSBweXRob24gc2NvcGUgYXMgYSBsb2NhbAp2YXJpYWJsZSwgdW5s
ZXNzIHRoZSB2YXJpYWJsZSBhbHJlYWR5IGV4aXN0cy4KCmBgYG1kCi0tLQp0aXRsZTogIk15
IERvY3VtZXQiCmF1dGhvcjogLi4uCmRhdGU6IDIwMjItMDEtMDEKLS0tClRoZSB0aXRsZSBv
ZiB0aGlzIGRvY3VtZW50IGlzIHtce3RpdGxlfVx9LgpgYGAKCiMjIEVtYmVkZGluZyBQeXRo
b24gQ29kZQoKUHl0aG9uIGNvZGUgYmxvY2tzIGFyZSBlbWJlZGRlZCBpbnRvIE1hcmtkb3du
IHVzaW5nIGA8XD8uLi4/XD5gIGFuZCBge1x7Li4ufVx9YC4KQWxsIGNvZGUgYmxvY2tzIHNw
YW4gb25lIGxhcmdlIHNjb3BlIHNoYXJpbmcgZnVuY3Rpb25zIGFuZCBsb2NhbAp2YXJpYWJs
ZXMuIE1ldGEgZGF0YSBpcyBpbXBvcnRlZCBmcm9tIE1hcmtkb3duIGZyb250IG1hdHRlciBh
cyBsb2NhbAp2YXJpYWJsZXMgaW4gdGhlIHB5dGhvbiBzY29wZS4gVGhlIGBpbXBvcnRgIHN0
YXRlbWVudCBjYW4gYmUgdXNlZCBpbgpweXRob24gY29kZSBpbiBvcmRlciB0byBhY2Nlc3Mg
aW5zdGFsbGVkIHB5dGhvbiBwYWNrYWdlcyBhcyB1c3VhbC4KCiMjIyBWaXNpYmxlIENvZGUK
ClVzaW5nIGA8XD8hLi4uP1w+YCBjb2RlIGlzIGV4ZWN1dGVkIGFuZCBhbHNvIHNob3duIGlu
IE1hcmtkb3duLgoKIyMjIyBFeGFtcGxlIHstfQpgYGBweXRob24KPFw/IQp4ID0gNDIgIyB2
aXNpYmxlIGNvZGUKcHJpbnQoIkhlbGxvIGNvbnNvbGUhIikKP1w+CmBgYAoKIyMjIyBSdW4g
YW5kIE91dHB1dCB7LX0KYGBgcHl0aG9uPD8hCnggPSA0MiAjIHZpc2libGUgY29kZQo/Pgpg
YGAKCioqQVRURU5USU9OOioqIFVzaW5nIHRoZSBgcHJpbnQoKWAgZnVuY3Rpb24gdGhlIHRl
eHQgd2lsbCBiZSBwcmludGVkCnRvIHRoZSBjb25zb2xlIGFuZCAqKm5vdCoqIGluc2lkZSB0
aGUgcmVzdWx0aW5nIE1hcmtkb3duIHRleHQuCgojIyMgSGlkZGVuIENvZGUKClVzaW5nIGA8
XD8uLi4/XD5gIGNvZGUgaXMgZXhlY3V0ZWQgYnV0IG5vdCBzaG93biBpbiBNYXJrZG93bi4K
CiMjIyMgRXhhbXBsZSB7LX0KYGBgcHl0aG9uCjxcPwp4ID0gNDEgIyBoaWRkZW4gY29kZQpf
X18oZiJPdXRwdXQgdG8gTWFya2Rvd24uIHggPSB7eH0hIikKP1w+CmBgYAojIyMjIFJ1biBh
bmQgT3V0cHV0IHstfQpgYGBweXRob24KPD8KeCA9IDQxICMgaGlkZGVuIGNvZGUKX19fKGYi
T3V0cHV0IHRvIE1hcmtkb3duLiB4ID0ge3h9ISIpCj8+CmBgYAoKKipBVFRFTlRJT046Kiog
VXNpbmcgdGhlIGBfX18oKWAgZnVuY3Rpb24gdGhlIHRleHQgd2lsbCBiZSBwcmludGVkCmlu
c2lkZSB0aGUgcmVzdWx0aW5nIE1hcmtkb3duIHRleHQgKiphbmQgbm90Kiogb24gdGhlIGNv
bnNvbGUuCgojIyBUaGUgYF9fXygpYCBGdW5jdGlvbgoKVXNpbmcgdGhlIGBwcmludCgpYCBz
dGF0ZW1lbnQgdGhlIHRleHQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xlLgpXaGVu
IHVzaW5nIHRoZSBgX19fKClgIHN0YXRlbWVudCBuZXcgTWFya2Rvd24gdGV4dCBpcwppbnNl
cnRlZCBkeW5hbWljYWxseSBpbnRvIHRoZSBkb2N1bWVudCBkdXJpbmcgcHJlcHJvY2Vzc2lu
Zy4KCiMjIyMgRXhhbXBsZTogTGluZSBCcmVhayB7LX0KYGBgcHl0aG9uCjxcPwp4ID0gNDAg
IyBoaWRkZW4gY29kZQpfX18oIk91dHB1dCBpbiIsIF9fXykKX19fKCJzaW5nbGUgbGluZSEg
IiwgX19fKQpfX18oZiJ4ID0ge3h9IikKP1w+CmBgYAojIyMjIFJ1biBhbmQgT3V0cHV0IHst
fQpgYGBiYXNoCjw/CnggPSA0MCAjIGhpZGRlbiBjb2RlCl9fXygiT3V0cHV0IGluICIsIF9f
XykKX19fKCJzaW5nbGUgbGluZSEgIiwgX19fKQpfX18oZiJ4ID0ge3h9IikKPz4KYGBgCgoj
IyMjIEV4YW1wbGU6IFNoaWZ0LCBDcm9wLCBSZXR1cm4gey19CmBgYHB5dGhvbgo8XD8KcmVz
dWx0ID0gX19fKCIiIgogICAqIHRleHQgaXMgY3JvcHBlZCBhbmQgc2hpZnRlZAogICAgICAg
ICAqIHNoaWZ0IGFuZCBjcm9wCiAgICAgICAgICAgICogY2FuIGJlIGNvbWJpbmVkCiAgICAg
ICAgICAqIHJldHVybmluZyB0aGUgcmVzdWx0CiIiIiwgc2hpZnQ9IiMjIyMjIyMjIiwgY3Jv
cD1UcnVlLCByZXQ9VHJ1ZSkKX19fKHJlc3VsdCkKP1w+CmBgYAojIyMjIFJ1biBhbmQgT3V0
cHV0IHstfQpgYGBiYXNoCjw/CnJlc3VsdCA9IF9fXygiIiIKICAgKiB0ZXh0IGlzIGNyb3Bw
ZWQgYW5kIHNoaWZ0ZWQKICAgICAgICAgKiBzaGlmdCBhbmQgY3JvcAogICAgICAgICAgICAq
IGNhbiBiZSBjb21iaW5lZAogICAgICAgICAgKiByZXR1cm5pbmcgdGhlIHJlc3VsdAoiIiIs
IHNoaWZ0PSIjIyMjIyMjIyIsIGNyb3A9VHJ1ZSwgcmV0PVRydWUpCl9fXyhyZXN1bHQpCj8+
CmBgYAoKIyMgQWxnb3JpdGhtaWMgVGFibGUgRXhhbXBsZQoKQHRibDphbGd0IGlzIGdlbmVy
YXRlZCB1c2luZyB0aGUgZm9sbG93aW5nIHB5dGhvbiBjbG9kZSBibG9jay4KCmBgYHB5dGhv
bjw/IQpuID0gNQp0YWJsZSA9ICIiCmRlYyA9IFsiKiVzKiIsICIqKiVzKioiLCAifn4lc35+
IiwgImAlc2AiLAogICAgICAgciIkXHRpbWVzXiVzJCIsICIkXGluZnR5XyVzJCJdCnRhYmxl
ICs9ICJ8Ii5qb2luKCJYIipuKSArICJcbiIgKyAifCIuam9pbigiLSIqbikgKyAiXG4iCmZv
ciBpIGluIHJhbmdlKG4pOgoJZmlsbCA9IFtjaHIob3JkKCJBIikrKDIqaSszKmspJTI2KSBm
b3IgayBpbiByYW5nZShpKzEpXQoJZmlsbCA9IFtkZWNbKGwraSklbGVuKGRlYyldJWsgZm9y
IGwsIGsgaW4gZW51bWVyYXRlKGZpbGwpXQoJdGV4dCA9IGxpc3QoIjAiKSpuCgl0ZXh0Wyhu
Pj4xKS0oaT4+MSk6KG4+PjEpKyhpPj4xKV0gPSBmaWxsCgl0YWJsZSArPSAifCIuam9pbih0
ZXh0KSArICJcbiIKPz4KYGBgCgp7e3RhYmxlfX0KClRhYmxlOiBUYWJsZSBpcyBnZW5lcmF0
ZWQgdXNpbmcgY29kZSBhbmQgdGhlIGBfX18oKWAgc3RhdGVtZW50LiB7I3RibDphbGd0fQoK
IyMgSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQKClRoZSBge1x7Li4ufVx9YCBzdGF0ZW1lbnQg
dXNlcyBzbnRheCBzaW1pbGFyIHRvIHB5dGhvbiBgZmAtc3RyaW5ncyBmb3IKZm9ybWF0dGVk
IG91dHB1dCBvZiB2YXJpYWJsZXMgYW5kIHJlc3VsdHMgb2YgZXhwcmVzc2lvbnMgaW50byBN
YXJrZG93bgp0ZXh0LiBUaGUgYG1hcmt5YCBvcGVyYXRvciBge1x7PGV4cHJlc3Npb24+Wzo8
Zm9ybWF0Pl19XH1gIHVzZXMgdGhlCnN5bnRheCBvZiBbYGZgLXN0cmluZ3NdKGh0dHBzOi8v
ZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxfYW5hbHlzaXMuaHRtbCNmLXN0
cmluZ3MpLgoKIyMjIyBFeGFtcGxlIDEgey19CmBgYGJhc2gKYHhgIGlzIHtce3h9XH0gYW5k
IHtceyIsIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gcmFuZ2UoeC0xMCx4KV0pfVx9LgpgYGAK
IyMjIyBPdXRwdXQgey19Cj4gYHhgIGlzIHt7eH19IGFuZCB7eyIsIi5qb2luKFtzdHIoaSkg
Zm9yIGkgaW4gcmFuZ2UoeC0xMCx4KV0pfX0uCgojIyMjIEV4YW1wbGUgMiB7LX0KYGBgcHl0
aG9uPD8hCnggPSBpbnQoMSkKeSA9IGZsb2F0KDIuMykKeiA9IDAKYSA9IFsxLCAyLCAzXQpi
ID0gKDQsIDUpCj8+CmBgYApgYGBtYXJrZG93bgpUaGlzIGlzIGEgcGFyYWdyYXBoIGFuZCB4
IGlzIHtce3g6MDNkfVx9IGFuZCB5IGlzIHtce3k6LjJmfVx9LgpPdGhlciBjb250ZW50IGlz
OiBhID0ge1x7YX1cfSwgYiA9IHtce2J9XH0uCmBgYAojIyMjIE91dHB1dCB7LX0KPiBUaGlz
IGlzIGEgcGFyYWdyYXBoIGFuZCB4IGlzIHt7eDowM2R9fSBhbmQgeSBpcyB7e3k6LjJmfX0u
Cj4gT3RoZXIgY29udGVudCBpczogYSA9IHt7YX19LCBiID0ge3tifX0uCgojIyBGb3JtYXQg
TGluayBFeHRlbnNpb24KCldoZW4gd3JpdGluZyBtdWx0aXBsZSBkb2N1bWVudHMsIG9mdGVu
IGRvY3VtZW50cyBhcmUgcmVmZXJlbmNlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgbGlu
a3MuIEluIG9yZGVyIHRvIHJlZmVyIHRvIGV4dGVybmFsCmBodG1sYCBhbmQgYHBkZmAgZG9j
dW1lbnRzIHRoZSBNYXJrZG93biBsaW5rIHN0YXRlbWVudCBpcyB1c2VkLgpgYGBtZApbTGlu
ayBDYXB0aW9uXShwYXRoL3RvL2ZpbGUuaHRtbCkKW0xpbmsgQ2FwdGlvbl0ocGF0aC90by9m
aWxlLnBkZikKYGBgCk9uZSBsaW5rIHN0YXRlbWVudCBjYW5ub3QgYmUgdXNlZCBmb3IgcmVu
ZGVyaW5nIGBodG1sYCBhbmQgYHBkZmAKd2l0aCBjb25zaXN0ZW50IHBhdGhzLiBVc2luZyB0
aGUgYG1hcmt5YCBmb3JtYXQgbGluawogYC5cPz8/YCBmaWxlIGV4dGVuc2lvbiByZXN1bHRz
IGluIGNvbnNpc3RlbnQgbGlua3MgZm9yIGBodG1sYCBhbmQKYHBkZmAgZG9jdW1lbnRzLgoK
IyMjIyBFeGFtcGxlIHstfQpgYGBtZApbTGluayB0byB0aGlzIERvY3VtZW50XShtYXJreS5c
Pz8/KQpgYGAKIyMjIyBPdXRwdXQgey19Cj4gW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0obWFy
a3kuPz8/KQoKIyMgRm9ybWF0IENvZGVzCgpPZnRlbiB3aGVuIHdyaXRpbmcgbWFya2Rvd24g
Zm9yIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLCB0aGUKb3V0cHV0IG5lZWRzIHRvIGJl
IHR3ZWFrZWQgYWNjb3JkaW5nbHkuCmBtYXJreWAgc3VwcG9ydHMgZm9ybWF0IHNwZWNpZmlj
IHR3ZWFraW5nIGJ5IGluamVjdGluZwpyYXcgYGh0bWxgIG9yIGB0ZXhgIGNvZGUgaW50byBN
YXJrZG93biB1c2luZyBmb3JtYXQgY29kZXMuCgpJbiBvcmRlciB0byBpbmplY3QgZm9ybWF0
IHNwZWNpZmljIGNvZGUgdGhlIGBmbXRjb2RlYCBjbGFzcyBpcyB1c2VkLgpUaGUgYGZtdGNv
ZGVgIGNsYXNzIG1hbmFnZXMgaW5qZWN0aW9uIG9mIGBodG1sYCBhbmQgYHRleGAgY29kZQpk
ZXBlbmRpbmcgb24gdGhlIG91dHB1dCBmb3JtYXQuCgoqKkFUVEVOVElPTjoqKiBgdGV4YCBw
YWNrYWdlcyBoYXZlIHRvIGJlIGluY2x1ZGVkIGZvciBgcGRmYCBhcyB3ZWxsIGFzCkphdmFT
Y3JpcHQgYW5kIHN0eWxlIHNoZWV0cyBmb3IgYGh0bWxgIHVzaW5nIHRoZSBtZXRhIGRhdGEg
ZmllbGRzCmBoZWFkZXItaW5jbHVkZXMtLXBkZmAgYW5kIGBoZWFkZXItaW5jbHVkZXMtLWh0
bWxgIHJlc3BlY3RpdmVseS4KCiMjIyMgRXhhbXBsZTogYGZtdGNvZGVgIHstfQpgYGBweXRo
b248PyEKRiA9IGZtdGNvZGUoaHRtbD0iSDxzdXA+VDwvc3VwPjxzdWI+TTwvc3ViPkwiLCBw
ZGY9ciJcTGFUZVgiKQo/PgpgYGAKYGBgbWFya2Rvd24KSW52b2NhdGlvbiBvZiBmb3JtYXQg
Y29kZSByZXN1bHRzIGluOiB7XHtGKCl9XH0uCmBgYAojIyMjIE91dHB1dCB7LX0KPiBJbnZv
Y2F0aW9uIG9mIGZvcm1hdCBjb2RlIHJlc3VsdHMgaW46IHt7RigpfX0uCgojIyMjIEV4YW1w
bGU6IENvbG9yIHstfQpgYGBweXRob248PyEKQyA9IGxhbWJkYSBjb2xvcjogZm10Y29kZSgK
CWh0bWw9IjxzcGFuIHN0eWxlPSdjb2xvcjolczsnPnswfTwvc3Bhbj4iICUgY29sb3IsCglw
ZGY9ciJcdGV4dGNvbG9ye3slc319e3t7MH19fSIgJSBjb2xvcgopCkIgPSBDKCJibHVlIikK
UiA9IEMoInJlZCIpCj8+CmBgYApgYGBtYXJrZG93bgpUZXh0IHdpdGgge1x7QigiYmx1ZSIp
fVx9IGFuZCB7XHtSKCJSRUQiKX1cfS4KYGBgCiMjIyMgT3V0cHV0IHstfQo+IFRleHQgd2l0
aCB7e0IoImJsdWUiKX19IGFuZCB7e1IoIlJFRCIpfX0uCgoKIyMjIyBFeGFtcGxlOiBDbGFz
c2VzIHstfQpgYGBweXRob248PyEKY2xhc3MgY29sb3I6CglkZWYgX19pbml0X18oc2VsZiwg
Y29sb3IpOgoJCXNlbGYuY29sb3IgPSBjb2xvcgoJZGVmIHVwcGVyKHNlbGYsIHgpOgoJCXJl
dHVybiBzZWxmLnRleHQoeC51cHBlcigpKQoJZGVmIGxvd2VyKHNlbGYsIHgpOgoJCXJldHVy
biBzZWxmLnRleHQoeC5sb3dlcigpKQoKY2xhc3MgaHRtbChjb2xvcik6CglkZWYgdGV4dChz
ZWxmLCB4KToKCQlyZXR1cm4gZiI8c3BhbiBzdHlsZT0nY29sb3I6e3NlbGYuY29sb3J9Oyc+
e3h9PC9zcGFuPiIKCmNsYXNzIHBkZihjb2xvcik6CglkZWYgdGV4dChzZWxmLCB4KToKCQly
ZXR1cm4gcmYiXHRleHRjb2xvcnt7e3NlbGYuY29sb3J9fX17e3t4fX19IgoKQ0MgPSBsYW1i
ZGEgeDogZm10Y29kZShodG1sPWh0bWwoeCksIHBkZj1wZGYoeCkpCkJCID0gQ0MoImJsdWUi
KQpSUiA9IENDKCJyZWQiKQo/PgpgYGAKYGBgbWFya2Rvd24KVGV4dCB3aXRoIHtce0JCLnVw
cGVyKCJibHVlIil9XH0gYW5kIHtce1JSLmxvd2VyKCJSRUQiKX1cfS4KYGBgCiMjIyMgT3V0
cHV0IHstfQo+IFRleHQgd2l0aCB7e0JCLnVwcGVyKCJibHVlIil9fSBhbmQge3tSUi5sb3dl
cigiUkVEIil9fS4KCiMgTWV0YSBEYXRhIGluIEZyb250IE1hdHRlcgoKTWV0YSBkYXRhIGlz
IGFubm90YXRlZCBpbiB0aGUgZnJvbnQgbWF0dGVyIG9mIGEgCU1hcmtkb3duIHRleHQgZG9j
dW1lbnQuClRoZSBmcm9udCBtYXR0ZXIgbXVzdCBzdGFydCBpbiB0aGUgZmlyc3QgbGluZSB3
aXRoIGAtLS1gIGFuZCBwcmVjZWRlcyBhbGwKb3RoZXIgdGV4dCBiZWluZyBmZW5jZWQgYnkg
YC0tLWAuIFRoZSBtZXRhIGRhdGEgaXMgaW4gYHlhbWxgIGZvcm1hdC4KVGhlIGB5YW1sYCBi
bG9jayBpcyBwYXJzZWQgdXNpbmcgYHB5dGhvbi1weXlhbWxgLiBBbGwgbWV0YQpkYXRhIGlz
IGltcG9ydGVkIGludG8gdGhlIHByZXByb2Nlc3NlZCBkb2N1bWVudC4KCiMjIFBhbmRvYyBG
cm9udCBNYXR0ZXIKCiMjIyMgRXhhbXBsZSB7LX0KYGBgeWFtbAotLS0KdGl0bGU6IE15IERv
Y3VtZW50CmRhdGU6IDIwMjItMDEtMDEKYXV0aG9yOiAuLi4KbGluay1jaXRhdGlvbnM6IHRy
dWUKYmlibGlvZ3JhcGh5OiBkYXRhL21hcmt5LmJpYgpoZWFkZXItaW5jbHVkZXM6ID4KICAg
XGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVyY29sb3JzPXswIDAg
MH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX1cfQp4bm9zLWNsZXZlcmVmOiB0cnVl
Cnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpmb250c2l6ZTogMTFwdAotLS0KYGBgClRoZSBtZXRh
IGRhdGEgZmllbGRzCltgdGl0bGVgLCBgZGF0ZWAsIGBhdXRob3JgXShodHRwczovL3BhbmRv
Yy5vcmcvTUFOVUFMLmh0bWwjbWV0YWRhdGEtdmFyaWFibGVzKSwKW2BsaW5rLWNpdGF0aW9u
c2BdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNvdGhlci1yZWxldmFudC1tZXRh
ZGF0YS1maWVsZHMpLApbYGJpYmxpb2dyYXBoeWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNjaXRhdGlvbi1yZW5kZXJpbmcpIGFuZApbYGhlYWRlci1pbmNsdWRlc2BdKGh0
dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJpYWJsZXMtc2V0LWF1dG9tYXRpY2Fs
bHkpCmFyZSBwcm9jZXNzZWQgYnkgYHBhbmRvY2AgZHVyaW5nIGRvY3VtZW50IHJlbmRlcmlu
Zy4gYGZvbnRzaXplYCBhZGp1c3RzIHRoZQpmb250IHNpemUgaW4gW2BodG1sYF0oaHR0cHM6
Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1mb3ItaHRtbCkKYW5kIFtgcGRm
YF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1mb3ItbGF0ZXgp
IGRvY3VtZW50cy4KVGhlIGB4bm9zLWNsZXZlcmVmYCBhbmQgYHhub3MtY2FwaXRhbGlzZWAK
ZmllbGRzIGFyZSB1c2VkIGJ5IHRoZSBbYHBhbmRvYy14bm9zYF0oaHR0cHM6Ly9naXRodWIu
Y29tL3RvbWR1Y2svcGFuZG9jLXhub3MpCmV4dGVuc2lvbnMgZm9yIHJlZmVyZW5jaW5nCltm
aWd1cmVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZmlnbm9zI2N1c3Rv
bWl6YXRpb24pLApbdGFibGVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mt
dGFibGVub3MjY3VzdG9taXphdGlvbiksCltzZWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29t
L3RvbWR1Y2svcGFuZG9jLXNlY25vcyNjdXN0b21pemF0aW9uKSBhbmQKW2VxdWF0aW9uc10o
aHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWVxbm9zI2N1c3RvbWl6YXRpb24p
LgoKIyMgYG1hcmt5YCBGb3JtYXQgRmllbGRzCgoqKkV4YW1wbGUqKgpgYGB5YW1sCi0tLQpo
ZWFkZXItaW5jbHVkZXMtLXBkZjogPgogIFxoeXBlcnNldHVwewogIGNvbG9ybGlua3M9ZmFs
c2UsCiAgYWxsYm9yZGVyY29sb3JzPXswIDAgMH0sCiAgcGRmYm9yZGVyc3R5bGU9ey9TL1Uv
VyAxfVx9CmhlYWRlci1pbmNsdWRlcy0taHRtbDogPgogIDxzdHlsZT4qIHsgYm94LXNpemlu
ZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Ci0tLQpgYGAKClRoZSBwYW5kb2MgYGhlYWRlci1p
bmNsdWRlc2AgZmllbGQgaXMgdXNlZCBmb3IgYHBkZmAgYW5kIGBodG1sYCBkb2N1bWVudHMs
CnRoZXJlZm9yZSBpdCBtdXN0IGNvbnRhaW4gY29ycmVzcG9uZGluZyB0ZXggYW5kIGBodG1s
YCBjb2RlLgoKVGhlIGZpZWxkIGBoZWFkZXItaW5jbHVkZXNgIGVuZGluZyB3aXRoIGAtLXBk
ZmAgb3IgYC0taHRtbGAKc3BlY2lmaWVzIGNvcnJlc3BvbmRpbmcgb3B0aW9ucyBmb3IgdGhl
IGdlbmVyYXRpb24gb2YgYHBkZmAgYW5kIGBodG1sYApkb2N1bWVudHMuIER1cmluZyBtYWtl
LCBgbWFya3lgIHNjYW5zIGFsbCBtZXRhIGRhdGEgZmllbGRzLCBhbmQKZmllbGRzIHdoaWNo
IGVuZCB3aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgIGFyZSBzZWxlY3RlZCBhbmQgZm9yd2Fy
ZGVkCnRvIGBwYW5kb2NgIGJhc2VkIG9uIHRoZSBmb3JtYXQgdG8gYmUgcmVuZGVyZWQuCgoj
IFNjaWVudGlmaWMgV3JpdGluZyBpbiBNYXJrZG93biB7I3NlYzpwYW5tZH0KCltNYXJrZG93
bl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3BhbmRvY3MtbWFya2Rvd24pIGlz
IGEgbWFya3VwCmxhbmd1YWdlIGZvciB0ZWNobmljYWwgd3JpdGluZywgd2l0aCBlbXBoYXNp
cyBvbiByZWFkYWJpbGl0eS4gTWFya2Rvd24KY2FuIGJlIHJlbmRlcmVkIGluIG1hbnkgZm9y
bWF0cyBpbmNsdWRpbmcgYGh0bWxgIGFuZCBgcGRmYCBieSB1c2luZwpbYHBhbmRvY2BdKGh0
dHBzOi8vcGFuZG9jLm9yZy8pIGZvciBleGFtcGxlLgoKVXNpbmcgdmFyaW91cyBNYXJrZG93
biBleHRlbnNpb25zIG9mIGBwYW5kb2NgIGEgc3VmZmljaWVudCBzdHJ1Y3R1cmUgZm9yCndy
aXRpbmcgc2NpZW50aWZpYyBkb2N1bWVudHMgaXMgcmVmbGVjdGVkIHVzaW5nIE1hcmtkb3du
IHN5bnRheC4KYG1hcmt5YCBieSBkZWZhdWx0IHVzZXMgdGhlIGZvbGxvd2luZyBgcGFuZG9j
YCBNYXJrZG93biBleHRlbnNpb25zLgoqIHBhcnNpbmcgZXh0ZW5zaW9ucwoJKiBbYWxsX3N5
bWJvbHNfZXNjYXBhYmxlXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLWFsbF9zeW1ib2xzX2VzY2FwYWJsZSkKCSogW2ludHJhd29yZF91bmRlcnNjb3Jlc10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbnRyYXdvcmRfdW5k
ZXJzY29yZXMpCgkqIFtlc2NhcGVkX2xpbmVfYnJlYWtzXShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWVzY2FwZWRfbGluZV9icmVha3MpCgkqIFtzcGFjZV9p
bl9hdHhfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LXNwYWNlX2luX2F0eF9oZWFkZXIpCgkqIFtsaXN0c193aXRob3V0X3ByZWNlZGluZ19ibGFu
a2xpbmVdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tbGlzdHNf
d2l0aG91dF9wcmVjZWRpbmdfYmxhbmtsaW5lKQoqIHN0eWxpbmcgZXh0ZW5zaW9ucwoJKiBb
aW5saW5lX2NvZGVfYXR0cmlidXRlc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I2V4dGVuc2lvbi1pbmxpbmVfY29kZV9hdHRyaWJ1dGVzKQoJKiBbc3RyaWtlb3V0XShodHRw
czovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXN0cmlrZW91dCkKKiBzdHJ1
Y3R1cmluZyBleHRlbnNpb25zCgkqIFt5YW1sX21ldGFkYXRhX2Jsb2NrXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXlhbWxfbWV0YWRhdGFfYmxvY2spCgkq
IFtwaXBlX3RhYmxlc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lv
bi1waXBlX3RhYmxlcykKCSogW2xpbmVfYmxvY2tzXShodHRwczovL3BhbmRvYy5vcmcvTUFO
VUFMLmh0bWwjZXh0ZW5zaW9uLWxpbmVfYmxvY2tzKQoJKiBbaW1wbGljaXRfZmlndXJlc10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbXBsaWNpdF9maWd1
cmVzKQoJKiBbYWJicmV2aWF0aW9uc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I2V4dGVuc2lvbi1hYmJyZXZpYXRpb25zKQoJKiBbaW5saW5lX25vdGVzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWlubGluZV9ub3RlcykKKiBjb2RlIGlu
amVjdGlvbgoJKiBbcmF3X2h0bWxdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tcmF3X2h0bWwpCgkqIFtyYXdfdGV4XShodHRwczovL3BhbmRvYy5vcmcvTUFO
VUFMLmh0bWwjZXh0ZW5zaW9uLXJhd190ZXgpCgpgcGFuZG9jYCBzdXBwb3J0cwpbZXF1YXRp
b25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXRleF9tYXRo
X2RvbGxhcnMpCnJlbmRlcmVkIGlubGluZSBhbmQgc2luZ2xlLWxpbmUgaW4gdGV4LXN0eWxl
IHVzaW5nIGAkLi4uJGAgYW5kIGAkJC4uLiQkYCwKW2JpYmxpb2dyYXBoeV0oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2NpdGF0aW9ucykKdXNpbmcgdGhlIGAtLWNpdGVwcm9j
YCBvcHRpb24sCltzZWN0aW9uIG51bWJlcmluZ10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVB
TC5odG1sI2V4dGVuc2lvbi1oZWFkZXJfYXR0cmlidXRlcykKdXNpbmcgdGhlIGAtLW51bWJl
ci1zZWN0aW9uc2Agb3B0aW9uIGFuZApbdGFibGUgb2YgY29udGVudHNdKGh0dHBzOi8vcGFu
ZG9jLm9yZy9NQU5VQUwuaHRtbCNvcHRpb24tLXRvYykKdXNpbmcgdGhlIGAtLXRhYmxlLW9m
LWNvbnRlbnRzYCBvcHRpb24uCgpgcGFuZG9jYCBzdXBwb3J0cyBbYHhub3NgXShodHRwczov
L2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MteG5vcykgZmlsdGVycwpmb3IgcmVmZXJlbmNp
bmcgZG9jdW1lbnQgY29udGVudCBsaWtlCltmaWd1cmVzXShodHRwczovL2dpdGh1Yi5jb20v
dG9tZHVjay9wYW5kb2MtZmlnbm9zI3VzYWdlKSwKW2VxdWF0aW9uc10oaHR0cHM6Ly9naXRo
dWIuY29tL3RvbWR1Y2svcGFuZG9jLWVxbm9zI3VzYWdlKSwKW3RhYmxlc10oaHR0cHM6Ly9n
aXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXRhYmxlbm9zI3VzYWdlKSwKW3NlY3Rpb25zXSho
dHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mtc2Vjbm9zI3VzYWdlKQpieSB1c2lu
ZyB0aGUgYC0tZmlsdGVyIHBhbmRvYy14bm9zYCBvcHRpb24uCmB4bm9zYCBpbnRlZ3JhdGVz
IGNsZXZlciByZWZlcmVuY2VzLCB3aGljaCBtZWFucyAiRmlnLiIsICJTZWMuIiwgIkVxLiIK
YW5kICJUYWIuIiBhcmUgYWRkZWQgYXV0b21hdGljYWxseSB0byB0aGUgY29ycmVzcG9uZGlu
ZyBlbGVtZW50LgpJZiB0aGUgcHJlZml4IGlzIHRvIGJlIG9taXR0ZWQsIHRoZSByZWZlcmVu
Y2UgaXMgd3JpdHRlbiBhcwpgXCFAcmVmOmxhYmVsYC4KCiMjIyMgRXhhbXBsZSB7LX0KYGBg
bWQKIyMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVy
ZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRoZSBjYXB0aW9uXShkYXRhOmltYWdl
L3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlMKVWhFVWdBQUFBVUFBQUFGQ0FZQUFBQ05i
eWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREgKeGdsak5CQUFPOVRYTDBZ
NE9Id0FBQUFCSlJVNUVya0pnZ2c9PSl7I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVu
Y2UgdG8gQGZpZzpsYWJlbC4KCkEgIHxCICB8QyAgfEQKLS0tfC0tLXwtLS18LS0tCjAwMHwx
MTF8NDQ0fDU1NQoyMjJ8MzMzfDY2Nnw3NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBjYXB0aW9u
IHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRc
bWJveHtlfV57XG1ib3h7aX1ccGl9KzE9MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMgYSByZWZl
cmVuY2UgdG8gQGVxOmxhYmVsLgoKVGhpcyBpcyBhIGNpdGF0aW9uIFtATXVsbGVyMTk5M10u
CmBgYAoKVGhlIGZpbGUgYG1hcmt5LmJpYmAgaXMgc3BlY2lmaWVkIGluIHRoZSBtZXRhIGRh
dGEgaW4gdGhlIGZyb250Cm1hdHRlciBvZiB0aGUgTWFya2Rvd24gdGV4dC4KCiMjIFJlZmVy
ZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHNl
YzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFnZS9wbmc7YmFzZTY0
LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBVUFBQUFGQ0FZQUFBQ05ieWJsQUFBQUhFbEVR
VlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1
RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZmlnOmxh
YmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1CjIy
MnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24uIHsjdGJsOmxhYmVs
fQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRcbWJveHtlfV57aVxw
aX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwu
CgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KCiMgUmVmZXJlbmNlcwo=
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''
pack__gitignore = '''
YnVpbGQvCmh0bWwvCg==
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

########################################################################

def _marky_front_join(y, text):
	return """---\n%s\n---\n%s""" % (
		yaml.dump(y, allow_unicode=True, default_flow_style=False),
		text
	)

def _marky_front_split(t):
	global _MARKY_EXEC_DICT
	if not t.startswith("---\n"):
		return dict(), mark, 0
	y = t.split("---\n")[1]
	meta_lines = len(y.split("\n")) + 2
	mark = "---\n".join(t.split("---\n")[2:])
	print("---\n" + y + "---", flush=True)
	data = dict()
	try:
		data = yaml.safe_load(y)
	except Exception as ex:
		print("# YAML ERROR", type(ex), str(ex))
		sys.exit(1)
	return data, mark, meta_lines

########################################################################

def _marky_mdtext_print(*args, sep=" ", shift="", crop=False, ret=False):
	global _MARKY_EXEC_QUIET
	global _MARKY_EXEC_TEXT
	global _MARKY_EXEC_APPEND
	if len(args) == 0:
		if _MARKY_EXEC_APPEND == False: _MARKY_EXEC_TEXT.append("")
		_MARKY_EXEC_APPEND = False
	else:
		if ret: return _marky_mdtext_ret(args[0], shift, crop)
		if crop or shift != "":
			_marky_mdtext_crop(args[0], shift, crop)
			if args[-1] == _marky_mdtext_print:
				_MARKY_EXEC_APPEND = True
			return
		exec_append_new = False
		if args[-1] == _marky_mdtext_print:
			exec_append_new = True
			args = args[0:-1]
		text = sep.join([str(i) for i in args])
		if _MARKY_EXEC_APPEND and len(_MARKY_EXEC_TEXT) > 0:
			_MARKY_EXEC_TEXT[-1] += text
		else:
			_MARKY_EXEC_TEXT.append(text)
		_MARKY_EXEC_APPEND = exec_append_new
		if not _MARKY_EXEC_QUIET: print(text, end="" if _MARKY_EXEC_APPEND else "\n", flush=True)

def _marky_mdtext_crop(arg, shift, crop):
	global _MARKY_EXEC_TEXT
	global _MARKY_EXEC_APPEND
	if not type(arg) is str:
		arg = str(arg)
	arg = arg.split("\n")
	if crop:
		if len(arg[0].strip()) == 0:
			arg = arg[1:]
		if len(arg[-1].strip()) == 0:
			arg = arg[:-1]
	n = len(arg[0]) - len(arg[0].lstrip())
	for i in arg:
		if crop and len(i[0:n].lstrip()) == 0:
			i = i[n:]
		_MARKY_EXEC_TEXT.append(shift + i)

def _marky_mdtext_ret(arg, shift="", crop=True):
	if not type(arg) is str:
		arg = str(arg)
	text = []
	arg = arg.split("\n")
	if crop:
		if len(arg[0].strip()) == 0:
			arg = arg[1:]
		if len(arg[-1].strip()) == 0:
			arg = arg[:-1]
	n = len(arg[0]) - len(arg[0].lstrip())
	for i in arg:
		if crop and len(i[0:n].lstrip()) == 0:
			i = i[n:]
		text.append(shift + i)
	return "\n".join(text)

########################################################################

class _marky_fmtcall:
	def __init__(self, name, fmtc):
		self.name = name
		self.fmtc = fmtc
	def __call__(self, *args, **kwargs):
		text = "<<?html "
		f = getattr(self.fmtc.html, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " html?>>"
		text += "<<?pdf "
		f = getattr(self.fmtc.pdf, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " pdf?>>"
		return text

class _marky_fmtcode:
	def __init__(self, pdf=None, html=None):
		if not html is None: self.html = html
		if not pdf is None: self.pdf = pdf
	def __call__(self, *args, **kwargs):
		text = "<<?html "
		f = self.html
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " html?>>"
		text += "<<?pdf "
		f = self.pdf
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " pdf?>>"
		return text
	def __getattr__(self, name):
		return _marky_fmtcall(name, self)

########################################################################

def _marky_rebrace(t):
	t = t.replace("{{", "<<brace?")
	t = t.replace("}}", "?brace>>")
	t = t.replace("{", "{{")
	t = t.replace("}", "}}")
	t = t.replace("<<brace?", "{")
	t = t.replace("?brace>>", "}")
	return t

def _marky_code_text(t, fstring=True):
	if fstring:
		if not '"""' in t and not t.endswith('"'):
			return '___(rf"""' + _marky_rebrace(t) + '""", ___); '
		elif not "'''" in t and not t.endswith("'"):
			return "___(rf'''" + _marky_rebrace(t) + "''', ___); "
		else:
			print("# ERROR", "python code contains \"\"\" as well as '''.")
			sys.exit(1)
	else:
		if not '"""' in t and not t.endswith('"'):
			return '___(r"""' + t + '""", ___); '
		elif not "'''" in t and not t.endswith("'"):
			return "___(r'''" + t + "''', ___); "
		else:
			print("# ERROR", "python code contains \"\"\" as well as '''.")
			sys.exit(1)

def _marky_paste_code(t):
	show_code = False
	if t.startswith("!"):
		t = t[1:]
		show_code = True
	if show_code:
		return _marky_code_text(t, fstring=False) + t
	return t

def _marky_meta_merge(old, front):
	meta = {}
	meta.update(old)
	try:
		for k, v in front.items():
			if k in meta:
				print("<!-- field exists, skip yaml %s --!>" % k)
			else:
				meta[k] = v
	except Exception as ex:
		print("# META MERGE ERROR", type(ex), str(ex))
		sys.exit(1)
	return meta

def _marky_run(fname, meta, inbase):
	global _MARKY_EXEC_DICT
	with open(fname, "r") as h:
		front, t, meta_lines = _marky_front_split(h.read())
	meta = _marky_meta_merge(meta, front)
	p = 0
	r = ""
	while True:
		p0 = t.find("<?", p)
		p1 = t.find("?>", p)
		if p0 > -1:
			if p1 < p0:
				print("# ERROR", "?> before <?")
				sys.exit(1)
			if p0 > 0: r += _marky_code_text(t[p:p0])
			p1 = t.find("?>", p0)
			if p1 > -1:
				code = t[p0+2:p1]
				r += _marky_paste_code(code)
				p = p1 + 2
			else:
				print("# ERROR", "missing ?>")
				sys.exit(1)
		else:
			r += _marky_code_text(t[p:])
			break
	for a, b, c, count in [
		("", "<%s?", "", 1),
		("", "?%s>", "", 1),
		("", "{%s", "{", 3),
		("}", "%s}", "", 3)
	]:
		for j in reversed(range(1, count+1)):
			for i in range(3):
				X = "\\"*(i + 1)
				Y = "\\"*(i + 0)
				r = r.replace(a + (b % X)*j + c, a + (b % Y)*j + c)
	open(_MARKY_BUILD_DIR + inbase + ".py", "w").write(r)
	try:
		exec(r, _MARKY_EXEC_DICT, None)
	except Exception as ex:
		_marky_print_trace(ex, meta_lines, r)
		sys.exit(1)
	return meta

def _marky_print_trace(ex, mlines, code):
	print("# TRACEBACK")
	import traceback
	traceback.print_tb(ex.__traceback__)
	print("# PYTHON ERROR")
	print(type(ex), str(ex))
	if ex.filename == "<string>":
		print("# ERROR LOCATION")
		code = code.split("\n")
		print(len(code))
		for i in range(max(0, ex.lineno-5), min(len(code), ex.lineno+5)):
			print("*" if i + 1 == ex.lineno else " ", "%03d" % i, code[i])

########################################################################

def _marky_meta_link(front, link):
	flink = {}
	try:
		for k, v in front.items():
			if "--" in k: continue
			if not k in flink:
				flink[k] = v
			else:
				print("<!-- field exists, skip yaml %s --!>" % k)
		for k, v in front.items():
			if not "--" in k: continue
			x = k.split("--")
			if x[-1] in _MARKY_FORMAT:
				if x[-1] == link:
					k = "--".join(x[0:-1])
					if k in flink:
						print("<!-- field link, merge yaml %s --!>" % k)
						if type(v) is list: flink[k].extend(v)
						if type(v) is dict: flink[k].update(v)
						if type(v) is str: flink[k] += " " + v
						else: flink[k] = v
					else:
						print("<!-- field link, set yaml %s --!>" % k)
						flink[k] = v
	except Exception as ex:
		print("# META LINK ERROR", type(ex), str(ex))
		sys.exit(1)
	return flink

def _marky_link(front, md_text, link):
	md_text = md_text.replace(".???", "." + link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	lsep = 3
	len_args = len(link) + 1
	c = 0
	newtext = ""
	p = md_text.find("<<?")
	while p >= 0:
		q = md_text.find("?>>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(link) and expr.endswith(link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<<?", c)
		else:
			p = md_text.find("<<?", p + lsep)
	newtext += md_text[c:]
	flink = _marky_meta_link(front, link)
	return _marky_front_join(flink, newtext)

def _marky_write_build(inbase, outdir, front, mark):
	os.makedirs(_MARKY_BUILD_DIR + outdir, exist_ok=True)
	if not mark is None:
		open(_MARKY_BUILD_DIR + inbase + ".md", "w").write(_marky_front_join(front, mark))
		for fmt in _MARKY_FORMAT:
			open(_MARKY_BUILD_DIR + inbase + "." + fmt + ".md", "w").write(_marky_link(front, mark, fmt))

	with open(_MARKY_BUILD_DIR + inbase + ".make", "w") as fhnd:
		fhnd.write(f"""# auto-generated
all_md:=$(all_md) {_MARKY_MD_DIR+inbase}.md

{_MARKY_BUILD_DIR+inbase}.md: {_MARKY_MD_DIR+inbase}.md
	mkdir -p "{_MARKY_BUILD_DIR+outdir}"
	ln -snf ../{_MARKY_DATA_DIR} {_MARKY_BUILD_DIR+_MARKY_DATA_DIR}
	./marky.py --base="{inbase}.md"

.PHONY: build/{inbase}
build/{inbase}: {_MARKY_BUILD_DIR+inbase}.md

all_build:=$(all_build) build/{inbase}
"""
		)
		if "pdf" in _MARKY_FORMAT:
			fhnd.write(f"""
{_MARKY_BUILD_DIR+inbase}.tex: {_MARKY_BUILD_DIR+inbase}.pdf.md {_MARKY_MD_DIR+inbase}.md
	mkdir -p "{_MARKY_BUILD_DIR+outdir}"
	./pandoc-run tex {_MARKY_BUILD_DIR+inbase}.pdf.md {_MARKY_BUILD_DIR+inbase}.tex

all_tex:=$(all_tex) {_MARKY_BUILD_DIR+inbase}.tex
"""
			)
		for fmt in _MARKY_FORMAT:
			fhnd.write(f"""
{_MARKY_BUILD_DIR+inbase}.{fmt}.md: {_MARKY_BUILD_DIR+inbase}.md

{fmt}/{inbase}.{fmt}: {_MARKY_BUILD_DIR+inbase}.{fmt}.md {_MARKY_MD_DIR+inbase}.md
	mkdir -p "{fmt}/{outdir}"
	./pandoc-run {fmt} {_MARKY_BUILD_DIR+inbase}.{fmt}.md {fmt}/{inbase}.{fmt}

.PHONY: {fmt}/{inbase}
{fmt}/{inbase}: {fmt}/{inbase}.{fmt}

all_{fmt}:=$(all_{fmt}) {fmt}/{inbase}.{fmt}
"""
			)

########################################################################

def _marky_pack_b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def _marky_pack_b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

def _marky_load_pack(i):
	return _marky_pack_b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_")))

def _marky_pack_write_file(fname, force=False):
	if not os.path.exists(fname) or force:
		print("# WRITE", fname)
		open(fname, "w").write(_marky_load_pack("./" + fname))
	else:
		print("# EXISTS", fname)

def _marky_store_pack(i, ftext):
	return "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), _marky_pack_b64enc(ftext))

def _marky_pack_read_file(fname):
	return _marky_store_pack("./" + fname, open(fname, "r").read())

########################################################################

_MARKY_FORMAT = ["html", "pdf"]
_MARKY_BUILD_DIR = "build/"  #< WITH trailing /
_MARKY_MD_DIR = "md/"  #< WITH trailing /
_MARKY_DATA_DIR = "data" #< no trailing /
_MARKY_PACK_DIRS = [
	_MARKY_BUILD_DIR,
	_MARKY_DATA_DIR,
	_MARKY_MD_DIR
]
_MARKY_PACK_FILES = [
	"Makefile",
	"pandoc-run",
	"md/marky.md",
	"data/marky.bib",
	".gitignore"
]
_MARKY_EXEC_QUIET = False
_MARKY_EXEC_DICT = dict()
_MARKY_EXEC_TEXT = list()
_MARKY_EXEC_APPEND = False
_MARKY_EXEC_DICT["___"] = _marky_mdtext_print
_MARKY_EXEC_DICT["fmtcode"] = _marky_fmtcode

########################################################################

if __name__ == "__main__":

	parser = argparse.ArgumentParser(add_help=False)

	parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in _MARKY_VERSION]))
	parser.add_argument("--help", action='store_true', help="show this help message")
	parser.add_argument("--base", type=str, default="", help="path to input markdown text")
	parser.add_argument("--init", action='store_true', help="create dirs (" + ", ".join(_MARKY_PACK_DIRS) + ") and files (" + ", ".join(_MARKY_PACK_FILES) + ")")
	parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")
	parser.add_argument("--pack", action='store_true', help="pack files (" + ", ".join(_MARKY_PACK_FILES) + ") into marky.py.pack source")
	parser.add_argument("--scan", action='store_true', help="create build/*.make from md/*.md")
	parser.add_argument("--quiet", action='store_true', help="do not show Markdown output")

	# ~ args, uargs = parser.parse_known_args()
	args = parser.parse_args()

	sys.path.append(".")

########################################################################

	if args.version:
		print(".".join([str(i) for i in _MARKY_VERSION]))
		sys.exit(0)
	elif args.help or len(sys.argv) == 1:
		parser.print_help()
		sys.exit(0)
	elif args.init:
		for i in _MARKY_PACK_DIRS:
			if not os.path.exists(i):
				print("# MKDIR", i)
				os.mkdir(i)
			else:
				print("# EXISTS", i)
		for i in _MARKY_PACK_FILES:
			_marky_pack_write_file(i, args.force)
		print("# USAGE")
		print("make help")
		sys.exit(0)
	elif args.pack:
		print("# PACK", ", ".join(_MARKY_PACK_FILES))
		marky_text = open(sys.argv[0], "r").read()
		head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
		src = "".join([_marky_pack_read_file(i) for i in _MARKY_PACK_FILES])
		marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
		open(sys.argv[0] + ".pack", "w").write(marky_text)
		if args.force:
			print("# UPDATE OF `marky` FORCED")
			print("# -----------------------")
			print("# mv marky.py.pack marky.py")
			print("# chmod 775 marky.py")
			os.replace("marky.py.pack", "marky.py")
			os.chmod("marky.py", 0o775)
		else:
			print("# MANUAL UPDATE NEEDED")
			print("# --------------------")
			print("mv marky.py.pack marky.py")
			print("chmod +x marky.py")
		sys.exit(0)
	elif args.scan:
		for i in glob.glob("md/**/*.md", recursive=True):
			inbase = i[3:-3]
			outdir = "/".join(inbase.split("/")[0:-1])
			print("# WRITE", _MARKY_BUILD_DIR + inbase + ".make")
			_marky_write_build(inbase, outdir, None, None)
		sys.exit(0)
		pass
	elif args.force:
		print("# ERROR", "--force can only be used with --pack/--init")
		sys.exit(1)
	elif args.quiet:
		_MARKY_EXEC_QUIET = True

########################################################################

	infile = _MARKY_MD_DIR + args.base
	if len(args.base) == 0:
		print("# ERROR", "empty base: use --base file.md")
		sys.exit(1)
	if not os.path.exists(infile):
		print("# ERROR", "wrong base %s: file not found %s" % (args.base, infile))
		sys.exit(1)
	inbase = args.base if not "." in args.base.split("/")[-1] else ".".join(args.base.split(".")[0:-1])
	outdir = "/".join(inbase.split("/")[0:-1])

	if os.path.exists(_MARKY_BUILD_DIR):
		front = _marky_run(infile, {}, inbase)
		mark = "\n".join(_MARKY_EXEC_TEXT)
		_marky_write_build(inbase, outdir, front, mark)
	else:
		print("# ERROR", "no build dir: mkdir build")
		sys.sys.exit(1)
