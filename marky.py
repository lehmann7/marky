#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogcmF3OiAgICAgaW5jbHVkZSB3aXRo
b3V0IGFueSBwYXJzaW5nCgkjICAqIG5vbWV0YTogIGluY2x1ZGUgYW5kIGlnbm9yZSBhbGwg
bWV0YSBkYXRhCgkjICAqIG5vdGV4dDogIGluY2x1ZGUgYW5kIGlnbm9yZSBhbGwgTWFya2Rv
d24gdGV4dAoJIyAgKiBub21hcmt5OiBpbmNsdWRlIGJ1dCBkbyBub3QgcHJvY2VzcyBtYXJr
eSBtYXJrdXAKCSMgICogIytOOiAgICAgaW5jcmVhc2UgbGV2ZWwgb2YgQVRYIGhlYWRpbmdz
IGJ5IE4KCSMgICogPj5OOiAgICAgaW5jcmVhc2UgaW5kZW50YXRpb24gbGV2ZWwgYnkgTiB0
YWJzCgkjICAqID5OOiAgICAgIGluY3JlYXNlIGluZGVudGF0aW9uIGxldmVsIGJ5IE4gc3Bh
Y2VzCgkjICAqIG5vcmVmOiAgIGluY2x1ZGUgd2l0aG91dCBNYWtlZmlsZSBkZXBlbmRlbmN5
CgkjICAqIGF1eDogICAgIG9ubHkgTWFrZWZpbGUgZGVwZW5kZW5jeSBidXQgbm8gcGFyc2lu
ZwoJIwoKLlBIT05ZOiBjaGVhdC1tZXRhCmNoZWF0LW1ldGE6CgkjCgkjIE1FVEEgREFUQQoJ
IwoJIyAgLS0tCgkjICB0aXRsZTogRG9jdW1lbnQKCSMgIGRhdGU6IFRvZGF5CgkjICBhdXRo
b3I6IE5hbWUKCSMgIGxpbmstY2l0YXRpb25zOiB0cnVlCgkjICBiaWJsaW9ncmFwaHk6IGJp
YmwuYmliCgkjICBmb250c2l6ZS0tcGRmOiAxMXB0CgkjICBmb250c2l6ZS0taHRtbDogMTBw
dAoJIyAgaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KCSMgICAgIFx1c2VwYWNrYWdley4uLn0K
CSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgIGhlYWRlci1pbmNsdWRlcy0taHRtbDogPgoJ
IyAgICAgPHNjcmlwdCAuLi4+CgkjICAgICA8bGluayAuLi4+CgkjICAgICA8c3R5bGUgLi4u
PgoJIyAgeG5vcy1jbGV2ZXJlZjogdHJ1ZQoJIyAgeG5vcy1jYXBpdGFsaXNlOiB0cnVlCgkj
ICAtaGlkZGVuX2ZpZWxkOiB0ZXh0CgkjICAtLS0KCSMKCi5QSE9OWTogY2hlYXQtbGluawpj
aGVhdC1saW5rOgoJIwoJIyBGT1JNQVQgTElOSwoJIwoJIyAgW0xpbmsgdG8gRG9jdW1lbnRd
KHBhdGgvdG8vZmlsZS5odG1sKQoJIyAgW0xpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmls
ZS5wZGYpCgkjICBbRm9ybWF0IExpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS4/Pz8p
CgkjICBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgZm9ybWF0IGxpbmsgLlw/Pz8KCSMKCi5QSE9O
WTogY2hlYXQtY29kZQpjaGVhdC1jb2RlOgoJIwoJIyBGT1JNQVQgQ09ERQoJIwoJIyAgIGBg
YCEKCSMgICBkZWYgdGVzdDFfaHRtbCgpOgoJIyAgICAgICBfKCJUaGlzIGlzIEhUTUwxISIp
CgkjICAgZGVmIHRlc3QxX3BkZigpOgoJIyAgICAgICByZXR1cm4gIlRoaXMgaXMgXHtQREYx
XH0hIgoJIyAgIGRlZiB0ZXN0Ml9odG1sKCk6CgkjICAgICAgIF9fKCIiIgoJIyAgICAgICAg
ICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgIFRoaXMgaXMgSFRNTDIhCgkjICAgICAg
ICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAiIiIpCgkjICAgZGVmIHRlc3QyX3BkZigp
OgoJIyAgICAgICByZXR1cm4gIiIiCgkjICAgICAgICAgICBUaGlzIGlzIFx7UERGMlx9IQoJ
IyAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAgICAgIFRoaXMgaXMgXHtQ
REYyXH0hCgkjICAgICAgICIiIgoJIyAgIGBgYAoJIyAgIFJ1biBGb3JtYXQgQ29kZSBgP3Rl
c3QxKClgIGFuZCBgP3Rlc3QyKClgLgoJIyAgIGBcP3Rlc3QxKClgIGFuZCBgXD90ZXN0Migp
YCBhcmUgbm90IHBhcnNlZC4KCSMKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBhbGwK
YWxsOiAkKEhUTUwpICQoUERGKQoKLlBIT05ZOiBhbGwtbWsKYWxsLW1rOiAkKE1LKQoKLlBI
T05ZOiBhbGwtbWQKYWxsLW1kOiAkKE1EKQoKLlBIT05ZOiBhbGwtbGluawphbGwtbGluazog
JChNREhUTUwpICQoTURQREYpCgouUEhPTlk6IGFsbC1odG1sCmFsbC1odG1sOiAkKEhUTUwp
CgouUEhPTlk6IGFsbC1wZGYKYWxsLXBkZjogJChQREYpCgouUEhPTlk6IGNsZWFuCmNsZWFu
OgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8qCgouUEhPTlk6IGh0dHBkCmh0
dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2ZXIKCi5QSE9OWTogc2Nhbgpz
Y2FuOiBhbGwtbWsKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKYnVpbGQvJS5tZC5tazogbWQvJS5t
ZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21hcmt5LnB5IC0tbWtkZXAg
LS1tYXJreT0iJDwiCgpidWlsZC8lLm1kOiBidWlsZC8lLm1kLm1rCglta2RpciAtcCAkKHNo
ZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1tZD0iJEAiCgpidWlsZC8lLmh0bWwu
bWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJr
eS5weSAtLWxpbmsgaHRtbCAtLW1kPSIkPCIKCmJ1aWxkLyUucGRmLm1kOiBidWlsZC8lLm1k
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1saW5rIHBk
ZiAtLW1kPSIkPCIKCmh0bWwvJS5odG1sOiBidWlsZC8lLmh0bWwubWQKCW1rZGlyIC1wICQo
c2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNuZiAuLi9kYXRhIGh0bWwvZGF0YQoJcGFuZG9j
ICIkPCIgLS1maWx0ZXIgcGFuZG9jLXhub3MgLS1jaXRlcHJvYyAtLWZyb209bWFya2Rvd24r
cmF3X2h0bWwrJChNREVMKSAtLXRvPWh0bWw1IC0tb3V0cHV0PSIkQCIgLS1yZXNvdXJjZS1w
YXRoPSIuL2RhdGEvIiAtLW1hdGhqYXggLS1zZWxmLWNvbnRhaW5lZCAtLXRhYmxlLW9mLWNv
bnRlbnRzIC0tbnVtYmVyLXNlY3Rpb25zIC0tY29sdW1ucz0xCgpwZGYvJS5wZGY6IGJ1aWxk
LyUucGRmLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCWxuIC1zbmYgLi4v
ZGF0YSBwZGYvZGF0YQoJcGFuZG9jICIkPCIgLS1maWx0ZXIgcGFuZG9jLXhub3MgLS1jaXRl
cHJvYyAtLWZyb209bWFya2Rvd24rcmF3X3RleCskKE1ERUwpIC0tdG89bGF0ZXggLS1vdXRw
dXQ9IiRAIiAtLXJlc291cmNlLXBhdGg9Ii4vZGF0YS8iIC0tdGFibGUtb2YtY29udGVudHMg
LS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEgLS1wZGYtZW5naW5lPXhlbGF0ZXgKCiMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIwoKUFNFVURPPWhlbHAgdHJlZSBjaGVhdCBjbGVhbiBodHRwZCBz
Y2FuCgpJTkNGTEFHPTAKCmRlZmluZSBMT09QQk9EWQogIGlmZXEgKCQkKGZpbHRlciAkJChQ
U0VVRE8pLCQkKEcpKSwpCiAgICBJTkNGTEFHPTEKICBlbmRpZgplbmRlZgoKaWZuZXEgKCQo
TUFLRUNNREdPQUxTKSwpCiAgJChmb3JlYWNoIEcsJChNQUtFQ01ER09BTFMpLCQoZXZhbCAk
KExPT1BCT0RZKSkpCmVuZGlmCgppZmVxICgkKElOQ0ZMQUcpLDEpCiAgLWluY2x1ZGUgJChN
SykKZW5kaWYKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwo=
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmxpbmstY2l0YXRpb25zOiB0cnVlCmJp
Ymxpb2dyYXBoeTogbWFya3kuYmliCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBl
cnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAog
ICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4K
ICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1j
bGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKLWZp
Z3NpemU6IFsxMCw4XQotZmlnZHBpOiAzMDAKLXZlcnNpb246IHVuZGVmaW5lZAoKLS0tCiEh
ISAuLi9NYWtlZmlsZSBhdXgKISEhIC4uL21hcmt5LnB5IGF1eApgYGAhIQoJaW1wb3J0IHN1
YnByb2Nlc3MKCU1EID0gIk1hcmtkb3duIgoJTSA9ICJgbWFya3lgIgoJTUYgPSAiYE1ha2Vm
aWxlYCIKCU1QID0gImBtYXJreS5weWAiCglNcCA9ICJtYXJreS5weSIKCVAgPSAiYHBhbmRv
Y2AiCglOVSA9ICJgbnVtcHlgIgoJUEwgPSAiYG1hdHBsb3RsaWJgIgoJUiA9ICJSTWFya2Rv
d24iCglRID0gIlF1YXJ0byIKCUJUID0gImAiCglQMT0gImBfKClgIgoJUDI9ICJgX18oKWAi
Cgl2ZXJzaW9uID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJweXRob24iLCAibWFya3ku
cHkiLAoJCSItLXZlcnNpb24iXSkuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkKYGBgCgotLS0K
Cj4gKipBYnN0cmFjdCoqIC0tIGAhTWAgaXMgYSBwcmVwcm9jZXNzb3IgZm9yIGAhTURgIHVz
aW5nIFB5dGhvbi4KPiBgIU1gIGlzIGluc3BpcmVkIGJ5IFtwYW5kb2NdKGh0dHBzOi8vd3d3
LnBhbmRvYy5vcmcvKSwKPiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20v
KSwgW2AhUWBdKGh0dHBzOi8vcXVhcnRvLm9yZy8pLgo+IFRoaXMgZG9jdW1lbnQgaXMgY3Jl
YXRlZCB1c2luZyBgIU1gIChWZXJzaW9uIGAhdmVyc2lvbmApIGFuZAo+IGNvbnRhaW5zIGV4
YW1wbGVzIHdoaWNoIGlsbHVzdHJhdGUgdGhlIGdlbmVyYXRpb24gb2YKPiBkb2N1bWVudCBj
b250ZW50IGZvciBgaHRtbGAgYW5kIGBwZGZgIGFuZCB0aGUgZHluYW1pY2FsIGFkanVzdG1l
bnQKPiBvZiBgIU1EYCB0ZXh0IGR1cmluZyBwcmVwcm9jZXNzaW5nIGJhc2VkIG9uIGBweXRo
b25gIGNvZGUuCj4gVGhlIGZ1bGwgcmF3IGAhTWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1
bWVudGF0aW9uIGFwcGVuZGVkIGF0Cj4gdGhlIGVuZC4gVGhlIGBtYXJreWAgc291cmNlIGNv
ZGUgb2YgdGhpcyBkb2N1bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJlXShtYXJreS1zcmMuPz8/
KS4gRm9yIGBtYXJreWAgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lg
IHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0K
CiMgSW50cm9kdWN0aW9uCgpgIU1gIGlzIGEgYCFNRGAgcHJlcHJvY2Vzc29yIHdoaWNoIHRy
YW5zZm9ybXMgYSBgIU1EYCBkb2N1bWVudAp1c2luZyBweXRob24uIGAhTWAgaW1wbGVtZW50
cyBuZXcgbWFya3VwIHdoaWNoIGNvbnRyb2xzIHRoZSBleGVjdXRpb24Kb2YgcHl0aG9uIGNv
ZGUgYW5kIHRoZSBnZW5lcmF0aW9uIGFuZCBtYW5pcHVsYXRpb24gb2YgYCFNRGAgdGV4dC4K
CmAhTWAgb25seSBkZXBlbmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgLiBgIVBgIGlzIHVzZWQg
Zm9yIHJlbmRlcmluZwp0aGUgYCFNRGAgaW50byBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIHN1
cHBvcnRzIHZhcmlvdXMgYCFNRGAKZXh0ZW5zaW9ucyBhbGxvd2luZyBmb3Igc2NpZW50aWZp
YyB3cml0aW5nIHVzaW5nIGVxdWF0aW9ucywgZmlndXJlcywKdGFibGVzLCBjaXRhdGlvbnMg
YW5kIGNvcnJlc3BvbmRpbmcgcmVmZXJlbmNpbmcgbWVjaGFuaXNtIGZvciB0aGUgbGF0dGVy
LgpgcHl5YW1sYCBpcyB1c2VkIGZvciBwYXJzaW5nIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQg
bWF0dGVyIG9mIHRoZQpgIU1EYCB0ZXh0IGlmIGl0IGlzIHByZXNlbnQuCgpXb3JrZmxvdyBm
b3IgY3JlYXRpbmcgYGh0bWxgIG9yIGBwZGZgIHVzaW5nIGAhTWAKCjEuIHVzZXIgd3JpdGVz
IGEgYCFNRGAgdGV4dCBmaWxlIGFuZCBwbGFjZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9y
eSB3aXRoIHRoZSBleHRlbnNpb24gYC5tZGAuIHRoZSBgIU1EYCB0ZXh0IGNvbnRhaW5zCnNw
ZWNpYWwgYCFNYCBtYXJrdXAgd2hpY2ggZXhlY3V0ZXMgcHl0aG9uIGNvZGUgYW5kIG1hbmlw
dWxhdGVzCnRoZSBgIU1EYCB0ZXh0LgoKMi4gYCFNYCB0cmFuc2Zvcm1zIHRoZSBmaWxlcyBp
biBgbWQvKi5tZGAgaW50byByZWd1bGFyIGAhTURgIHRleHQKYW5kIHBsYWNlcyB0aGUgdHJh
bnNmb3JtZWQgZmlsZXMgaW4gYGJ1aWxkLyoubWRgLiBUaGUgdHJhbnNmb3JtZWQgdGV4dApv
bmx5IGNvbnRhaW5zIHJlZ3VsYXIgYCFNRGAsIGFuZCBwbGFjZWhvbGRlcnMgZm9yIGZvcm1h
dCBkZXBlbmRlbnQKb3V0cHV0IGZvciBgaHRtbGAgYW5kIGBwZGZgLgoKMy4gYmVmb3JlIHJl
bmRlcmluZyBgIU1gIHJlcGxhY2VzIHBsYWNlaG9sZGVycyBmb3IgZm9ybWF0IGRlcGVuZGVu
dApvdXRwdXQgd2l0aCBjb250ZW50IGNyZWF0aW5nIGEgdGVtcG9yYXJ5IGZpbGUgd2hpY2gg
b25seSBjb250YWlucwpyZWd1bGFyIGAhTURgIHRleHQgZm9yIGBodG1sYCBhbmQgYHBkZmAg
ZG9jdW1lbnRzIGFjY29yZGluZyB0bwpgIVBgIGAhTURgIHNwZWNpZmljYXRpb24uCgo0LiB0
aGUgcmVndWxhciBgIU1EYCB0ZXh0IGluIHRoZSBmaWxlcyBgYnVpbGQvKi5tZGAgaXMgcmVu
ZGVyZWQgaW50bwpgaHRtbGAgYW5kIGBwZGZgIHVzaW5nIGAhUGAuCgpUaGUgdGhyZWUgc3Rl
cHMgYXJlIGltcGxlbWVudGVkIGluIGAhTVBgIGFuZCBhIGAhTUZgLiBUaGUKZm9sbG93aW5n
IGRvY3VtZW50IGRlc2NyaWJlcyB0aGUgc3BlY2lhbCBgIU1gIG1hcmt1cCBhbmQgc2hvd3MK
aG93IHRvIHVzZSBgIU1QYCBhbmQgdGhlIGAhTUZgLgoKLS0tCgojIFJlbGF0ZWQgV29yayB7
I3NlYzpyZWxhdGVkfQoKRm9yIHNjaWVudGlmaWMgcmVwb3J0aW5nIGFuZCB3cml0aW5nIHVz
dWFsbHkgdHlwZXNldHRpbmcgc3lzdGVtcyBvcgpjb21wbGljdGVkIFdZU0lXWUcgZWRpdG9y
cyBhcmUgdXNlZC4gSW4gb3JkZXIgdG8gc2ltcGxpZnkgdGhlIHdyaXRpbmcKZGlmZmVyZW50
IGFwcHJvYWNoZXMgYW5kIGZyYW1ld29ya3MgaGF2ZSBiZWVuIGRldmVsb3BlZC4KCiogW2Ah
UGBdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcvKSwKKiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rv
d24ucnN0dWRpby5jb20vKQoqIFtRdWFydG9dKGh0dHBzOi8vcXVhcnRvLm9yZy8pCiogW1Nj
aWVudGlmaWMgYCFNRGBdKGh0dHBzOi8vamFhbnRvbGxhbmRlci5jb20vcG9zdC9zY2llbnRp
ZmljLXdyaXRpbmctd2l0aC1tYXJrZG93bi8pCiogW1RlY2huaWNhbCBgIVBgXShodHRwczov
L2xlZS1waGlsbGlwcy5vcmcvcGFuZmx1dGUtZ251cGxvdC8pCgpBbGwgb2YgdGhvc2UgYXBw
cm9hY2hlcyB1c2UgYCFQYCBhcyBhbiB1bmRlcmx5aW5nIGZyYW1ld29yayBmb3IgZG9jdW1l
bnQKY29udmVyc2lvbi4gYCFQYCBpcyBhIHBvd2VyZnVsIGZyYW1ld29yayBmb3IgY29udmVy
c2lvbiBiZXR3ZWVuIGRpZmZlcmVudApkb2N1bWVudCBmb3JtYXRzIGluY2x1ZGluZyBgIU1g
LCBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIGltcGxlbWVudHMgYW4Kb3duIGludGVybmFsIEFT
VCwgaW4gd2hpY2ggZGlmZmVyZW50IGRvY3VtZW50IGZvcm1hdHMgY2FuIGJlIGltcG9ydGVk
IGFuZApleHBvcnRlZC4gVXNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgZG9jdW1lbnQgcmVwcmVz
ZW50YXRpb24sIGAhUGAgYWxsb3dzCnRvIG1vZGlmeSBkb2N1bWVudCB1c2luZyBmaWx0ZXJz
LCB3aGljaCBvcGVyYXRlIG9uIHRoZSBBU1QuIEZpbHRlcnMKY2FuIGJlIHdyaXR0ZW4gaW4g
W2BoYXNrZWxsYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL2ZpbHRlcnMuaHRtbCksCltgbHVhYF0o
aHR0cHM6Ly9wYW5kb2Mub3JnL2x1YS1maWx0ZXJzLmh0bWwpIGFuZApbYHB5dGhvbmBdKGh0
dHBzOi8vcGFuZG9jLm9yZy9maWx0ZXJzLmh0bWwjYnV0LWktZG9udC13YW50LXRvLWxlYXJu
LWhhc2tlbGwpLgoKV2hlcmUgYXMgYCFSYCBhbmQgYCFRYCBhcmUgaW50ZWdyYXRlZCBmcmFt
ZXdvcmtzLCB3aGljaCBhZGRpdGlvbmFsbHkKZGVwZW5kIG9uIGBrbml0cmAsIGBSU3R1ZGlv
YCwgYEp1cHl0ZXJgLCBgIU1gIGRlcGVuZHMgb24gYCFQYCBhbmQgYHB5eWFtbGAKb25seS4g
YCFNYCBuYXRpdmVseSBvbmx5IHN1cHBvcnRzIGV4ZWN1dGFibGUgcHl0aG9uIGNvZGUgYmxv
Y2tzLCBob3dldmVyLApvdGhlciBsYW5ndWFnZXMgY2FuIGJlIGV4ZWN1dGVkIHVzaW5nIHdy
YXBwZXJzLCB3aGljaCBhcmUgYXZhaWxhYmxlIGZvcgpvdGhlciBsYW5ndWFnZXMuCgotLS0K
CiMgYCFNYCBGZWF0dXJlcyB7I3NlYzpmZWF0dXJlc30KCmAhTWAgaW1wbGVtZW50cyBmb2xs
b3dpbmcgZmVhdHVyZXMgdXNpbmcgYW4gc2ltcGxlIGAhTURgLXN0eWxlIHN5bnRheC4KCjEu
IHJlYWQgYCFNRGAgbWV0YSBkYXRhIGZyb20gZnJvbnQgbWF0dGVyLApzZWUgQHNlYzptZXRh
ZGF0YQpgYGBtZAoJLS0tCgkJPGtleT46IDx2YWx1ZT4KCS0tLQpgYGAKCjIuIGV4ZWN1dGUg
YW5kIGhpZGUvc2hvdyBweXRob24gY29kZSBibG9ja3MgaW5zaWRlIGAhTURgIHRleHQsCnNl
ZSBAc2VjOmJsb2NrCmBgYG1kCglgIUJUKjNgIQoJCTxweXRob25fY29kZV9zaG93bj4KCWAh
QlQqM2AKCglgIUJUKjNgISEKCQk8cHl0aG9uX2NvZGVfaGlkZGVuPgoJYCFCVCozYApgYGAK
CjMuIGdlbmVyYXRlIGAhTURgIHRleHQgdXNpbmcgcHl0aG9uIGNvZGUsIHNlZSBAc2VjOm1k
cHJpbnQKYGBgbWQKCWAhQlQqM2AhCgkJXygiPG1hcmtkb3duX3RleHQ+IikKCQlfXygiIiIK
CQkJPG1hcmtkb3duX3RleHQ+CgkJCTxtYXJrZG93bl90ZXh0PgoJCQk8bWFya2Rvd25fdGV4
dD4KCQkiIiIpCglgIUJUKjNgCmBgYAoKNC4gZm9ybWF0IG91dHB1dCBvZiBweXRob24gdmFy
aWFibGVzIGludG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6Zm9ybWF0CmBgYG1kCglPdXRwdXQg
aW50byB0ZXh0OiBgXCE8cHl0aG9uX3ZhcmlhYmxlPmAKYGBgCgo1LiBvdXRwdXQgdGhlIHJl
c3VsdCBvZiBweXRob24gZXhwcmVzc2lvbnMgaW50byBgIU1EYCB0ZXh0LApzZWUgQHNlYzpp
bmxpbmUKYGBgbWQKCU91dHB1dCBpbnRvIHRleHQ6IGBcITxweXRob25fZXhwcmVzc2lvbj5g
CmBgYAoKNi4gaW5jbHVkZSBgIU1EYCB0ZXh0LCBtYWtlIGRlcGVuZGVuY2llcyBhbmQgZm9y
d2FyZCBtZXRhIGRhdGEsCnNlZSBAc2VjOmluY2x1ZGUgYW5kICFAc2VjOmluY21ldGEuCmBg
YG1kCgkhISEgaW5jbHVkZV9maWxlLm1kaQpgYGAKCjcuIGZvcm1hdCBsaW5rcyBpbiBgaHRt
bGAgYW5kIGBwZGZgIGRvY3VtZW50cyBmb3IKcmVmZXJlbmNpbmcgZXh0ZXJuYWwgZG9jdW1l
bnRzIG9mIHRoZSBzYW1lIGZvcm1hdCwKc2VlIEBzZWM6Zm9ybWxpbmsuCmBgYG1kCglbRm9y
bWF0IExpbmsgdG8gaHRtbC9wZGYgZG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5cPz8/KQpgYGAK
CjguIHVzZSBmb3JtYXQgY29kZXMgaW4gb3JkZXIgdG8gaW5qZWN0IGZvcm1hdCBzcGVjaWZp
Ywpjb2RlIGluIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLApzZWUgQHNlYzpmb3JtY29k
ZS4KYGBgbWQKCWAhQlQqM2AhCgkJZGVmIGNvZGVfaHRtbCgpOgoJCQlfKCI8SFRNTF9DT0RF
PiIpCgkJCXJldHVybiAiIiIKCQkJCTxNT1JFX0NPREU+CgkJCQk8TU9SRV9DT0RFPgoJCQkJ
PE1PUkVfQ09ERT4KCQkJIiIiCgkJZGVmIGNvZGVfcGRmKCk6CgkJCV9fKCIiIgoJCQkJe1RF
WF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkiIiIpCglgIUJUKjNg
CgoJRm9ybWF0IGRlcGVuZGVudCBvdXRwdXQ6IGBcIWNvZGUoKWAKYGBgCgotLS0KCiMgU2Np
ZW50aWZpYyBXcml0aW5nIGluIGAhTURgIHsjc2VjOnBhbm1kfQoKW2AhTURgXShodHRwczov
L3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjcGFuZG9jcy1tYXJrZG93bikgaXMgYSBtYXJrdXAK
bGFuZ3VhZ2UgZm9yIHRlY2huaWNhbCB3cml0aW5nLCB3aXRoIGVtcGhhc2lzIG9uIHJlYWRh
YmlsaXR5LiBgIU1EYApjYW4gYmUgcmVuZGVyZWQgaW4gbWFueSBmb3JtYXRzIGluY2x1ZGlu
ZyBgaHRtbGAgYW5kIGBwZGZgIGJ5IHVzaW5nCltgIVBgXShodHRwczovL3BhbmRvYy5vcmcv
KSBmb3IgZXhhbXBsZS4KClVzaW5nIHZhcmlvdXMgYCFNRGAgZXh0ZW5zaW9ucyBvZiBgIVBg
IGEgc3VmZmljaWVudCBzdHJ1Y3R1cmUgZm9yCndyaXRpbmcgc2NpZW50aWZpYyBkb2N1bWVu
dHMgY2FuIGJlIHJlZmxlY3RlZCB1c2luZyBgIU1EYCBzeW50YXguCmAhTWAgdXNlcyB0aGUg
Zm9sbG93aW5nIGAhUGAgYCFNRGAgZXh0ZW5zaW9ucy4KKiBwYXJzaW5nIGV4dGVuc2lvbnMK
CSogW2FsbF9zeW1ib2xzX2VzY2FwYWJsZV0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi1hbGxfc3ltYm9sc19lc2NhcGFibGUpCgkqIFtpbnRyYXdvcmRfdW5k
ZXJzY29yZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW50
cmF3b3JkX3VuZGVyc2NvcmVzKQoJKiBbZXNjYXBlZF9saW5lX2JyZWFrc10oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1lc2NhcGVkX2xpbmVfYnJlYWtzKQoJ
KiBbc3BhY2VfaW5fYXR4X2hlYWRlcl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I2V4dGVuc2lvbi1zcGFjZV9pbl9hdHhfaGVhZGVyKQoJKiBbbGlzdHNfd2l0aG91dF9wcmVj
ZWRpbmdfYmxhbmtsaW5lXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLWxpc3RzX3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZSkKKiBzdHlsaW5nIGV4dGVu
c2lvbnMKCSogW2lubGluZV9jb2RlX2F0dHJpYnV0ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5lX2NvZGVfYXR0cmlidXRlcykKCSogW3N0cmlr
ZW91dF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zdHJpa2Vv
dXQpCiogc3RydWN0dXJpbmcgZXh0ZW5zaW9ucwoJKiBbeWFtbF9tZXRhZGF0YV9ibG9ja10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi15YW1sX21ldGFkYXRh
X2Jsb2NrKQoJKiBbcGlwZV90YWJsZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tcGlwZV90YWJsZXMpCgkqIFtsaW5lX2Jsb2Nrc10oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1saW5lX2Jsb2NrcykKCSogW2ltcGxpY2l0
X2ZpZ3VyZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW1w
bGljaXRfZmlndXJlcykKCSogW2FiYnJldmlhdGlvbnNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24tYWJicmV2aWF0aW9ucykKCSogW2lubGluZV9ub3Rlc10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbmxpbmVfbm90ZXMp
CiogY29kZSBpbmplY3Rpb24KCSogW3Jhd19odG1sXShodHRwczovL3BhbmRvYy5vcmcvTUFO
VUFMLmh0bWwjZXh0ZW5zaW9uLXJhd19odG1sKQoJKiBbcmF3X3RleF0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1yYXdfdGV4KQoKYCFQYCBzdXBwb3J0cwpb
ZXF1YXRpb25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXRl
eF9tYXRoX2RvbGxhcnMpCnJlbmRlcmVkIGlubGluZSBhbmQgc2luZ2xlLWxpbmUgaW4gdGV4
LXN0eWxlIHVzaW5nIGAkLi4uJGAgYW5kIGAkJC4uLiQkYCwKW2JpYmxpb2dyYXBoeV0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2NpdGF0aW9ucykKdXNpbmcgdGhlIGAtLWNp
dGVwcm9jYCBvcHRpb24sCltzZWN0aW9uIG51bWJlcmluZ10oaHR0cHM6Ly9wYW5kb2Mub3Jn
L01BTlVBTC5odG1sI2V4dGVuc2lvbi1oZWFkZXJfYXR0cmlidXRlcykKdXNpbmcgdGhlIGAt
LW51bWJlci1zZWN0aW9uc2Agb3B0aW9uIGFuZApbdGFibGUgb2YgY29udGVudHNdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNvcHRpb24tLXRvYykKdXNpbmcgdGhlIGAtLXRh
YmxlLW9mLWNvbnRlbnRzYCBvcHRpb24uCgpgIVBgIHN1cHBvcnRzIFtgeG5vc2BdKGh0dHBz
Oi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKSBmaWx0ZXJzCmZvciByZWZlcmVu
Y2luZyBkb2N1bWVudCBjb250ZW50IGxpa2UKW2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNv
bS90b21kdWNrL3BhbmRvYy1maWdub3MjdXNhZ2UpLApbZXF1YXRpb25zXShodHRwczovL2dp
dGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZXFub3MjdXNhZ2UpLApbdGFibGVzXShodHRwczov
L2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtdGFibGVub3MjdXNhZ2UpLApbc2VjdGlvbnNd
KGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjdXNhZ2UpCmJ5IHVz
aW5nIHRoZSBgLS1maWx0ZXIgcGFuZG9jLXhub3NgIG9wdGlvbi4KYHhub3NgIGludGVncmF0
ZXMgY2xldmVyIHJlZmVyZW5jZXMsIHdoaWNoIG1lYW5zICJGaWcuIiwgIlNlYy4iLCAiRXEu
IgphbmQgIlRhYi4iIGFyZSBhZGRlZCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBjb3JyZXNwb25k
aW5nIGVsZW1lbnQuCklmIHRoZSBwcmVmaXggaXMgdG8gYmUgb21pdHRlZCwgdGhlIHJlZmVy
ZW5jZSBjYW4gYmUgd3JpdHRlbiBhcwpgXCFAcmVmOmxhYmVsYC4KCioqRXhhbXBsZSoqCmBg
YG1kCiMjIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZl
cmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFn
ZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TClVoRVVnQUFBQVVBQUFBRkNBWUFBQUNO
YnlibEFBQUFIRWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERICnhnbGpOQkFBTzlUWEww
WTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJl
bmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8
MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlv
biB7I3RibDpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQk
XG1ib3h7ZX1ee1xtYm94e2l9XHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVm
ZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNd
LgpgYGAKClRoZSBmaWxlIGBtYXJreS5iaWJgIGlzIHNwZWNpZmllZCBpbiB0aGUgbWV0YSBk
YXRhIGluIHRoZSBmcm9udAptYXR0ZXIgb2YgdGhlIGAhTURgIHRleHQgYW5kIGNvbnRhaW5z
IHRoZSBmb2xsb3dpbmcgYXJ0aWNsZS4KCmBgYGJpYnRleAohISEgLi4vZGF0YS9tYXJreS5i
aWIgcmF3CmBgYAoKKipPdXRwdXQqKgoKIyMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxh
YmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRo
ZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVV
Z0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJL
RTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9
CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0t
LXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTog
VGhpcyBpcyB0aGUgY2FwdGlvbi4geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNl
IHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9XntpXHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpU
aGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBb
QE11bGxlcjE5OTNdLgoKLS0tCgojIGAhTVBgIENvbW1hbmQtTGluZSBVc2FnZQoKIyMgYCFN
UGAgU2NyaXB0IFVzYWdlCgpgIU1gIGlzIHN1cHBsaWVkIGFzIGEgc2luZ2xlLWZpbGUgc2Ny
aXB0IHdoaWNoIGNvbnRhaW5zIHRoZSBgIU1gCmAhTUZgIGFzIHdlbGwgYXMgdGhlIGAhTWAg
ZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBgbWFya3kubWRpYAphbmQgYG1hcmt5LmJpYmAu
CgpBZnRlciBkb3dubG9hZGluZyBgIU1QYCB0aGUgc2NyaXB0IG5lZWRzIHRvIGJlIHBsYWNl
ZCBpbiBhIHByb2plY3QKd29ya2luZyBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYC4gVGhlIHNj
cmlwdCBjYW4gYmUgaW52b2tlZCB1c2luZwphIHB5dGhvbiBpbnRlcnByZXRlciBgcHl0aG9u
YCBgIU1wYCBvciBpdCBjYW4gYmUgZXhlY3V0ZWQgdXNpbmcgYQpzaGVsbDoKYGBgYmFzaAo+
IGNkIHdvcmtpbmdfZGlyCj4gY2htb2QgK3ggbWFya3kucHkKPiAuL21hcmt5LnB5CmBgYAoK
QSBuZXcgcHJvamVjdCBpcyBpbml0aWFsaXplZCBpbiB0aGUgYHdvcmtpbmdfZGlyYCB1c2lu
ZyB0aGUgYC0taW5pdGAKb3B0aW9uLiBgIU1gIGNyZWF0ZXMgYSBkaXJlY3RvcnkgdHJlZSBm
b3IgdGhlIHByb2plY3QsIHdoaWNoIGlzCmV4cGxhaW5lZCBpbiBkZXRhaWwgaW4gQHNlYzpw
cm9qZWN0LiBUaGUgYCFNYCBgIU1GYCBhbmQKZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBg
bWFya3kubWRpYCBhbmQgYG1hcmt5LmJpYmAgYXJlIGF1dG8tZ2VuZXJhdGVkCmFuZCBwbGFj
ZWQgaW5zaWRlIHRoZSBzdWJkaXJzIGBtZC9gIGFuZCBgZGF0YS9gIGluIGB3b3JraW5nX2Rp
cmAKYWNjb3JkaW5nbHkuCmBgYGJhc2gKPiBjZCB3b3JraW5nX2Rpcgo+IC4vbWFya3kucHkg
LS1pbml0CldSSVRFIC4vTWFrZWZpbGUKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAuL21k
L21hcmt5Lm1kaQpXUklURSAuL2RhdGEvbWFya3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBg
CjIuIGBtYWtlIGFsbC1odG1sIGh0dHBkYAozLiBgbWFrZSBhbGwtcGRmYApgYGAKCmAhTWAg
cmVuZGVycyB0aGUgZG9jdW1lbnRhdGlvbiB1c2luZyBgIVBgIGludG8gYGh0bWxgIGFuZApg
cGRmYCB1c2luZyBgbWFrZSBhbGxgLiBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBjYW4g
YmUgcmVuZGVyZWQgYWZ0ZXIKaW5zdGFsbGluZyB0aGUgZGVwZW5kZW5jaWVzIGBweXRob24t
cHl5YW1sYCwgYHBhbmRvY2AgYW5kIGBwYW5kb2MteG5vc2AKKGBwYW5kb2MtZmlnbm9zYCwg
YHBhbmRvYy1zZWNub3NgLCBgcGFuZG9jLWVxbm9zYCwgYHBhbmRvYy10YWJsZW5vc2ApLgpU
aGUgZGV0YWlscyBhcmUgc2hvd24gaW4gdGhlIGAhTUZgIGhlbHAgbWVzc2FnZSBpbiBAc2Vj
Om1ha2VmaWxlLgoKIyMgYCFNYCBQcm9qZWN0IFN0cnVjdHVyZSB7I3NlYzpwcm9qZWN0fQoK
QSBgIU1gIHByb2plY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlLCB3aGljaCBpcyBh
dXRvLWdlbmVyYXRlZAppbiB0aGUgcHJvamVjdCBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYCBh
ZnRlciBpbnZvY2F0aW9uIG9mCmAhTXBgIGAtLWluaXRgLgpgYGAhIQoJdGV4dCA9ICIiCglm
b3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJCSJ0cmVlIl0pLmRl
Y29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJ
dGV4dCArPSBpICsgIlxuIgpgYGAKCmBgYApgIXRleHRgCmBgYAoKQnkgaW52b2tpbmcgYG1h
a2UgYWxsYCBhbGwgZmlsZXMgYG1kLyoubWRgIGFyZSB0cmFuc2Zvcm1lZAppbnRvIGNvcnJl
c3BvbmRpbmcgYGh0bWwvKi5odG1sYCBhbmQgYHBkZi8qLnBkZmAgZmlsZXMuIEJ5Cmludm9r
aW5nIGBtYWtlIGh0dHBkYCBhIHB5dGhvbiB3ZWIgc2VydmVyIGlzIHN0YXJ0ZWQgaW4gYGh0
bWwvYC4KCkFsbCB1c2VyLWdlbmVyYXRlZCBwcm9qZWN0IGNvbnRlbnQgZ29lcyBpbnRvIGBt
ZC8qLm1kKGkpYCBmb3IKYCFNRGAgdGV4dCBhbmQgYCFNRGAgaW5jbHVkZSBmaWxlcyBhbmQg
YGRhdGEvKmAgZm9yIGltYWdlcywKYmlibGlvZ3JhcGh5LCB2aWRlb3MsIGh0bWwgZnJhbWVz
LCBldGMuLi4KCioqQVRURU5USU9OOioqIFRoZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMg
YGJ1aWxkLyoubWRgIGFyZQoqKmF1dG8tZ2VuZXJhdGVkKiouIEFsbCB1c2VyLWdlbmVyYXRl
ZCBjb250ZW50IGAqLm1kYCBhbmQgYCoubWRpYApoYXMgdG8gYmUgcGxhY2VkIGluc2lkZSB0
aGUgZGlyZWN0b3J5IGBtZC9gLiBJbnZva2luZyBgbWFrZSBjbGVhbmAKd2lsbCBkZWxldGUg
YWxsIGZpbGVzIGluIGBodG1sL2AsIGBidWlsZC9gIGFuZCBgcGRmL2AuCgojIyBgIU1gIE1h
a2VmaWxlIFVzYWdlIHsjc2VjOm1ha2VmaWxlfQoKQnkgcnVubmluZyBgbWFrZWAgb3IgYG1h
a2UgaGVscGAgaW4gdGhlIHByb2plY3QgYHdvcmtpbmdfZGlyYCB0aGUKYCFNRmAgaGVscCBp
cyBzaG93bi4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19v
dXRwdXQoWyJtYWtlIiwKCQkiaGVscCJdKS5kZWNvZGUoInV0Zi04Iikuc3BsaXQoIlxuIik6
CgkJaWYgaS5zdGFydHN3aXRoKCIjIik6CgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAK
YCF0ZXh0YApgYGAKCiMjIGAhTWAgQ2hlYXQgU2hlZXQKCkJ5IHJ1bm5pbmcgYG1ha2UgY2hl
YXRgIGluIHRoZSBwcm9qZWN0IGB3b3JraW5nX2RpcmAgdGhlIGAhTWAgY2hlYXQKc2hlZXQg
aXMgc2hvd24sIHdoaWNoIHByZXNlbnRzIGEgcXVpY2sgb3ZlcnZpZXcgb2YgYCFNYCBzcGVj
aWFsCm1hcmt1cCBmb3IgZXhlY3V0aW9uIG9mIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRp
b24gb2YgYCFNRGAgdGV4dCwKYWNjb3JkaW5nIHRvIHRoZSBmZWF0dXJlcyBkZXNjcmliZXMg
aW4gQHNlYzpmZWF0dXJlcy4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vz
cy5jaGVja19vdXRwdXQoWyJtYWtlIiwKCQkiY2hlYXQiXSkuZGVjb2RlKCJ1dGYtOCIpLnNw
bGl0KCJcbiIpOgoJCWlmIGkuc3RhcnRzd2l0aCgiIyIpOgoJCQlpID0gaS5yZXBsYWNlKHIi
Llw/Pz8iLCByIi5cXD8/PyIpCgkJCWkgPSBpLnJlcGxhY2UociIuPz8/IiwgciIuXD8/PyIp
CgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApgYGAKCi0tLQoKIyBgIU1g
IFByZXByb2Nlc3NvciBNYXJrdXAKCiMjIFlhbWwgTWV0YSBEYXRhIGluIEZyb250IE1hdHRl
ciB7I3NlYzptZXRhZGF0YX0KCk1ldGEgZGF0YSBpcyBhbm5vdGF0ZWQgaW4gdGhlIGZyb250
IG1hdHRlciBvZiBhIGAhTURgIHRleHQgZG9jdW1lbnQuClRoZSBmcm9udCBtYXR0ZXIgbXVz
dCBzdGFydCBpbiB0aGUgZmlyc3QgbGluZSB3aXRoIGAtLS1gIGFuZCBwcmVjZWRlcyBhbGwK
b3RoZXIgdGV4dCBiZWluZyBmZW5jZWQgYnkgYC0tLWAuIFRoZSBtZXRhIGRhdGEgaXMgaW4g
YHlhbWxgIGZvcm1hdC4KVGhlIGB5YW1sYCBibG9jayBpcyBwYXJzZWQgdXNpbmcgYHB5dGhv
bi1weXlhbWxgLiBCeSBkZWZhdWx0IGFsbCBtZXRhCmRhdGEgaXMgaW1wb3J0ZWQgaW50byB0
aGUgcHJlcHJvY2Vzc2VkIGRvY3VtZW50LiBJZiBhIG1ldGEKZGF0YSBrZXkgc3RhcnRzIHdp
dGggYC1gIHRoZSBrZXkgaXMgbm90IGltcG9ydGVkIGludG8gdGhlIHJlc3VsdGluZwptZXRh
IGRhdGEgb2YgdGhlIHByZXByb2Nlc3NlZCBkb2N1bWVudCwgaG93ZXZlciB0aGUga2V5IHdp
bGwgYmUKZXhwb3NlZCBpbnRvIHRoZSBweXRob24gc2NvbGUgYXMgYSBsb2NhbCB2YXJpYWJs
ZS4gSW4gdGhlIGZvbGxvd2luZwpleG1hbXBsZSBhbGwga2V5cyBleGNlcHQgYGZpZ3NpemVg
LCBgZmlnZHBpYCBhbmQgYHZlcnNpb25gIGFyZSBjb3BpZWQKaW50byB0aGUgcHJlcHJvY2Vz
c2VkIGAhTURgIGRvY3VtZW50LgoKKipFeGFtcGxlKioKYGBgeWFtbAoKLS0tCnRpdGxlOiBg
IXRpdGxlYApkYXRlOiBgRGF0ZWAKYXV0aG9yOiBgQXV0aG9yYApsaW5rLWNpdGF0aW9uczog
YCFsaW5rX2NpdGF0aW9uc2AKYmlibGlvZ3JhcGh5OiBgIWJpYmxpb2dyYXBoeWAKaGVhZGVy
LWluY2x1ZGVzLS1wZGY6ID4KICBcaHlwZXJzZXR1cHsKICBjb2xvcmxpbmtzPWZhbHNlLAog
IGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19
CmhlYWRlci1pbmNsdWRlcy0taHRtbDogPgogIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9y
ZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IGAheG5vc19jbGV2ZXJlZmAKeG5v
cy1jYXBpdGFsaXNlOiBgIXhub3NfY2FwaXRhbGlzZWAKZm9udHNpemU6IGAhZm9udHNpemVg
Ci12ZXJzaW9uOiBgIXZlcnNpb25gCi1maWdzaXplOiBgIWZpZ3NpemVgCi1maWdkcGk6IGAh
ZmlnZHBpYAoKLS0tCgpgYGAKClRoZSBtZXRhIGRhdGEgZmllbGRzCltgdGl0bGVgLCBgZGF0
ZWAsIGBhdXRob3JgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjbWV0YWRhdGEt
dmFyaWFibGVzKSwKW2BsaW5rLWNpdGF0aW9uc2BdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNvdGhlci1yZWxldmFudC1tZXRhZGF0YS1maWVsZHMpLApbYGJpYmxpb2dyYXBo
eWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNjaXRhdGlvbi1yZW5kZXJpbmcp
IGFuZApbYGhlYWRlci1pbmNsdWRlc2BdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCN2YXJpYWJsZXMtc2V0LWF1dG9tYXRpY2FsbHkpCmFyZSBwcm9jZXNzZWQgYnkgYCFQYCBk
dXJpbmcgZG9jdW1lbnQgcmVuZGVyaW5nLiBgZm9udHNpemVgIGFkanVzdHMgdGhlCmZvbnQg
c2l6ZSBpbiBbYGh0bWxgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjdmFyaWFi
bGVzLWZvci1odG1sKQphbmQgW2BwZGZgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0
bWwjdmFyaWFibGVzLWZvci1sYXRleCkgZG9jdW1lbnRzLgpUaGUgYGhlYWRlci1pbmNsdWRl
c2AgZmllbGQgaXMgdXNlZCBmb3IgdW5kZXJsaW5pbmcgbGlua3MgaW4gYHBkZmAKYW5kIGBo
dG1sYCBkb2N1bWVudHMuIFRoZSBgeG5vcy1jbGV2ZXJlZmAgYW5kIGB4bm9zLWNhcGl0YWxp
c2VgCmZpZWxkcyBhcmUgdXNlZCBieSB0aGUgW2BwYW5kb2MteG5vc2BdKGh0dHBzOi8vZ2l0
aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKQpleHRlbnNpb25zIGZvciByZWZlcmVuY2lu
ZwpbZmlndXJlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWZpZ25vcyNj
dXN0b21pemF0aW9uKSwKW3RhYmxlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFu
ZG9jLXRhYmxlbm9zI2N1c3RvbWl6YXRpb24pLApbc2VjdGlvbnNdKGh0dHBzOi8vZ2l0aHVi
LmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjY3VzdG9taXphdGlvbikgYW5kCltlcXVhdGlv
bnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1lcW5vcyNjdXN0b21pemF0
aW9uKS4KClRoZSBmaWVsZCBgaGVhZGVyLWluY2x1ZGVzYCBlbmRzIHdpdGggYC0tcGRmYCBh
bmQgYC0taHRtbGAsIHdoaWNoCnNwZWNpZmllcyBjb3JyZXNwb25kaW5nIG9wdGlvbnMgZm9y
IGdlbmVyYXRpb24gb2YgYHBkZmAgYW5kIGBodG1sYApkb2N1bWVudHMuIER1cmluZyBtYWtl
LCBgIU1gIHNjYW5zIGFsbCBtZXRhIGRhdGEgZmllbGRzLCBhbmQKZmllbGRzIHdoaWNoIGVu
ZCB3aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgIGFyZSBzZWxlY3RlZCBhbmQgZm9yd2FyZGVk
CnRvIGAhUGAgYmFzZWQgb24gdGhlIGZvcm1hdCB0byBiZSByZW5kZXJlZC4gVGhpcyB3YXMg
Zm9ybWF0IGRlcGVuZGVudAptZXRhIGRhdGEgY2FuIGJlIHNwZWNpZmllZCBpbiBgIU1gIE1h
cmtkb3duIHRleHQuCgpUaGUgYHZlcnNpb25gIGZpZWxkIGlzIGEgdXNlci1kZWZpbmVkIGZp
ZWxkCndoaWNoIHNob3dzIHRoZSB2ZXJzaW9uIG9mIHRoaXMgZG9jdW1lbnQ6ICpgIXZlcnNp
b25gKi4gYGZpZ3NpemVgIGFuZApgZmlnZHBpYCBhcmUgdXNlZCBpbiB0aGlzIGRvY3VtZW50
IHRvIGNvbnRyb2wgdGhlIGZpZ3VyZSBzaXplIGFuZApyZXNvbHV0aW9uIGluIHRoZSBgIU5V
YCBhbmQgYCFQTGAgZXhhbXBsZSwgc2VlIEBzZWM6ZXhhbXBsZXMuIFRoZSBmb250CnNpemUg
aXMgYCFmb250c2l6ZWAgYW5kIHRoZSBAZmlnOmZpZ3VyZTEsICFAZmlnOmZpZ3VyZTJfMSwK
IUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMgYW5kICFAZmlnOmZpZ3VyZTJfNCBo
YXZlIGEgc2l6ZSBvZgpgISJ4Ii5qb2luKHN0cihpKSBmb3IgaSBpbiBmaWdzaXplKWBjbS4g
VGhlIGZvbnQgc2l6ZSBhcHBsaWVzIHRvCmJvdGggZG9jdW1lbnQgdGV4dCBhbmQgZmlndXJl
IHRleHQuCgpBcyB0aGUgdXNlci1kZWZpbmVkIGZpZWxkcyBhcmUgcHJlY2VlZGVkIHdpdGgg
YC1gLCB0aGV5IGFyZSBub3QgY29waWVkCmludG8gdGhlIG1ldGEgZGF0YSBvZiB0aGUgcHJl
cHJvY2Vzc2VkIGAhTURgIHRleHQuIFRoZXkgYXJlIG9ubHkKZXhwb3NlZCBpbnRvIHRoZSBw
eXRob24gc2NvcGUgYXMgdmFyaWFibGVzIGZvciBwcm9jZXNzaW5nIHRoZSBgIU1gCmAhTURg
IHRleHQsIGFzIGRlc2NyaWJlZCBpbiBAc2VjOmluY21ldGEuCgojIyBQeXRob24gQ29kZSBC
bG9ja3MgaW5zaWRlIGAhTURgIFRleHQgeyNzZWM6YmxvY2t9CgpQeXRob24gY29kZSBjYW4g
YmUgZXhlY3V0ZWQgZHVyaW5nIHRyYW5zZm9ybWF0aW9uIG9mIHRoZSBgIU1EYCB0ZXh0LgpQ
eXRob24gY29kZSBpcyBkaXJlY3RseSB3cml0dGVuIGluc2lkZSB0aGUgYCFNRGAgdGV4dCBh
bmQgaXMgZmVuY2VkCnVzaW5nIHRoZSBgYCBgIUJUKjNgIGBgIHN0YXRlbWVudC4gVGhlIGJs
b2NrIG5lZWRzIHRvIHN0YXJ0IHdpdGggZWl0aGVyCmBcIWAgb3IgYFwhIWAuCiogYFwhYDog
VGhlIHB5dGhvbiBjb2RlIGlzIGV4ZWN1dGVkIGFuZCAqKnNob3duKiogaW4gdGhlIG91dHB1
dC4KKiBgXCEhYDogVGhlIHB5dGhvbiBjb2RlIGlzIGV4ZWN1dGVkIGFuZCAqKmhpZGRlbioq
IGluIHRoZSBvdXRwdXQuCgpgYGBtZAoJYCFCVCozYCEKCQk8cHl0aG9uX2NvZGVfc2hvd24+
CglgIUJUKjNgCgoJYCFCVCozYCEhCgkJPHB5dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AK
YGBgCgpNZXRhIGRhdGEgZnJvbSBgIU1EYCBmcm9udCBtYXR0ZXIgY2FuIGJlIHVzZWQgYXMg
bG9jYWwgdmFyaWFibGVzIGluCnB5dGhvbiBjb2RlIGJsb2Nrcy4gVGhlIGBpbXBvcnRgIHN0
YXRlbWVudCBjYW4gYmUgdXNlZCBpbiBweXRob24gY29kZQpibG9ja3MgaW4gb3JkZXIgdG8g
YWNjZXNzIGluc3RhbGxlZCBweXRob24gcGFja2FnZXMuIEFsbCBjb2RlIGJsb2NrcwpzcGFu
IG9uZSBsYXJnZSBzY29wZSBmb3Igc2hhcmluZyBmdW5jdGlvbnMgYW5kIGxvY2FsIHZhcmlh
Ymxlcy4KVXNpbmcgdGhlIGBwcmludCgpYCBmdW5jdGlvbiB0aGUgdGV4dCB3aWxsIGJlIHBy
aW50ZWQgdG8gdGhlIGNvbnNvbGUKYW5kICoqbm90KiogaW5zaWRlIHRoZSByZXN1bHRpbmcg
YCFNRGAgdGV4dC4gSW4gb3JkZXIgdG8gbW9kaWZ5CnRoZSBgIU1EYCB0ZXh0IHVzaW5nIGAh
TWAgZHVyaW5nIHByZXByb2Nlc3NpbmcsIHRoZSBgIVAxYCBzdGF0ZW1lbnQKaGFzIHRvIGJl
IHVzZWQsIHNlZSBAc2VjOm1kcHJpbnQuCgoqKkV4YW1wbGUqKgpgYGAhCglpbXBvcnQgbnVt
cHkgYXMgbnAKCWRlZiBnZXRfeChhPTApOgoJCXJldHVybiBucC5hcnJheShbNDEgKyBhXSkK
CXkgPSAxCmBgYAoKVGhpcyBpcyBhIHBhcmFncmFwaC4KCmBgYCEKCXggPSBnZXRfeCh5KQoJ
cHJpbnQoIkhlbGxvIENvbnNvbGUhIHggaXMiLCB4KQpgYGAKCiMjIEdlbmVyYXRpb24gb2Yg
YCFNRGAgVGV4dCB1c2luZyBQeXRob24gQ29kZSB7I3NlYzptZHByaW50fQoKIyMjIFRoZSBg
IVAxYCBTdGF0ZW1lbnQKClVzaW5nIHRoZSBgcHJpbnQoKWAgc3RhdGVtZW50IHRoZSB0ZXh0
IHdpbGwgYmUgcHJpbnRlZCB0byB0aGUgY29uc29sZS4KV2hlbiB1c2luZyB0aGUgYCFQMWAg
YW5kIGAhUDJgIHN0YXRlbWVudHMgbmV3IGAhTURgIHRleHQgY2FuIGJlCmluc2VydGVkIGR5
bmFtaWNhbGx5IGludG8gdGhlIGRvY3VtZW50IGR1cmluZyBwcmVwcm9jZXNzaW5nLgoKKipg
IVAxYCBTdGF0ZW1lbnQqKgoqIGBfKCphcmdzLCBzZXA9IiAiKWA6CgkxLiBjb252ZXJ0IGFy
Z3VtZW50cyB0byBzdHJpbmcKCTIuIGpvaW4gYXJndW1lbnRzIHVzaW5nIGBzZXBgCiogYF8o
XywgKmFyZ3MgICApYDogYXBwZW5kIHRvIHByZXZpb3VzIG91dHB1dAoqIGBfKF8sICphcmdz
LCBfKWA6IGFwcGVuZCB0byBwcmV2aW91cyBvdXRwdXQgYW5kIGFwcGVuZCBuZXh0IG91dHB1
dAoqIGBfKCAgICphcmdzLCBfKWA6IGFwcGVuZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1
dAoKKipgIVAyYCBTdGF0ZW1lbnQqKgoqIGBfXyhhcmcsIGNyb3A9VHJ1ZSwgc2hpZnQ9IiIp
YDoKCTEuIGNvbnZlcnQgYGFyZ2AgdG8gc3RyaW5nCgkyLiBjcm9wIGFuZCBwcmVwZW5kIGBz
aGlmdGAgc3RyaW5nIHRvIGVhY2ggbGluZQoqIGBfXyhhcmcsIF8pYDogYXBwZW5kIG5leHQg
b3V0cHV0IHRvIHRoaXMgb3V0cHV0CgoqKkNyb3AgYW5kIFNoaWZ0KioKYGBgcHkKZGVmIHRl
c3QoKToKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDEKCSIiIikK
CV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVsIDIKCQkgICAgKiBMaXN0
IExldmVsIDMKCSIiIiwgc2hpZnQ9IiAiKjQpCmBgYAoKYGBgbWQKKiBMaXN0IExldmVsIDEK
KiBMaXN0IExldmVsIDEKICAgICogTGlzdCBMZXZlbCAyCiAgICAqIExpc3QgTGV2ZWwgMgog
ICAgICAgICogTGlzdCBMZXZlbCAzCmBgYAoKKipFeGFtcGxlKioKYGBgIQoJeSArPSAxCglf
XyhmIiIiCgkJKiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259Ki4KCQkqIFRo
aXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJIiIiKQoJX18oZiIiIgoJCTEu
IFRoaXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJCTIuIFRoaXMgaXMgYG1h
cmt5YCBWZXJzaW9uICp7dmVyc2lvbn0qLgoJIiIiLCBzaGlmdD0iICIqNCkKYGBgCgpgYGAh
CglfKCJUaGlzIiwgXykKCV8oImlzIikKCV8oXywgIiBvbmUiLCBfKQoJXygibGluZSEgbm90
IGVuZGluZyB3aXRoIFxcIikKCV8oInRoaXM/IikKYGBgCgpgYGAhCglfKGYiSGVsbG8gTWFy
a2Rvd24hIHggaXMgKip7eH0qKiBhbmQgeSBpcyAqe3l9KiIpCmBgYAoKIyMjIEluZGVudGF0
aW9uIG9mIHRoZSBgIVAxYCBTdGF0ZW1lbnQKClRoZSBgIVAxYCBzdGF0ZW1lbnQgbmVlZHMg
dG8gYmUgaW5kZW50ZWQgYWNjb3JkaW5nIHRvIHRoZSBweXRob24gcHJvZ3JhbQpmbG93IChg
Zm9yYCwgYHdoaWxlYCwgYGlmYCwgYGVsc2VgLCBgdHJ5YCwgYHdpdGhgLCBgZGVmYCwgYGNs
YXNzYCkgYW5kCnN1cHBvcnRzIGR5bmFtaWMgaW5zZXJ0aW9uIG9mIGAhTURgIHRleHQgaW50
byB0aGUgZG9jdW1lbnQgYmFzZWQKb24gbG9vcHMgYW5kIGNvbmRpdGlvbnMuCgoqKkV4YW1w
bGUgMSoqCgpgYGAhCglfKCJUaGlzIGlzIHRoZSAqKmdlbmVyYXRlZCBvdXRwdXQqKjoiKQoJ
XygiIikKCV8oIj4gVGhpcyBpcyBhICpsaXN0aW5nKjoiKQoJdGV4dCA9IFsiemVybyIsICJv
bmUiLCAidHdvIiwgInRocmVlIl0KCWZvciBpIGluIHJhbmdlKDEwKToKCQlpZiBpIDwgMjoK
CQkJXyhmIj4ge2l9IikKCQllbGlmIGkgPT0gMjoKCQkJaiA9IHRleHRbaV0KCQkJXyhmIj4g
e2p9IikKCQllbGlmIGkgPT0gMzoKCQkJXygiIikKCQllbGlmIGkgPCA3OgoJCQlfKGYiPj4g
eycgICAgJyooaS00KX0qIHtpfSIpCgkJZWxpZiBpID09IDc6CgkJCV8oIiIpCgkJZWxzZToK
CQkJaiA9IGkgLSA3CgkJCWsgPSB0ZXh0W2pdCgkJCV8oZiI+IHtqfS4ge2t9IikKYGBgCgoq
KkV4YW1wbGUgMioqCgpAdGJsOnRhYmxlMSBpcyBnZW5lcmF0ZWQgdXNpbmcgdGhlIGZvbGxv
d2luZyBweXRob24gY2xvZGUgYmxvY2suCgpgYGAhCgluID0gMTMKCWRlYyA9IFsiKiVzKiIs
ICIqKiVzKioiLCAifn4lc35+IiwgImAlc2AiLAoJCXIiJFx0aW1lc14lcyQiLCAiJFxpbmZ0
eV8lcyQiXQoJXygifCIuam9pbigiWCIqbikgKyAiXG4iICsgInwiLmpvaW4oIi0iKm4pKQoJ
Zm9yIGkgaW4gcmFuZ2Uobik6CgkJZmlsbCA9IFtjaHIob3JkKCJBIikrKDIqaSszKmspJTI2
KSBmb3IgayBpbiByYW5nZShpKzEpXQoJCWZpbGwgPSBbZGVjWyhsK2kpJWxlbihkZWMpXSVr
IGZvciBsLCBrIGluIGVudW1lcmF0ZShmaWxsKV0KCQl0ZXh0ID0gbGlzdCgiMCIpKm4KCQl0
ZXh0WyhuPj4xKS0oaT4+MSk6KG4+PjEpKyhpPj4xKV0gPSBmaWxsCgkJXygifCIuam9pbih0
ZXh0KSkKYGBgCgpUYWJsZTogVGFibGUgaXMgZ2VuZXJhdGVkIHVzaW5nIGNvZGUgYW5kIHRo
ZSBgIVAxYCBzdGF0ZW1lbnQuIHsjdGJsOnRhYmxlMX0KCiMjIEZvcm1hdHRlZCBPdXRwdXQg
b2YgUHl0aG9uIFZhcmlhYmxlcyB7I3NlYzpmb3JtYXR9CgpgIU1gIGNhbiBvdXRwdXQgcHl0
aG9uIHZhcmlhYmxlcyBpbmxpbmUgaW50byBgIU1EYCB0ZXh0IHVzaW5nCnRoZSBgYCBgXCFW
QVJJQUJMRWAgYGAgc3RhdGVtZW50LiBgVkFSSUFCTEVgIGNhbiBiZSBhbnkgcHl0aG9uIHZh
cmlhYmxlCmZyb20gYSBweXRob24gY29kZSBibG9jayBvciBtZXRhIGRhdGEgZmllbGQuIFRo
ZSBvdXRwdXQgY2FuIGJlCmZvcm1hdHRlZCB1c2luZyB0aGUgYGAgYFwhVkFSSUFCTEVbOkZP
Uk1BVF1gIGBgIHN0YXRlbWVudCBhY2NvcmRpbmcKdG8gdGhlIHB5dGhvbiBvcGVyYXRvciBg
ezx2YXJpYWJsZT5bOjxmb3JtYXQ+XX1gIGltcGxlbWVudGVkIGluIHRoZQpbYHN0ci5mb3Jt
YXQoKWBdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvbGlicmFyeS9zdHJpbmcuaHRtbCNm
b3JtYXRzdHJpbmdzKQpzcGVjaWZpY2F0aW9uLiBUaGUgYGAgYFwhVkFSSUFCTEVgIGBgIHN0
YXRlbWVudCBpcyBlc2NhcGVkCnVzaW5nIGBgIGBcXCFWQVJJQUJMRWAgYGAuCgoqKkV4YW1w
bGUqKgpgYGAhCgl4ID0gaW50KDEpCgl5ID0gZmxvYXQoMi4zKQoJeiA9IDAKCWEgPSBbMSwg
MiwgM10KCWIgPSAoNCwgNSkKYGBgCgpgYGBtZApUaGlzIGlzIGEgcGFyYWdyYXBoIGFuZCB4
IGlzIGBcIXg6MDNkYCBhbmQgeSBpcyBgXCF5Oi4yZmAuCk90aGVyIGNvbnRlbnQgaXM6IGBc
IWFgLCBgXCFiYCBhbmQgZXNjYXBpbmcgd29ya3M6IGBcXCF6YC4KYGBgCgpUaGlzIGlzIGEg
cGFyYWdyYXBoIGFuZCB4IGlzIGAheDowM2RgIGFuZCB5IGlzIGAheTouMmZgLgpPdGhlciBj
b250ZW50IGlzOiBgIWFgLCBgIWJgIGFuZCBlc2NhcGluZyB3b3JrczogYFwhemAuCgojIyBP
dXRwdXQgUmVzdWx0cyBvZiBQeXRob24gRXhwcmVzc2lvbnMgeyNzZWM6aW5saW5lfQoKYCFN
YCBvdXRwdXRzIHJlc3VsdHMgb2YgcHl0aG9uIGV4cHJlc3Npb25zIGlubGluZSBpbnRvIGAh
TURgIHRleHQKdXNpbmcgdGhlIGBgIGBcIUVYUFJFU1NJT05gIGBgIHN0YXRlbWVudC4gYEVY
UFJFU1NJT05gIGNhbiBiZSBhbnkgcHl0aG9uCmV4cHJlc3Npb24uIFRoZSBvdXRwdXQgY2Fu
IGJlIGZvcm1hdHRlZCB1c2luZyB0aGUgcHl0aG9uCmBgIGBcIUVYUFJFU1NJT05bOkZPUk1B
VF1gIGBgIHN0YXRlbWVudCBhY2NvcmRpbmcgdG8gdGhlIHB5dGhvbiBvcGVyYXRvcgpgezxl
eHByZXNzaW9uPls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4gdGhlIHB5dGhvbgpbYGZg
LXN0cmluZ3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxf
YW5hbHlzaXMuaHRtbCNmLXN0cmluZ3MpCnNwZWNpZmljYXRpb24uIFRoZSBgYCBgXCFFWFBS
RVNTSU9OYCBgYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZAp1c2luZyBgYCBgXFwhRVhQUkVTU0lP
TmAgYGAuCgoqKkV4YW1wbGUqKgpgYGBtZApUaGlzIGlzIGEgbGlzdCB3aXRoIHRoZSBudW1i
ZXJzIGBcISIsICIuam9pbihbc3RyKGkpIGZvciBpIGluIGFdKWAuClRoZSByZXN1bHQgb2Yg
dGhlIGZ1bmN0aW9uIGBnZXRfeGAgaXMgYFwhZ2V0X3goKWAgYW5kIGVzY2FwaW5nCndvcmtz
OiBgXFwhZ2V0X3goYlsxXSlbMF1gLgpgYGAKClRoaXMgaXMgYSBsaXN0IHdpdGggdGhlIG51
bWJlcnMgYCEiLCAiLmpvaW4oW3N0cihpKSBmb3IgaSBpbiBhXSlgLgpUaGUgcmVzdWx0IG9m
IHRoZSBmdW5jdGlvbiBgZ2V0X3hgIGlzIGAhZ2V0X3goKWAgYW5kIGVzY2FwaW5nCndvcmtz
OiBgXCFnZXRfeChiWzFdKVswXWAuCgojIyBJbmNsdWRlIFN0YXRlbWVudCBhbmQgTWFrZSBE
ZXBlbmRlbmNpZXMgeyNzZWM6aW5jbHVkZX0KCmAhTWAgc3VwcG9ydHMgaW5jbHVkZSBvZiBg
IU1EYCB0ZXh0IHVzaW5nIHRoZSBgXCEhIWAgc3RhdGVtZW50LgpUaGUgYFwhISFgIHN0YXRl
bWVudCBtdXN0IGJlIG9uIGEgc2luZ2xlIGxpbmUgYW5kIGZvbGxvd3MgdGhlIHBhdGgKb2Yg
dGhlIGluY2x1ZGUgZmlsZS4gVGhlIHBhdGggb2YgdGhlIGluY2x1ZGUgZmlsZSBpcyByZWxh
dGl2ZSB0bwp0aGUgcm9vdCBgIU1EYCBkb2N1bWVudCB3aGljaCBpcyBwcm9jZXNzZWQuIFRo
ZSBwYXRocyBvZiBhbGwKaW5jbHVkZWQgZmlsZXMgYXJlIGNvbGxlY3RlZCBhbmQgYSBgIU1G
YCBydWxlIGlzIGNyZWF0ZWQgYW5kCnN0b3JlZCBpbiBhIGZpbGUgKHBhdGggb2Ygb3V0cHV0
IGAhTURgIHRleHQgYXBwZW5kZWQgd2l0aCBgLm1rYCkuCgpUaGUgYFwhISFgIHN0YXRlbWVu
dCBpcyBlc2NhcGVkIHVzaW5nIGBcXCEhIWAuClRoZSBpbmNsdWRlIHN0YXRlbWVudCAqKmNh
bm5vdCoqIGJlIHVzZWQgaW4gY29kZSBibG9ja3MuIGAhTWAgYCFNRGAKdGV4dCBtdXN0IGhh
dmUgdGhlIGV4dGVuc2lvbiBgLm1kYCBhbmQgaW5jbHVkZSBmaWxlcyBtdXN0IGhhdmUgdGhl
CmV4dGVuc2lvbiBgLm1kaWAKClRoZSBpbmNsdWRlIHN0YXRlbWVudCBzdXBwb3J0cyBmbGFn
cyBmb3IgcGFyc2luZyB0aGUgaW5jbHVkZSBmaWxlLgpgYGBtZApcISEhIFBBVEgvRklMRS5t
ZGkgRkxBR1MKYGBgCgoqKkZsYWdzKioKKiBgcmF3YDogdGhlIGZpbGUgaXMgaW5jbHVkZWQg
YXMgaXMgd2l0aG91dCBhbnkgcGFyc2luZwoqIGBub21ldGFgOiBtZXRhIGRhdGEgaW4gZnJv
bnQgbWF0dGVyIGlzIHNraXBwZWQgZHVyaW5nIHBhcnNpbmcKKiBgbm90ZXh0YDogYWxsIE1h
cmtkb3duIHRleHQgaXMgc2tpcHBlZCBkdXJpbmcgcGFyc2luZwoqIGBub21hcmt5YDogaW5j
bHVkZSB0aGUgYCFNRGAgdGV4dCB3aXRob3V0IGFueSBgIU1gIHByb2Nlc3NpbmcKKiBgIytO
YDogaW5jcmVhc2UgdGhlIGxldmVsIG9mIEFUWCBoZWFkaW5ncyBgI2AuIFRoZSBoZWFkaW5n
cyBhcmUKcGFyc2VkIGFjY29yZGluZyB0byBgIVBgIGV4dGVuc2lvbnMKKFtibGFua19iZWZv
cmVfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWJs
YW5rX2JlZm9yZV9oZWFkZXIpLApbc3BhY2VfaW5fYXR4X2hlYWRlcl0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zcGFjZV9pbl9hdHhfaGVhZGVyKSkKKiBg
Pj5OYDogaW5jcmVhc2UgdGhlIGluZGVudGF0aW9uIHVzaW5nIGBOYCB0YWJzCiogYD5OYDog
aW5jcmVhc2UgdGhlIGluZGVudGF0aW9uIHVzaW5nIGBOYCBzcGFjZXMKKiBgbm9yZWZgOiBk
byBub3QgcmVmZXJlbmNlIHRoaXMgZmlsZSBhcyBNYWtlZmlsZSBkZXBlbmRlbmN5CiogYGF1
eGA6IHJlZmVyZW5jZSBhcyBNYWtlZmlsZSBkZXBlbmRlbmN5LCBidXQgZG8gbm90IHByb2Nl
c3MKCioqRXhhbXBsZSoqCmBgYG1kClwhISEgbWFya3kubWRpICMrMgpUaGUgZmlsZSB3YXMg
aW5jbHVkZWQ6IGBcIWluY2x1ZGVkYCBhbmQgJHg9YFwheGAkIGFuZCAkeT1gXCF5YCQuCmBg
YAoKISEhIG1hcmt5Lm1kaSAjKzIKVGhlIGZpbGUgd2FzIGluY2x1ZGVkOiBgIWluY2x1ZGVk
YCBhbmQgJHg9YCF4YCQgYW5kICR5PWAheWAkLgoKVGhlIGZpbGUgYG1hcmt5Lm1kaWAgd2Fz
IGxvYWRlZCB3aXRoIHNoaWZ0aW5nIEFUWCBoZWFkaW5ncyBieSAyIHdoaWNoCm1lYW5zIGAj
I2AgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIGluY2x1ZGVkIHNlY3Rpb24uIFRoZSBmaWxlIGNv
bnRhaW5zOgpgYGBtZAohISEgbWFya3kubWRpIHJhdyA+PjEKYGBgClRoZSB1bm1vZGlmaWVk
IHNvdXJjZSB3YXMgbG9hZGVkIHVzaW5nIHRoZSBmbGFncyBgcmF3ID4+MWAuCgpUaGUgZmls
ZSBgbWFya3kubWQubWtgIGNvbnRhaW5zOgpgYGBNYWtlZmlsZQpidWlsZC9tYXJreS5tZDog
XAptZC9tYXJreS5tZGkKCi5QSE9OWTogbWQtbWFya3kKbWQtbWFya3k6IGJ1aWxkL21hcmt5
Lm1kCgouUEhPTlk6IGh0bWwtbWFya3kKaHRtbC1tYXJreTogaHRtbC9tYXJreS5odG1sCgou
UEhPTlk6IHBkZi1tYXJreQpwZGYtbWFya3k6IHBkZi9tYXJreS5wZGYKYGBgCgojIyBJbmNs
dWRlIFN0YXRlbWVudCBhbmQgTWV0YSBEYXRhIEltcG9ydCB7I3NlYzppbmNtZXRhfQoKVGhl
IGluY2x1ZGUgc3RhdGVtZW50IGBcISEhYCBsb2FkcyBhbmQgcGFyc2VzIGFuIGAqLm1kaWAg
aW5jbHVkZSBmaWxlLgpUaGUgYHlhbWxgIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQgbWF0dGVy
IG9mIHRoZSBkb2N1bWVudCBhbHNvIGlzIGxvYWRlZAphbmQgcGFyc2VkIGlmIHRoZSBgbm9t
ZXRhYCBmbGFnIGlzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGluY2x1ZGUKc3RhdGVtZW50LiBB
c3N1bWluZyB0aGUgcm9vdCBkb2N1bWVudCBhbmQgdGhlIGluY2x1ZGVkIGRvY3VtZW50IGhh
dmUgdGhlCmZvbGxvd2luZyBtZXRhIGRhdGEuCgoqKlJvb3QgRG9jdW1lbnQqKgpgYGB5YW1s
CgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAKCi0tLQpcISEhIGluY2x1ZGUubWRpCmBgYAoK
KipJbmNsdWRlZCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQpkZXB0aDogMzAKdm9sdW1lOiA2
MDAwCi1zZXJpYWw6IEE1NkdISgoKLS0tCmBgYAoKQnkgZGVmYXVsdCBhbGwgYHlhbWxgIG1l
dGEgZGF0YSBmaWVsZHMgYXJlIGNvcGllZCB0byB0aGUgbWV0YSBkYXRhIG9mCnRoZSByb290
IGAhTURgIGRvY3VtZW50IHdoaWNoIGlzIHByb2Nlc3NlZC4gSG93ZXZlciwgaWYgYSBtZXRh
IGRhdGEKa2V5IGlzIHByZWNlZWRlZCBieSBgLWAgdGhlIGtleSBpcyBub3QgaW1wb3J0ZWQg
aW50byB0aGUgcm9vdCBkb2N1bWVudC4KQWxsIGB5YW1sYCBtZXRhIGRhdGEga2V5cyB3aGlj
aCBzdGFydCB3aXRoIGAtYCBhcmUgZXhwb3NlZCB0byB0aGUKcHl0aG9uIHNjb3BlIGFuZCB3
aWxsIGFwcGVhciBhcyBsb2NhbCB2YXJpYWJsZXMsIGJ1dCB0aGV5IHdpbGwgbm90CmFwcGVh
ciBpbiB0aGUgbWV0YSBkYXRhIG9mIHRoZSBmcm9udCBtYXR0ZXIgaW4gdGhlIHByZXByb2Nl
c3NlZApgIU1EYCB0ZXh0LiBHaXZlbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIHJlc3VsdGlu
ZyBtZXRhIGRhdGEgaW4KdGhlIGZyb250IG1hdHRlciBvZiB0aGUgcHJlcHJvY2Vzc2VkIGAh
TURgIHRleHQgbG9va3MgYXMgZm9sbG93cy4KCioqUHJlcHJvY2Vzc2VkIERvY3VtZW50KioK
YGBgeWFtbAoKLS0tCndpZHRoOiAxMApoZWlnaHQ6IDIwCmRlcHRoOiAzMAp2b2x1bWU6IDYw
MDAKCi0tLQpgYGAKCiMjIEZvcm1hdCBMaW5rcyBmb3IgYGh0bWxgIGFuZCBgcGRmYCBEb2N1
bWVudHMgeyNzZWM6Zm9ybWxpbmt9CgpXaGVuIHdyaXRpbmcgbXVsdGlwbGUgZG9jdW1lbnRz
LCBvZnRlbiBkb2N1bWVudHMgYXJlIHJlZmVyZW5jZWQKYmV0d2VlbiBlYWNoIG90aGVyIHVz
aW5nIGxpbmtzLiBJbiBvcmRlciB0byByZWZlciB0byBleHRlcm5hbApgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyB0aGUgYCFNRGAgbGluayBzdGF0ZW1lbnQgaXMgdXNlZC4KYGBgbWQK
W0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLmh0bWwpCltMaW5rIENhcHRpb25dKHBhdGgv
dG8vZmlsZS5wZGYpCmBgYAoKV2hlbiB1c2luZyByZWxhdGl2ZSBwYXRocyBpbiB0aGUgVVJM
LCB0aGUgZG9jdW1lbnRzIGNhbiBiZSByZWZlcmVuY2VkCmFjY29yZGluZyB0byB0aGUgZGly
ZWN0b3J5IHRyZWUgb2YgdGhlIHNvdXJjZSBgIU1gIGAhTURgIHRleHQKYG1kLyovKi5tZGAu
IEhvd2V2ZXIsIHRoZSByZXN1bHRpbmcgbGluayB3aWxsIGJlIGEgcGF0aCByZWxhdGl2ZQp0
byB0aGUgZGlyZWN0b3J5IGBodG1sL2AgZm9yIGBodG1sYCBkb2N1bWVudHMgYW5kIHJlbGF0
aXZlIHRvIGBwZGYvYApmb3IgYHBkZmAgZG9jdW1lbnRzLiBBcyBhbGwgYGh0bWxgIGFuZCBg
cGRmYCBkb2N1bWVudHMgYXJlIGtlcHQgaW4Kc2VwYXJhdGUgZGlyZWN0b3JpZXMsIG9uZSBs
aW5rIHN0YXRlbWVudCBjYW5ub3QgYmUgdXNlZCBmb3IgcmVuZGVyaW5nCmBodG1sYCBhbmQg
YHBkZmAgd2l0aCBjb25zaXN0ZW50IHBhdGhzIGluIHRoZSBsaW5rIHN0YXRlbWVudC4KCkJ5
IHVzaW5nIHRoZSBgIU1gIGZvcm1hdCBsaW5rIHN0YXRlbWVudCBgLlw/Pz9gLCB0aGUgZmls
ZSBleHRlbnNpb24KaW4gdGhlIGxpbmtzIGlzIHJlcGxhY2VkIGRlcGVuZGluZyBvbiB0aGUg
b3V0cHV0IGZvcm1hdApyZXN1bGluZyBpbiBjb25zaXN0ZW50IGxpbmtzIGZvciBgaHRtbGAg
YW5kIGBwZGZgCmRvY3VtZW50cy4gVGhlIGZvcm1hdCBsaW5rIHN0YXRlbWVudCBjYW4gYmUg
ZXNjYXBlZCB1c2luZyBgLlxcPz8/YC4KCioqRXhhbXBsZSoqCmBgYG1kCltMaW5rIHRvIHRo
aXMgRG9jdW1lbnRdKG1hcmt5Llw/Pz8pCmBgYAoKW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0o
bWFya3kuPz8/KQoKIyMgRm9ybWF0IENvZGVzIGZvciBgaHRtbGAgYW5kIGBwZGZgIERvY3Vt
ZW50cyB7I3NlYzpmb3JtY29kZX0KCk9mdGVuIHdoZW4gd3JpdGluZyBtYXJrZG93biBmb3Ig
YGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMsIHRoZQpmb3JtYXQgbmVlZHMgdG8gYmUgYWRq
dXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb3JtYXQuIGAhUGAgYCFNRGAKYWxyZWFkeSByZW5k
ZXJzIGFsbCBjb21tb24gTWFya2Rvd24gaW50byBgaHRtbGAgYW5kIGBwZGZgLgpgIU1gIHN1
cHBvcnRzIGZvcm1hdCBzcGVjaWZpYyB0d2Vha2luZyB1c2luZyBmb3JtYXQgY29kZXMuCgpJ
biBvcmRlciB0byBpbmplY3QgZm9ybWF0IHNwZWNpZmljIGNvZGUsIGBodG1sYCBjb2RlIG9y
IGB0ZXhgIGNvZGUKZm9yIGBwZGZgIGRvY3VtZW50cywgdGhlIGZvcm1hdCBjb2RlcyBhcmUg
dXNlZC4gQSBmb3JtYXQgY29kZSBpcwp3cml0dGVuIGFzIGBgIGBcP0ZNVENPREUoQVJHUylg
IGBgIHdoaWNoIGlzIHRyYW5zbGF0ZWQgaW4gdHdvIHB5dGhvbgpmdW5jdGlvbiBjYWxsczoK
MS4gYEZNVENPREVfaHRtbChBUkdTKWA6IGZvcm1hdCBjb2RlIGZvciBpbmplY3Rpb24gb2Yg
cmF3IGBodG1sYApjb2RlIGZvciByZW5kZXJpbmcgYGh0bWxgLWJhc2VkIGRvY3VtZW50cyBp
biBgIVBgLgoyLiBgRk1UQ09ERV9wZGYoQVJHUylgOiBmb3JtYXQgY29kZSBmb3IgaW5qZWN0
aW9uIG9mIHJhdyBgdGV4YApjb2RlIGluIGBwZGZgLWJhc2VkIGRvY3VtZW50cyBpbiBgIVBg
LgoKRHVyaW5nIHByZXByb2Nlc3NpbmcsIGAhTWAgcHJvY2Vzc2VzIGFsbCBmb3JtYXQgY29k
ZXMgZm9yIGVhY2gKZm9ybWF0IGBodG1sYCBhbmQgYHBkZmAgYW5kIGNhY2hlcyB0aGUgb3V0
cHV0LiBCZWZvcmUgcmVuZGVyaW5nCnRoZSBNYXJrZG93biBpbiBvbmUgcGFydGljdWxhciBm
b3JtYXQgdXNpbmcgYCFQYCwgYCFNYCBleHRyYWN0cwp0aGUgcmVzdWx0cyBvZiB0aGUgY29y
cmVzcG9uZGluZyBmb3JtYXQgY29kZXMgYW5kIHNraXBzIHRoZSBvdGhlcnMuCkFkZGl0aW9u
YWwgYHRleGAgcGFja2FnZXMgaGF2ZSB0byBiZSBpbmNsdWRlZCB1c2luZyB0aGUgbWV0YSBk
YXRhCmZpZWxkIGBoZWFkZXItaW5jbHVkZXNgLgoKRm9yIHJldHVybmluZyB0aGUgcmF3IGZv
cm1hdCBjb2RlLCBlaXRoZXIgdGhlIGAhUDFgIHN0YXRlbWVudCBjYW4KYmUgdXNlZCBAc2Vj
Om1kcHJpbnQgKipvcioqIHRoZSBgcmV0dXJuYCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQuCklm
IGJvdGggc3RhdGVtZW50cyBhcmUgbWl4ZWQsIHRoZSBvdXRwdXQgd2hpY2ggaGFkIGJlZW4g
cmV0dXJuZWQKd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgdGV4dCBnZW5lcmF0ZWQgd2l0aCB0
aGUgYCFQMWAgc3RhdGVtZW50LgoKKipFeGFtcGxlKioKYGBgIQoJZGVmIHRlc3QxX2h0bWwo
KToKCQlfKCJUaGlzIGlzIEhUTUwxIGFuZCIpCgkJcmV0dXJuICJpdCBnb2VzIG9uIGhlcmUh
IgoJZGVmIHRlc3QxX3BkZigpOgoJCV9fKCIiIgoJCQlUaGlzIGlzIFx7UERGMVx9IGFuZAoJ
CSIiIikKCWRlZiB0ZXN0Ml9odG1sKCk6CgkJcmV0dXJuICIiIgoJCQlUaGlzIGlzIEhUTUwy
IQoJCSIiIgoJZGVmIHRlc3QyX3BkZigpOgoJCXBhc3MKYGBgCgpgYGBtZApUaGUgb3V0cHV0
IG9mIHRoZSBmb3JtYXQgY29kZSBgXFw/dGVzdDEoKWAgaXMgImBcP3Rlc3QxKClgIiBhbmQK
YFxcP3Rlc3QyKClgIGlzICJgXD90ZXN0MigpYCIgKGluIEhUTUwgaXQgaXMgbm90IGVtcHR5
KS4KYGBgCgpUaGUgb3V0cHV0IG9mIHRoZSBmb3JtYXQgY29kZSBgXD90ZXN0MSgpYCBpcyAi
YD90ZXN0MSgpYCIgYW5kCmBcP3Rlc3QyKClgIGlzICJgP3Rlc3QyKClgIiAoaW4gSFRNTCBp
dCBpcyBub3QgZW1wdHkpLgoKLS0tCgojIGAhTWAgYCFNRGAgRXhhbXBsZXMgeyNzZWM6ZXhh
bXBsZXN9CgojIyBKYXZhU2NyaXB0IGluIGBodG1sYCBhbmQgUGxhY2Vob2xkZXIgaW4gYHBk
ZmAKCldoZW4gY3JlYXRpbmcgYCFNRGAgdGV4dCBmb3IgYGh0bWxgIG91dHB1dCwgdGhlIHVz
ZXIgb2Z0ZW4gd2FudHMKaW50ZXJhY3Rpdml0eSB1c2luZyB3aWRnZXRzIGxpa2Ugc2xpZGVy
cywgY2hlY2sgYm94ZXMsIGRyb3AgZG93biBib3hlcwpldGMuIEhvd2V2ZXIsIHdoZW4gZXhw
b3J0aW5nIGludG8gYHBkZmAgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBiZQpyZXBsYWNlZCB3
aXRoIG5vbi1pbnRlcmFjdGl2ZSBwbGFjZWhvbGRlcnMuIEluIG9yZGVyIHRvIGRldmVsb3Ag
YSBzaW5nbGUKYCFNRGAgZG9jdW1lbnQsIHdoaWNoIGNhbiBiZSByZW5kZXJlZCBpbiBgaHRt
bGAgd2l0aCBpbnRlcmFjdGl2ZQplbGVtZW50cyBhbmQgaW50byBgcGRmYCB3aXRoIHBsYWNl
aG9sZGVyLCB0aGUgYCFNYCBmb3JtYXQgY29kZXMgY2FuIGJlCnVzZWQsIHNlZSBAc2VjOmZv
cm1jb2RlLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhCmA8aW5wdXQgdHlwZT0i
cmFuZ2UiPmAgYW5kIHR3byBgPHNwYW5zPmAgd2l0aCBgaWQ9Im15dmFsImAgYW5kCmBpZD0i
bXlyZXMiYCwgaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSB2YWx1ZSBvZiAkeT1zaW4oeCkkIGlu
IGBodG1sYC4gRm9yCmBwZGZgIG91dHB1dCB0aGUgZXF1YXRpb24gYW5kIHRoZSB2YWx1ZSBy
YW5nZSBpcyBzaG93bi4KCioqRXhhbXBsZSoqCmBgYCEKCWRlZiByYW5nZV9odG1sKCk6CgkJ
X18oIiIiCgkJCSR4XGluIFswJCA8aW5wdXQgdHlwZT0ncmFuZ2UnIHZhbHVlPScwJyBtaW49
JzAnIG1heD0nMTAwJwoJCQlvbmNoYW5nZT0iCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlk
KCdteXZhbCcpLmlubmVySFRNTCA9IHRoaXMudmFsdWU7CgkJCWRvY3VtZW50LmdldEVsZW1l
bnRCeUlkKCdteXJlcycpLmlubmVySFRNTCA9CgkJCU1hdGguc2luKHRoaXMudmFsdWUpOyI+
ICQxMDBdJAoJCSIiIikKCWRlZiByYW5nZV9wZGYoKToKCQlyZXR1cm4gIiR4XGluWzAsMTAw
XSQiCglkZWYgZm9ybXVsYV9odG1sKCk6CgkJX18oIiIiCgkJCSR5PXNpbih4KT0kIDxzcGFu
IGlkPSJteXJlcyI+MC4wMDA8L3NwYW4+CgkJCXdpdGggJHg9JCA8c3BhbiBpZD0ibXl2YWwi
PjA8L3NwYW4+CgkJIiIiKQoJZGVmIGZvcm11bGFfcGRmKCk6CgkJcmV0dXJuICIkeT1zaW4o
eCkkIgpgYGAKCmBgYG1kCiR4JCBhbmQgJHkkIGFyZSByZWxhdGVkIHRvIGVhY2ggb3RoZXIg
YnkgYFw/Zm9ybXVsYSgpYC4KCiR4JCBtdXN0IGJlIGluIHRoZSByYW5nZSBgXD9yYW5nZSgp
YC4KYGBgCgokeCQgYW5kICR5JCBhcmUgcmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGA/Zm9y
bXVsYSgpYC4KCiR4JCBtdXN0IGJlIGluIHRoZSByYW5nZSBgP3JhbmdlKClgLgoKIyMgR2Vu
ZXJhdGUgYSBGaWd1cmUgb24tdGhlLWZseSBkdXJpbmcgUHJlcHJvY2Vzc2luZwoKVGhpcyBz
ZWN0aW9uIGlsbHVzdHJhdGVzIGhvdyBweXRob24gbW9kdWxlcyBjYW4gYmUgdXNlZCB0byBj
cmVhdGUKZG9jdW1lbnQgY29udGVudC4gRG9jdW1lbnQgY29udGVudCBpcyBwbGFjZWQgaW5z
aWRlIHRoZSBgZGF0YS9gCmRpcmVjdG9yeSBvZiB0aGUgY3VycmVudCBwcm9qZWN0IHdvcmtp
bmcgZGlyZWN0b3J5IChyZWZlciB0byBgIU1gCnByb2plY3Qgc3RydWN0dXJlLCBAc2VjOnBy
b2plY3QpCgohW1RoaXMgRmlndXJlIHdhcyBnZW5lcmF0ZWQgdXNpbmcgYCFOVWAgYW5kCmAh
UExgLl0oZmlndXJlMS5wbmcpeyNmaWc6ZmlndXJlMX0KCltgIU5VYF0oaHR0cHM6Ly93d3cu
bnVtcHkub3JnKSBhbmQgW2AhUExgXShodHRwczovL3d3dy5tYXRwbG90bGliLm9yZykKYXJl
IHBvd2VyZnVsIHB5dGhvbiBtb2R1bGVzIGZvciBtYXRoZW1hdGljYWwgY29tcHV0aW5nIGFu
ZCBwbG90CmdlbmVyYXRpb24uIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8g
Z2VuZXJhdGUgQGZpZzpmaWd1cmUxCnVzaW5nIGAhTlVgIGFuZCBgIVBMYCBhbmQgaW5jbHVk
ZSBpdCBpbnRvIHRoZSBkb2N1bWVudC4KCioqRXhhbXBsZSoqCgpgYGAhCglpbXBvcnQgbnVt
cHkgYXMgbnAKCWltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKCUdSRUVLID0gbGFt
YmRhIEE6IGNocihvcmQodSJcdTAzOTEiKSArIG9yZChBKSAtIG9yZCgiQSIpKQoJZ3JlZWsg
PSBsYW1iZGEgYTogY2hyKG9yZCh1Ilx1MDNiMSIpICsgb3JkKGEpIC0gb3JkKCJhIikpCglj
bTJpbmNoID0gbGFtYmRhIHh5OiB0dXBsZShpLzIuNTQgZm9yIGkgaW4geHkpCglmb250c2l6
ZSA9IGludChmb250c2l6ZVs6LTJdKSAjIGNvbnZlcnQgdG8gaW50CglmaWdzaXplID0gY20y
aW5jaChmaWdzaXplKSAjIGNvbnZlcnQgZnJvbSBjbSB0byBpbmNoCglwYXJhbXMgPSB7CgkJ
J2ZpZ3VyZS5maWdzaXplJzogZmlnc2l6ZSwKCQknbGVnZW5kLmZvbnRzaXplJzogZm9udHNp
emUsCgkJJ2F4ZXMubGFiZWxzaXplJzogZm9udHNpemUsCgkJJ2F4ZXMudGl0bGVzaXplJzog
Zm9udHNpemUsCgkJJ3h0aWNrLmxhYmVsc2l6ZSc6IGZvbnRzaXplLAoJCSd5dGljay5sYWJl
bHNpemUnOiBmb250c2l6ZSwKCQknZm9udC5mYW1pbHknOiAnVGltZXMgTmV3IFJvbWFuJwoJ
fQoJcGx0LnJjUGFyYW1zLnVwZGF0ZShwYXJhbXMpCgl4ID0gbnAucmFuZG9tLnJhbmQoNTAp
Cgl5ID0gbnAucmFuZG9tLnJhbmQoNTApCglwbHQuZmlndXJlKCkKCXBsdC5zY2F0dGVyKHgs
IHksIGxhYmVsPSJSYW5kb20gQ29vcmRpbmF0ZXMiKQoJdGV4dCA9ICIiLmpvaW4oW2dyZWVr
KGkpIGZvciBpIGluIFsiYSIsICJiIiwgImMiLCAiZCJdXSkKCXBsdC5hbm5vdGF0ZSh0ZXh0
LCB4eT0oMC41LDAuNSksIHh5dGV4dD0oMC4yNSwwLjI1KSwKCQlhcnJvd3Byb3BzPWRpY3Qo
YXJyb3dzdHlsZT0nLT4nLGx3PTEuNSkpCglwbHQudGl0bGUoIlR3byBSYW5kb20gRGF0YXNl
dHMiKQoJcGx0LnhsYWJlbChyIkRhdGEgIzEgLSAkXG1hdGhkZWZhdWx0eyVzXzF9JCIgJSBH
UkVFSygiQyIpKQoJcGx0LnlsYWJlbChyIkRhdGEgIzIgLSAkXG1hdGhkZWZhdWx0eyVzXzJ9
JCIgJSBHUkVFSygiRCIpKQoJcGx0LmdyaWQoKQoJcGx0LmxlZ2VuZCgpCglwbHQudGlnaHRf
bGF5b3V0KCkKCXBsdC5zYXZlZmlnKCJkYXRhL2ZpZ3VyZTEucG5nIiwgZHBpPWZpZ2RwaSkK
CXBsdC5jbG9zZSgiYWxsIikKYGBgCgpgYGBtZAohW1RoaXMgRmlndXJlIHdhcyBnZW5lcmF0
ZWQgdXNpbmcgYCFOVWAKYW5kIGAhUExgLl0oZmlndXJlMS5wbmcpeyNmaWc6ZmlndXJlMX0K
YGBgCgojIyBHZW5lcmF0ZSBhIFNlcXVlbmNlIG9mIEZpZ3VyZXMgb24tdGhlLWZseQoKVGhp
cyBzZWN0aW9uIGlsbHVzdHJhdGVzIGhvdyBhIHNlcXVlbmNlIG9mIGNvbXBsZXggZmlndXJl
cyBjYW4gYmUKZ2VuZXJhdGVkIHVzaW5nIGAhTlVgIGFuZCBgIVBMYCBhbmQgaG93IHRoZSBm
aWd1cmVzIGFyZSBmb3JtYXR0ZWQKdXNpbmcgcHl0aG9uIGFuZCByZWZlcmVuY2VkIHVzaW5n
IGAhTWAuCgpTdXBwb3NlIG9uZSBleHBlcmltZW50IHdoaWNoIGNhbiBiZSBydW4gaW4gZm91
ciBkaWZmZXJlbnQgc2V0dXBzIHdpdGgKZGlmZmVyZW50IHZhbHVlcyBmb3IgJFxsYW1iZGE9
JApgISIsICIuam9pbihbIiglZCkgJCUuMmYkbm0iJShrLCAxMjUuMzMqaykgZm9yIGsgaW4g
cmFuZ2UoMSwgNSldKWAuCkVhY2ggcnVuIG9mIHRoZSBleHBlcmltZW50IHVzaW5nIHNldHVw
ICgxKS0tKDQpLCB0d28gYWRkaXRpb25hbApwYXJhbWV0ZXJzICRcdmFyZXBzaWxvbiQgYW5k
ICRcYWxwaGEkIGFyZSB2YXJyaWVkIGJldHdlZW4KJDEwLjJcbGRvdHMzMC42XCUkIGFuZCAk
MC4xXGxkb3RzMC4zJEh6IHJlc3BlY3RpdmVseS4KClRoZSByZXN1bHRzIG9mIHRoZSBleHBl
cmltZW50cyBmb3IgdGhlIHNldHVwcyAoMSktLSg0KSBhcmUgc3VtbWFyaXplZAppbiB0aGUg
QGZpZzpmaWd1cmUyXzEsICFAZmlnOmZpZ3VyZTJfMiwgIUBmaWc6ZmlndXJlMl8zIGFuZAoh
QGZpZzpmaWd1cmUyXzQuCgoqKkV4YW1wbGUqKgoKYGBgIQoJbiA9IDEwMAoJYWxwaGEgPSB1
Ilx1MDNiMSIKCWVwc2lsb24gPSB1Ilx1MDNiNSIKCWxhbWRhID0gdSJcdTAzYmIiCglmID0g
bGFtYmRhIHgsIGEsIGI6IGEqKG5wLnNxcnQoeCkrYipucC5zaW4oeCpiKSkKCWcgPSBsYW1i
ZGEgeCwgYSAsYiwgYzogbnAuZmFicyhmKHgsIGEsIGIpIC0gZihjLCBhLCBiKSkgKyBjCglk
YXQgPSBucC56ZXJvcygobi0xLCAzLCAzLCA0KSwgZHR5cGU9bnAuZmxvYXQzMikKCWNvbHMg
PSBbInJlZCIsICJncmVlbiIsICJibHVlIl0KCW1hcmsgPSBbIm8iLCAieCIsICI8Il0KCXgg
PSBucC5hcnJheShbNTAuKngvbiBmb3IgeCBpbiByYW5nZSgxLCBuKV0sIGR0eXBlPW5wLmZs
b2F0MzIpCglmb3IgaywgYyBpbiBlbnVtZXJhdGUoWzEwLiwgMjAuLCAzMC4sIDQwLl0pOgoJ
CWZvciBpLCBhIGluIGVudW1lcmF0ZShbMSwgMiwgNF0pOgoJCQlmb3IgaiwgYiBpbiBlbnVt
ZXJhdGUoWzAuMiwgMC40LCAwLjZdKToKCQkJCWRhdFs6LCBpLCBqLCBrXSA9IGcoeCwgYSwg
YiwgYykKCQlwbHQuZmlndXJlKCkKCQlmb3IgaiBpbiByYW5nZSgzKToKCQkJZm9yIGkgaW4g
cmFuZ2UoMyk6CgkJCQlsYWJlbF9pID0gIiVzPSUuMWYlJSIgJSAoZXBzaWxvbiwgKGkrMSkq
MTAuMikgXAoJCQkJCWlmIGogPT0gMCBlbHNlIE5vbmUKCQkJCWxhYmVsX2ogPSAiJXM9JS4x
Zkh6IiAlIChhbHBoYSwgKGorMSkvMTAuKSBcCgkJCQkJaWYgaSA9PSAwIGVsc2UgTm9uZQoJ
CQkJeSA9IGRhdFs6LCBpLCBqLCBrXS5mbGF0dGVuKCkKCQkJCXBsdC5wbG90KHgsIHksIGNv
bG9yPWNvbHNbaV0sIGx3PTAuNzUsIGxhYmVsPWxhYmVsX2kpCgkJCQlwbHQuc2NhdHRlcih4
WzE6OjRdLCB5WzE6OjRdLCBjb2xvcj0iYmxhY2siLAoJCQkJCW1hcmtlcj1tYXJrW2pdLCBs
dz0wLjUsIHM9NSwgbGFiZWw9bGFiZWxfaikKCQlrID0gayArIDEKCQlrdmFsID0gayoxMjUu
MzMKCQlwbHQudGl0bGUoIkV4cGVyaW1lbnQgU2V0dXAgIyVkOiAlcz0lLjJmbm0iICUgKGss
IGxhbWRhLCBrdmFsKSkKCQlwbHQueGxhYmVsKCJUaW1lIFtzXSIpCgkJcGx0LnlsYWJlbCgi
SW50ZW5zaXR5IFtrZy9zwrNdIikKCQlwbHQuZ3JpZCgpCgkJcGx0LmxlZ2VuZCgpCgkJcGx0
LnRpZ2h0X2xheW91dCgpCgkJcGx0LnNhdmVmaWcoImRhdGEvZmlndXJlMi0lZC5wbmciICUg
aywgZHBpPWZpZ2RwaSkKCQlwbHQuY2xvc2UoImFsbCIpCgkJX18oZiIiIgoJCQkhW1RoaXMg
aXMgdGhlIHJlc3VsdCBvZiB0aGUgZXhwZXJpbWVudCBhY2NvcmRpbmcKCQkJdG8gdGhlIHNl
dHVwICN7a30gd2l0aCAke2xhbWRhfT17a3ZhbH0kbm0uIFRoZSBwYXJhbWV0ZXJzCgkJCSR7
ZXBzaWxvbn0kIGFuZCAke2FscGhhfSQgYXJlIHZhcnJpZWQgYmV0d2VlbgoJCQkkMTAuMlxs
ZG90czMwLjZcJSQgYW5kICQwLjFcbGRvdHMwLjMkSHoKCQkJcmVzcGVjdGl2ZWx5Ll0oZmln
dXJlMi17a30ucG5nKXt7I2ZpZzpmaWd1cmUyX3trfX19CgoJCSIiIikKYGBgCgotLS0KCipU
aGFua3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCgotLS0KCiMgUmVmZXJl
bmNlcwo=
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmA/eDowNWRgfGA/eTouNGZgCg==
'''
pack_marky_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIERvY3VtZW50YXRpb24uCj4gVGhpcyBkb2N1
bWVudCByZXByZXNlbnRzIHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nl
c3NpbmcgcHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+
IEZvciBkb2N1bWVudGF0aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4g
W2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5
KS4KCi0tLQoKYGBgcHl0aG9uCiEhISBtYXJreS5tZCByYXcgPj4xCmBgYAo=
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpoZWFkZXItaW5jbHVkZXMtLXBkZjoK
ICAgXHVzZXBhY2thZ2V7bXVsdGljb2x9CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFs
c2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1Mv
VS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6
aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNh
cGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3Qq
KiAtLSBUaGlzIGlzIGEgYG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvcgo+IGlsbHVz
dHJhdGluZyBgbWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhlIGBt
YXJreWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJl
XShxdWljay1zcmMuPz8/KS4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkCj4gcGxl
YXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHVi
LmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCiMgSW50cm9kdWN0aW9uCgpUaGlzIGlzIGEg
YG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvciBpbGx1c3RyYXRpbmcgYG1hcmt5YCBt
YXJrdXAKdXNpbmcgc2ltcGxlIGV4YW1wbGVzLiBUaGlzIGRvY3VtZW50IGlzIHRoZSByZW5k
ZXJlZCB2ZXJzaW9uIG9mCnRoZSBzb3VyY2UgY29kZSBwcmVzZW50ZWQgW2hlcmVdKHF1aWNr
LXNyYy4/Pz8pLiBUaGUgYG1hcmt5YCBtYXJrdXAKaXMgY29tcGF0aWJsZSB3aXRoIHN0YW5k
YXJkIE1hcmtkb3duIGFuZCBjYW4gYmUgcmVhZCBhcy1pcy4KVGhpcyBkb2N1bWVudCByZXBy
ZXNlbnRzIHRoZSBvdXRwdXQgb2YgYG1hcmt5YCBhZnRlciBwcm9jZXNzaW5nCnB5dGhvbiBj
b2RlLCB3aGljaCBpcyBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNlbGYuCkluIG9y
ZGVyIHRvIHVuZGVyc3RhbmQgdGhlIGV4YW1wbGVzIGFuZCBzZWUgdGhlIGNvbXBsZXRlCmBt
YXJreWAgc3ludGF4LCB0aGUgc291cmNlIGNvZGUgb2YgdGhpcyBmaWxlIGNhbiBiZSByZWFk
CltoZXJlXShxdWljay1zcmMuPz8/KS4gVGhlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gb2Yg
YG1hcmt5YAppcyBhdmFpbGFibGUgW2hlcmVdKG1hcmt5Lj8/PykKCi0tLQoKIyBNYXJrZG93
bgoKYG1hcmt5YCBpcyBhIE1hcmtkb3duIHByZXByb2Nlc3NvciBhbGxvd2luZyB0byB0cmFu
c2Zvcm0gTWFya2Rvd24KdGV4dCB1c2luZyBweXRob24uIFRoZSBwcmVwcm9jZXNzZWQgTWFy
a2Rvd24gdGV4dCBpcyByZW5kZXJlZCB0byBgcGRmYAphbmQgYGh0bWxgIChvdGhlciBmb3Jt
YXRzIHVzaW5nIGBwYW5kb2NgKS4gYHBhbmRvY2AgaGFzIGEgcG93ZXJmdWwgc2V0Cm9mIE1h
cmtkb3duIGV4dGVuc2lvbnMgc3VwcG9ydGluZyBzdHJ1Y3R1cmVkIHdyaXRpbmcgYXMgd2Vs
bCBhcwpiaWJsaW9ncmFwaHksIGZpZ3VyZSByZWZlcmVuY2luZywgdGFibGUgcmVmZXJlbmNp
bmcsIHRleC1zdHlsZQplcXVhdGlvbnMgd2l0aCByZWZlcmVuY2luZyBldGMuIChyZWZlciB0
byBTY2llbnRpZmljIFdyaXRpbmcgaW4KTWFya2Rvd24sIFtgbWFya3lgIERvY3VtZW50YXRp
b25dKG1hcmt5Lj8/PykpLgoKVGhlIHJlbmRlcmluZyBvZiBNYXJrZG93biB0ZXh0IGludG8g
YGh0bWxgIGFuZCBgcGRmYCBjb25zaXN0cyBvZiB0aHJlZQpzdGVwcyB3aGljaCBhcmUgaWxs
dXN0cmF0ZWQgdXNpbmcgdGhlIGBtYXJreWAgZG9jdW1lbnRhdGlvbgpgbWQvbWFya3kubWRg
LgoKMS4gKlByZXByb2Nlc3NpbmcqIFwKICAgKHByb2Nlc3MgYG1hcmt5YCBtYXJrdXAsIHJ1
biBjb2RlLCBnZW5lcmF0ZSBjb250ZW50KQoJKiBJbnB1dDogYG1hcmt5YCBNYXJrZG93biB0
ZXh0OiBgbWQvbWFya3kubWRgCgkqIE91dHB1dDogcGFuZG9jIE1hcmtkb3duIHRleHQ6IGBi
dWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcqIFwKCShhcHBseSBmb3JtYXQgc3BlY2lmaWMg
Y29kZSBmb3IgYGh0bWxgIGFuZCBgcGRmYCkKCSogSW5wdXQ6IHBhbmRvYyBNYXJrZG93biB0
ZXh0OiBgYnVpbGQvbWFya3kubWRgCgkqIE91dHB1dAoJMS4gcGFuZG9jIE1hcmtkb3duIHRl
eHQgZm9yIGBodG1sYDogYGJ1aWxkL21hcmt5Lmh0bWwubWRgCgkyLiBwYW5kb2MgTWFya2Rv
d24gdGV4dCBmb3IgYHBkZmA6IGBidWlsZC9tYXJreS5wZGYubWRgCjMuICpSZW5kZXJpbmcq
IFwKICAgKHJlbmRlciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50IHVzaW5nIGBwYW5kb2Ng
KQoJKiBJbnB1dAoJMS4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBodG1sYDogYGJ1aWxk
L21hcmt5Lmh0bWwubWRgCgkyLiBwYW5kb2MgTWFya2Rvd24gdGV4dCBmb3IgYHBkZmA6IGBi
dWlsZC9tYXJreS5wZGYubWRgCgkqIE91dHB1dAoJMS4gYGh0bWxgIGRvY3VtZW50OiBgaHRt
bC9tYXJreS5odG1sYAoJMi4gYHBkZmAgZG9jdW1lbnQ6IGBwZGYvbWFya3kucGRmYAoKVGhl
IHdob2xlIHByb2Nlc3MgaXMgZWNhcHN1bGF0ZWQgaW50byBhIHB5dGhvbiBzY3JpcHQgYW5k
IGEgTWFrZWZpbGUuClJlbmRlcmluZyBkb2N1bWVudHMgdXNpbmcgYG1hcmt5YCByZXF1aXJl
cyB0byB3cml0ZSBNYXJrZG93biB0ZXh0CmFuZCBydW4gYG1ha2UgYWxsYC4KCi0tLQoKIyBB
dXRvbWF0ZWQgUmVwb3J0aW5nCgpNYXJrZG93biB0ZXh0IHdpdGggZW1iZWRkZWQgY29kZSBz
bmlwcGV0cyBpcyBhIHBvd2VyZnVsIHBhcmFkaWdtIGZvcgphdXRvbWF0ZWQgdGVjaG5pY2Fs
IGFuZCBzY2llbnRpZmljIHJlcG9ydGluZyBhbmQgcG9zc2libHkgb3RoZXIKZG9jdW1lbnRz
LiBPbiBvbmUgaGFuZCBkYXRhIGNhbiBiZSBvcmdhbml6ZWQgYWNjb3JkaW5nIHRvIHRoZSBk
b2N1bWVudApzdHJ1Y3R1cmUgdXNpbmcgYWxnb3JpdGhtcyBlbWJlZGRlZCBpbiB0aGUgcmVw
b3J0IGl0c2VsZiwgYW5kIG9uIHRoZQpvdGhlciBoYW5kIHRoZSBkYXRhIGNhbiBiZSBpbnNl
cnRlZCBpbiB0aGUgcmVwb3J0IGRpcmVjdGx5IGZyb20KdmFyaWFibGVzLiBUaGlzIGVsbGlt
aW5hdGVzIHRoZSBuZWVkIGZvciBtYW51YWwgY29weWluZyBvZiBkYXRhIGludG8KdGhlIHRl
eHQgYW5kIGFsbG93cyB0byB1cGRhdGUgb3IgcmVwcm9kdWNlIHRoZSByZXBvcnQgYXV0b21h
dGljYWxseQpmb3IgdGhlIHNhbWUgYW5kIG90aGVyIGRhdGEuIFVzaW5nIHRoZSBzaW1wbGUg
YG1hcmt5YCBzeW50YXggdGhlIHVzZXIKY2FuIGNvbmNlbnRyYXRlIG9uIGRvY3VtZW50YXRp
b24gd3JpdGluZyBmcm9tIHRoZSBNYXJrZG93biBwZXJzcGVjdGl2ZQphbmQgYXNzaXN0IHRo
ZSBjcmVhdGlvbiBvZiBkb2N1bWVudCBjb250ZW50IHVzaW5nIHB5dGhvbiBjb2RlCnNuaXBw
ZXRzLgoKYHBhbmRvY2AgZmlsdGVycyAocmVmZXIgdG8gUmVsYXRlZCBXb3JrLCBbYG1hcmt5
YCBEb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pKQphbGxvdyB0cmFuc2Zvcm1pbmcgdGhlIGRv
Y3VtZW50IHdoaWxlIHJlbmRlcmluZyBpdC4gYHBhbmRvY2AgZmlsdGVycwpvcGVyYXRlIG9u
IGFuIGludGVybmFsIGFic3RyYWN0IHN5bnRheCB0cmVlIChBU1QpIHJlcHJlc2VudGF0aW9u
LAp0aGVyZWZvcmUgdGhlIHVzZXIgbXVzdCBleHByZXNzIGR5bmFtaWNhbGx5IGNyZWF0ZWQg
ZG9jdW1lbnQgY29udGVudAphcyBub2RlcyBpbiB0aGUgZm9ybWF0IG9mIHRoZSBBU1QuIGBt
YXJreWAgdGFrZXMgYSBzbGlnaHQgZGlmZmVyZW50CmFwcHJvYWNoIGFuZCBvcGVyYXRlcyBv
biB0aGUgTWFya2Rvd24gdGV4dCBpdHNlbGYsIGJlZm9yZSBpdCBpcyBwYXJzZWQKYW5kIHJl
bmRlcmVkLgoKUHl0aG9uIGNvZGUgaXMgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgd2l0
aCBhIHNpbXBsZSBtYXJrdXAgc3ludGF4CnNpbWlsYXIgdG8gW1JtYXJrZG93bl0oaHR0cHM6
Ly93d3cucm1hcmtkb3duLm9yZykKdXNpbmcgY29kZSBibG9ja3MgYW5kIGlubGluZSBleHBy
ZXNzaW9ucy4gYG1hcmt5YCBwYXJzZXMgdGhlIGNvZGUsCmV4ZWN1dGVzIGl0IGFuZCB3cml0
ZXMgdGhlIHJlc3VsdHMgYmFjayBpbnRvIHRoZSBNYXJrZG93biB0ZXh0LiBUaGUKY29kZSBj
YW4gcHJvZHVjZSBvdXRwdXQgdXNpbmcgYWxnb3JpdGhtcyBvciBvdXRwdXQgZm9ybWF0dGVk
IHN0cmluZwp2YXJpYWJsZXMuIGBtYXJreWAgYWxzbyBhbGxvd3MgZm9yIHRoZSBpbnNlcnRp
b24gb2YgZm9ybWF0IGRlcGVuZGVudApyYXcgY29kZSBpbiBgaHRtbGAgYW5kICp0ZXgqIChm
b3IgYHBkZmAgIGRvY3VtZW50cykuCgoxLiBjb2RlIHNuaXBwZXRzIGFyZSBlbWJlZGRlZCBp
bnRvIHRoZSBkb2N1bWVudCB0ZXh0CjIuIGNvZGUgc25pcHBldHMgYXJlIGV4ZWN1dGVkIGR1
cmluZyBwcmVwcm9jZXNzaW5nCjMuIGNvZGUgcHJvZHVjZXMgdGV4dCBmb3IgdGhlIE1hcmtk
b3duIGRvY3VtZW50CjQuIGNvZGUgdmFyaWFibGVzIGFyZSBkaXNwbGF5ZWQgaW4gdGhlIGRv
Y3VtZW50IHRleHQKNS4gZm9ybWF0IGRlcGVuZGVudCBjb2RlIGlzIGFwcGxpZWQgZm9yIGBo
dG1sYCBhbmQgYHBkZmAKCi0tLQoKIyBEb3dubG9hZCBhbmQgUnVuIGBtYXJreWAKCmBtYXJr
eWAgaXMgTWFya2Rvd24gcHJlcHJvY2Vzc29yIGFsbG93aW5nIHRvIGV4ZWN1dGUgZW1iZWRk
ZWQgcHl0aG9uCmNvZGUgaW4gTWFya2Rvd24gZG9jdW1lbnRzLiBBZnRlciBwcmVwcm9jZXNz
aW5nLCBhIHJlZ3VsYXIgTWFya2Rvd24KZmlsZSBpcyBwcmVzZW50LCB3aGljaCBpcyByZW5k
ZXJlZCBpbnRvIGBodG1sYCBhbmQgYHBkZmAgdXNpbmcKYHBhbmRvY2AuIGBtYXJreWAgaGFu
ZGxlcyBhbGwgdGhpcyBzdGVwcyB1c2luZyBhIE1ha2VmaWxlLgpgbWFya3lgIGlzIGEgc2lu
Z2xlLWZpbGUgc2NyaXB0IHdoaWNoIGRlcGVuZHMgb24gYHB5dGhvbmAgKD49My42KSwKYHBh
bmRvY2AgKD49Mi4xMSksIGBweXlhbWxgIGFuZCBgcGFuZG9jLXhub3NgLgoKKipJbnN0YWxs
aW5nIERlcGVuZGVuY2llcyoqCgpgcGFuZG9jYCBiaW5hcmllcyBmb3IgRGViaWFuLWJhc2Vk
IExpbnV4IGFyZSByZWxlYXNlZApbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pnbS9wYW5k
b2MvcmVsZWFzZXMpLgpgcHl5YW1sYCBpcyBpbnN0YWxsZWQgdXNpbmcgdGhlIGxpbnV4IHBh
Y2thZ2UgbWFuYWdlciBvciBgcGlwYCBhbmQKYHBhbmRvYy14bm9zYCBjb25zaXN0cyBvZiB0
aGUgY29tcG9uZW50cyBgZmlnbm9zYCwgYHNlY25vc2AsIGBlcW5vc2AKYW5kIGB0YWJsZW5v
c2Agd2hpY2ggYXJlIGluc3RhbGxlZCB1c2luZyBgcGlwYC4gRGVwZW5kaW5nIG9uIHRoZQps
aW51eCBpbnN0YWxsYXRpb24gbWF5YmUgYHBpcDNgIGhhcyB0byBiZSB1c2VkLgoKYGBgYmFz
aApwaXAgaW5zdGFsbCBweXlhbWwKcGlwIGluc3RhbGwgcGFuZG9jLWZpZ25vcwpwaXAgaW5z
dGFsbCBwYW5kb2Mtc2Vjbm9zCnBpcCBpbnN0YWxsIHBhbmRvYy1lcW5vcwpwaXAgaW5zdGFs
bCBwYW5kb2MtdGFibGVub3MKYGBgCgoqKkRvd25sb2FkIGBtYXJreWAgU2NyaXB0KioKCmBt
YXJreWAgaXMgZG93bmxvYWRlZCB1c2luZyB0aGUgZm9sbG93aW5nIGNvbW1hbmRzLgoKYGBg
YmFzaApjZCAkSE9NRQpnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21h
cmt5LmdpdApjZCBtYXJreQpgYGAKCkFsdGVybmF0aXZlbHksIG1hcmt5IGNhbiBiZSBvYnRh
aW5lZCBkaXJldGx5IHdpdGhvdXQgYGdpdGA6CgpgYGBiYXNoCmNkICRIT01FCm1rZGlyIG1h
cmt5CmNkIG1hcmt5CndnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2xl
aG1hbm43L21hcmt5L21haW4vbWFya3kucHkKY2htb2QgK3ggbWFya3kucHkKYGBgCgoqKklu
aXRpYWxpemUgYG1hcmt5YCBFbnZpcm9ubWVudCoqCgpUaGUgYG1hcmt5YCBlbnZpcm9ubWVu
dCBjb25zaXN0cyBvZiB0aGUgTWFrZWZpbGUgYW5kIHRoZSBkb2N1bWVudGF0aW9uLgpUaGUg
YG1hcmt5YCBNYWtlZmlsZSwgZG9jdW1lbnRhdGlvbiBhbmQgcXVpY2tzdGFydCBhcmUgdW5w
YWNrZWQgZnJvbQp0aGUgYG1hcmt5LnB5YCBzY3JpcHQgZmlsZSBpbnRvIHRoZSBjdXJyZW50
IHdvcmtpbmcgZGlyZWN0b3J5LgpUaGUgYG1hcmt5YCBlbnZpcm9ubWVudCBpcyBpbml0aWFs
aXplZCB1c2luZyB0aGUgZm9sbG93aW5nIGNvbW1hbmRzLgoKYGBgYmFzaApjZCAkSE9NRQpj
ZCBtYXJreQouL21hcmt5LnB5IC0taW5pdApXUklURSAuL21kL21hcmt5Lm1kCldSSVRFIC4v
bWQvbWFya3kubWRpCldSSVRFIC4vbWQvbWFya3ktc3JjLm1kCldSSVRFIC4vbWQvcXVpY2tz
dGFydC5tZApXUklURSAuL21kL3F1aWNrLXNyYy5tZApXUklURSAuL21kL2V4YW1wbGUubWQK
V1JJVEUgLi9tZC9leGFtcGxlLXNyYy5tZApXUklURSAuL2RhdGEvbWFya3kuYmliClVTQUdF
CjEuIGBtYWtlIGhlbHBgCjIuIGBtYWtlIGFsbC1odG1sIGh0dHBkYAozLiBgbWFrZSBhbGwt
cGRmYApgYGAKCkR1cmluZyBpbml0aWFsaXphdGlvbiBgbWFya3lgIGNyZWF0ZXMgdHdvIGRp
cmVjdG9yaWVzIGBtZC9gIGFuZCBgZGF0YS9gLgpgbWQvYCBpcyB0aGUgZGlyZWN0b3J5IHdo
aWNoIGNvbnRhaW5zIHRoZSBNYXJrZG93biB0ZXh0IHRvIGJlIHJlbmRlcmVkCmludG8gYGh0
bWxgIGFuZCBgcGRmYC4gYGRhdGEvYCBpcyB0aGUgcmVzb3VyY2UgZGlyZWN0b3J5IHdoaWNo
IGNvbnRhaW5zCmJpYmxpb2dyYXBoeSwgaW1hZ2VzLCB2aWRlb3MgYW5kIG90aGVyIGFzc2V0
cy4KCioqUmVuZGVyIERvY3VtZW50YXRpb24gYW5kIEV4YW1wbGVzKioKCklmIGFsbCBkZXBl
bmRlbmNpZXMgaGF2ZSBiZWVuIGluc3RhbGxlZCBhY2NvcmRpbmdseSBhbmQgdGhlIGBtYXJr
eWAKZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQsIGBtYXJreWAgY2FuIGJlIHVzZWQgdG8g
cmVuZGVyIGEgbG9jYWwKY29weSBvZiB0aGUgZG9jdW1lbnRhdGlvbiwgdGhlIHF1aWNrc3Rh
cnQgYW5kIHRoZSBleGFtcGxlLgoKVGhlIGZvbGxvd2luZyBjb21tYW5kcyByZW5kZXIgdGhl
IE1hcmtkb3duIHRleHQgb2YgdGhlIGRvY3VtZW50YXRpb24uCgpgYGBiYXNoCmNkICRIT01F
CmNkIG1hcmt5Cm1ha2UgYWxsLXBkZgptYWtlIGFsbC1odG1sCmBgYAoKRHVyaW5nIGBtYWtl
YCBhIG5ldyBkaXJlY3RvcnkgYGJ1aWxkL2AgaXMgY3JlYXRlZCwgd2hpY2ggY29udGFpbnMK
dGVtcG9yYXJ5IGZpbGVzIChwcmVwcm9jZXNzZWQgTWFya2Rvd24gdGV4dCwgbGlua2VkIHRl
eHQgZm9yIGBodG1sYAphbmQgYHBkZmApLiBUaGUgcmVzdWx0aW5nIGBodG1sYCBhbmQgYHBk
ZmAgZG9jdW1lbnRzIGFyZSBwbGFjZWQgaW5zaWRlCmBodG1sL2AgYW5kIGBwZGYvYC4gRm9y
IHJlbmRlcmluZyBgcGRmYCBhIHRleCBlbnZpcm9ubWVudCBsaWtlCmB0ZXhsaXZlYCBuZWVk
cyB0byBiZSBpbnN0YWxsZWQuIEZvciByZW5kZXJpbmcgdGhlIGBodG1sYCBkb2N1bWVudHMs
CmBwYW5kb2NgIHJlcXVpcmVzIGludGVybmV0IGFjY2VzcywgYmVjYXVzZSBqYXZhIHNjcmlw
dHMgYW5kIHN0eWxlCnNoZWV0cyBhcmUgZmV0Y2hlZCBmcm9tIGNvbnRlbnQgZGVsaXZlcnkg
bmV0d29ya3MuCgoqKmBtYXJreWAgTWFrZWZpbGUqKgoKVGhlIGBtYXJreWAgTWFrZWZpbGUg
Y29vcmRpbmF0ZXMgdGhlIHRocmVlIHN0ZXBzIG9mIHRoZSBgbWFya3lgCmRvY3VtZW50IHBy
b2Nlc3NpbmcgcGlwZWxpbmU6IHByZXByb2Nlc3NpbmcsIGxpbmtpbmcgYW5kIHJlbmRlcmlu
Zy4KVGhlIGBtYXJreWAgTWFrZWZpbGUgc3VwcG9ydHMgc2V2ZXJhbCB0YXJnZXRzIGZvciBk
aXNwbGF5aW5nIGhlbHAKb3IgcmVuZGVyaW5nIGFsbCwgbXVsdGlwbGUgb3Igc3BlY2lmaWMg
ZG9jdW1lbnRzLgoKKk1ha2VmaWxlIFRhcmdldHMqCgoxLiBgbWFrZSBoZWxwYDogZGlzcGxh
eSBoZWxwIG1lc3NhZ2Ugb24gdGhlIGNvbnNvbGUKMi4gYG1ha2UgY2hlYXRgOiBkaXNwbGF5
IHRoZSBgbWFya3lgIG1hcmt1cCBDaGVhdCBTaGVldAozLiBgbWFrZSBzY2FuYDogc2NhbiBm
b3IgbmV3IGRvY3VtZW50cyBgbWQvKi5tZGAgYW5kIHVwZGF0ZSBNYWtlZmlsZQo0LiBgbWFr
ZSBhbGxgOiByZW5kZXIgYWxsIGRvY3VtZW50cyBgbWQvKi5tZGAgaW50byBgaHRtbGAgYW5k
IGBwZGZgCjUuIGBtYWtlIGFsbC1wZGZgOiByZW5kZXIgYWxsIGRvY3VtZW50cyBgbWQvKi5t
ZGAgaW50byBgcGRmYAo2LiBgbWFrZSBhbGwtaHRtbGA6IHJlbmRlciBhbGwgZG9jdW1lbnRz
IGBtZC8qLm1kYCBpbnRvIGBodG1sYAo3LiBgbWFrZSBodHRwZGA6IHN0YXJ0IHB5dGhvbiB3
ZWJzZXJ2ZXIgaW4gYGh0bWwvYAo4LiBgbWFrZSBjbGVhbmA6IHJlbW92ZSBhbGwgZmlsZXM6
IGBidWlsZC8qYCwgYHBkZi8qYCwgYGh0bWwvKmAKCipNYWtlIFNpbmdsZSBEb2N1bWVudCoK
CldoZW4gcnVubmluZyBgbWFrZSBhbGxgLCBgbWFya3lgIHJlbmRlcnMgYWxsIGRvY3VtZW50
cywgd2hpY2ggY2FuCmJlIHVuZGVzaXJhYmxlIGlmIG9ubHkgb25lIHBhcnRpY3VsYXIgZG9j
dW1lbnQgc2hhbGwgYmUgcmVuZGVyZWQuCkJ5IGBtYWtlIHNjYW5gLCBgbWFya3lgIHNjYW5z
IHRoZSBkaXJlY3RvcnkgYG1kLyoubWRgIGZvciBuZXcgTWFya2Rvd24KZG9jdW1lbnRzIHRv
IGJlIHByb2Nlc3NlZC4gRm9yIGVhY2ggZG9jdW1lbnQsIHdoaWNoIGhhcyBiZWVuIGZvdW5k
LApgbWFya3lgIHNldHMgdXAgYWxpYXMgdGFyZ2V0cyBpbiBvcmRlciB0byBkZWJ1ZyB0aGUg
cHJlcHJvY2Vzc2luZywKbGlua2luZyBhbmQgcmVuZGVyaW5nIG9mIHRoaXMgZG9jdW1lbnQu
CgpBc3N1bWluZyB0aGUgZG9jdW1lbnQgYG1kL21hcmt5Lm1kYCBzaGFsbCBiZSByZW5kZXJl
ZCBzdGVwIGJ5IHN0ZXAsCmBtYXJreWAgaW50cm9kdWNlcyB0aGUgZm9sbG93aW5nIHRhcmdl
dHMuCgoxLiAqUHJlcHJvY2Vzc2luZyo6IGBtYWtlIG1kLW1hcmt5YCBcCgkqIGBtZC9tYXJr
eS5tZGAgLT4gYGJ1aWxkL21hcmt5Lm1kYAoyLiAqTGlua2luZyBgaHRtbGAqOiBgbWFrZSBs
aHRtbC1tYXJreWAgXAoJKiBgYnVpbGQvbWFya3kubWRgIC0+IGBidWlsZC9tYXJreS5odG1s
Lm1kYAozLiAqTGlua2luZyBgcGRmYCo6IGBtYWtlIGxwZGYtbWFya3lgIFwKCSogYGJ1aWxk
L21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kucGRmLm1kYAo0LiAqUmVuZGVyaW5nIGBodG1s
YCo6IGBtYWtlIGh0bWwtbWFya3lgCgkqIGBidWlsZC9tYXJreS5odG1sLm1kYCAtPiBgaHRt
bC9tYXJreS5odG1sYAo1LiAqUmVuZGVyaW5nIGBwZGZgKjogYG1ha2UgcGRmLW1hcmt5YAoJ
KiBgYnVpbGQvbWFya3kucGRmLm1kYCAtPiBgcGRmL21hcmt5LnBkZmAKCi0tLQoKIyBXcml0
ZSBBIE5ldyBEb2N1bWVudAoKSW4gb3JkZXIgdG8gcmVuZGVyIGEgbmV3IGRvY3VtZW50IHRo
ZSBNYXJrZG93biB0ZXh0IG5lZWRzIHRvIGJlIHNhdmVkCnRvIGEgZmlsZSBsb2NhdGVkIGlu
IGBtZC9leGFtcGxlLm1kYCB3aGljaCBjYW4gYmUgZm91bmQgcmVuZGVyZWQKW2hlcmVdKGV4
YW1wbGUuPz8/KS4gVGhlIGZvbGxvd2luZyBNYXJrZG93biBzbmlwcGV0CmNhbiBiZSB1c2Vk
IGFzIGEgc3RhcnRpbmcgcG9pbnQuCgpgYGB5YW1sCiEhISBleGFtcGxlLm1kIHJhdyA+PjEK
YGBgCgotLS0KCiMgQ29kZSBCbG9ja3MKCkNvZGUgYmxvY2tzIGFyZSBlbWJlZGRlZCBpbiBN
YXJrZG93biB1c2luZyBmZW5jZWQgY29kZSB1c2luZwplaXRoZXIgdGhlIGBcIWAgb3IgYFwh
IWAgZmxhZyBmb3IgZGlzcGxheWVkIGFuZCBoaWRkZW4gY29kZQpyZXNwZWN0aXZlbHkuCgpg
YGB0ZXh0CiAgICBgYGBcIQoJQ09ERV9CTE9DS19TSE9XTgogICAgYGBgCgogICAgYGBgXCEh
CglDT0RFX0JMT0NLX0hJRERFTgogICAgYGBgCmBgYAoKKipEaXNwbGF5IGFuZCBFeGVjdXRl
IENvZGUqKgoKVGhpcyBjb2RlIGJsb2NrIGFubm90YXRlZCB3aXRoIGAhYCBpcyBkaXNwbGF5
ZWQgYW5kIGV4ZWN1dGVkLgoKYGBgIQoJaW1wb3J0IG1hdGgKCXggPSBtYXRoLnNxcnQoMikK
YGBgCgoqKkV4ZWN1dGUgQ29kZSB3aXRob3V0IERpc3BsYXkqKgoKVGhlIGNvZGUgYmxvY2sg
YW5ub3RhdGVkIHdpdGggYCFgIGlzIG5vdCBkaXNwbGF5ZWQsIGJ1dCBleGVjdXRlZC4KCmBg
YCEhCgl5ID0geCArIDEKYGBgCgoqKkRpc3BsYXkgQ29kZSBidXQgZG8gbm90IEV4ZWN1dGUq
KgoKVGhpcyBjb2RlIGJsb2NrIGlzIGRpc3BsYXllZCBhcyBweXRob24sIGJ1dCBub3QgZXhl
Y3V0ZWQuCgpgYGBweXRob24KCXogPSAwLi8wLgpgYGAKCioqVXNpbmcgdGhlIFB5dGhvbiBg
aW1wb3J0YCBTdGF0ZW1lbnQqKgoKTGFyZ2UgY29kZSBibG9ja3MgY2FuIGJlIGltcG9ydGVk
IGZyb20gcHl0aG9uIG1vZHVsZXMgYW5kIHRoZQpgaW1wb3J0YCBzdGF0ZW1lbnQgY2FuIGJl
IHVzZWQgZm9yIGxvYWRpbmcgaW5zdGFsbGVkIGxpYnJhcmllcy4KCmBgYHB5dGhvbgoJaW1w
b3J0IG51bXB5CglpbXBvcnQgc3lzCglzeXMucGF0aC5hcHBlbmQoIi4iKQoJI2ltcG9ydCBt
b2R1bGVfaW5fd29ya2luZ19kaXJlY3RvcnkKYGBgCgotLS0KCiMgSW5saW5lIENvZGUKCklu
bGluZSBzdGF0ZW1lbnRzIGFyZSBkaXJlY3RseSBlbWJlZGRlZCBpbnRvIHRoZSB0ZXh0IGZs
b3cgdXNpbmcKZXhwcmVzc2lvbnMgYW5kIHZhcmlhYmxlcyB3aXRoIHRoZSBjb3JyZXNwb25k
aW5nCnN5bnRheCBgYCBgXCFFWFBSRVNTSU9OYCBgYCBvciBgYCBgXCFWQVJJQUJMRWAgYGAu
ClRoZSBvdXRwdXQgb2YgdmFyaWFibGVzIGNhbiBiZSBmb3JtYXR0ZWQgdXNpbmcgdGhlCmBg
IGBcIVZBUklBQkxFWzpGT1JNQVRdYCBgYCBvciBgYCBgXCFFWFBSRVNTSU9OWzpGT1JNQVRd
YCBgYApzdGF0ZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBweXRob24gb3BlcmF0b3IgYHs8dmFy
aWFibGU+Wzo8Zm9ybWF0Pl19YAppbXBsZW1lbnRlZCBpbiB0aGUKW2BzdHIuZm9ybWF0KClg
XShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvc3RyaW5nLmh0bWwjZm9ybWF0
c3RyaW5ncykKc3BlY2lmaWNhdGlvbiBhbmQgdGhlIG9wZXJhdG9yIGB7PGV4cHJlc3Npb24+
Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbgpbYGZgLXN0cmluZ3NdKGh0dHBzOi8vZG9j
cy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxfYW5hbHlzaXMuaHRtbCNmLXN0cmlu
Z3MpLgoKKipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoqCgpUaGUgcmVzdWx0IG9mICRcc3Fy
dHsyfSQgaXM6CiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBgISBtYXRoLnNxcnQoMi4wKWAKKiBm
b3JtYXR0ZWQgb3V0cHV0OiBgISAiJS40ZiIgJSBtYXRoLnNxcnQoMi4wKWAKClRoZSB2YXJp
YWJsZSAkeCQgaXMKKiB1bmZvcm1hdHRlZCBvdXRwdXQ6IGAhIHhgCiogZm9ybWF0dGVkIG91
dHB1dDogYCEgeDouNGZgCgpUaGUgdmFyaWFibGUgJHk9eCsxJCBpcwoqIHVuZm9ybWF0dGVk
IG91dHB1dDogYCEgeWAKKiBmb3JtYXR0ZWQgb3V0cHV0OiBgISB5Oi40ZmAKCihUaGUgY29k
ZSBibG9jayBmb3IgdGhlIGRlZmluaXRpb24gb2YgJHkkIGlzIGhpZGRlbi4pCgoqKklubGlu
ZSBFeHByZXNzaW9uIE91dHB1dCoqCgpgYGAhCgl4ID0gbGlzdChyYW5nZSgxLCAxMSkpCgl5
ID0gW2kqaSBmb3IgaSBpbiB4XQoKCWRlZiBsaXN0X3N0cihhKToKCQlyZXR1cm4gW3N0cihp
KSBmb3IgaSBpbiBhXQoJZGVmIGxpc3RfYW5kKGEpOgoJCXJldHVybiAiLCAiLmpvaW4obGlz
dF9zdHIoYVs6LTFdKSkgKyAiIGFuZCAiICsgc3RyKGFbLTFdKQpgYGAKClRoZSBsaXN0IGNh
biBiZSBpbnNlcnRlZCBpbnRvIHRoZSB0ZXh0LiBUaGUgc3F1YXJlIG9mIHRoZSBmaXJzdApg
IWxlbih4KWAgbnVtYmVycyBgIWxpc3RfYW5kKHgpYCBpcyBgIWxpc3RfYW5kKHkpYC4gU3F1
YXJlIG51bWJlcnMKYXJlIGNvbXB1dGVkIGFjY29yZGluZyB0byAkeT14XjIkLgoKKipJbmxp
bmUgU3RhdGVtZW50cyBpbiBUYWJsZXMqKgoKYGBgIQoJY2xhc3Mgc3F1YXJlOgoJCWRlZiBf
X2luaXRfXyhzZWxmKToKCQkJc2VsZi54ID0gMAoJCWRlZiBnZXRfeChzZWxmKToKCQkJcmV0
dXJuIHNlbGYueAoJCWRlZiBuZXh0X3koc2VsZik6CgkJCXkgPSBzZWxmLngqKjIKCQkJc2Vs
Zi54ICs9IDEKCQkJcmV0dXJuIHkKCXNxID0gc3F1YXJlKCkKYGBgCgpUaGUgZm9sbG93aW5n
IHRhYmxlIGlzIGNvbXB1dGVkIGFjY29yZGluZyB0byAkeT14XjIkLgoKeCAgICAgICAgICAg
IHx5Ci0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0KYCFzcS5nZXRfeCgpYHxgIXNxLm5l
eHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFz
cS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClg
fGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRf
eCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3Eu
Z2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYAoK
LS0tCgojIEdlbmVyYXRlIE1hcmtkb3duIFRleHQKCk1hcmtkb3duIHRleHQgY2FuIGJlIHBy
b2R1Y2VkIGFsZ29yaXRobWljYWxseSBmcm9tIGEgcHl0aG9uIGFsZ29yaXRobQp1c2luZyB0
aGUgYF8oKWAgYW5kIGBfXygpYCBmdW5jdGlvbi4gVGhlIGBfKClgIGFuZCBgX18oKWAgZnVu
Y3Rpb24gYXJlCnNwZWNpYWwgbmFtZXMgd2hpY2ggYXJlIHJlc2VydmVkIGJ5IGBtYXJreWAu
IChyZWZlciB0byBHZW5lcmF0aW9uIG9mCk1hcmtkb3duIFRleHQsIFtgbWFya3lgIGRvY3Vt
ZW50YXRpb25dKG1hcmt5Lj8/PykgZm9yIGluLWRlcHRoCmV4cGxhbmF0aW9uKS4KCiMjIFRo
ZSBgXygpYCBGdW5jdGlvbgoKIFRoZSBgXygpYCBmdW5jdGlvbiBiYXNpY2x5IHJlc2VtYmxl
ZCB0aGUgcHl0aG9uIGBwcmludCgpYCBmdW5jdGlvbi4KYG1hcmt5YCBkb2VzIG5vdCBwYXRj
aCB0aGUgc3RhbmRhcmQgYHByaW50KClgIGZ1bmN0aW9uIHdoaWNoIHN0aWxsCmRpc3BsYXlz
IHRleHQgaW4gdGhlIGNvbnNvbGUgYW5kIG5vdCBpbiB0aGUgTWFya2Rvd24gdGV4dC4KVGhl
IGBfKClgIGZ1bmN0aW9uIHN1cHBvcnRzIGFwcGVuZGluZyB0ZXh0IHRvIHRoZSBwcmV2aW91
cyBhbmQgdGhlIG5leHQKbGluZSBvZiBvdXRwdXQgYnkgdXNpbmcgYF9gIGFzIHRoZSBmaXN0
IG9yIGxhc3QgcGFyYW1ldGVyLgoxLiBgXyhfLCAqYXJncyAgIClgOiBhcHBlbmQgdGhpcyBv
dXRwdXQgdG8gcHJldmlvdXMgb3V0cHV0CjIuIGBfKF8sICphcmdzLCBfKWA6IGFwcGVuZCB0
byBwcmV2aW91cyBhbmQgbmV4dCBvdXRwdXQKMy4gYF8oICAgKmFyZ3MsIF8pYDogYXBwZW5k
IG5leHQgb3V0cHV0IHRvIHRoaXMgb3V0cHV0CjQuIGBfKClgOiBkaXNhYmxlIGFwcGVuZCBm
bGFnCgoqKk1vbmtleSBQYXRjaCBgcHJpbnQoKWAgRnVuY3Rpb24qKgoKVGhlIGBwcmludCgp
YCBmdW5jdGlvbiBjYW4gYmUgKm1vbmtleSBwYXRjaGVkKiB1c2luZyB0aGUgZm9sbG93aW5n
CnN0YXRtZW50IGluIG9yZGVyIHRvIGNhbGwgdGhlIGBfKClgIGZ1bmN0aW9uIGluc3RlYWQu
CgpgYGAhCglwcmludCgiUHJpbnQiLCAidG8iLCAgImNvbnNvbGUiLCAiISIpCglfKCJQcmlu
dCIsICJ0byIsICAiTWFya2Rvd24iLCAiISIpCgoJcHJpbnQgPSBfICMgbW9ua2V5IHBhdGNo
CglwcmludCgiUHJpbnQiLCAidG8iLCAgIk1hcmtkb3duIiwgIiEiKQpgYGAKCioqSm9pbiBB
cmd1bWVudHMgdXNpbmcgYHNlcGAqKgoKVGhlIHNpZ25hdHVyZSBvZiB0aGUgYF8oKWAgaXMg
YF8oKmFyZ3MsIHNlcD0iICIpYC4gYHNlcGAgaXMgdXNlZCB0bwpqb2luIHRoZSBhcmd1bWVu
dHMgYCphcmdzYCBpbnRvIG9uZSBzdHJpbmcuCgpgYGAhCglfKCJUaGUgZmlyc3QgZml2ZSBu
YXR1cmFsIG51bWJlcnMgYXJlOiIpCglfKDEsIDIsIDMsIDQsIDUsIHNlcD0iLCAiKQpgYGAK
CioqR2VuZXJhdGUgYSBUYWJsZSB3aXRoIEFwcGVuZGluZyoqCgpUaGUgYXBwZW5kIGZlYXR1
cmUgaXMgdXNlZCB0byBjcmVhdGUgYSB0YWJsZS4KCmBgYCEKCV8oIkNvbHVtbiAxIiwgXykK
CV8oInxDb2x1bW4gMiIsIF8pCglfKCJ8Q29sdW1uIDMiLCBfKQoJXygpCgoJXygifCIuam9p
bihbIi0tLS0tLS0tIl0qMykpCgoJZm9yIGkgaW4gcmFuZ2UoNSk6CgkJXygiJSA4ZCIgJSAo
aSozKSkKCQlmb3IgaiBpbiBbMSwgMl06CgkJCV8oXywgInwlIDhkIiAlIChpKjMraikpCmBg
YAoKVGhlIGFsZ29yaXRobSBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIE1hcmtkb3duIHRleHQu
CgpgYGBtZApDb2x1bW4gMXxDb2x1bW4gMnxDb2x1bW4gMwotLS0tLS0tLXwtLS0tLS0tLXwt
LS0tLS0tLQogICAgICAgMHwgICAgICAgMXwgICAgICAgMgogICAgICAgM3wgICAgICAgNHwg
ICAgICAgNQogICAgICAgNnwgICAgICAgN3wgICAgICAgOAogICAgICAgOXwgICAgICAxMHwg
ICAgICAxMQogICAgICAxMnwgICAgICAxM3wgICAgICAxNApgYGAKCiMjIFRoZSBgX18oKWAg
RnVuY3Rpb24KCkNvbXBhcmVkIHRvIHRoZSBgXygpYCBmdW5jdGlvbiwgdGhlIGBfXygpYCBm
dW5jdGlvbiBvbmx5IHRha2VzIG9uZQphcmd1bWVudCBhbmQgaXRzIHB1cnBvc2UgaXMgdG8g
b3V0cHV0IGEgZm9ybWF0dGVkIHBhcmFncmFwaCB3aXRoCmluZGVudGF0aW9uLiBUaGUgc2ln
bmF0dXJlIG9mIHRoZSBgX18oKWAgZnVuY3Rpb24gaXMgYF8oYXJnLCBjcm9wPVRydWUpYC4K
CioqR2VuZXJhdGUgYSBQYXJhZ3JhcGggd2l0aCBgZmAtU3RyaW5ncyoqCgpUaGUgYF9fKClg
IGZ1bmN0aW9uIGNhbiBiZSBjb21iaW5lZCB3aXRoIHRyaXBsZSBxdW90ZWQgYmxvY2sgc3Ry
aW5ncwphbmQgdGhlIHB5dGhvbiAzIGBmYC1zdHJpbmdzIG9yIGBmIi4uLiJgIHN0cmluZyBp
bnRlcnBvbGF0aW9uLCByZWZlciB0bwpbYGZgLXN0cmluZ3NdKGh0dHBzOi8vZG9jcy5weXRo
b24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxfYW5hbHlzaXMuaHRtbCNmLXN0cmluZ3MpLgoK
YGBgIQoJaW1wb3J0IHJhbmRvbQoJcyA9IDAKCXJhbmRvbS5zZWVkKHMpCglwID0gW3JhbmRv
bS5yYW5kb20oKSBmb3IgaSBpbiByYW5nZSgzKV0KCglfXyhmIiIiCgkJUGFyYW1ldGVyIG9u
ZSBpcyB7cFswXTouM2Z9IGFuZCB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgc2VlZAoJCW9m
IHRoZSBwc2V1ZG8gcmFuZG9tIG51bWJlciBnZW5lcmF0b3IsIHdoaWNoIHdhcyBjaG9zZW4K
CQl0byBiZSB7c30uIEZvciB0aGUgc2FtZSBzZWVkIGFsd2F5cyB0aGUgc2FtZSByYW5kb20g
bnVtYmVycwoJCWFyZSBjcmVhdGVkLiBUaGUgbmV4dCB0d28gbnVtYmVycyBhcmUge3BbMV06
LjNmfSBhbmQge3BbMl06LjNmfS4KCQlUaGUgc3VtIG9mIHRoZSB0aHJlZSBudW1iZXJzIGlz
IHtzdW0ocCk6LjNmfSBhbmQgaXQgaXMKCQl7J2dyZWF0ZXInIGlmIHN1bShwKSA+IDIuIGVs
c2UgJ2xlc3NlciBvciBlcXVhbCd9IHRoYW4gdHdvLgoJIiIiKQpgYGAKCioqQ3JvcHBpbmcg
YW5kIEluZGVudGF0aW9uIG9mIE91dHB1dCoqCgpCZWZvcmUgdGhlIHRleHQgZ2VuZXJhdGVk
IGJ5IHRoZSBgX18oKWAgZnVuY3Rpb24gaXMgcHJpbnRlZCBpbnRvIHRoZQpkb2N1bWVudC4g
VGhlIHRleHQgaXMgY3JvcHBlZCBhY2NvcmRpbmcgdG8gdGhlIGxlYWRpbmcgd2hpdGUgc3Bh
Y2UKb2YgdGhlIGZpcnN0IG5vbi1lbXB0eSBsaW5lLiBUaGUgbGVhZGluZyB3aGl0ZSBzcGFj
ZSBvZiB0aGUgZmlyc3QKbm9uLWVtcHR5IGxpbmUgaXMgcmVtb3ZlZCBmcm9tIGFsbCBvdGhl
ciBsaW5lcyBvZiB0aGUgb3V0cHV0LgoKYGBgIQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEK
CQkJKiBMaXN0IExldmVsIDIKCQkJKiBMaXN0IExldmVsIDIKCQkJCSogTGlzdCBMZXZlbCAz
CgkJCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVsIDEKCQkqIExpc3QgTGV2ZWwgMQoJ
IiIiKQpgYGAKClRoZSBjb2RlIGJsb2NrIHByb2R1Y2VzIHRoZSBmb2xsb3dpbmcgb3V0cHV0
LgoKYGBgbWQKKiBMaXN0IExldmVsIDEKCSogTGlzdCBMZXZlbCAyCgkqIExpc3QgTGV2ZWwg
MgoJCSogTGlzdCBMZXZlbCAzCgkqIExpc3QgTGV2ZWwgMgoqIExpc3QgTGV2ZWwgMQoqIExp
c3QgTGV2ZWwgMQpgYGAKCioqRGlzYWJsZSBDcm9wcGluZyBvZiBPdXRwdXQqKgoKVGhlIGNy
b3BwaW5nIGlzIGRpc2FibGVkIHVzaW5nIHRoZSBrZXl3b3JkIGBfXyh0ZXh0LCBjcm9wPUZh
bHNlKWAuCgpgYGAhCglfXygiIiIKCQkqIExpc3QgTGV2ZWwgMQoJIiIiLCBjcm9wPVRydWUp
CgoJX18oIiIiCgkJKiBMaXN0IExldmVsIDIKCSIiIiwgY3JvcD1GYWxzZSkKYGBgCgpUaGUg
Y29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIG91dHB1dC4KCmBgYG1kCiogTGlz
dCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDIKYGBgCgotLS0KCiMgRm9ybWF0IERlcGVuZGVu
dCBMaW5rcwoKV2hlbiB3cml0aW5nIHNldmVyYWwgTWFya2Rvd24gZG9jdW1lbnRzIG9mdGVu
IGRvY3VtZW50cyBhcmUgbGlua2VkCmJldHdlZW4gZWFjaCBvdGhlciB1c2luZyB0aGUgTWFy
a2Rvd24gbGluayBzdGF0ZW1lbnQKYFtMaW5rIE5hbWVdKGZpbGUuaHRtbClgIG9yIGBbTGlu
ayBOYW1lXShmaWxlLnBkZilgLgpIb3dldmVyLCB3aGVuIHJlbmRlcmluZyBkb2N1bWVudHMg
d2l0aCBsaW5rcyBpbnRvIGBodG1sYCBhbmQgYHBkZmAKdGhlIGZpbGUgZXh0ZW5zaW9uIG9m
dGVuIG11c3QgYmUgYWRqdXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBvdXRwdXQgZm9ybWF0Lgpg
bWFya3lgIHN1cHBvcnRzIHRoZSBgLlw/Pz9gIHN0YXRlbWVudCwgd2hpY2ggd2lsbCBiZSBy
ZXBsYWNlZCBieQpgLmh0bWxgIG9yIGAucGRmYCBkZXBlbmRpbmcgb24gdGhlIG91dHB1dCBm
b3JtYXQuCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0oZmlsZS5cPz8/KQpgYGAKCndpbGwg
YmUgcHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2luZyB0ZXh0OgoqIGZvciBgaHRtbGA6
IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAKKiBmb3IgYHBkZmA6IGBbTGluayB0
byBkb2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8gdGhpcyBkb2N1bWVudF0ocXVpY2tz
dGFydC4/Pz8pCgotLS0KCiMgRm9ybWF0IERlcGVuZGVudCBDb2RlCgpgcGFuZG9jYCBNYXJr
ZG93biBhbGxvd3MgdG8gd3JpdGUgZm9ybWF0IHNwZWNpZmljIGNvZGUgd2l0aGluIE1hcmtk
b3duCnVzaW5nIGBodG1sYCBhbmQgKnRleCogZm9yIGBwZGZgIGRvY3VtZW50cy4gSG93ZXZl
ciwgd2hlbiBpbnNlcnRpbmcKcmF3IGBodG1sYCBvciByYXcgKnRleCogY29kZSwgdGhlIGRv
Y3VtZW50IG9ubHkgY2FuIGJlIHJlbmRlcmVkIGludG8KYGh0bWxgIG9yIGBwZGZgIGFjY29y
ZGluZ2x5LgoKYG1hcmt5YCBpbnRyb2R1Y2VzIGZvcm1hdCBjb2Rlcywgd2hpY2ggYXJlIGFw
cGxpZWQgZHVyaW5nIGxpbmtpbmcKYWZ0ZXIgcHJlcHJvY2Vzc2luZy4gRHVyaW5nIGxpbmtp
bmcgZm9ybWF0IHNwZWNpZmljIGNvZGVzIGZvciBgaHRtbGAKYW5kIGBwZGZgIGFyZSBhcHBs
aWVkIGluIGEgY29uc2lzdGVudCBtYW5uZXIsIHJlc3VsdGluZyBpbiBkb2N1bWVudHMKd2l0
aCBNYXJrZG93biBhbmQgYGh0bWxgIG9yIE1hcmtkb3duIGFuZCAqdGV4KiBvbmx5LiBVc2lu
ZyB0aGlzCnBhdHRlcm4gYG1hcmt5YCBkb2N1bWVudHMgY29udGFpbiByZWd1bGFyIE1hcmtk
b3duLCB3aGljaCBjYW4gYmUKcmVuZGVyZWQgaW50byBgaHRtbGAgYW5kIGBwZGZgLCBhcyB3
ZWxsIGFzIGZvcm1hdCBzcGVjaWZpYyBjb2Rlcwpmb3IgdHdlYWtpbmcgb3IgcG9saXNoaW5n
IGBodG1sYCBhbmQgYHBkZmAgb3V0cHV0LgoKRm9ybWF0IGNvZGVzIGFyZSBzcGVjaWZpZWQg
aW4gY29kZSBibG9ja3MgYW5kIGNhbGxlZCB1c2luZyB0aGUKaW5saW5lIHN5bnRheCBgYCBg
XD9GTVRDT0RFKEFSR1MpYCBgYCwgd2hpY2ggaXMgdHJhbnNsYXRlZCBpbnRvIHRoZSB0d28K
Zm9sbG93aW5nIHB5aG9uIGZ1bmN0aW9uIGNhbGxzLgoxLiBgRk1UQ09ERV9odG1sKEFSR1Mp
YDogY2FsbGVkIHdoZW4gbGlua2VkIGZvciBgaHRtbGAuCjIuIGBGTVRDT0RFX3BkZihBUkdT
KWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYHBkZmAuCgpBc3N1bWluZyBwcmVwcm9jZXNz
aW5nIHRoZSBmaWxlIGBtZC9tYXJreS5tZGAsIGxpbmtpbmcgZm9ybWF0IGNvZGVzCnJlc3Vs
dHMgaW4gdGhlIHR3byBmb2xsb3dpbmcgb3V0cHV0IGZpbGVzLgoxLiBgYnVpbGQvbWFya3ku
aHRtbC5tZGA6IGNvbnRhaW5zIG91dHB1dCBvZiBgaHRtbGAgZm9ybWF0IGNvZGVzLgoyLiBg
YnVpbGQvbWFya3kucGRmLm1kYDogY29udGFpbnMgb3V0cHV0IG9mIGBwZGZgIGZvcm1hdCBj
b2Rlcy4KCioqRXhhbXBsZSBNdWx0aS1Db2x1bW4gVGV4dCBpbiBgcGRmYCBhbmQgYGh0bWxg
KioKCkRlZm5pdGlvbiBvZiB0d28gZm9ybWF0IGNvZGVzIGBtY29sX2JlZ2luYCBhbmQgYG1j
b2xfZW5kYCwgb25lIGZvciB0aGUKYmVnaW4gb2YgbXVsdGkgY29sdW1uIGFuZCBhbm90aGVy
IGZvciB0aGUgZW5kIG9mIHRoZSBtdWx0aSBjb2x1bW4Kc2VjdGlvbi4gVGhlIGZvcm1hdCBj
b2RlcyBhcmUgYXBwZW5kZWQgd2l0aCBgX2h0bWxgIGFuZCBgX3BkZmAKcmVzcGVjdGl2ZWx5
LgoKYGBgIQoJZGVmIG1jb2xfYmVnaW5fcGRmKCk6IHJldHVybiByIlxiZWdpbnttdWx0aWNv
bHN9ezJ9IgoJZGVmIG1jb2xfZW5kX3BkZigpOiByZXR1cm4gciJcZW5ke211bHRpY29sc30i
CglkZWYgbWNvbF9iZWdpbl9odG1sKCk6IHJldHVybiByIjxkaXYgc3R5bGU9J2NvbHVtbi1j
b3VudDogMjsnPiIKCWRlZiBtY29sX2VuZF9odG1sKCk6IHJldHVybiByIjwvZGl2PiIKYGBg
CgpUaGUgYGNvbHVtbi1jb3VudGAgQ1NTIHByb3BlcnR5IHJlcXVpcmVzIEludGVybmV0IEV4
cGxvcmVyPj0xMCwKRmlyZWZveD49NTIsIFNhZmFyaT49OSwgT3BlcmE+PTM3IG9yIENocm9t
ZT49NTAsIHJlZmVyIHRvClt3M3NjaG9vbHNdKGh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20v
Y3NzL2NzczNfbXVsdGlwbGVfY29sdW1ucy5hc3ApLgpJbiBvcmRlciB0byB1c2UgdGhlIGBt
dWx0aWNvbGAgKnRleCogcGFja2FnZSwgdGhlIHN0YXRlbWVudApgXHVzZXBhY2thZ2V7bXVs
dGljb2x9YCBoYXMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHlhbWwgbWV0YSBkYXRhCmluIHRo
ZSBmcm9udCBtYXR0ZXIgb2YgdGhlIE1hcmtkb3duIGRvY3VtZW50LgoKYD9tY29sX2JlZ2lu
KClgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQK
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dApgP21jb2xfZW5kKClgCgotLS0KCiMgSW5jbHVkZSBT
dGF0ZW1lbnQKCmBtYXJreWAgYWxsb3dzIHRvIGluY2x1ZGUgb3RoZXIgTWFya2Rvd24gdGV4
dCB1c2luZyB0aGUgYFwhISFgIHN0YXRlbWVudC4KUGxlYXNlIHJlZmVyIHRvIHRoZSBgbWFy
a3lgIGRvY3VtZW50YXRpb24gZm9yIGNvbXBsZXRlIGRlc2NyaXB0aW9uCm9mIHRoZSBgXCEh
IWAgc3RhdGVtZW50LiBEdXJpbmcgcmVuZGVyaW5nIGBtYXJreWAga2VlcHMgdHJhY2sgb2YK
aW5jbHVkZWQgZmlsZXMgYW5kIGNyZWF0ZXMgTWFrZWZpbGUgcnVsZXMgZm9yIGRlcGVuZGVu
dCBtYWtlLgoKYGBgbWQKCSEhISBmaWxlLm1kaQpgYGAKCi0tLQoKIyBNZXRhIERhdGEKCmBt
YXJreWAgc3VwcG9ydHMgZG9jdW1lbnQgbWV0YSBkYXRhIGluIE1hcmtkb3duIGZyb250IG1h
dHRlci4KVGhpcyBmZWF0dXJlIGlzIG5vdCBleHBsYWluZWQgaW4gdGhlIHF1aWNrc3RhcnQu
IFBsZWFzZSByZWZlcgp0byB0aGUgYG1hcmt5YCBkb2N1bWVudGF0aW9uIGZvciBleHBsYW5h
dGlvbi4KCmBgYG1kCgktLS0KCU1FVEFfREFUQQoJLS0tCglNQVJLRE9XTgpgYGAKCi0tLQoK
IyBFc2NhcGUgTWFya3VwCgpUaGUgYG1hcmt5YCBtYXJrdXAgY2FuIGJlIGVzY2FwZWQuIFdo
ZW4gbWFya3VwIGlzIGVzY2FwZWQKYG1hcmt5YCByZW1vdmVzIHRoZSBlc2NhcGUgc2VxdWVu
Y2UgYW5kIHByaW50cyBvdXQgdGhlCnVuZXNjYXBlZCBzdGF0ZW1lbnQuCgpNYXJrdXAgICAg
ICAgICAgIHxFc2NhcGUgU2VxdWVuY2V8VW5zZWNhcGVkIFNlcXVlbmNlCi0tLS0tLS0tLS0t
LS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLQpjb2RlIGJsb2NrIGhp
ZGRlbnxgYCBgYGBcXCEhIGBgICB8YGAgYGBgXCEhIGBgCmNvZGUgYmxvY2sgc2hvd24gfGBg
IGBgYFxcISBgYCAgIHxgYCBgYGBcISBgYAppbmxpbmUgY29kZSAgICAgIHxgYCBgXFwhLi4u
YCBgYCB8YGAgYFwhLi4uYCBgYApmb3JtYXQgY29kZSAgICAgIHxgYCBgXFw/Li4uYCBgYCB8
YGAgYFw/Li4uYCBgYAppbmNsdWRlIHN0YXRlbWVudHxgXFwhISFgICAgICAgICB8YFwhISFg
CmZvcm1hdCBsaW5rICAgICAgfGAuXFw/Pz9gICAgICAgIHxgLlw/Pz9gCgotLS0KCipUaGFu
a3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCg==
'''
pack_quick_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIHF1aWNrc3RhcnQubWQgcmF3ID4+MQpgYGAK
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IG1hcmt5LmJpYgpoZWFkZXItaW5j
bHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgZXhhbXBsZSBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5
YCBtYXJrdXAuIFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9mIHRoaXMKPiBkb2N1bWVudCBj
YW4gYmUgcmVhZCBbaGVyZV0oZXhhbXBsZS1zcmMuPz8/KS4KPiBGb3IgZG9jdW1lbnRhdGlv
biBhbmQgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRv
cnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCiMgUmVmZXJl
bmNlZCBTZWN0aW9uIHsjc2VjOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2Vj
OmxhYmVsLgoKIVtUaGlzIGlzIHRoZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQs
aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFW
UUkxMlA0Ly84L3czOEdJQVhESUJLRTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVF
cmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFi
ZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIy
fDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlvbiB7I3RibDpsYWJlbH0K
ClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7ZX1ee1xtYm94
e2l9XHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTps
YWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNdLgoKIyBgbWFya3lgIE1h
cmt1cCBmb3IgRXhlY3V0aW9uIG9mIEVtYmVkZGVkIFB5dGhvbiBDb2RlCgoqKkRpc3BsYXll
ZCBDb2RlLCBFeGVjdXRlZCoqCgpgYGAhCglpbXBvcnQgbWF0aAoJZGVmIGxpc3RfYW5kKGwp
OgoJCXJldHVybiAiLCAiLmpvaW4oc3RyKGkpIGZvciBpIGluIGxbOi0xXSkgKyAiIGFuZCAi
ICsgc3RyKGxbLTFdKQoKCXggPSAyCgl5ID0gbWF0aC5zcXJ0KHgpCmBgYAoKKipIaWRkZW4g
Q29kZSwgRXhlY3V0ZWQqKgoKYGBgISEKCXByaW50KCJIZWxsbyBDb25zb2xlISIpCmBgYAoK
KipEaXNwbGF5ZWQgQ29kZSwgTm90IEV4ZWN1dGVkKioKCmBgYHB5dGhvbgoJeCA9IDMKYGBg
CgoqKklubGluZSBGb3JtYXR0ZWQgT3V0cHV0KioKClRoZSBzcXVhcmUgcm9vdCBvZiAkeD1g
IXhgJCBpcyBgIXk6LjNmYC4KCioqSW5saW5lIEV4cHJlc3Npb24qKgoKVGhlIGZpcnN0IHRl
biBudW1iZXJzIGFyZSBgIWxpc3RfYW5kKHJhbmdlKDEwKSlgLgoKKipGb3JtYXQgTGlua3Mq
KgoKYGBgbWQKW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuXD8/PykKYGBgCgp3aWxsIGJlIHBy
b3Byb2Nlc3NlZCBpbnRvIHRoZSBmb2xsb3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxgOiBgW0xp
bmsgdG8gZG9jdW1lbnRdKGZpbGUuaHRtbClgCiogZm9yIGBwZGZgOiBgW0xpbmsgdG8gZG9j
dW1lbnRdKGZpbGUucGRmKWAKCltMaW5rIHRvIHRoaXMgZG9jdW1lbnRdKGV4YW1wbGUuPz8/
KQoKKipGb3JtYXQgQ29kZXMqKgoKYGBgIQoJZGVmIEZNVENPREVfaHRtbCgpOiByZXR1cm4g
Ikg8c3VwPlQ8L3N1cD48c3ViPk08L3N1Yj5MIgoJZGVmIEZNVENPREVfcGRmKCk6IHJldHVy
biAiXExhVGVYIgpgYGAKClRoaXMgaXMgYSBgLj8/P2AgZG9jdW1lbnQgYW5kIHRoZSBmb3Jt
YXQgY29kZSByZXR1cm5zOiBgP0ZNVENPREUoKWAuCgotLS0KCipUaGFua3MgZm9yIHJlYWRp
bmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCgotLS0KCiMgUmVmZXJlbmNlcyB7LX0K
'''
pack_example_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIGV4YW1wbGUubWQgcmF3ID4+MQpgYGAK
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "noref":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "notext":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text,
				run_marky=flag_run_marky, shift_atx=flag_shift_atx, shift_str=shift_str)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True,
	read_text=True, run_marky=True, shift_atx=0, shift_str=""):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == "":
						continue
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)
						appendbuf = ""
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					for j in run_block(fpath, n - len(code_text) - 1, n, code_text, show_code):
						md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					md_text.append(shift_str + i)
					continue
				elif i.startswith(r"\\!!!"):
					j = parse_line(fpath, n, i[2:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					j = parse_line(fpath, n, i[1:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					j = parse_line(fpath, n, i)
					if j == "":
						appendbuf = i
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return ""
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				is_shortcode = "(" in expr and expr[-1] == ")"
				if is_shortcode:
					text += run_shortcode(fpath, n, p + 2, expr)
				else:
					text += print_inline(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		def go_deeper(deeep, first=False):
			print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
			if first:
				print("# FILE", args.marky)
			if os.path.exists(deeep.tb_frame.f_code.co_filename):
				with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
					print("#", fh.read().split("\n")[deeep.tb_lineno-1])
			if deeep.tb_next != None:
				go_deeper(deeep.tb_next)
		if ex.__traceback__.tb_next:
			go_deeper(ex.__traceback__.tb_next, first=True)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def print_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % text, end="", flush=True)
	try:
		value = ("{" + text + "}").format(**exec_dict)
	except Exception as ex:
		print("")
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		p = expr.find("(")
		shexpr = expr[:p] + "_" + f + expr[p:]
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		try:
			exec_text = list()
			exec_append = False
			value = eval(shexpr, exec_dict, None)
			if not value is None:
				__(value)
			if len(exec_text) > 0:
				exec_text = "\n".join(exec_text).split("\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<<??%s %s %s??>>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text)
	try:
		value = str(eval('f"""{%s}"""' % text, exec_dict, None))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for a, b in enumerate(value.split("\n")):
		print("#    %03d" % (a + 1), b)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--md")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	p = md_text.find("<<??")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("??>>", p + 4)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+4:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + 4
			p = md_text.find("<<??", c)
		else:
			p = md_text.find("<<??", p + 4)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
