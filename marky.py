#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogYXV4ICAgICAgb25seSBNYWtlZmls
ZSBkZXBlbmRlbmN5LCBubyBpbmNsdWRlCgkjICAqIG5vZGVwICAgIGluY2x1ZGUgd2l0aG91
dCBNYWtlZmlsZSBkZXBlbmRlbmN5CgkjICAqIHJhdyAgICAgIGRvIG5vdCBwYXJzZSBmaWxl
LCBpbmNsdWRlIGFzLWlzCgkjICAqIG5vbWV0YSAgIGlnbm9yZSBhbmQgc2tpcCBhbGwgbWV0
YSBkYXRhCgkjICAqIG5vYm9keSAgIGlnbm9yZSBhbmQgc2tpcCBNYXJrZG93biBib2R5Cgkj
ICAqIG5vbWFya3kgIG5vIHByb2Nlc3Npbmcgb2YgbWFya3kgbWFya3VwCgkjICAqICEgICAg
ICAgIGluY2x1ZGUgb25seSBjb2RlIGJsb2NrcwoJIyAgKiAhISAgICAgICBpbmNsdWRlIG9u
bHkgaGlkZGVuIGNvZGUgYmxvY2tzCgkjICAqICMrTiAgICAgIGluY3JlYXNlIGxldmVsIG9m
IEFUWCBoZWFkaW5ncyBieSBOCgkjICAqID4+TiAgICAgIGluY3JlYXNlIGluZGVudGF0aW9u
IGxldmVsIGJ5IE4gdGFicwoJIyAgKiA+TiAgICAgICBpbmNyZWFzZSBpbmRlbnRhdGlvbiBs
ZXZlbCBieSBOIHNwYWNlcwoJIwoKLlBIT05ZOiBjaGVhdC1tZXRhCmNoZWF0LW1ldGE6Cgkj
CgkjIE1FVEEgREFUQQoJIwoJIyAgLS0tCgkjICB0aXRsZTogRG9jdW1lbnQKCSMgIGRhdGU6
IFRvZGF5CgkjICBhdXRob3I6IE5hbWUKCSMgIGxpbmstY2l0YXRpb25zOiB0cnVlCgkjICBi
aWJsaW9ncmFwaHk6IGJpYmwuYmliCgkjICBmb250c2l6ZS0tcGRmOiAxMXB0CgkjICBmb250
c2l6ZS0taHRtbDogMTBwdAoJIyAgaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KCSMgICAgIFx1
c2VwYWNrYWdley4uLn0KCSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgIGhlYWRlci1pbmNs
dWRlcy0taHRtbDogPgoJIyAgICAgPHNjcmlwdCAuLi4+CgkjICAgICA8bGluayAuLi4+Cgkj
ICAgICA8c3R5bGUgLi4uPgoJIyAgeG5vcy1jbGV2ZXJlZjogdHJ1ZQoJIyAgeG5vcy1jYXBp
dGFsaXNlOiB0cnVlCgkjICAtaGlkZGVuX2ZpZWxkOiB0ZXh0CgkjICAtLS0KCSMKCi5QSE9O
WTogY2hlYXQtbGluawpjaGVhdC1saW5rOgoJIwoJIyBGT1JNQVQgTElOSwoJIwoJIyAgW0xp
bmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5odG1sKQoJIyAgW0xpbmsgdG8gRG9jdW1l
bnRdKHBhdGgvdG8vZmlsZS5wZGYpCgkjICBbRm9ybWF0IExpbmsgdG8gRG9jdW1lbnRdKHBh
dGgvdG8vZmlsZS4/Pz8pCgkjICBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgZm9ybWF0IGxpbmsg
Llw/Pz8KCSMKCi5QSE9OWTogY2hlYXQtY29kZQpjaGVhdC1jb2RlOgoJIwoJIyBGT1JNQVQg
Q09ERQoJIwoJIyAgIGBgYCEKCSMgICBkZWYgdGVzdDFfaHRtbCgpOgoJIyAgICAgICBfKCJU
aGlzIGlzIEhUTUwxISIpCgkjICAgZGVmIHRlc3QxX3BkZigpOgoJIyAgICAgICByZXR1cm4g
IlRoaXMgaXMgXHtQREYxXH0hIgoJIyAgIGRlZiB0ZXN0Ml9odG1sKCk6CgkjICAgICAgIF9f
KCIiIgoJIyAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgIFRoaXMgaXMg
SFRNTDIhCgkjICAgICAgICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAiIiIpCgkjICAg
ZGVmIHRlc3QyX3BkZigpOgoJIyAgICAgICByZXR1cm4gIiIiCgkjICAgICAgICAgICBUaGlz
IGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAg
ICAgIFRoaXMgaXMgXHtQREYyXH0hCgkjICAgICAgICIiIgoJIyAgIGBgYAoJIyAgIFJ1biBG
b3JtYXQgQ29kZSBgP3Rlc3QxKClgIGFuZCBgP3Rlc3QyKClgLgoJIyAgIGBcP3Rlc3QxKClg
IGFuZCBgXD90ZXN0MigpYCBhcmUgbm90IHBhcnNlZC4KCSMKCiMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IwoKLlBIT05ZOiBhbGwKYWxsOiAkKEhUTUwpICQoUERGKQoKLlBIT05ZOiBhbGwtbWsKYWxs
LW1rOiAkKE1LKQoKLlBIT05ZOiBhbGwtbWQKYWxsLW1kOiAkKE1EKQoKLlBIT05ZOiBhbGwt
bGluawphbGwtbGluazogJChNREhUTUwpICQoTURQREYpCgouUEhPTlk6IGFsbC1odG1sCmFs
bC1odG1sOiAkKEhUTUwpCgouUEhPTlk6IGFsbC1wZGYKYWxsLXBkZjogJChQREYpCgouUEhP
Tlk6IGNsZWFuCmNsZWFuOgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8qCgou
UEhPTlk6IGh0dHBkCmh0dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2ZXIK
Ci5QSE9OWTogc2NhbgpzY2FuOiBhbGwtbWsKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKYnVpbGQv
JS5tZC5tazogbWQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21h
cmt5LnB5IC0tbWtkZXAgLS1tYXJreT0iJDwiCgpidWlsZC8lLm1kOiBidWlsZC8lLm1kLm1r
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1tZD0iJEAi
CgpidWlsZC8lLmh0bWwubWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFt
ZSAiJEAiKQoJLi9tYXJreS5weSAtLWxpbmsgaHRtbCAtLW1kPSIkPCIKCmJ1aWxkLyUucGRm
Lm1kOiBidWlsZC8lLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFy
a3kucHkgLS1saW5rIHBkZiAtLW1kPSIkPCIKCmh0bWwvJS5odG1sOiBidWlsZC8lLmh0bWwu
bWQKCWxuIC1zbmYgLi4vZGF0YSBidWlsZC9kYXRhCglta2RpciAtcCAkKHNoZWxsIGRpcm5h
bWUgIiRAIikKCWxuIC1zbmYgLi4vZGF0YSBodG1sL2RhdGEKCXBhbmRvYyAiJDwiIC0tZmls
dGVyIHBhbmRvYy14bm9zIC0tY2l0ZXByb2MgLS1mcm9tPW1hcmtkb3duK3Jhd19odG1sKyQo
TURFTCkgLS10bz1odG1sNSAtLW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9idWls
ZC8iIC0tc2VsZi1jb250YWluZWQgLS10YWJsZS1vZi1jb250ZW50cyAtLW51bWJlci1zZWN0
aW9ucyAtLWNvbHVtbnM9MQoKcGRmLyUucGRmOiBidWlsZC8lLnBkZi5tZAoJbWtkaXIgLXAg
JChzaGVsbCBkaXJuYW1lICIkQCIpCglsbiAtc25mIC4uL2RhdGEgYnVpbGQvZGF0YQoJbG4g
LXNuZiAuLi9kYXRhIHBkZi9kYXRhCglwYW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5v
cyAtLWNpdGVwcm9jIC0tZnJvbT1tYXJrZG93bityYXdfdGV4KyQoTURFTCkgLS10bz1sYXRl
eCAtLW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9idWlsZC8iIC0tdGFibGUtb2Yt
Y29udGVudHMgLS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEgLS1wZGYtZW5naW5lPXhl
bGF0ZXgKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKUFNFVURPPWhlbHAgdHJlZSBjaGVhdCBjbGVh
biBodHRwZCBzY2FuCgpJTkNGTEFHPTAKCmRlZmluZSBMT09QQk9EWQogIGlmZXEgKCQkKGZp
bHRlciAkJChQU0VVRE8pLCQkKEcpKSwpCiAgICBJTkNGTEFHPTEKICBlbmRpZgplbmRlZgoK
aWZuZXEgKCQoTUFLRUNNREdPQUxTKSwpCiAgJChmb3JlYWNoIEcsJChNQUtFQ01ER09BTFMp
LCQoZXZhbCAkKExPT1BCT0RZKSkpCmVuZGlmCgppZmVxICgkKElOQ0ZMQUcpLDEpCiAgLWlu
Y2x1ZGUgJChNSykKZW5kaWYKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwo=
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmF1dGhvcjogbGVobWFubjcKZGF0ZTog
MjAyMS0wOS0wOQpsaW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IGRhdGEvbWFy
a3kuYmliCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlu
a3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHls
ZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBi
b3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4
bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKLWZpZ3NpemU6IFsxMCw4XQot
ZmlnZHBpOiAzMDAKLXZlcnNpb246IHVuZGVmaW5lZAoKLS0tCiEhISAuLi9NYWtlZmlsZSBh
dXgKISEhIC4uL21hcmt5LnB5IGF1eApgYGAhIQoJaW1wb3J0IHN1YnByb2Nlc3MKCU1EID0g
Ik1hcmtkb3duIgoJTSA9ICJgbWFya3lgIgoJTUYgPSAiYE1ha2VmaWxlYCIKCU1QID0gImBt
YXJreS5weWAiCglNcCA9ICJtYXJreS5weSIKCVAgPSAiYHBhbmRvY2AiCglOVSA9ICJgbnVt
cHlgIgoJUEwgPSAiYG1hdHBsb3RsaWJgIgoJUiA9ICJSTWFya2Rvd24iCglRID0gIlF1YXJ0
byIKCUJUID0gImAiCglQMT0gImBfKClgIgoJUDI9ICJgX18oKWAiCgl2ZXJzaW9uID0gc3Vi
cHJvY2Vzcy5jaGVja19vdXRwdXQoWyJweXRob24iLCAibWFya3kucHkiLAoJCSItLXZlcnNp
b24iXSkuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkKYGBgCgotLS0KCj4gKipBYnN0cmFjdCoq
IC0tIGAhTWAgaXMgYSBwcmVwcm9jZXNzb3IgZm9yIGAhTURgIHVzaW5nIFB5dGhvbi4KPiBg
IU1gIGlzIGluc3BpcmVkIGJ5IFtwYW5kb2NdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcvKSwK
PiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20vKSwgW2AhUWBdKGh0dHBz
Oi8vcXVhcnRvLm9yZy8pLgo+IFRoaXMgZG9jdW1lbnQgaXMgY3JlYXRlZCB1c2luZyBgIU1g
IChWZXJzaW9uIGAhdmVyc2lvbmApIGFuZAo+IGNvbnRhaW5zIGV4YW1wbGVzIHdoaWNoIGls
bHVzdHJhdGUgdGhlIGdlbmVyYXRpb24gb2YKPiBkb2N1bWVudCBjb250ZW50IGZvciBgaHRt
bGAgYW5kIGBwZGZgIGFuZCB0aGUgZHluYW1pY2FsIGFkanVzdG1lbnQKPiBvZiBgIU1EYCB0
ZXh0IGR1cmluZyBwcmVwcm9jZXNzaW5nIGJhc2VkIG9uIGBweXRob25gIGNvZGUuCj4gVGhl
IGZ1bGwgcmF3IGAhTWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudGF0aW9uIGFwcGVu
ZGVkIGF0Cj4gdGhlIGVuZC4gVGhlIGBtYXJreWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1
bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJlXShtYXJreS1zcmMuPz8/KS4KPiBGb3IgbW9yZSBp
bmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0o
aHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KSwKPiBbYG1hcmt5YCBxdWlja3N0
YXJ0XShxdWlja3N0YXJ0Lj8/Pykgb3IgdGhlCj4gc2ltcGxlIFtgbWFya3lgIGV4YW1wbGVd
KGV4YW1wbGUuPz8/KS4KCgotLS0KCiMgSW50cm9kdWN0aW9uCgpgIU1gIGlzIGEgYCFNRGAg
cHJlcHJvY2Vzc29yIHdoaWNoIHRyYW5zZm9ybXMgYSBgIU1EYCBkb2N1bWVudAp1c2luZyBw
eXRob24uIGAhTWAgaW1wbGVtZW50cyBuZXcgbWFya3VwIHdoaWNoIGNvbnRyb2xzIHRoZSBl
eGVjdXRpb24Kb2YgcHl0aG9uIGNvZGUgYW5kIHRoZSBnZW5lcmF0aW9uIGFuZCBtYW5pcHVs
YXRpb24gb2YgYCFNRGAgdGV4dC4KVGhlIGAhTWAgcXVpY2tzdGFydCBjYW4gYmUgZm91bmQg
W2hlcmVdKHF1aWNrc3RhcnQuPz8/KSBhbmQgYSB2ZXJ5CnNpbXBsZSBgIU1gIGV4YW1wbGUg
Y2FuIGJlIGZvdW5kIFtoZXJlXShleGFtcGxlLj8/PykuCgpgIU1gIG9ubHkgZGVwZW5kcyBv
biBgIVBgIGFuZCBgcHl5YW1sYC4gYCFQYCBpcyB1c2VkIGZvciByZW5kZXJpbmcKdGhlIGAh
TURgIGludG8gYGh0bWxgIGFuZCBgcGRmYC4gYCFQYCBzdXBwb3J0cyB2YXJpb3VzIGAhTURg
CmV4dGVuc2lvbnMgYWxsb3dpbmcgZm9yIHNjaWVudGlmaWMgd3JpdGluZyB1c2luZyBlcXVh
dGlvbnMsIGZpZ3VyZXMsCnRhYmxlcywgY2l0YXRpb25zIGFuZCBjb3JyZXNwb25kaW5nIHJl
ZmVyZW5jaW5nIG1lY2hhbmlzbSBmb3IgdGhlIGxhdHRlci4KYHB5eWFtbGAgaXMgdXNlZCBm
b3IgcGFyc2luZyBtZXRhIGRhdGEgaW4gdGhlIGZyb250IG1hdHRlciBvZiB0aGUKYCFNRGAg
dGV4dCBpZiBpdCBpcyBwcmVzZW50LgoKV29ya2Zsb3cgZm9yIGNyZWF0aW5nIGBodG1sYCBv
ciBgcGRmYCB1c2luZyBgIU1gCgoxLiB1c2VyIHdyaXRlcyBhIGAhTURgIHRleHQgZmlsZSBh
bmQgcGxhY2VzIGl0IGluIGBtZC8qLm1kYApkaXJlY3Rvcnkgd2l0aCB0aGUgZXh0ZW5zaW9u
IGAubWRgLiB0aGUgYCFNRGAgdGV4dCBjb250YWlucwpzcGVjaWFsIGAhTWAgbWFya3VwIHdo
aWNoIGV4ZWN1dGVzIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRlcwp0aGUgYCFNRGAgdGV4
dC4KCjIuIGAhTWAgdHJhbnNmb3JtcyB0aGUgZmlsZXMgaW4gYG1kLyoubWRgIGludG8gcmVn
dWxhciBgIU1EYCB0ZXh0CmFuZCBwbGFjZXMgdGhlIHRyYW5zZm9ybWVkIGZpbGVzIGluIGBi
dWlsZC8qLm1kYC4gVGhlIHRyYW5zZm9ybWVkIHRleHQKb25seSBjb250YWlucyByZWd1bGFy
IGAhTURgLCBhbmQgcGxhY2Vob2xkZXJzIGZvciBmb3JtYXQgZGVwZW5kZW50Cm91dHB1dCBm
b3IgYGh0bWxgIGFuZCBgcGRmYC4KCjMuIGJlZm9yZSByZW5kZXJpbmcgYCFNYCByZXBsYWNl
cyBwbGFjZWhvbGRlcnMgZm9yIGZvcm1hdCBkZXBlbmRlbnQKb3V0cHV0IHdpdGggY29udGVu
dCBjcmVhdGluZyBhIHRlbXBvcmFyeSBmaWxlIHdoaWNoIG9ubHkgY29udGFpbnMKcmVndWxh
ciBgIU1EYCB0ZXh0IGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBhY2NvcmRpbmcg
dG8KYCFQYCBgIU1EYCBzcGVjaWZpY2F0aW9uLgoKNC4gdGhlIHJlZ3VsYXIgYCFNRGAgdGV4
dCBpbiB0aGUgZmlsZXMgYGJ1aWxkLyoubWRgIGlzIHJlbmRlcmVkIGludG8KYGh0bWxgIGFu
ZCBgcGRmYCB1c2luZyBgIVBgLgoKVGhlIHRocmVlIHN0ZXBzIGFyZSBpbXBsZW1lbnRlZCBp
biBgIU1QYCBhbmQgYSBgIU1GYC4gVGhlCmZvbGxvd2luZyBkb2N1bWVudCBkZXNjcmliZXMg
dGhlIHNwZWNpYWwgYCFNYCBtYXJrdXAgYW5kIHNob3dzCmhvdyB0byB1c2UgYCFNUGAgYW5k
IHRoZSBgIU1GYC4KCi0tLQoKIyBSZWxhdGVkIFdvcmsgeyNzZWM6cmVsYXRlZH0KCkZvciBz
Y2llbnRpZmljIHJlcG9ydGluZyBhbmQgd3JpdGluZyB1c3VhbGx5IHR5cGVzZXR0aW5nIHN5
c3RlbXMgb3IKY29tcGxpY3RlZCBXWVNJV1lHIGVkaXRvcnMgYXJlIHVzZWQuIEluIG9yZGVy
IHRvIHNpbXBsaWZ5IHRoZSB3cml0aW5nCmRpZmZlcmVudCBhcHByb2FjaGVzIGFuZCBmcmFt
ZXdvcmtzIGhhdmUgYmVlbiBkZXZlbG9wZWQuCgoqIFtgIVBgXShodHRwczovL3d3dy5wYW5k
b2Mub3JnLyksCiogW2AhUmBdKGh0dHBzOi8vcm1hcmtkb3duLnJzdHVkaW8uY29tLykKKiBb
UXVhcnRvXShodHRwczovL3F1YXJ0by5vcmcvKQoqIFtTY2llbnRpZmljIGAhTURgXShodHRw
czovL2phYW50b2xsYW5kZXIuY29tL3Bvc3Qvc2NpZW50aWZpYy13cml0aW5nLXdpdGgtbWFy
a2Rvd24vKQoqIFtUZWNobmljYWwgYCFQYF0oaHR0cHM6Ly9sZWUtcGhpbGxpcHMub3JnL3Bh
bmZsdXRlLWdudXBsb3QvKQoKQWxsIG9mIHRob3NlIGFwcHJvYWNoZXMgdXNlIGAhUGAgYXMg
YW4gdW5kZXJseWluZyBmcmFtZXdvcmsgZm9yIGRvY3VtZW50CmNvbnZlcnNpb24uIGAhUGAg
aXMgYSBwb3dlcmZ1bCBmcmFtZXdvcmsgZm9yIGNvbnZlcnNpb24gYmV0d2VlbiBkaWZmZXJl
bnQKZG9jdW1lbnQgZm9ybWF0cyBpbmNsdWRpbmcgYCFNYCwgYGh0bWxgIGFuZCBgcGRmYC4g
YCFQYCBpbXBsZW1lbnRzIGFuCm93biBpbnRlcm5hbCBBU1QsIGluIHdoaWNoIGRpZmZlcmVu
dCBkb2N1bWVudCBmb3JtYXRzIGNhbiBiZSBpbXBvcnRlZCBhbmQKZXhwb3J0ZWQuIFVzaW5n
IHRoaXMgaW50ZXJtZWRpYXRlIGRvY3VtZW50IHJlcHJlc2VudGF0aW9uLCBgIVBgIGFsbG93
cwp0byBtb2RpZnkgZG9jdW1lbnQgdXNpbmcgZmlsdGVycywgd2hpY2ggb3BlcmF0ZSBvbiB0
aGUgQVNULiBGaWx0ZXJzCmNhbiBiZSB3cml0dGVuIGluIFtgaGFza2VsbGBdKGh0dHBzOi8v
cGFuZG9jLm9yZy9maWx0ZXJzLmh0bWwpLApbYGx1YWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9s
dWEtZmlsdGVycy5odG1sKSBhbmQKW2BweXRob25gXShodHRwczovL3BhbmRvYy5vcmcvZmls
dGVycy5odG1sI2J1dC1pLWRvbnQtd2FudC10by1sZWFybi1oYXNrZWxsKS4KCldoZXJlIGFz
IGAhUmAgYW5kIGAhUWAgYXJlIGludGVncmF0ZWQgZnJhbWV3b3Jrcywgd2hpY2ggYWRkaXRp
b25hbGx5CmRlcGVuZCBvbiBga25pdHJgLCBgUlN0dWRpb2AsIGBKdXB5dGVyYCwgYCFNYCBk
ZXBlbmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgCm9ubHkuIGAhTWAgbmF0aXZlbHkgb25seSBz
dXBwb3J0cyBleGVjdXRhYmxlIHB5dGhvbiBjb2RlIGJsb2NrcywgaG93ZXZlciwKb3RoZXIg
bGFuZ3VhZ2VzIGNhbiBiZSBleGVjdXRlZCB1c2luZyB3cmFwcGVycywgd2hpY2ggYXJlIGF2
YWlsYWJsZSBmb3IKb3RoZXIgbGFuZ3VhZ2VzLgoKLS0tCgojIGAhTWAgRmVhdHVyZXMgeyNz
ZWM6ZmVhdHVyZXN9CgpgIU1gIGltcGxlbWVudHMgZm9sbG93aW5nIGZlYXR1cmVzIHVzaW5n
IGFuIHNpbXBsZSBgIU1EYC1zdHlsZSBzeW50YXguCgoxLiByZWFkIGAhTURgIG1ldGEgZGF0
YSBmcm9tIGZyb250IG1hdHRlciwKc2VlIEBzZWM6bWV0YWRhdGEKYGBgbWQKCS0tLQoJCTxr
ZXk+OiA8dmFsdWU+CgktLS0KYGBgCgoyLiBleGVjdXRlIGFuZCBoaWRlL3Nob3cgcHl0aG9u
IGNvZGUgYmxvY2tzIGluc2lkZSBgIU1EYCB0ZXh0LApzZWUgQHNlYzpibG9jawpgYGBtZAoJ
YCFCVCozYCEKCQk8cHl0aG9uX2NvZGVfc2hvd24+CglgIUJUKjNgCgoJYCFCVCozYCEhCgkJ
PHB5dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AKYGBgCgozLiBnZW5lcmF0ZSBgIU1EYCB0
ZXh0IHVzaW5nIHB5dGhvbiBjb2RlLCBzZWUgQHNlYzptZHByaW50CmBgYG1kCglgIUJUKjNg
IQoJCV8oIjxtYXJrZG93bl90ZXh0PiIpCgkJX18oIiIiCgkJCTxtYXJrZG93bl90ZXh0PgoJ
CQk8bWFya2Rvd25fdGV4dD4KCQkJPG1hcmtkb3duX3RleHQ+CgkJIiIiKQoJYCFCVCozYApg
YGAKCjQuIGZvcm1hdCBvdXRwdXQgb2YgcHl0aG9uIHZhcmlhYmxlcyBpbnRvIGAhTURgIHRl
eHQsCnNlZSBAc2VjOmZvcm1hdApgYGBtZAoJT3V0cHV0IGludG8gdGV4dDogYFwhPHB5dGhv
bl92YXJpYWJsZT5gCmBgYAoKNS4gb3V0cHV0IHRoZSByZXN1bHQgb2YgcHl0aG9uIGV4cHJl
c3Npb25zIGludG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6aW5saW5lCmBgYG1kCglPdXRwdXQg
aW50byB0ZXh0OiBgXCE8cHl0aG9uX2V4cHJlc3Npb24+YApgYGAKCjYuIGluY2x1ZGUgYCFN
RGAgdGV4dCwgbWFrZSBkZXBlbmRlbmNpZXMgYW5kIGZvcndhcmQgbWV0YSBkYXRhLApzZWUg
QHNlYzppbmNsdWRlIGFuZCAhQHNlYzppbmNtZXRhLgpgYGBtZAoJISEhIGluY2x1ZGVfZmls
ZS5tZGkKYGBgCgo3LiBmb3JtYXQgbGlua3MgaW4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVu
dHMgZm9yCnJlZmVyZW5jaW5nIGV4dGVybmFsIGRvY3VtZW50cyBvZiB0aGUgc2FtZSBmb3Jt
YXQsCnNlZSBAc2VjOmZvcm1saW5rLgpgYGBtZAoJW0Zvcm1hdCBMaW5rIHRvIGh0bWwvcGRm
IGRvY3VtZW50XShwYXRoL3RvL2ZpbGUuXD8/PykKYGBgCgo4LiB1c2UgZm9ybWF0IGNvZGVz
IGluIG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMKY29kZSBpbiBgaHRtbGAgYW5k
IGBwZGZgIGRvY3VtZW50cywKc2VlIEBzZWM6Zm9ybWNvZGUuCmBgYG1kCglgIUJUKjNgIQoJ
CWRlZiBjb2RlX2h0bWwoKToKCQkJXygiPEhUTUxfQ09ERT4iKQoJCQlyZXR1cm4gIiIiCgkJ
CQk8TU9SRV9DT0RFPgoJCQkJPE1PUkVfQ09ERT4KCQkJCTxNT1JFX0NPREU+CgkJCSIiIgoJ
CWRlZiBjb2RlX3BkZigpOgoJCQlfXygiIiIKCQkJCXtURVhfQ09ERX0KCQkJCXtURVhfQ09E
RX0KCQkJCXtURVhfQ09ERX0KCQkJIiIiKQoJYCFCVCozYAoKCUZvcm1hdCBkZXBlbmRlbnQg
b3V0cHV0OiBgXCFjb2RlKClgCmBgYAoKLS0tCgojIFNjaWVudGlmaWMgV3JpdGluZyBpbiBg
IU1EYCB7I3NlYzpwYW5tZH0KCltgIU1EYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI3BhbmRvY3MtbWFya2Rvd24pIGlzIGEgbWFya3VwCmxhbmd1YWdlIGZvciB0ZWNobmlj
YWwgd3JpdGluZywgd2l0aCBlbXBoYXNpcyBvbiByZWFkYWJpbGl0eS4gYCFNRGAKY2FuIGJl
IHJlbmRlcmVkIGluIG1hbnkgZm9ybWF0cyBpbmNsdWRpbmcgYGh0bWxgIGFuZCBgcGRmYCBi
eSB1c2luZwpbYCFQYF0oaHR0cHM6Ly9wYW5kb2Mub3JnLykgZm9yIGV4YW1wbGUuCgpVc2lu
ZyB2YXJpb3VzIGAhTURgIGV4dGVuc2lvbnMgb2YgYCFQYCBhIHN1ZmZpY2llbnQgc3RydWN0
dXJlIGZvcgp3cml0aW5nIHNjaWVudGlmaWMgZG9jdW1lbnRzIGNhbiBiZSByZWZsZWN0ZWQg
dXNpbmcgYCFNRGAgc3ludGF4LgpgIU1gIHVzZXMgdGhlIGZvbGxvd2luZyBgIVBgIGAhTURg
IGV4dGVuc2lvbnMuCiogcGFyc2luZyBleHRlbnNpb25zCgkqIFthbGxfc3ltYm9sc19lc2Nh
cGFibGVdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYWxsX3N5
bWJvbHNfZXNjYXBhYmxlKQoJKiBbaW50cmF3b3JkX3VuZGVyc2NvcmVzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWludHJhd29yZF91bmRlcnNjb3JlcykK
CSogW2VzY2FwZWRfbGluZV9icmVha3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tZXNjYXBlZF9saW5lX2JyZWFrcykKCSogW3NwYWNlX2luX2F0eF9oZWFk
ZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3BhY2VfaW5f
YXR4X2hlYWRlcikKCSogW2xpc3RzX3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZV0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1saXN0c193aXRob3V0X3By
ZWNlZGluZ19ibGFua2xpbmUpCiogc3R5bGluZyBleHRlbnNpb25zCgkqIFtpbmxpbmVfY29k
ZV9hdHRyaWJ1dGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LWlubGluZV9jb2RlX2F0dHJpYnV0ZXMpCgkqIFtzdHJpa2VvdXRdKGh0dHBzOi8vcGFuZG9j
Lm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3RyaWtlb3V0KQoqIHN0cnVjdHVyaW5nIGV4
dGVuc2lvbnMKCSogW3lhbWxfbWV0YWRhdGFfYmxvY2tdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24teWFtbF9tZXRhZGF0YV9ibG9jaykKCSogW3BpcGVfdGFi
bGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXBpcGVfdGFi
bGVzKQoJKiBbbGluZV9ibG9ja3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tbGluZV9ibG9ja3MpCgkqIFtpbXBsaWNpdF9maWd1cmVzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWltcGxpY2l0X2ZpZ3VyZXMpCgkqIFth
YmJyZXZpYXRpb25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LWFiYnJldmlhdGlvbnMpCgkqIFtpbmxpbmVfbm90ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5lX25vdGVzKQoqIGNvZGUgaW5qZWN0aW9uCgkq
IFtyYXdfaHRtbF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1y
YXdfaHRtbCkKCSogW3Jhd190ZXhdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tcmF3X3RleCkKCmAhUGAgc3VwcG9ydHMKW2VxdWF0aW9uc10oaHR0cHM6Ly9w
YW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi10ZXhfbWF0aF9kb2xsYXJzKQpyZW5k
ZXJlZCBpbmxpbmUgYW5kIHNpbmdsZS1saW5lIGluIHRleC1zdHlsZSB1c2luZyBgJC4uLiRg
IGFuZCBgJCQuLi4kJGAsCltiaWJsaW9ncmFwaHldKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNjaXRhdGlvbnMpCnVzaW5nIHRoZSBgLS1jaXRlcHJvY2Agb3B0aW9uLApbc2Vj
dGlvbiBudW1iZXJpbmddKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNp
b24taGVhZGVyX2F0dHJpYnV0ZXMpCnVzaW5nIHRoZSBgLS1udW1iZXItc2VjdGlvbnNgIG9w
dGlvbiBhbmQKW3RhYmxlIG9mIGNvbnRlbnRzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjb3B0aW9uLS10b2MpCnVzaW5nIHRoZSBgLS10YWJsZS1vZi1jb250ZW50c2Agb3B0
aW9uLgoKYCFQYCBzdXBwb3J0cyBbYHhub3NgXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVj
ay9wYW5kb2MteG5vcykgZmlsdGVycwpmb3IgcmVmZXJlbmNpbmcgZG9jdW1lbnQgY29udGVu
dCBsaWtlCltmaWd1cmVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZmln
bm9zI3VzYWdlKSwKW2VxdWF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFu
ZG9jLWVxbm9zI3VzYWdlKSwKW3RhYmxlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2sv
cGFuZG9jLXRhYmxlbm9zI3VzYWdlKSwKW3NlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20v
dG9tZHVjay9wYW5kb2Mtc2Vjbm9zI3VzYWdlKQpieSB1c2luZyB0aGUgYC0tZmlsdGVyIHBh
bmRvYy14bm9zYCBvcHRpb24uCmB4bm9zYCBpbnRlZ3JhdGVzIGNsZXZlciByZWZlcmVuY2Vz
LCB3aGljaCBtZWFucyAiRmlnLiIsICJTZWMuIiwgIkVxLiIKYW5kICJUYWIuIiBhcmUgYWRk
ZWQgYXV0b21hdGljYWxseSB0byB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LgpJZiB0aGUg
cHJlZml4IGlzIHRvIGJlIG9taXR0ZWQsIHRoZSByZWZlcmVuY2UgY2FuIGJlIHdyaXR0ZW4g
YXMKYFwhQHJlZjpsYWJlbGAuCgoqKkV4YW1wbGUqKgpgYGBtZAojIyBSZWZlcmVuY2VkIFNl
Y3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBzZWM6bGFiZWwu
CgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncw
S0dnb0FBQUFOUwpVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0
Ly84L3czOEdJQVhESUJLRTBESAp4Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1RXJrSmdn
Zz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZmlnOmxhYmVsLgoK
QSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1CjIyMnwzMzN8
NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24geyN0Ymw6bGFiZWx9CgpUaGlz
IGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9XntcbWJveHtpfVxw
aX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwu
CgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KYGBgCgpUaGUgZmlsZSBgbWFy
a3kuYmliYCBpcyBzcGVjaWZpZWQgaW4gdGhlIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQKbWF0
dGVyIG9mIHRoZSBgIU1EYCB0ZXh0IGFuZCBjb250YWlucyB0aGUgZm9sbG93aW5nIGFydGlj
bGUuCgpgYGBiaWJ0ZXgKISEhIC4uL2RhdGEvbWFya3kuYmliIHJhdwpgYGAKCioqT3V0cHV0
KioKCiMjIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZl
cmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFn
ZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBVUFBQUFGQ0FZQUFBQ05i
eWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4Z2xqTkJBQU85VFhMMFk0
T0h3QUFBQUJKUlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5j
ZSB0byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDEx
MXw0NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24u
IHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRc
bWJveHtlfV57aVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0
byBAZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KCi0tLQoK
IyBgIU1QYCBDb21tYW5kLUxpbmUgVXNhZ2UKCiMjIGAhTVBgIFNjcmlwdCBVc2FnZQoKYCFN
YCBpcyBzdXBwbGllZCBhcyBhIHNpbmdsZS1maWxlIHNjcmlwdCB3aGljaCBjb250YWlucyB0
aGUgYCFNYApgIU1GYCBhcyB3ZWxsIGFzIHRoZSBgIU1gIGRvY3VtZW50YXRpb24gYG1hcmt5
Lm1kYCwgYG1hcmt5Lm1kaWAKYW5kIGBtYXJreS5iaWJgLgoKQWZ0ZXIgZG93bmxvYWRpbmcg
YCFNUGAgdGhlIHNjcmlwdCBuZWVkcyB0byBiZSBwbGFjZWQgaW4gYSBwcm9qZWN0Cndvcmtp
bmcgZGlyZWN0b3J5IGB3b3JraW5nX2RpcmAuIFRoZSBzY3JpcHQgY2FuIGJlIGludm9rZWQg
dXNpbmcKYSBweXRob24gaW50ZXJwcmV0ZXIgYHB5dGhvbmAgYCFNcGAgb3IgaXQgY2FuIGJl
IGV4ZWN1dGVkIHVzaW5nIGEKc2hlbGw6CmBgYGJhc2gKPiBjZCB3b3JraW5nX2Rpcgo+IGNo
bW9kICt4IG1hcmt5LnB5Cj4gLi9tYXJreS5weQpgYGAKCkEgbmV3IHByb2plY3QgaXMgaW5p
dGlhbGl6ZWQgaW4gdGhlIGB3b3JraW5nX2RpcmAgdXNpbmcgdGhlIGAtLWluaXRgCm9wdGlv
bi4gYCFNYCBjcmVhdGVzIGEgZGlyZWN0b3J5IHRyZWUgZm9yIHRoZSBwcm9qZWN0LCB3aGlj
aCBpcwpleHBsYWluZWQgaW4gZGV0YWlsIGluIEBzZWM6cHJvamVjdC4gVGhlIGAhTWAgYCFN
RmAgYW5kCmRvY3VtZW50YXRpb24gYG1hcmt5Lm1kYCwgYG1hcmt5Lm1kaWAgYW5kIGBtYXJr
eS5iaWJgIGFyZSBhdXRvLWdlbmVyYXRlZAphbmQgcGxhY2VkIGluc2lkZSB0aGUgc3ViZGly
cyBgbWQvYCBhbmQgYGRhdGEvYCBpbiBgd29ya2luZ19kaXJgCmFjY29yZGluZ2x5LgpgYGBi
YXNoCj4gY2Qgd29ya2luZ19kaXIKPiAuL21hcmt5LnB5IC0taW5pdApXUklURSAuL01ha2Vm
aWxlCldSSVRFIC4vbWQvbWFya3kubWQKV1JJVEUgLi9tZC9tYXJreS5tZGkKV1JJVEUgLi9k
YXRhL21hcmt5LmJpYgpVU0FHRQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRtbCBo
dHRwZGAKMy4gYG1ha2UgYWxsLXBkZmAKYGBgCgpgIU1gIHJlbmRlcnMgdGhlIGRvY3VtZW50
YXRpb24gdXNpbmcgYCFQYCBpbnRvIGBodG1sYCBhbmQKYHBkZmAgdXNpbmcgYG1ha2UgYWxs
YC4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgY2FuIGJlIHJlbmRlcmVkIGFmdGVyCmlu
c3RhbGxpbmcgdGhlIGRlcGVuZGVuY2llcyBgcHl0aG9uLXB5eWFtbGAsIGBwYW5kb2NgIGFu
ZCBgcGFuZG9jLXhub3NgCihgcGFuZG9jLWZpZ25vc2AsIGBwYW5kb2Mtc2Vjbm9zYCwgYHBh
bmRvYy1lcW5vc2AsIGBwYW5kb2MtdGFibGVub3NgKS4KVGhlIGRldGFpbHMgYXJlIHNob3du
IGluIHRoZSBgIU1GYCBoZWxwIG1lc3NhZ2UgaW4gQHNlYzptYWtlZmlsZS4KCiMjIGAhTWAg
UHJvamVjdCBTdHJ1Y3R1cmUgeyNzZWM6cHJvamVjdH0KCkEgYCFNYCBwcm9qZWN0IGhhcyB0
aGUgZm9sbG93aW5nIHN0cnVjdHVyZSwgd2hpY2ggaXMgYXV0by1nZW5lcmF0ZWQKaW4gdGhl
IHByb2plY3QgZGlyZWN0b3J5IGB3b3JraW5nX2RpcmAgYWZ0ZXIgaW52b2NhdGlvbiBvZgpg
IU1wYCBgLS1pbml0YC4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5j
aGVja19vdXRwdXQoWyJtYWtlIiwKCQkidHJlZSJdKS5kZWNvZGUoInV0Zi04Iikuc3BsaXQo
IlxuIik6CgkJaWYgaS5zdGFydHN3aXRoKCIjIik6CgkJCXRleHQgKz0gaSArICJcbiIKYGBg
CgpgYGAKYCF0ZXh0YApgYGAKCkJ5IGludm9raW5nIGBtYWtlIGFsbGAgYWxsIGZpbGVzIGBt
ZC8qLm1kYCBhcmUgdHJhbnNmb3JtZWQKaW50byBjb3JyZXNwb25kaW5nIGBodG1sLyouaHRt
bGAgYW5kIGBwZGYvKi5wZGZgIGZpbGVzLiBCeQppbnZva2luZyBgbWFrZSBodHRwZGAgYSBw
eXRob24gd2ViIHNlcnZlciBpcyBzdGFydGVkIGluIGBodG1sL2AuCgpBbGwgdXNlci1nZW5l
cmF0ZWQgcHJvamVjdCBjb250ZW50IGdvZXMgaW50byBgbWQvKi5tZChpKWAgZm9yCmAhTURg
IHRleHQgYW5kIGAhTURgIGluY2x1ZGUgZmlsZXMgYW5kIGBkYXRhLypgIGZvciBpbWFnZXMs
CmJpYmxpb2dyYXBoeSwgdmlkZW9zLCBodG1sIGZyYW1lcywgZXRjLi4uCgoqKkFUVEVOVElP
TjoqKiBUaGUgZmlsZXMgaW4gdGhlIGRpcmVjdG9yaWVzIGBidWlsZC8qLm1kYCBhcmUKKiph
dXRvLWdlbmVyYXRlZCoqLiBBbGwgdXNlci1nZW5lcmF0ZWQgY29udGVudCBgKi5tZGAgYW5k
IGAqLm1kaWAKaGFzIHRvIGJlIHBsYWNlZCBpbnNpZGUgdGhlIGRpcmVjdG9yeSBgbWQvYC4g
SW52b2tpbmcgYG1ha2UgY2xlYW5gCndpbGwgZGVsZXRlIGFsbCBmaWxlcyBpbiBgaHRtbC9g
LCBgYnVpbGQvYCBhbmQgYHBkZi9gLgoKIyMgYCFNYCBNYWtlZmlsZSBVc2FnZSB7I3NlYzpt
YWtlZmlsZX0KCkJ5IHJ1bm5pbmcgYG1ha2VgIG9yIGBtYWtlIGhlbHBgIGluIHRoZSBwcm9q
ZWN0IGB3b3JraW5nX2RpcmAgdGhlCmAhTUZgIGhlbHAgaXMgc2hvd24uCmBgYCEhCgl0ZXh0
ID0gIiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsibWFrZSIsCgkJImhl
bHAiXSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIpOgoJCWlmIGkuc3RhcnRzd2l0aCgi
IyIpOgoJCQl0ZXh0ICs9IGkgKyAiXG4iCmBgYAoKYGBgCmAhdGV4dGAKYGBgCgojIyBgIU1g
IENoZWF0IFNoZWV0CgpCeSBydW5uaW5nIGBtYWtlIGNoZWF0YCBpbiB0aGUgcHJvamVjdCBg
d29ya2luZ19kaXJgIHRoZSBgIU1gIGNoZWF0CnNoZWV0IGlzIHNob3duLCB3aGljaCBwcmVz
ZW50cyBhIHF1aWNrIG92ZXJ2aWV3IG9mIGAhTWAgc3BlY2lhbAptYXJrdXAgZm9yIGV4ZWN1
dGlvbiBvZiBweXRob24gY29kZSBhbmQgbWFuaXB1bGF0aW9uIG9mIGAhTURgIHRleHQsCmFj
Y29yZGluZyB0byB0aGUgZmVhdHVyZXMgZGVzY3JpYmVzIGluIEBzZWM6ZmVhdHVyZXMuCmBg
YCEhCgl0ZXh0ID0gIiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsibWFr
ZSIsCgkJImNoZWF0Il0pLmRlY29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0
YXJ0c3dpdGgoIiMiKToKCQkJaSA9IGkucmVwbGFjZShyIi5cPz8/IiwgciIuXFw/Pz8iKQoJ
CQlpID0gaS5yZXBsYWNlKHIiLj8/PyIsIHIiLlw/Pz8iKQoJCQl0ZXh0ICs9IGkgKyAiXG4i
CmBgYAoKYGBgCmAhdGV4dGAKYGBgCgotLS0KCiMgYCFNYCBQcmVwcm9jZXNzb3IgTWFya3Vw
CgojIyBZYW1sIE1ldGEgRGF0YSBpbiBGcm9udCBNYXR0ZXIgeyNzZWM6bWV0YWRhdGF9CgpN
ZXRhIGRhdGEgaXMgYW5ub3RhdGVkIGluIHRoZSBmcm9udCBtYXR0ZXIgb2YgYSBgIU1EYCB0
ZXh0IGRvY3VtZW50LgpUaGUgZnJvbnQgbWF0dGVyIG11c3Qgc3RhcnQgaW4gdGhlIGZpcnN0
IGxpbmUgd2l0aCBgLS0tYCBhbmQgcHJlY2VkZXMgYWxsCm90aGVyIHRleHQgYmVpbmcgZmVu
Y2VkIGJ5IGAtLS1gLiBUaGUgbWV0YSBkYXRhIGlzIGluIGB5YW1sYCBmb3JtYXQuClRoZSBg
eWFtbGAgYmxvY2sgaXMgcGFyc2VkIHVzaW5nIGBweXRob24tcHl5YW1sYC4gQnkgZGVmYXVs
dCBhbGwgbWV0YQpkYXRhIGlzIGltcG9ydGVkIGludG8gdGhlIHByZXByb2Nlc3NlZCBkb2N1
bWVudC4gSWYgYSBtZXRhCmRhdGEga2V5IHN0YXJ0cyB3aXRoIGAtYCB0aGUga2V5IGlzIG5v
dCBpbXBvcnRlZCBpbnRvIHRoZSByZXN1bHRpbmcKbWV0YSBkYXRhIG9mIHRoZSBwcmVwcm9j
ZXNzZWQgZG9jdW1lbnQsIGhvd2V2ZXIgdGhlIGtleSB3aWxsIGJlCmV4cG9zZWQgaW50byB0
aGUgcHl0aG9uIHNjb2xlIGFzIGEgbG9jYWwgdmFyaWFibGUuIEluIHRoZSBmb2xsb3dpbmcK
ZXhtYW1wbGUgYWxsIGtleXMgZXhjZXB0IGBmaWdzaXplYCwgYGZpZ2RwaWAgYW5kIGB2ZXJz
aW9uYCBhcmUgY29waWVkCmludG8gdGhlIHByZXByb2Nlc3NlZCBgIU1EYCBkb2N1bWVudC4K
CioqRXhhbXBsZSoqCmBgYHlhbWwKCi0tLQp0aXRsZTogYCF0aXRsZWAKZGF0ZTogYERhdGVg
CmF1dGhvcjogYEF1dGhvcmAKbGluay1jaXRhdGlvbnM6IGAhbGlua19jaXRhdGlvbnNgCmJp
Ymxpb2dyYXBoeTogYCFiaWJsaW9ncmFwaHlgCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
XGh5cGVyc2V0dXB7CiAgY29sb3JsaW5rcz1mYWxzZSwKICBhbGxib3JkZXJjb2xvcnM9ezAg
MCAwfSwKICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH08L3N0eWxlPgp4
bm9zLWNsZXZlcmVmOiBgIXhub3NfY2xldmVyZWZgCnhub3MtY2FwaXRhbGlzZTogYCF4bm9z
X2NhcGl0YWxpc2VgCmZvbnRzaXplOiBgIWZvbnRzaXplYAotdmVyc2lvbjogYCF2ZXJzaW9u
YAotZmlnc2l6ZTogYCFmaWdzaXplYAotZmlnZHBpOiBgIWZpZ2RwaWAKCi0tLQoKYGBgCgpU
aGUgbWV0YSBkYXRhIGZpZWxkcwpbYHRpdGxlYCwgYGRhdGVgLCBgYXV0aG9yYF0oaHR0cHM6
Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI21ldGFkYXRhLXZhcmlhYmxlcyksCltgbGluay1j
aXRhdGlvbnNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjb3RoZXItcmVsZXZh
bnQtbWV0YWRhdGEtZmllbGRzKSwKW2BiaWJsaW9ncmFwaHlgXShodHRwczovL3BhbmRvYy5v
cmcvTUFOVUFMLmh0bWwjY2l0YXRpb24tcmVuZGVyaW5nKSBhbmQKW2BoZWFkZXItaW5jbHVk
ZXNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjdmFyaWFibGVzLXNldC1hdXRv
bWF0aWNhbGx5KQphcmUgcHJvY2Vzc2VkIGJ5IGAhUGAgZHVyaW5nIGRvY3VtZW50IHJlbmRl
cmluZy4gYGZvbnRzaXplYCBhZGp1c3RzIHRoZQpmb250IHNpemUgaW4gW2BodG1sYF0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1mb3ItaHRtbCkKYW5kIFtg
cGRmYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1mb3ItbGF0
ZXgpIGRvY3VtZW50cy4KVGhlIGBoZWFkZXItaW5jbHVkZXNgIGZpZWxkIGlzIHVzZWQgZm9y
IHVuZGVybGluaW5nIGxpbmtzIGluIGBwZGZgCmFuZCBgaHRtbGAgZG9jdW1lbnRzLiBUaGUg
YHhub3MtY2xldmVyZWZgIGFuZCBgeG5vcy1jYXBpdGFsaXNlYApmaWVsZHMgYXJlIHVzZWQg
YnkgdGhlIFtgcGFuZG9jLXhub3NgXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5k
b2MteG5vcykKZXh0ZW5zaW9ucyBmb3IgcmVmZXJlbmNpbmcKW2ZpZ3VyZXNdKGh0dHBzOi8v
Z2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1maWdub3MjY3VzdG9taXphdGlvbiksClt0YWJs
ZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy10YWJsZW5vcyNjdXN0b21p
emF0aW9uKSwKW3NlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mt
c2Vjbm9zI2N1c3RvbWl6YXRpb24pIGFuZApbZXF1YXRpb25zXShodHRwczovL2dpdGh1Yi5j
b20vdG9tZHVjay9wYW5kb2MtZXFub3MjY3VzdG9taXphdGlvbikuCgpUaGUgZmllbGQgYGhl
YWRlci1pbmNsdWRlc2AgZW5kcyB3aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgLCB3aGljaApz
cGVjaWZpZXMgY29ycmVzcG9uZGluZyBvcHRpb25zIGZvciBnZW5lcmF0aW9uIG9mIGBwZGZg
IGFuZCBgaHRtbGAKZG9jdW1lbnRzLiBEdXJpbmcgbWFrZSwgYCFNYCBzY2FucyBhbGwgbWV0
YSBkYXRhIGZpZWxkcywgYW5kCmZpZWxkcyB3aGljaCBlbmQgd2l0aCBgLS1wZGZgIGFuZCBg
LS1odG1sYCBhcmUgc2VsZWN0ZWQgYW5kIGZvcndhcmRlZAp0byBgIVBgIGJhc2VkIG9uIHRo
ZSBmb3JtYXQgdG8gYmUgcmVuZGVyZWQuIFRoaXMgd2FzIGZvcm1hdCBkZXBlbmRlbnQKbWV0
YSBkYXRhIGNhbiBiZSBzcGVjaWZpZWQgaW4gYCFNYCBNYXJrZG93biB0ZXh0LgoKVGhlIGB2
ZXJzaW9uYCBmaWVsZCBpcyBhIHVzZXItZGVmaW5lZCBmaWVsZAp3aGljaCBzaG93cyB0aGUg
dmVyc2lvbiBvZiB0aGlzIGRvY3VtZW50OiAqYCF2ZXJzaW9uYCouIGBmaWdzaXplYCBhbmQK
YGZpZ2RwaWAgYXJlIHVzZWQgaW4gdGhpcyBkb2N1bWVudCB0byBjb250cm9sIHRoZSBmaWd1
cmUgc2l6ZSBhbmQKcmVzb2x1dGlvbiBpbiB0aGUgYCFOVWAgYW5kIGAhUExgIGV4YW1wbGUs
IHNlZSBAc2VjOmV4YW1wbGVzLiBUaGUgZm9udApzaXplIGlzIGAhZm9udHNpemVgIGFuZCB0
aGUgQGZpZzpmaWd1cmUxLCAhQGZpZzpmaWd1cmUyXzEsCiFAZmlnOmZpZ3VyZTJfMiwgIUBm
aWc6ZmlndXJlMl8zIGFuZCAhQGZpZzpmaWd1cmUyXzQgaGF2ZSBhIHNpemUgb2YKYCEieCIu
am9pbihzdHIoaSkgZm9yIGkgaW4gZmlnc2l6ZSlgY20uIFRoZSBmb250IHNpemUgYXBwbGll
cyB0bwpib3RoIGRvY3VtZW50IHRleHQgYW5kIGZpZ3VyZSB0ZXh0LgoKQXMgdGhlIHVzZXIt
ZGVmaW5lZCBmaWVsZHMgYXJlIHByZWNlZWRlZCB3aXRoIGAtYCwgdGhleSBhcmUgbm90IGNv
cGllZAppbnRvIHRoZSBtZXRhIGRhdGEgb2YgdGhlIHByZXByb2Nlc3NlZCBgIU1EYCB0ZXh0
LiBUaGV5IGFyZSBvbmx5CmV4cG9zZWQgaW50byB0aGUgcHl0aG9uIHNjb3BlIGFzIHZhcmlh
YmxlcyBmb3IgcHJvY2Vzc2luZyB0aGUgYCFNYApgIU1EYCB0ZXh0LCBhcyBkZXNjcmliZWQg
aW4gQHNlYzppbmNtZXRhLgoKIyMgUHl0aG9uIENvZGUgQmxvY2tzIGluc2lkZSBgIU1EYCBU
ZXh0IHsjc2VjOmJsb2NrfQoKUHl0aG9uIGNvZGUgY2FuIGJlIGV4ZWN1dGVkIGR1cmluZyB0
cmFuc2Zvcm1hdGlvbiBvZiB0aGUgYCFNRGAgdGV4dC4KUHl0aG9uIGNvZGUgaXMgZGlyZWN0
bHkgd3JpdHRlbiBpbnNpZGUgdGhlIGAhTURgIHRleHQgYW5kIGlzIGZlbmNlZAp1c2luZyB0
aGUgYGAgYCFCVCozYCBgYCBzdGF0ZW1lbnQuIFRoZSBibG9jayBuZWVkcyB0byBzdGFydCB3
aXRoIGVpdGhlcgpgXCFgIG9yIGBcISFgLgoqIGBcIWA6IFRoZSBweXRob24gY29kZSBpcyBl
eGVjdXRlZCBhbmQgKipzaG93bioqIGluIHRoZSBvdXRwdXQuCiogYFwhIWA6IFRoZSBweXRo
b24gY29kZSBpcyBleGVjdXRlZCBhbmQgKipoaWRkZW4qKiBpbiB0aGUgb3V0cHV0LgoKYGBg
bWQKCWAhQlQqM2AhCgkJPHB5dGhvbl9jb2RlX3Nob3duPgoJYCFCVCozYAoKCWAhQlQqM2Ah
IQoJCTxweXRob25fY29kZV9oaWRkZW4+CglgIUJUKjNgCmBgYAoKTWV0YSBkYXRhIGZyb20g
YCFNRGAgZnJvbnQgbWF0dGVyIGNhbiBiZSB1c2VkIGFzIGxvY2FsIHZhcmlhYmxlcyBpbgpw
eXRob24gY29kZSBibG9ja3MuIFRoZSBgaW1wb3J0YCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQg
aW4gcHl0aG9uIGNvZGUKYmxvY2tzIGluIG9yZGVyIHRvIGFjY2VzcyBpbnN0YWxsZWQgcHl0
aG9uIHBhY2thZ2VzLiBBbGwgY29kZSBibG9ja3MKc3BhbiBvbmUgbGFyZ2Ugc2NvcGUgZm9y
IHNoYXJpbmcgZnVuY3Rpb25zIGFuZCBsb2NhbCB2YXJpYWJsZXMuClVzaW5nIHRoZSBgcHJp
bnQoKWAgZnVuY3Rpb24gdGhlIHRleHQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xl
CmFuZCAqKm5vdCoqIGluc2lkZSB0aGUgcmVzdWx0aW5nIGAhTURgIHRleHQuIEluIG9yZGVy
IHRvIG1vZGlmeQp0aGUgYCFNRGAgdGV4dCB1c2luZyBgIU1gIGR1cmluZyBwcmVwcm9jZXNz
aW5nLCB0aGUgYCFQMWAgc3RhdGVtZW50CmhhcyB0byBiZSB1c2VkLCBzZWUgQHNlYzptZHBy
aW50LgoKKipFeGFtcGxlKioKYGBgIQoJaW1wb3J0IG51bXB5IGFzIG5wCglkZWYgZ2V0X3go
YT0wKToKCQlyZXR1cm4gbnAuYXJyYXkoWzQxICsgYV0pCgl5ID0gMQpgYGAKClRoaXMgaXMg
YSBwYXJhZ3JhcGguCgpgYGAhCgl4ID0gZ2V0X3goeSkKCXByaW50KCJIZWxsbyBDb25zb2xl
ISB4IGlzIiwgeCkKYGBgCgojIyBHZW5lcmF0aW9uIG9mIGAhTURgIFRleHQgdXNpbmcgUHl0
aG9uIENvZGUgeyNzZWM6bWRwcmludH0KCiMjIyBUaGUgYCFQMWAgU3RhdGVtZW50CgpVc2lu
ZyB0aGUgYHByaW50KClgIHN0YXRlbWVudCB0aGUgdGV4dCB3aWxsIGJlIHByaW50ZWQgdG8g
dGhlIGNvbnNvbGUuCldoZW4gdXNpbmcgdGhlIGAhUDFgIGFuZCBgIVAyYCBzdGF0ZW1lbnRz
IG5ldyBgIU1EYCB0ZXh0IGNhbiBiZQppbnNlcnRlZCBkeW5hbWljYWxseSBpbnRvIHRoZSBk
b2N1bWVudCBkdXJpbmcgcHJlcHJvY2Vzc2luZy4KCioqYCFQMWAgU3RhdGVtZW50KioKKiBg
XygqYXJncywgc2VwPSIgIilgOgoJMS4gY29udmVydCBhcmd1bWVudHMgdG8gc3RyaW5nCgky
LiBqb2luIGFyZ3VtZW50cyB1c2luZyBgc2VwYAoqIGBfKF8sICphcmdzICAgKWA6IGFwcGVu
ZCB0byBwcmV2aW91cyBvdXRwdXQKKiBgXyhfLCAqYXJncywgXylgOiBhcHBlbmQgdG8gcHJl
dmlvdXMgb3V0cHV0IGFuZCBhcHBlbmQgbmV4dCBvdXRwdXQKKiBgXyggICAqYXJncywgXylg
OiBhcHBlbmQgbmV4dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKCioqYCFQMmAgU3RhdGVtZW50
KioKKiBgX18oYXJnLCBjcm9wPVRydWUsIHNoaWZ0PSIiKWA6CgkxLiBjb252ZXJ0IGBhcmdg
IHRvIHN0cmluZwoJMi4gY3JvcCBhbmQgcHJlcGVuZCBgc2hpZnRgIHN0cmluZyB0byBlYWNo
IGxpbmUKKiBgX18oYXJnLCBfKWA6IGFwcGVuZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1
dAoKKipDcm9wIGFuZCBTaGlmdCoqCmBgYHB5CmRlZiB0ZXN0KCk6CglfXygiIiIKCQkqIExp
c3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAxCgkiIiIpCglfXygiIiIKCQkqIExpc3QgTGV2
ZWwgMgoJCSogTGlzdCBMZXZlbCAyCgkJICAgICogTGlzdCBMZXZlbCAzCgkiIiIsIHNoaWZ0
PSIgIio0KQpgYGAKCmBgYG1kCiogTGlzdCBMZXZlbCAxCiogTGlzdCBMZXZlbCAxCiAgICAq
IExpc3QgTGV2ZWwgMgogICAgKiBMaXN0IExldmVsIDIKICAgICAgICAqIExpc3QgTGV2ZWwg
MwpgYGAKCioqRXhhbXBsZSoqCmBgYCEKCXkgKz0gMQoJX18oZiIiIgoJCSogVGhpcyBpcyBg
bWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkJKiBUaGlzIGlzIGBtYXJreWAgVmVyc2lv
biAqe3ZlcnNpb259Ki4KCSIiIikKCV9fKGYiIiIKCQkxLiBUaGlzIGlzIGBtYXJreWAgVmVy
c2lvbiAqe3ZlcnNpb259Ki4KCQkyLiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNp
b259Ki4KCSIiIiwgc2hpZnQ9IiAiKjQpCmBgYAoKYGBgIQoJXygiVGhpcyIsIF8pCglfKCJp
cyIpCglfKF8sICIgb25lIiwgXykKCV8oImxpbmUhIG5vdCBlbmRpbmcgd2l0aCBcXCIpCglf
KCJ0aGlzPyIpCmBgYAoKYGBgIQoJXyhmIkhlbGxvIE1hcmtkb3duISB4IGlzICoqe3h9Kiog
YW5kIHkgaXMgKnt5fSoiKQpgYGAKCiMjIyBJbmRlbnRhdGlvbiBvZiB0aGUgYCFQMWAgU3Rh
dGVtZW50CgpUaGUgYCFQMWAgc3RhdGVtZW50IG5lZWRzIHRvIGJlIGluZGVudGVkIGFjY29y
ZGluZyB0byB0aGUgcHl0aG9uIHByb2dyYW0KZmxvdyAoYGZvcmAsIGB3aGlsZWAsIGBpZmAs
IGBlbHNlYCwgYHRyeWAsIGB3aXRoYCwgYGRlZmAsIGBjbGFzc2ApIGFuZApzdXBwb3J0cyBk
eW5hbWljIGluc2VydGlvbiBvZiBgIU1EYCB0ZXh0IGludG8gdGhlIGRvY3VtZW50IGJhc2Vk
Cm9uIGxvb3BzIGFuZCBjb25kaXRpb25zLgoKKipFeGFtcGxlIDEqKgoKYGBgIQoJXygiVGhp
cyBpcyB0aGUgKipnZW5lcmF0ZWQgb3V0cHV0Kio6IikKCV8oIiIpCglfKCI+IFRoaXMgaXMg
YSAqbGlzdGluZyo6IikKCXRleHQgPSBbInplcm8iLCAib25lIiwgInR3byIsICJ0aHJlZSJd
Cglmb3IgaSBpbiByYW5nZSgxMCk6CgkJaWYgaSA8IDI6CgkJCV8oZiI+IHtpfSIpCgkJZWxp
ZiBpID09IDI6CgkJCWogPSB0ZXh0W2ldCgkJCV8oZiI+IHtqfSIpCgkJZWxpZiBpID09IDM6
CgkJCV8oIiIpCgkJZWxpZiBpIDwgNzoKCQkJXyhmIj4+IHsnICAgICcqKGktNCl9KiB7aX0i
KQoJCWVsaWYgaSA9PSA3OgoJCQlfKCIiKQoJCWVsc2U6CgkJCWogPSBpIC0gNwoJCQlrID0g
dGV4dFtqXQoJCQlfKGYiPiB7an0uIHtrfSIpCmBgYAoKKipFeGFtcGxlIDIqKgoKQHRibDp0
YWJsZTEgaXMgZ2VuZXJhdGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgcHl0aG9uIGNsb2RlIGJs
b2NrLgoKYGBgIQoJbiA9IDEzCglkZWMgPSBbIiolcyoiLCAiKiolcyoqIiwgIn5+JXN+fiIs
ICJgJXNgIiwKCQlyIiRcdGltZXNeJXMkIiwgIiRcaW5mdHlfJXMkIl0KCV8oInwiLmpvaW4o
IlgiKm4pICsgIlxuIiArICJ8Ii5qb2luKCItIipuKSkKCWZvciBpIGluIHJhbmdlKG4pOgoJ
CWZpbGwgPSBbY2hyKG9yZCgiQSIpKygyKmkrMyprKSUyNikgZm9yIGsgaW4gcmFuZ2UoaSsx
KV0KCQlmaWxsID0gW2RlY1sobCtpKSVsZW4oZGVjKV0layBmb3IgbCwgayBpbiBlbnVtZXJh
dGUoZmlsbCldCgkJdGV4dCA9IGxpc3QoIjAiKSpuCgkJdGV4dFsobj4+MSktKGk+PjEpOihu
Pj4xKSsoaT4+MSldID0gZmlsbAoJCV8oInwiLmpvaW4odGV4dCkpCmBgYAoKVGFibGU6IFRh
YmxlIGlzIGdlbmVyYXRlZCB1c2luZyBjb2RlIGFuZCB0aGUgYCFQMWAgc3RhdGVtZW50LiB7
I3RibDp0YWJsZTF9CgojIyBGb3JtYXR0ZWQgT3V0cHV0IG9mIFB5dGhvbiBWYXJpYWJsZXMg
eyNzZWM6Zm9ybWF0fQoKYCFNYCBjYW4gb3V0cHV0IHB5dGhvbiB2YXJpYWJsZXMgaW5saW5l
IGludG8gYCFNRGAgdGV4dCB1c2luZwp0aGUgYGAgYFwhVkFSSUFCTEVgIGBgIHN0YXRlbWVu
dC4gYFZBUklBQkxFYCBjYW4gYmUgYW55IHB5dGhvbiB2YXJpYWJsZQpmcm9tIGEgcHl0aG9u
IGNvZGUgYmxvY2sgb3IgbWV0YSBkYXRhIGZpZWxkLiBUaGUgb3V0cHV0IGNhbiBiZQpmb3Jt
YXR0ZWQgdXNpbmcgdGhlIGBgIGBcIVZBUklBQkxFWzpGT1JNQVRdYCBgYCBzdGF0ZW1lbnQg
YWNjb3JkaW5nCnRvIHRoZSBweXRob24gb3BlcmF0b3IgYHs8dmFyaWFibGU+Wzo8Zm9ybWF0
Pl19YCBpbXBsZW1lbnRlZCBpbiB0aGUKW2BzdHIuZm9ybWF0KClgXShodHRwczovL2RvY3Mu
cHl0aG9uLm9yZy8zL2xpYnJhcnkvc3RyaW5nLmh0bWwjZm9ybWF0c3RyaW5ncykKc3BlY2lm
aWNhdGlvbi4gVGhlIGBgIGBcIVZBUklBQkxFYCBgYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZAp1
c2luZyBgYCBgXFwhVkFSSUFCTEVgIGBgLgoKKipFeGFtcGxlKioKYGBgIQoJeCA9IGludCgx
KQoJeSA9IGZsb2F0KDIuMykKCXogPSAwCglhID0gWzEsIDIsIDNdCgliID0gKDQsIDUpCmBg
YAoKYGBgbWQKVGhpcyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyBgXCF4OjAzZGAgYW5kIHkg
aXMgYFwheTouMmZgLgpPdGhlciBjb250ZW50IGlzOiBgXCFhYCwgYFwhYmAgYW5kIGVzY2Fw
aW5nIHdvcmtzOiBgXFwhemAuCmBgYAoKVGhpcyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyBg
IXg6MDNkYCBhbmQgeSBpcyBgIXk6LjJmYC4KT3RoZXIgY29udGVudCBpczogYCFhYCwgYCFi
YCBhbmQgZXNjYXBpbmcgd29ya3M6IGBcIXpgLgoKIyMgT3V0cHV0IFJlc3VsdHMgb2YgUHl0
aG9uIEV4cHJlc3Npb25zIHsjc2VjOmlubGluZX0KCmAhTWAgb3V0cHV0cyByZXN1bHRzIG9m
IHB5dGhvbiBleHByZXNzaW9ucyBpbmxpbmUgaW50byBgIU1EYCB0ZXh0CnVzaW5nIHRoZSBg
YCBgXCFFWFBSRVNTSU9OYCBgYCBzdGF0ZW1lbnQuIGBFWFBSRVNTSU9OYCBjYW4gYmUgYW55
IHB5dGhvbgpleHByZXNzaW9uLiBUaGUgb3V0cHV0IGNhbiBiZSBmb3JtYXR0ZWQgdXNpbmcg
dGhlIHB5dGhvbgpgYCBgXCFFWFBSRVNTSU9OWzpGT1JNQVRdYCBgYCBzdGF0ZW1lbnQgYWNj
b3JkaW5nIHRvIHRoZSBweXRob24gb3BlcmF0b3IKYHs8ZXhwcmVzc2lvbj5bOjxmb3JtYXQ+
XX1gIGltcGxlbWVudGVkIGluIHRoZSBweXRob24KW2BmYC1zdHJpbmdzXShodHRwczovL2Rv
Y3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJp
bmdzKQpzcGVjaWZpY2F0aW9uLiBUaGUgYGAgYFwhRVhQUkVTU0lPTmAgYGAgc3RhdGVtZW50
IGlzIGVzY2FwZWQKdXNpbmcgYGAgYFxcIUVYUFJFU1NJT05gIGBgLgoKKipFeGFtcGxlKioK
YGBgbWQKVGhpcyBpcyBhIGxpc3Qgd2l0aCB0aGUgbnVtYmVycyBgXCEiLCAiLmpvaW4oW3N0
cihpKSBmb3IgaSBpbiBhXSlgLgpUaGUgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiBgZ2V0X3hg
IGlzIGBcIWdldF94KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFxcIWdldF94KGJbMV0pWzBd
YC4KYGBgCgpUaGlzIGlzIGEgbGlzdCB3aXRoIHRoZSBudW1iZXJzIGAhIiwgIi5qb2luKFtz
dHIoaSkgZm9yIGkgaW4gYV0pYC4KVGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gYGdldF94
YCBpcyBgIWdldF94KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFwhZ2V0X3goYlsxXSlbMF1g
LgoKIyMgSW5jbHVkZSBTdGF0ZW1lbnQgYW5kIE1ha2UgRGVwZW5kZW5jaWVzIHsjc2VjOmlu
Y2x1ZGV9CgpgIU1gIHN1cHBvcnRzIGluY2x1ZGUgb2YgYCFNRGAgdGV4dCB1c2luZyB0aGUg
YFwhISFgIHN0YXRlbWVudC4KVGhlIGBcISEhYCBzdGF0ZW1lbnQgbXVzdCBiZSBvbiBhIHNp
bmdsZSBsaW5lIGFuZCBmb2xsb3dzIHRoZSBwYXRoCm9mIHRoZSBpbmNsdWRlIGZpbGUuIFRo
ZSBwYXRoIG9mIHRoZSBpbmNsdWRlIGZpbGUgaXMgcmVsYXRpdmUgdG8KdGhlIHJvb3QgYCFN
RGAgZG9jdW1lbnQgd2hpY2ggaXMgcHJvY2Vzc2VkLiBUaGUgcGF0aHMgb2YgYWxsCmluY2x1
ZGVkIGZpbGVzIGFyZSBjb2xsZWN0ZWQgYW5kIGEgYCFNRmAgcnVsZSBpcyBjcmVhdGVkIGFu
ZApzdG9yZWQgaW4gYSBmaWxlIChwYXRoIG9mIG91dHB1dCBgIU1EYCB0ZXh0IGFwcGVuZGVk
IHdpdGggYC5ta2ApLgoKVGhlIGBcISEhYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZCB1c2luZyBg
XFwhISFgLgpUaGUgaW5jbHVkZSBzdGF0ZW1lbnQgKipjYW5ub3QqKiBiZSB1c2VkIGluIGNv
ZGUgYmxvY2tzLiBgIU1gIGAhTURgCnRleHQgbXVzdCBoYXZlIHRoZSBleHRlbnNpb24gYC5t
ZGAgYW5kIGluY2x1ZGUgZmlsZXMgbXVzdCBoYXZlIHRoZQpleHRlbnNpb24gYC5tZGlgCgpU
aGUgaW5jbHVkZSBzdGF0ZW1lbnQgc3VwcG9ydHMgZmxhZ3MgZm9yIHBhcnNpbmcgdGhlIGlu
Y2x1ZGUgZmlsZS4KYGBgbWQKXCEhISBQQVRIL0ZJTEUubWRpIEZMQUdTCmBgYAoKKipGbGFn
cyoqCiogYGF1eGA6IHJlZmVyZW5jZSBhcyBNYWtlZmlsZSBkZXBlbmRlbmN5LCBidXQgZG8g
bm90IHByb2Nlc3MKKiBgbm9kZXBgOiBkbyBub3QgcmVmZXJlbmNlIHRoaXMgZmlsZSBhcyBN
YWtlZmlsZSBkZXBlbmRlbmN5CiogYHJhd2A6IHRoZSBmaWxlIGlzIGluY2x1ZGVkIGFzLWlz
IHdpdGhvdXQgYW55IHBhcnNpbmcKKiBgbm9tZXRhYDogbWV0YSBkYXRhIGluIGZyb250IG1h
dHRlciBpcyBza2lwcGVkIGR1cmluZyBwYXJzaW5nCiogYG5vYm9keWA6IGFsbCBNYXJrZG93
biB0ZXh0IGlzIHNraXBwZWQgZHVyaW5nIHBhcnNpbmcKKiBgbm9tYXJreWA6IGluY2x1ZGUg
dGhlIGAhTURgIHRleHQgd2l0aG91dCBhbnkgYCFNYCBwcm9jZXNzaW5nCiogYFwhYDogb25s
eSBpbmNsdWRlIGNvZGUgYmxvY2tzCiogYFwhIWA6IG9ubHkgaW5jbHVkZSBoaWRkZW4gY29k
ZSBibG9ja3MKKiBgPj5OYDogaW5jcmVhc2UgdGhlIGluZGVudGF0aW9uIHVzaW5nIGBOYCB0
YWJzCiogYD5OYDogaW5jcmVhc2UgdGhlIGluZGVudGF0aW9uIHVzaW5nIGBOYCBzcGFjZXMK
KiBgIytOYDogaW5jcmVhc2UgdGhlIGxldmVsIG9mIEFUWCBoZWFkaW5ncyBgI2AuIFRoZSBo
ZWFkaW5ncyBhcmUKcGFyc2VkIGFjY29yZGluZyB0byBgIVBgIGV4dGVuc2lvbnMKKFtibGFu
a19iZWZvcmVfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLWJsYW5rX2JlZm9yZV9oZWFkZXIpLApbc3BhY2VfaW5fYXR4X2hlYWRlcl0oaHR0cHM6
Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zcGFjZV9pbl9hdHhfaGVhZGVy
KSkKCioqRXhhbXBsZSoqCmBgYG1kClwhISEgbWFya3kubWRpICMrMgpUaGUgZmlsZSB3YXMg
aW5jbHVkZWQ6IGBcIWluY2x1ZGVkYCBhbmQgJHg9YFwheGAkIGFuZCAkeT1gXCF5YCQuCmBg
YAoKISEhIG1hcmt5Lm1kaSAjKzIKVGhlIGZpbGUgd2FzIGluY2x1ZGVkOiBgIWluY2x1ZGVk
YCBhbmQgJHg9YCF4YCQgYW5kICR5PWAheWAkLgoKVGhlIGZpbGUgYG1hcmt5Lm1kaWAgd2Fz
IGxvYWRlZCB3aXRoIHNoaWZ0aW5nIEFUWCBoZWFkaW5ncyBieSAyIHdoaWNoCm1lYW5zIGAj
I2AgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIGluY2x1ZGVkIHNlY3Rpb24uIFRoZSBmaWxlIGNv
bnRhaW5zOgpgYGBtZAohISEgbWFya3kubWRpIHJhdyA+PjEKYGBgClRoZSB1bm1vZGlmaWVk
IHNvdXJjZSB3YXMgbG9hZGVkIHVzaW5nIHRoZSBmbGFncyBgcmF3ID4+MWAuCgpUaGUgZmls
ZSBgbWFya3kubWQubWtgIGNvbnRhaW5zOgpgYGBNYWtlZmlsZQpidWlsZC9tYXJreS5tZDog
XAptZC9tYXJreS5tZGkKCi5QSE9OWTogbWQtbWFya3kKbWQtbWFya3k6IGJ1aWxkL21hcmt5
Lm1kCgouUEhPTlk6IGh0bWwtbWFya3kKaHRtbC1tYXJreTogaHRtbC9tYXJreS5odG1sCgou
UEhPTlk6IHBkZi1tYXJreQpwZGYtbWFya3k6IHBkZi9tYXJreS5wZGYKYGBgCgojIyBJbmNs
dWRlIFN0YXRlbWVudCBhbmQgTWV0YSBEYXRhIEltcG9ydCB7I3NlYzppbmNtZXRhfQoKVGhl
IGluY2x1ZGUgc3RhdGVtZW50IGBcISEhYCBsb2FkcyBhbmQgcGFyc2VzIGFuIGAqLm1kaWAg
aW5jbHVkZSBmaWxlLgpUaGUgYHlhbWxgIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQgbWF0dGVy
IG9mIHRoZSBkb2N1bWVudCBhbHNvIGlzIGxvYWRlZAphbmQgcGFyc2VkIGlmIHRoZSBgbm9t
ZXRhYCBmbGFnIGlzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGluY2x1ZGUKc3RhdGVtZW50LiBB
c3N1bWluZyB0aGUgcm9vdCBkb2N1bWVudCBhbmQgdGhlIGluY2x1ZGVkIGRvY3VtZW50IGhh
dmUgdGhlCmZvbGxvd2luZyBtZXRhIGRhdGEuCgoqKlJvb3QgRG9jdW1lbnQqKgpgYGB5YW1s
CgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAKCi0tLQpcISEhIGluY2x1ZGUubWRpCmBgYAoK
KipJbmNsdWRlZCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQpkZXB0aDogMzAKdm9sdW1lOiA2
MDAwCi1zZXJpYWw6IEE1NkdISgoKLS0tCmBgYAoKQnkgZGVmYXVsdCBhbGwgYHlhbWxgIG1l
dGEgZGF0YSBmaWVsZHMgYXJlIGNvcGllZCB0byB0aGUgbWV0YSBkYXRhIG9mCnRoZSByb290
IGAhTURgIGRvY3VtZW50IHdoaWNoIGlzIHByb2Nlc3NlZC4gSG93ZXZlciwgaWYgYSBtZXRh
IGRhdGEKa2V5IGlzIHByZWNlZWRlZCBieSBgLWAgdGhlIGtleSBpcyBub3QgaW1wb3J0ZWQg
aW50byB0aGUgcm9vdCBkb2N1bWVudC4KQWxsIGB5YW1sYCBtZXRhIGRhdGEga2V5cyB3aGlj
aCBzdGFydCB3aXRoIGAtYCBhcmUgZXhwb3NlZCB0byB0aGUKcHl0aG9uIHNjb3BlIGFuZCB3
aWxsIGFwcGVhciBhcyBsb2NhbCB2YXJpYWJsZXMsIGJ1dCB0aGV5IHdpbGwgbm90CmFwcGVh
ciBpbiB0aGUgbWV0YSBkYXRhIG9mIHRoZSBmcm9udCBtYXR0ZXIgaW4gdGhlIHByZXByb2Nl
c3NlZApgIU1EYCB0ZXh0LiBHaXZlbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIHJlc3VsdGlu
ZyBtZXRhIGRhdGEgaW4KdGhlIGZyb250IG1hdHRlciBvZiB0aGUgcHJlcHJvY2Vzc2VkIGAh
TURgIHRleHQgbG9va3MgYXMgZm9sbG93cy4KCioqUHJlcHJvY2Vzc2VkIERvY3VtZW50KioK
YGBgeWFtbAoKLS0tCndpZHRoOiAxMApoZWlnaHQ6IDIwCmRlcHRoOiAzMAp2b2x1bWU6IDYw
MDAKCi0tLQpgYGAKCiMjIEZvcm1hdCBMaW5rcyBmb3IgYGh0bWxgIGFuZCBgcGRmYCBEb2N1
bWVudHMgeyNzZWM6Zm9ybWxpbmt9CgpXaGVuIHdyaXRpbmcgbXVsdGlwbGUgZG9jdW1lbnRz
LCBvZnRlbiBkb2N1bWVudHMgYXJlIHJlZmVyZW5jZWQKYmV0d2VlbiBlYWNoIG90aGVyIHVz
aW5nIGxpbmtzLiBJbiBvcmRlciB0byByZWZlciB0byBleHRlcm5hbApgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyB0aGUgYCFNRGAgbGluayBzdGF0ZW1lbnQgaXMgdXNlZC4KYGBgbWQK
W0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLmh0bWwpCltMaW5rIENhcHRpb25dKHBhdGgv
dG8vZmlsZS5wZGYpCmBgYAoKV2hlbiB1c2luZyByZWxhdGl2ZSBwYXRocyBpbiB0aGUgVVJM
LCB0aGUgZG9jdW1lbnRzIGNhbiBiZSByZWZlcmVuY2VkCmFjY29yZGluZyB0byB0aGUgZGly
ZWN0b3J5IHRyZWUgb2YgdGhlIHNvdXJjZSBgIU1gIGAhTURgIHRleHQKYG1kLyovKi5tZGAu
IEhvd2V2ZXIsIHRoZSByZXN1bHRpbmcgbGluayB3aWxsIGJlIGEgcGF0aCByZWxhdGl2ZQp0
byB0aGUgZGlyZWN0b3J5IGBodG1sL2AgZm9yIGBodG1sYCBkb2N1bWVudHMgYW5kIHJlbGF0
aXZlIHRvIGBwZGYvYApmb3IgYHBkZmAgZG9jdW1lbnRzLiBBcyBhbGwgYGh0bWxgIGFuZCBg
cGRmYCBkb2N1bWVudHMgYXJlIGtlcHQgaW4Kc2VwYXJhdGUgZGlyZWN0b3JpZXMsIG9uZSBs
aW5rIHN0YXRlbWVudCBjYW5ub3QgYmUgdXNlZCBmb3IgcmVuZGVyaW5nCmBodG1sYCBhbmQg
YHBkZmAgd2l0aCBjb25zaXN0ZW50IHBhdGhzIGluIHRoZSBsaW5rIHN0YXRlbWVudC4KCkJ5
IHVzaW5nIHRoZSBgIU1gIGZvcm1hdCBsaW5rIHN0YXRlbWVudCBgLlw/Pz9gLCB0aGUgZmls
ZSBleHRlbnNpb24KaW4gdGhlIGxpbmtzIGlzIHJlcGxhY2VkIGRlcGVuZGluZyBvbiB0aGUg
b3V0cHV0IGZvcm1hdApyZXN1bGluZyBpbiBjb25zaXN0ZW50IGxpbmtzIGZvciBgaHRtbGAg
YW5kIGBwZGZgCmRvY3VtZW50cy4gVGhlIGZvcm1hdCBsaW5rIHN0YXRlbWVudCBjYW4gYmUg
ZXNjYXBlZCB1c2luZyBgLlxcPz8/YC4KCioqRXhhbXBsZSoqCmBgYG1kCltMaW5rIHRvIHRo
aXMgRG9jdW1lbnRdKG1hcmt5Llw/Pz8pCmBgYAoKW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0o
bWFya3kuPz8/KQoKIyMgRm9ybWF0IENvZGVzIGZvciBgaHRtbGAgYW5kIGBwZGZgIERvY3Vt
ZW50cyB7I3NlYzpmb3JtY29kZX0KCk9mdGVuIHdoZW4gd3JpdGluZyBtYXJrZG93biBmb3Ig
YGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMsIHRoZQpmb3JtYXQgbmVlZHMgdG8gYmUgYWRq
dXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb3JtYXQuIGAhUGAgYCFNRGAKYWxyZWFkeSByZW5k
ZXJzIGFsbCBjb21tb24gTWFya2Rvd24gaW50byBgaHRtbGAgYW5kIGBwZGZgLgpgIU1gIHN1
cHBvcnRzIGZvcm1hdCBzcGVjaWZpYyB0d2Vha2luZyB1c2luZyBmb3JtYXQgY29kZXMuCgpJ
biBvcmRlciB0byBpbmplY3QgZm9ybWF0IHNwZWNpZmljIGNvZGUsIGBodG1sYCBjb2RlIG9y
IGB0ZXhgIGNvZGUKZm9yIGBwZGZgIGRvY3VtZW50cywgdGhlIGZvcm1hdCBjb2RlcyBhcmUg
dXNlZC4gRm9ybWF0IGNvZGVzIGFyZQp3cml0dGVuIGFzIGBgIGBcP0ZVTkNBTEwoQVJHUylg
IGBgIG9yIGBgIGBcP1ZBUklBQkxFYCBgYAp3aGljaCBhcmUgdHJhbnNsYXRlZCBpbiB0aGUg
Zm9sbG93aW5nIHB5dGhvbiBleHByZXNzaW9ucyBieQpwcmVwZW5kaW5nIHRoZSBmb3JtYXQg
YGh0bWxgIG9yIGBwZGZgIHRvIHRoZSBleHByZXNzaW9uLgoxLiBgaHRtbEZVTkNBTEwoQVJH
UylgIGFuZCBgaHRtbFZBUklBQkxFYCBmb3IgaW5qZWN0aW9uIG9mIHJhdyBgaHRtbGAKY29k
ZSBmb3IgcmVuZGVyaW5nIGBodG1sYC1iYXNlZCBkb2N1bWVudHMgaW4gYCFQYC4KMi4gYHBk
ZkZVTkNBTEwoQVJHUylgIGFuZCBgcGRmVkFSSUFCTEVgICBmb3IgaW5qZWN0aW9uIG9mIHJh
dyBgdGV4YApjb2RlIGluIGBwZGZgLWJhc2VkIGRvY3VtZW50cyBpbiBgIVBgLgoKQWx0ZXJu
YXRpdmVseSBgXD8/P2AgY2FuIGJlIHVzZWQgdG8gc3BlY2lmeSB0aGUgbG9jYXRpb24gd2hl
cmUgdGhlCmZvcm1hdCBpcyBpbnNlcnRlZC4gVGhlIHR3byBmb3JtYXQgY29kZXMgYGAgYFw/
RlVOQ0FMTCgiPz8/IilgIGBgCmFuZCBgYCBgXD9WQVJJQUJMRV8/Pz9gIGBgIHdvdWxkIHJl
c3VsdCBpbiB0aGUgZm9sbG93aW5nIHB5dGhvbgpleHByZXNzaW9ucy4KMS4gYEZVTkNBTEwo
Imh0bWwiKWAgYW5kIGBWQVJJQUJMRV9odG1sYCBmb3IgaW5qZWN0aW9uIG9mIHJhdyBgaHRt
bGAKY29kZSBmb3IgcmVuZGVyaW5nIGBodG1sYC1iYXNlZCBkb2N1bWVudHMgaW4gYCFQYC4K
Mi4gYEZVTkNBTEwoInBkZiIpYCBhbmQgYFZBUklBQkxFX3BkZmAgIGZvciBpbmplY3Rpb24g
b2YgcmF3IGB0ZXhgCmNvZGUgaW4gYHBkZmAtYmFzZWQgZG9jdW1lbnRzIGluIGAhUGAuCgpE
dXJpbmcgcHJlcHJvY2Vzc2luZywgYCFNYCBwcm9jZXNzZXMgYWxsIGZvcm1hdCBjb2RlcyBm
b3IgZWFjaApmb3JtYXQgYGh0bWxgIGFuZCBgcGRmYCBhbmQgY2FjaGVzIHRoZSBvdXRwdXQu
IEJlZm9yZSByZW5kZXJpbmcKdGhlIE1hcmtkb3duIGluIG9uZSBwYXJ0aWN1bGFyIGZvcm1h
dCB1c2luZyBgIVBgLCBgIU1gIGV4dHJhY3RzCnRoZSByZXN1bHRzIG9mIHRoZSBjb3JyZXNw
b25kaW5nIGZvcm1hdCBjb2RlcyBhbmQgc2tpcHMgdGhlIG90aGVycy4KQWRkaXRpb25hbCBg
dGV4YCBwYWNrYWdlcyBoYXZlIHRvIGJlIGluY2x1ZGVkIHVzaW5nIHRoZSBtZXRhIGRhdGEK
ZmllbGQgYGhlYWRlci1pbmNsdWRlc2AuCgpGb3IgcmV0dXJuaW5nIHRoZSByYXcgZm9ybWF0
IGNvZGUsIGVpdGhlciB0aGUgYCFQMWAgc3RhdGVtZW50IGNhbgpiZSB1c2VkIEBzZWM6bWRw
cmludCAqKm9yKiogdGhlIGByZXR1cm5gIHN0YXRlbWVudCBjYW4gYmUgdXNlZC4KSWYgYm90
aCBzdGF0ZW1lbnRzIGFyZSBtaXhlZCwgdGhlIG91dHB1dCB3aGljaCBoYWQgYmVlbiByZXR1
cm5lZAp3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSB0ZXh0IGdlbmVyYXRlZCB3aXRoIHRoZSBg
IVAxYCBzdGF0ZW1lbnQuCgoqKkV4YW1wbGU6IEZ1bmN0aW9ucyBhbmQgVmFyaWFibGVzKioK
YGBgIQoJZGVmIGh0bWxUZXN0MSgpOgoJCV8oIjxzdXA+SFRNTCBpbiIpCgkJcmV0dXJuICJz
dXBlcnNjcmlwdDwvc3VwPiIKCWRlZiBwZGZUZXN0MSgpOgoJCV9fKHIiIiIKCQkJJHt9X3tc
bWJveHtQREYgaW4gc3Vic2NyaXB0fX0kCgkJIiIiKQoJdGVzdDJfaHRtbCA9ICI8c3ViPkhU
TUwgaW4gc3Vic2NyaXB0PC9zdWI+IgoJdGVzdDJfcGRmID0gIHIiJHt9XntcbWJveHtQREYg
aW4gc3VwZXJzY3JpcHR9fSQiCglkZWYgdGVzdDMoZm10KToKCQlyZXR1cm4gZm10LnVwcGVy
KCkKYGBgCgpgYGBtZApUaGUgZm9ybWF0IGNvZGUgYFxcP3Rlc3QzKD8/PylgIHJldHVybnMg
dGhlIGZvcm1hdCBvZgp0aGUgZG9jdW1lbnQ6IGBcP3Rlc3QzKCI/Pz8iKWAuCiogYFw/VGVz
dDEoKWAKKiBgXD90ZXN0Ml8/Pz9gCmBgYAoKVGhlIGZvcm1hdCBjb2RlIGBcP3Rlc3QzKD8/
PylgIHJldHVybnMgdGhlIGZvcm1hdCBvZgp0aGUgZG9jdW1lbnQ6IGA/dGVzdDMoIj8/PyIp
YC4KKiBgP1Rlc3QxKClgCiogYD90ZXN0Ml8/Pz9gCgoqKkV4YW1wbGU6IENsYXNzZXMqKgpg
YGAhCgljbGFzcyBodG1sOgoJCWRlZiB0ZXN0MSgpOgoJCQlfKCI8c3VwPkhUTUwgaW4iKQoJ
CQlyZXR1cm4gInN1cGVyc2NyaXB0PC9zdXA+IgoJCXRlc3QyID0gIjxzdWI+SFRNTCBpbiBz
dWJzY3JpcHQ8L3N1Yj4iCgljbGFzcyBwZGY6CgkJZGVmIHRlc3QxKCk6CgkJCV9fKHIiIiIK
CQkJCSR7fV97XG1ib3h7UERGIGluIHN1YnNjcmlwdH19JAoJCQkiIiIpCgkJdGVzdDIgPSAg
ciIke31ee1xtYm94e1BERiBpbiBzdXBlcnNjcmlwdH19JCIKCWNsYXNzIGRvY2ZtdDoKCQlk
ZWYgX19pbml0X18oc2VsZik6CgkJCXNlbGYuaHRtbCA9ICJIVE1MIgoJCQlzZWxmLnBkZiA9
ICJQREYiCgkJZGVmIGdldF9odG1sKHNlbGYpOgoJCQlyZXR1cm4gc2VsZi5odG1sCgkJZGVm
IGdldF9wZGYoc2VsZik6CgkJCXJldHVybiBzZWxmLnBkZgoJdGVzdDMgPSBkb2NmbXQoKQpg
YGAKCmBgYG1kClRoZSBmb3JtYXQgY29kZSBgXFw/dGVzdDMuZ2V0Xz8/PygpYCByZXR1cm5z
IHRoZSBmb3JtYXQgb2YKdGhlIGRvY3VtZW50OiBgXD90ZXN0My5nZXRfPz8/KClgLgoqIGBc
Py50ZXN0MSgpYAoqIGBcPy50ZXN0MmAKYGBgCgpUaGUgZm9ybWF0IGNvZGUgYFw/dGVzdDMu
Z2V0Xz8/PygpYCByZXR1cm5zIHRoZSBmb3JtYXQgb2YKdGhlIGRvY3VtZW50OiBgP3Rlc3Qz
LmdldF8/Pz8oKWAuCiogYD8udGVzdDEoKWAKKiBgPy50ZXN0MmAKCi0tLQoKIyBgIU1gIGAh
TURgIEV4YW1wbGVzIHsjc2VjOmV4YW1wbGVzfQoKIyMgSmF2YVNjcmlwdCBpbiBgaHRtbGAg
YW5kIFBsYWNlaG9sZGVyIGluIGBwZGZgCgpXaGVuIGNyZWF0aW5nIGAhTURgIHRleHQgZm9y
IGBodG1sYCBvdXRwdXQsIHRoZSB1c2VyIG9mdGVuIHdhbnRzCmludGVyYWN0aXZpdHkgdXNp
bmcgd2lkZ2V0cyBsaWtlIHNsaWRlcnMsIGNoZWNrIGJveGVzLCBkcm9wIGRvd24gYm94ZXMK
ZXRjLiBIb3dldmVyLCB3aGVuIGV4cG9ydGluZyBpbnRvIGBwZGZgIHRob3NlIGVsZW1lbnRz
IG5lZWQgdG8gYmUKcmVwbGFjZWQgd2l0aCBub24taW50ZXJhY3RpdmUgcGxhY2Vob2xkZXJz
LiBJbiBvcmRlciB0byBkZXZlbG9wIGEgc2luZ2xlCmAhTURgIGRvY3VtZW50LCB3aGljaCBj
YW4gYmUgcmVuZGVyZWQgaW4gYGh0bWxgIHdpdGggaW50ZXJhY3RpdmUKZWxlbWVudHMgYW5k
IGludG8gYHBkZmAgd2l0aCBwbGFjZWhvbGRlciwgdGhlIGAhTWAgZm9ybWF0IGNvZGVzIGNh
biBiZQp1c2VkLCBzZWUgQHNlYzpmb3JtY29kZS4gVGhlIGZvbGxvd2luZyBleGFtcGxlIGRl
ZmluZXMgYQpgPGlucHV0IHR5cGU9InJhbmdlIj5gIGFuZCB0d28gYDxzcGFucz5gIHdpdGgg
YGlkPSJteXZhbCJgIGFuZApgaWQ9Im15cmVzImAsIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUg
dmFsdWUgb2YgJHk9c2luKHgpJCBpbiBgaHRtbGAuIEZvcgpgcGRmYCBvdXRwdXQgdGhlIGVx
dWF0aW9uIGFuZCB0aGUgdmFsdWUgcmFuZ2UgaXMgc2hvd24uCgoqKkV4YW1wbGUqKgpgYGAh
CglkZWYgcmFuZ2VfaHRtbCgpOgoJCV9fKCIiIgoJCQkkeFxpbiBbMCQgPGlucHV0IHR5cGU9
J3JhbmdlJyB2YWx1ZT0nMCcgbWluPScwJyBtYXg9JzEwMCcKCQkJb25jaGFuZ2U9IgoJCQlk
b2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXl2YWwnKS5pbm5lckhUTUwgPSB0aGlzLnZhbHVl
OwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlyZXMnKS5pbm5lckhUTUwgPQoJCQlN
YXRoLnNpbih0aGlzLnZhbHVlKTsiPiAkMTAwXSQKCQkiIiIpCglkZWYgcmFuZ2VfcGRmKCk6
CgkJcmV0dXJuICIkeFxpblswLDEwMF0kIgoJZGVmIGZvcm11bGFfaHRtbCgpOgoJCV9fKCIi
IgoJCQkkeT1zaW4oeCk9JCA8c3BhbiBpZD0ibXlyZXMiPjAuMDAwPC9zcGFuPgoJCQl3aXRo
ICR4PSQgPHNwYW4gaWQ9Im15dmFsIj4wPC9zcGFuPgoJCSIiIikKCWRlZiBmb3JtdWxhX3Bk
ZigpOgoJCXJldHVybiAiJHk9c2luKHgpJCIKYGBgCgpgYGBtZAokeCQgYW5kICR5JCBhcmUg
cmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGBcP2Zvcm11bGFfPz8/KClgLgoKJHgkIG11c3Qg
YmUgaW4gdGhlIHJhbmdlIGBcP3JhbmdlXz8/PygpYC4KYGBgCgokeCQgYW5kICR5JCBhcmUg
cmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGA/Zm9ybXVsYV8/Pz8oKWAuCgokeCQgbXVzdCBi
ZSBpbiB0aGUgcmFuZ2UgYD9yYW5nZV8/Pz8oKWAuCgojIyBHZW5lcmF0ZSBhIEZpZ3VyZSBv
bi10aGUtZmx5IGR1cmluZyBQcmVwcm9jZXNzaW5nCgpUaGlzIHNlY3Rpb24gaWxsdXN0cmF0
ZXMgaG93IHB5dGhvbiBtb2R1bGVzIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZQpkb2N1bWVudCBj
b250ZW50LiBEb2N1bWVudCBjb250ZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGBkYXRhL2AK
ZGlyZWN0b3J5IG9mIHRoZSBjdXJyZW50IHByb2plY3Qgd29ya2luZyBkaXJlY3RvcnkgKHJl
ZmVyIHRvIGAhTWAKcHJvamVjdCBzdHJ1Y3R1cmUsIEBzZWM6cHJvamVjdCkKCiFbVGhpcyBG
aWd1cmUgd2FzIGdlbmVyYXRlZCB1c2luZyBgIU5VYCBhbmQKYCFQTGAuXShmaWd1cmUxLnBu
Zyl7I2ZpZzpmaWd1cmUxfQoKW2AhTlVgXShodHRwczovL3d3dy5udW1weS5vcmcpIGFuZCBb
YCFQTGBdKGh0dHBzOi8vd3d3Lm1hdHBsb3RsaWIub3JnKQphcmUgcG93ZXJmdWwgcHl0aG9u
IG1vZHVsZXMgZm9yIG1hdGhlbWF0aWNhbCBjb21wdXRpbmcgYW5kIHBsb3QKZ2VuZXJhdGlv
bi4gVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBnZW5lcmF0ZSBAZmlnOmZp
Z3VyZTEKdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBpbmNsdWRlIGl0IGludG8gdGhlIGRv
Y3VtZW50LgoKKipFeGFtcGxlKioKCmBgYCEKCWltcG9ydCBudW1weSBhcyBucAoJaW1wb3J0
IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoJR1JFRUsgPSBsYW1iZGEgQTogY2hyKG9yZCh1
Ilx1MDM5MSIpICsgb3JkKEEpIC0gb3JkKCJBIikpCglncmVlayA9IGxhbWJkYSBhOiBjaHIo
b3JkKHUiXHUwM2IxIikgKyBvcmQoYSkgLSBvcmQoImEiKSkKCWNtMmluY2ggPSBsYW1iZGEg
eHk6IHR1cGxlKGkvMi41NCBmb3IgaSBpbiB4eSkKCWZvbnRzaXplID0gaW50KGZvbnRzaXpl
WzotMl0pICMgY29udmVydCB0byBpbnQKCWZpZ3NpemUgPSBjbTJpbmNoKGZpZ3NpemUpICMg
Y29udmVydCBmcm9tIGNtIHRvIGluY2gKCXBhcmFtcyA9IHsKCQknZmlndXJlLmZpZ3NpemUn
OiBmaWdzaXplLAoJCSdsZWdlbmQuZm9udHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy5sYWJl
bHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy50aXRsZXNpemUnOiBmb250c2l6ZSwKCQkneHRp
Y2subGFiZWxzaXplJzogZm9udHNpemUsCgkJJ3l0aWNrLmxhYmVsc2l6ZSc6IGZvbnRzaXpl
LAoJCSdmb250LmZhbWlseSc6ICdUaW1lcyBOZXcgUm9tYW4nCgl9CglwbHQucmNQYXJhbXMu
dXBkYXRlKHBhcmFtcykKCXggPSBucC5yYW5kb20ucmFuZCg1MCkKCXkgPSBucC5yYW5kb20u
cmFuZCg1MCkKCXBsdC5maWd1cmUoKQoJcGx0LnNjYXR0ZXIoeCwgeSwgbGFiZWw9IlJhbmRv
bSBDb29yZGluYXRlcyIpCgl0ZXh0ID0gIiIuam9pbihbZ3JlZWsoaSkgZm9yIGkgaW4gWyJh
IiwgImIiLCAiYyIsICJkIl1dKQoJcGx0LmFubm90YXRlKHRleHQsIHh5PSgwLjUsMC41KSwg
eHl0ZXh0PSgwLjI1LDAuMjUpLAoJCWFycm93cHJvcHM9ZGljdChhcnJvd3N0eWxlPSctPics
bHc9MS41KSkKCXBsdC50aXRsZSgiVHdvIFJhbmRvbSBEYXRhc2V0cyIpCglwbHQueGxhYmVs
KHIiRGF0YSAjMSAtICRcbWF0aGRlZmF1bHR7JXNfMX0kIiAlIEdSRUVLKCJDIikpCglwbHQu
eWxhYmVsKHIiRGF0YSAjMiAtICRcbWF0aGRlZmF1bHR7JXNfMn0kIiAlIEdSRUVLKCJEIikp
CglwbHQuZ3JpZCgpCglwbHQubGVnZW5kKCkKCXBsdC50aWdodF9sYXlvdXQoKQoJcGx0LnNh
dmVmaWcoImJ1aWxkL2ZpZ3VyZTEucG5nIiwgZHBpPWZpZ2RwaSkKCXBsdC5jbG9zZSgiYWxs
IikKYGBgCgpgYGBtZAohW1RoaXMgRmlndXJlIHdhcyBnZW5lcmF0ZWQgdXNpbmcgYCFOVWAK
YW5kIGAhUExgLl0oZmlndXJlMS5wbmcpeyNmaWc6ZmlndXJlMX0KYGBgCgojIyBHZW5lcmF0
ZSBhIFNlcXVlbmNlIG9mIEZpZ3VyZXMgb24tdGhlLWZseQoKVGhpcyBzZWN0aW9uIGlsbHVz
dHJhdGVzIGhvdyBhIHNlcXVlbmNlIG9mIGNvbXBsZXggZmlndXJlcyBjYW4gYmUKZ2VuZXJh
dGVkIHVzaW5nIGAhTlVgIGFuZCBgIVBMYCBhbmQgaG93IHRoZSBmaWd1cmVzIGFyZSBmb3Jt
YXR0ZWQKdXNpbmcgcHl0aG9uIGFuZCByZWZlcmVuY2VkIHVzaW5nIGAhTWAuCgpTdXBwb3Nl
IG9uZSBleHBlcmltZW50IHdoaWNoIGNhbiBiZSBydW4gaW4gZm91ciBkaWZmZXJlbnQgc2V0
dXBzIHdpdGgKZGlmZmVyZW50IHZhbHVlcyBmb3IgJFxsYW1iZGE9JApgISIsICIuam9pbihb
IiglZCkgJCUuMmYkbm0iJShrLCAxMjUuMzMqaykgZm9yIGsgaW4gcmFuZ2UoMSwgNSldKWAu
CkVhY2ggcnVuIG9mIHRoZSBleHBlcmltZW50IHVzaW5nIHNldHVwICgxKS0tKDQpLCB0d28g
YWRkaXRpb25hbApwYXJhbWV0ZXJzICRcdmFyZXBzaWxvbiQgYW5kICRcYWxwaGEkIGFyZSB2
YXJyaWVkIGJldHdlZW4KJDEwLjJcbGRvdHMzMC42XCUkIGFuZCAkMC4xXGxkb3RzMC4zJEh6
IHJlc3BlY3RpdmVseS4KClRoZSByZXN1bHRzIG9mIHRoZSBleHBlcmltZW50cyBmb3IgdGhl
IHNldHVwcyAoMSktLSg0KSBhcmUgc3VtbWFyaXplZAppbiB0aGUgQGZpZzpmaWd1cmUyXzEs
ICFAZmlnOmZpZ3VyZTJfMiwgIUBmaWc6ZmlndXJlMl8zIGFuZAohQGZpZzpmaWd1cmUyXzQu
CgoqKkV4YW1wbGUqKgoKYGBgIQoJbiA9IDEwMAoJYWxwaGEgPSB1Ilx1MDNiMSIKCWVwc2ls
b24gPSB1Ilx1MDNiNSIKCWxhbWRhID0gdSJcdTAzYmIiCglmID0gbGFtYmRhIHgsIGEsIGI6
IGEqKG5wLnNxcnQoeCkrYipucC5zaW4oeCpiKSkKCWcgPSBsYW1iZGEgeCwgYSAsYiwgYzog
bnAuZmFicyhmKHgsIGEsIGIpIC0gZihjLCBhLCBiKSkgKyBjCglkYXQgPSBucC56ZXJvcygo
bi0xLCAzLCAzLCA0KSwgZHR5cGU9bnAuZmxvYXQzMikKCWNvbHMgPSBbInJlZCIsICJncmVl
biIsICJibHVlIl0KCW1hcmsgPSBbIm8iLCAieCIsICI8Il0KCXggPSBucC5hcnJheShbNTAu
KngvbiBmb3IgeCBpbiByYW5nZSgxLCBuKV0sIGR0eXBlPW5wLmZsb2F0MzIpCglmb3Igaywg
YyBpbiBlbnVtZXJhdGUoWzEwLiwgMjAuLCAzMC4sIDQwLl0pOgoJCWZvciBpLCBhIGluIGVu
dW1lcmF0ZShbMSwgMiwgNF0pOgoJCQlmb3IgaiwgYiBpbiBlbnVtZXJhdGUoWzAuMiwgMC40
LCAwLjZdKToKCQkJCWRhdFs6LCBpLCBqLCBrXSA9IGcoeCwgYSwgYiwgYykKCQlwbHQuZmln
dXJlKCkKCQlmb3IgaiBpbiByYW5nZSgzKToKCQkJZm9yIGkgaW4gcmFuZ2UoMyk6CgkJCQls
YWJlbF9pID0gIiVzPSUuMWYlJSIgJSAoZXBzaWxvbiwgKGkrMSkqMTAuMikgXAoJCQkJCWlm
IGogPT0gMCBlbHNlIE5vbmUKCQkJCWxhYmVsX2ogPSAiJXM9JS4xZkh6IiAlIChhbHBoYSwg
KGorMSkvMTAuKSBcCgkJCQkJaWYgaSA9PSAwIGVsc2UgTm9uZQoJCQkJeSA9IGRhdFs6LCBp
LCBqLCBrXS5mbGF0dGVuKCkKCQkJCXBsdC5wbG90KHgsIHksIGNvbG9yPWNvbHNbaV0sIGx3
PTAuNzUsIGxhYmVsPWxhYmVsX2kpCgkJCQlwbHQuc2NhdHRlcih4WzE6OjRdLCB5WzE6OjRd
LCBjb2xvcj0iYmxhY2siLAoJCQkJCW1hcmtlcj1tYXJrW2pdLCBsdz0wLjUsIHM9NSwgbGFi
ZWw9bGFiZWxfaikKCQlrID0gayArIDEKCQlrdmFsID0gayoxMjUuMzMKCQlwbHQudGl0bGUo
IkV4cGVyaW1lbnQgU2V0dXAgIyVkOiAlcz0lLjJmbm0iICUgKGssIGxhbWRhLCBrdmFsKSkK
CQlwbHQueGxhYmVsKCJUaW1lIFtzXSIpCgkJcGx0LnlsYWJlbCgiSW50ZW5zaXR5IFtrZy9z
wrNdIikKCQlwbHQuZ3JpZCgpCgkJcGx0LmxlZ2VuZCgpCgkJcGx0LnRpZ2h0X2xheW91dCgp
CgkJcGx0LnNhdmVmaWcoImJ1aWxkL2ZpZ3VyZTItJWQucG5nIiAlIGssIGRwaT1maWdkcGkp
CgkJcGx0LmNsb3NlKCJhbGwiKQoJCV9fKGYiIiIKCQkJIVtUaGlzIGlzIHRoZSByZXN1bHQg
b2YgdGhlIGV4cGVyaW1lbnQgYWNjb3JkaW5nCgkJCXRvIHRoZSBzZXR1cCAje2t9IHdpdGgg
JHtsYW1kYX09e2t2YWx9JG5tLiBUaGUgcGFyYW1ldGVycwoJCQkke2Vwc2lsb259JCBhbmQg
JHthbHBoYX0kIGFyZSB2YXJyaWVkIGJldHdlZW4KCQkJJDEwLjJcbGRvdHMzMC42XCUkIGFu
ZCAkMC4xXGxkb3RzMC4zJEh6CgkJCXJlc3BlY3RpdmVseS5dKGZpZ3VyZTIte2t9LnBuZyl7
eyNmaWc6ZmlndXJlMl97a319fQoKCQkiIiIpCmBgYAoKLS0tCgoqVGhhbmtzIGZvciByZWFk
aW5nLCBwbGVhc2UgdHJ5IGBtYXJreWAuKgoKLS0tCgojIFJlZmVyZW5jZXMK
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmAheDowNWRgfGAheTouNGZgCg==
'''
pack_marky_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBEb2N1bWVudGF0aW9uLgo+IFRoaXMgZG9jdW1lbnQgcmVwcmVzZW50cyB0aGUg
YG1hcmt5YCBzb3VyY2UgY29kZSBiZWZvcmUKPiBwcm9jZXNzaW5nIHB5dGhvbiBjb2RlIGVt
YmVkZGVkIGludG8gdGhlIGRvY3VtZW50IGl0c2VsZi4KPiBGb3IgZG9jdW1lbnRhdGlvbiBh
bmQgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRvcnld
KGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCmBgYHB5dGhvbgoh
ISEgbWFya3kubWQgcmF3ID4+MQpgYGAK
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgphdXRob3I6IGxlaG1hbm43CmRhdGU6
IDIwMjEtMDktMDkKaGVhZGVyLWluY2x1ZGVzLS1wZGY6CiAgIFx1c2VwYWNrYWdle211bHRp
Y29sfQogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxib3JkZXJjb2xv
cnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1
ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwv
c3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRz
aXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBpcyBhIGBtYXJr
eWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5YCBtYXJr
dXAgdXNpbmcgc2ltcGxlIGV4YW1wbGVzLgo+IFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9m
IHRoaXMgZG9jdW1lbnQgY2FuIGJlIHJlYWQKPiBbaGVyZV0ocXVpY2stc3JjLj8/PykuCj4g
Rm9yIG1vcmUgaW5mb3JtYXRpb24gcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJl
cG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSksCj4gW2BtYXJr
eWAgZG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSBvciB0aGUKPiBzaW1wbGUgW2BtYXJreWAg
ZXhhbXBsZV0oZXhhbXBsZS4/Pz8pLgoKLS0tCgojIEludHJvZHVjdGlvbgoKVGhpcyBpcyBh
IGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IgaWxsdXN0cmF0aW5nIGBtYXJreWAg
bWFya3VwCnVzaW5nIHNpbXBsZSBleGFtcGxlcy4gVGhpcyBkb2N1bWVudCBpcyB0aGUgcmVu
ZGVyZWQgdmVyc2lvbiBvZgp0aGUgc291cmNlIGNvZGUgcHJlc2VudGVkIFtoZXJlXShxdWlj
ay1zcmMuPz8/KS4gVGhlIGBtYXJreWAgbWFya3VwCmlzIGNvbXBhdGlibGUgd2l0aCBzdGFu
ZGFyZCBNYXJrZG93biBhbmQgY2FuIGJlIHJlYWQgYXMtaXMuClRoaXMgZG9jdW1lbnQgcmVw
cmVzZW50cyB0aGUgb3V0cHV0IG9mIGBtYXJreWAgYWZ0ZXIgcHJvY2Vzc2luZwpweXRob24g
Y29kZSwgd2hpY2ggaXMgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgpJbiBv
cmRlciB0byB1bmRlcnN0YW5kIHRoZSBleGFtcGxlcyBhbmQgc2VlIHRoZSBjb21wbGV0ZQpg
bWFya3lgIHN5bnRheCwgdGhlIHNvdXJjZSBjb2RlIG9mIHRoaXMgZmlsZSBjYW4gYmUgcmVh
ZApbaGVyZV0ocXVpY2stc3JjLj8/PykuIFRoZSBjb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9m
IGBtYXJreWAKaXMgYXZhaWxhYmxlIFtoZXJlXShtYXJreS4/Pz8pCgotLS0KCiMgTWFya2Rv
d24KCmBtYXJreWAgaXMgYSBNYXJrZG93biBwcmVwcm9jZXNzb3IgYWxsb3dpbmcgdG8gdHJh
bnNmb3JtIE1hcmtkb3duCnRleHQgdXNpbmcgcHl0aG9uLiBUaGUgcHJlcHJvY2Vzc2VkIE1h
cmtkb3duIHRleHQgaXMgcmVuZGVyZWQgdG8gYHBkZmAKYW5kIGBodG1sYCAob3RoZXIgZm9y
bWF0cyB1c2luZyBgcGFuZG9jYCkuIGBwYW5kb2NgIGhhcyBhIHBvd2VyZnVsIHNldApvZiBN
YXJrZG93biBleHRlbnNpb25zIHN1cHBvcnRpbmcgc3RydWN0dXJlZCB3cml0aW5nIGFzIHdl
bGwgYXMKYmlibGlvZ3JhcGh5LCBmaWd1cmUgcmVmZXJlbmNpbmcsIHRhYmxlIHJlZmVyZW5j
aW5nLCB0ZXgtc3R5bGUKZXF1YXRpb25zIHdpdGggcmVmZXJlbmNpbmcgZXRjLiAocmVmZXIg
dG8gU2NpZW50aWZpYyBXcml0aW5nIGluCk1hcmtkb3duLCBbYG1hcmt5YCBEb2N1bWVudGF0
aW9uXShtYXJreS4/Pz8pKS4KClRoZSByZW5kZXJpbmcgb2YgTWFya2Rvd24gdGV4dCBpbnRv
IGBodG1sYCBhbmQgYHBkZmAgY29uc2lzdHMgb2YgdGhyZWUKc3RlcHMgd2hpY2ggYXJlIGls
bHVzdHJhdGVkIHVzaW5nIHRoZSBgbWFya3lgIGRvY3VtZW50YXRpb24KYG1kL21hcmt5Lm1k
YC4KCjEuICpQcmVwcm9jZXNzaW5nKiBcCiAgIChwcm9jZXNzIGBtYXJreWAgbWFya3VwLCBy
dW4gY29kZSwgZ2VuZXJhdGUgY29udGVudCkKCSogSW5wdXQ6IGBtYXJreWAgTWFya2Rvd24g
dGV4dDogYG1kL21hcmt5Lm1kYAoJKiBPdXRwdXQ6IHBhbmRvYyBNYXJrZG93biB0ZXh0OiBg
YnVpbGQvbWFya3kubWRgCjIuICpMaW5raW5nKiBcCgkoYXBwbHkgZm9ybWF0IHNwZWNpZmlj
IGNvZGUgZm9yIGBodG1sYCBhbmQgYHBkZmApCgkqIElucHV0OiBwYW5kb2MgTWFya2Rvd24g
dGV4dDogYGJ1aWxkL21hcmt5Lm1kYAoJKiBPdXRwdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0
ZXh0IGZvciBgaHRtbGA6IGBidWlsZC9tYXJreS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtk
b3duIHRleHQgZm9yIGBwZGZgOiBgYnVpbGQvbWFya3kucGRmLm1kYAozLiAqUmVuZGVyaW5n
KiBcCiAgIChyZW5kZXIgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudCB1c2luZyBgcGFuZG9j
YCkKCSogSW5wdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZvciBgaHRtbGA6IGBidWls
ZC9tYXJreS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBwZGZgOiBg
YnVpbGQvbWFya3kucGRmLm1kYAoJKiBPdXRwdXQKCTEuIGBodG1sYCBkb2N1bWVudDogYGh0
bWwvbWFya3kuaHRtbGAKCTIuIGBwZGZgIGRvY3VtZW50OiBgcGRmL21hcmt5LnBkZmAKClRo
ZSB3aG9sZSBwcm9jZXNzIGlzIGVjYXBzdWxhdGVkIGludG8gYSBweXRob24gc2NyaXB0IGFu
ZCBhIE1ha2VmaWxlLgpSZW5kZXJpbmcgZG9jdW1lbnRzIHVzaW5nIGBtYXJreWAgcmVxdWly
ZXMgdG8gd3JpdGUgTWFya2Rvd24gdGV4dAphbmQgcnVuIGBtYWtlIGFsbGAuCgotLS0KCiMg
QXV0b21hdGVkIFJlcG9ydGluZwoKTWFya2Rvd24gdGV4dCB3aXRoIGVtYmVkZGVkIGNvZGUg
c25pcHBldHMgaXMgYSBwb3dlcmZ1bCBwYXJhZGlnbSBmb3IKYXV0b21hdGVkIHRlY2huaWNh
bCBhbmQgc2NpZW50aWZpYyByZXBvcnRpbmcgYW5kIHBvc3NpYmx5IG90aGVyCmRvY3VtZW50
cy4gT24gb25lIGhhbmQgZGF0YSBjYW4gYmUgb3JnYW5pemVkIGFjY29yZGluZyB0byB0aGUg
ZG9jdW1lbnQKc3RydWN0dXJlIHVzaW5nIGFsZ29yaXRobXMgZW1iZWRkZWQgaW4gdGhlIHJl
cG9ydCBpdHNlbGYsIGFuZCBvbiB0aGUKb3RoZXIgaGFuZCB0aGUgZGF0YSBjYW4gYmUgaW5z
ZXJ0ZWQgaW4gdGhlIHJlcG9ydCBkaXJlY3RseSBmcm9tCnZhcmlhYmxlcy4gVGhpcyBlbGxp
bWluYXRlcyB0aGUgbmVlZCBmb3IgbWFudWFsIGNvcHlpbmcgb2YgZGF0YSBpbnRvCnRoZSB0
ZXh0IGFuZCBhbGxvd3MgdG8gdXBkYXRlIG9yIHJlcHJvZHVjZSB0aGUgcmVwb3J0IGF1dG9t
YXRpY2FsbHkKZm9yIHRoZSBzYW1lIGFuZCBvdGhlciBkYXRhLiBVc2luZyB0aGUgc2ltcGxl
IGBtYXJreWAgc3ludGF4IHRoZSB1c2VyCmNhbiBjb25jZW50cmF0ZSBvbiBkb2N1bWVudGF0
aW9uIHdyaXRpbmcgZnJvbSB0aGUgTWFya2Rvd24gcGVyc3BlY3RpdmUKYW5kIGFzc2lzdCB0
aGUgY3JlYXRpb24gb2YgZG9jdW1lbnQgY29udGVudCB1c2luZyBweXRob24gY29kZQpzbmlw
cGV0cy4KCmBwYW5kb2NgIGZpbHRlcnMgKHJlZmVyIHRvIFJlbGF0ZWQgV29yaywgW2BtYXJr
eWAgRG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSkKYWxsb3cgdHJhbnNmb3JtaW5nIHRoZSBk
b2N1bWVudCB3aGlsZSByZW5kZXJpbmcgaXQuIGBwYW5kb2NgIGZpbHRlcnMKb3BlcmF0ZSBv
biBhbiBpbnRlcm5hbCBhYnN0cmFjdCBzeW50YXggdHJlZSAoQVNUKSByZXByZXNlbnRhdGlv
biwKdGhlcmVmb3JlIHRoZSB1c2VyIG11c3QgZXhwcmVzcyBkeW5hbWljYWxseSBjcmVhdGVk
IGRvY3VtZW50IGNvbnRlbnQKYXMgbm9kZXMgaW4gdGhlIGZvcm1hdCBvZiB0aGUgQVNULiBg
bWFya3lgIHRha2VzIGEgc2xpZ2h0IGRpZmZlcmVudAphcHByb2FjaCBhbmQgb3BlcmF0ZXMg
b24gdGhlIE1hcmtkb3duIHRleHQgaXRzZWxmLCBiZWZvcmUgaXQgaXMgcGFyc2VkCmFuZCBy
ZW5kZXJlZC4KClB5dGhvbiBjb2RlIGlzIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IHdp
dGggYSBzaW1wbGUgbWFya3VwIHN5bnRheApzaW1pbGFyIHRvIFtSbWFya2Rvd25dKGh0dHBz
Oi8vd3d3LnJtYXJrZG93bi5vcmcpCnVzaW5nIGNvZGUgYmxvY2tzIGFuZCBpbmxpbmUgZXhw
cmVzc2lvbnMuIGBtYXJreWAgcGFyc2VzIHRoZSBjb2RlLApleGVjdXRlcyBpdCBhbmQgd3Jp
dGVzIHRoZSByZXN1bHRzIGJhY2sgaW50byB0aGUgTWFya2Rvd24gdGV4dC4gVGhlCmNvZGUg
Y2FuIHByb2R1Y2Ugb3V0cHV0IHVzaW5nIGFsZ29yaXRobXMgb3Igb3V0cHV0IGZvcm1hdHRl
ZCBzdHJpbmcKdmFyaWFibGVzLiBgbWFya3lgIGFsc28gYWxsb3dzIGZvciB0aGUgaW5zZXJ0
aW9uIG9mIGZvcm1hdCBkZXBlbmRlbnQKcmF3IGNvZGUgaW4gYGh0bWxgIGFuZCAqdGV4KiAo
Zm9yIGBwZGZgICBkb2N1bWVudHMpLgoKMS4gY29kZSBzbmlwcGV0cyBhcmUgZW1iZWRkZWQg
aW50byB0aGUgZG9jdW1lbnQgdGV4dAoyLiBjb2RlIHNuaXBwZXRzIGFyZSBleGVjdXRlZCBk
dXJpbmcgcHJlcHJvY2Vzc2luZwozLiBjb2RlIHByb2R1Y2VzIHRleHQgZm9yIHRoZSBNYXJr
ZG93biBkb2N1bWVudAo0LiBjb2RlIHZhcmlhYmxlcyBhcmUgZGlzcGxheWVkIGluIHRoZSBk
b2N1bWVudCB0ZXh0CjUuIGZvcm1hdCBkZXBlbmRlbnQgY29kZSBpcyBhcHBsaWVkIGZvciBg
aHRtbGAgYW5kIGBwZGZgCgotLS0KCiMgRG93bmxvYWQgYW5kIFJ1biBgbWFya3lgCgpgbWFy
a3lgIGlzIE1hcmtkb3duIHByZXByb2Nlc3NvciBhbGxvd2luZyB0byBleGVjdXRlIGVtYmVk
ZGVkIHB5dGhvbgpjb2RlIGluIE1hcmtkb3duIGRvY3VtZW50cy4gQWZ0ZXIgcHJlcHJvY2Vz
c2luZywgYSByZWd1bGFyIE1hcmtkb3duCmZpbGUgaXMgcHJlc2VudCwgd2hpY2ggaXMgcmVu
ZGVyZWQgaW50byBgaHRtbGAgYW5kIGBwZGZgIHVzaW5nCmBwYW5kb2NgLiBgbWFya3lgIGhh
bmRsZXMgYWxsIHRoaXMgc3RlcHMgdXNpbmcgYSBNYWtlZmlsZS4KYG1hcmt5YCBpcyBhIHNp
bmdsZS1maWxlIHNjcmlwdCB3aGljaCBkZXBlbmRzIG9uIGBweXRob25gICg+PTMuNiksCmBw
YW5kb2NgICg+PTIuMTEpLCBgcHl5YW1sYCBhbmQgYHBhbmRvYy14bm9zYC4KCioqSW5zdGFs
bGluZyBEZXBlbmRlbmNpZXMqKgoKYHBhbmRvY2AgYmluYXJpZXMgZm9yIERlYmlhbi1iYXNl
ZCBMaW51eCBhcmUgcmVsZWFzZWQKW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qZ20vcGFu
ZG9jL3JlbGVhc2VzKS4KYHB5eWFtbGAgaXMgaW5zdGFsbGVkIHVzaW5nIHRoZSBsaW51eCBw
YWNrYWdlIG1hbmFnZXIgb3IgYHBpcGAgYW5kCmBwYW5kb2MteG5vc2AgY29uc2lzdHMgb2Yg
dGhlIGNvbXBvbmVudHMgYGZpZ25vc2AsIGBzZWNub3NgLCBgZXFub3NgCmFuZCBgdGFibGVu
b3NgIHdoaWNoIGFyZSBpbnN0YWxsZWQgdXNpbmcgYHBpcGAuIERlcGVuZGluZyBvbiB0aGUK
bGludXggaW5zdGFsbGF0aW9uIG1heWJlIGBwaXAzYCBoYXMgdG8gYmUgdXNlZC4KCmBgYGJh
c2gKcGlwIGluc3RhbGwgcHl5YW1sCnBpcCBpbnN0YWxsIHBhbmRvYy1maWdub3MKcGlwIGlu
c3RhbGwgcGFuZG9jLXNlY25vcwpwaXAgaW5zdGFsbCBwYW5kb2MtZXFub3MKcGlwIGluc3Rh
bGwgcGFuZG9jLXRhYmxlbm9zCmBgYAoKKipEb3dubG9hZCBgbWFya3lgIFNjcmlwdCoqCgpg
bWFya3lgIGlzIGRvd25sb2FkZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBg
YGJhc2gKY2QgJEhPTUUKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9t
YXJreS5naXQKY2QgbWFya3kKYGBgCgpBbHRlcm5hdGl2ZWx5LCBtYXJreSBjYW4gYmUgb2J0
YWluZWQgZGlyZXRseSB3aXRob3V0IGBnaXRgOgoKYGBgYmFzaApjZCAkSE9NRQpta2RpciBt
YXJreQpjZCBtYXJreQp3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9s
ZWhtYW5uNy9tYXJreS9tYWluL21hcmt5LnB5CmNobW9kICt4IG1hcmt5LnB5CmBgYAoKKipJ
bml0aWFsaXplIGBtYXJreWAgRW52aXJvbm1lbnQqKgoKVGhlIGBtYXJreWAgZW52aXJvbm1l
bnQgY29uc2lzdHMgb2YgdGhlIE1ha2VmaWxlIGFuZCB0aGUgZG9jdW1lbnRhdGlvbi4KVGhl
IGBtYXJreWAgTWFrZWZpbGUsIGRvY3VtZW50YXRpb24gYW5kIHF1aWNrc3RhcnQgYXJlIHVu
cGFja2VkIGZyb20KdGhlIGBtYXJreS5weWAgc2NyaXB0IGZpbGUgaW50byB0aGUgY3VycmVu
dCB3b3JraW5nIGRpcmVjdG9yeS4KVGhlIGBtYXJreWAgZW52aXJvbm1lbnQgaXMgaW5pdGlh
bGl6ZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBgYGJhc2gKY2QgJEhPTUUK
Y2QgbWFya3kKLi9tYXJreS5weSAtLWluaXQKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAu
L21kL21hcmt5Lm1kaQpXUklURSAuL21kL21hcmt5LXNyYy5tZApXUklURSAuL21kL3F1aWNr
c3RhcnQubWQKV1JJVEUgLi9tZC9xdWljay1zcmMubWQKV1JJVEUgLi9tZC9leGFtcGxlLm1k
CldSSVRFIC4vbWQvZXhhbXBsZS1zcmMubWQKV1JJVEUgLi9kYXRhL21hcmt5LmJpYgpVU0FH
RQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRtbCBodHRwZGAKMy4gYG1ha2UgYWxs
LXBkZmAKYGBgCgpEdXJpbmcgaW5pdGlhbGl6YXRpb24gYG1hcmt5YCBjcmVhdGVzIHR3byBk
aXJlY3RvcmllcyBgbWQvYCBhbmQgYGRhdGEvYC4KYG1kL2AgaXMgdGhlIGRpcmVjdG9yeSB3
aGljaCBjb250YWlucyB0aGUgTWFya2Rvd24gdGV4dCB0byBiZSByZW5kZXJlZAppbnRvIGBo
dG1sYCBhbmQgYHBkZmAuIGBkYXRhL2AgaXMgdGhlIHJlc291cmNlIGRpcmVjdG9yeSB3aGlj
aCBjb250YWlucwpiaWJsaW9ncmFwaHksIGltYWdlcywgdmlkZW9zIGFuZCBvdGhlciBhc3Nl
dHMuCgoqKlJlbmRlciBEb2N1bWVudGF0aW9uIGFuZCBFeGFtcGxlcyoqCgpJZiBhbGwgZGVw
ZW5kZW5jaWVzIGhhdmUgYmVlbiBpbnN0YWxsZWQgYWNjb3JkaW5nbHkgYW5kIHRoZSBgbWFy
a3lgCmVudmlyb25tZW50IGlzIGluaXRpYWxpemVkLCBgbWFya3lgIGNhbiBiZSB1c2VkIHRv
IHJlbmRlciBhIGxvY2FsCmNvcHkgb2YgdGhlIGRvY3VtZW50YXRpb24sIHRoZSBxdWlja3N0
YXJ0IGFuZCB0aGUgZXhhbXBsZS4KClRoZSBmb2xsb3dpbmcgY29tbWFuZHMgcmVuZGVyIHRo
ZSBNYXJrZG93biB0ZXh0IG9mIHRoZSBkb2N1bWVudGF0aW9uLgoKYGBgYmFzaApjZCAkSE9N
RQpjZCBtYXJreQptYWtlIGFsbC1wZGYKbWFrZSBhbGwtaHRtbApgYGAKCkR1cmluZyBgbWFr
ZWAgYSBuZXcgZGlyZWN0b3J5IGBidWlsZC9gIGlzIGNyZWF0ZWQsIHdoaWNoIGNvbnRhaW5z
CnRlbXBvcmFyeSBmaWxlcyAocHJlcHJvY2Vzc2VkIE1hcmtkb3duIHRleHQsIGxpbmtlZCB0
ZXh0IGZvciBgaHRtbGAKYW5kIGBwZGZgKS4gVGhlIHJlc3VsdGluZyBgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyBhcmUgcGxhY2VkIGluc2lkZQpgaHRtbC9gIGFuZCBgcGRmL2AuIEZv
ciByZW5kZXJpbmcgYHBkZmAgYSB0ZXggZW52aXJvbm1lbnQgbGlrZQpgdGV4bGl2ZWAgbmVl
ZHMgdG8gYmUgaW5zdGFsbGVkLiBGb3IgcmVuZGVyaW5nIHRoZSBgaHRtbGAgZG9jdW1lbnRz
LApgcGFuZG9jYCByZXF1aXJlcyBpbnRlcm5ldCBhY2Nlc3MsIGJlY2F1c2UgamF2YSBzY3Jp
cHRzIGFuZCBzdHlsZQpzaGVldHMgYXJlIGZldGNoZWQgZnJvbSBjb250ZW50IGRlbGl2ZXJ5
IG5ldHdvcmtzLgoKKipgbWFya3lgIE1ha2VmaWxlKioKClRoZSBgbWFya3lgIE1ha2VmaWxl
IGNvb3JkaW5hdGVzIHRoZSB0aHJlZSBzdGVwcyBvZiB0aGUgYG1hcmt5YApkb2N1bWVudCBw
cm9jZXNzaW5nIHBpcGVsaW5lOiBwcmVwcm9jZXNzaW5nLCBsaW5raW5nIGFuZCByZW5kZXJp
bmcuClRoZSBgbWFya3lgIE1ha2VmaWxlIHN1cHBvcnRzIHNldmVyYWwgdGFyZ2V0cyBmb3Ig
ZGlzcGxheWluZyBoZWxwCm9yIHJlbmRlcmluZyBhbGwsIG11bHRpcGxlIG9yIHNwZWNpZmlj
IGRvY3VtZW50cy4KCipNYWtlZmlsZSBUYXJnZXRzKgoKMS4gYG1ha2UgaGVscGA6IGRpc3Bs
YXkgaGVscCBtZXNzYWdlIG9uIHRoZSBjb25zb2xlCjIuIGBtYWtlIGNoZWF0YDogZGlzcGxh
eSB0aGUgYG1hcmt5YCBtYXJrdXAgQ2hlYXQgU2hlZXQKMy4gYG1ha2Ugc2NhbmA6IHNjYW4g
Zm9yIG5ldyBkb2N1bWVudHMgYG1kLyoubWRgIGFuZCB1cGRhdGUgTWFrZWZpbGUKNC4gYG1h
a2UgYWxsYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyoubWRgIGludG8gYGh0bWxgIGFu
ZCBgcGRmYAo1LiBgbWFrZSBhbGwtcGRmYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyou
bWRgIGludG8gYHBkZmAKNi4gYG1ha2UgYWxsLWh0bWxgOiByZW5kZXIgYWxsIGRvY3VtZW50
cyBgbWQvKi5tZGAgaW50byBgaHRtbGAKNy4gYG1ha2UgaHR0cGRgOiBzdGFydCBweXRob24g
d2Vic2VydmVyIGluIGBodG1sL2AKOC4gYG1ha2UgY2xlYW5gOiByZW1vdmUgYWxsIGZpbGVz
OiBgYnVpbGQvKmAsIGBwZGYvKmAsIGBodG1sLypgCgoqTWFrZSBTaW5nbGUgRG9jdW1lbnQq
CgpXaGVuIHJ1bm5pbmcgYG1ha2UgYWxsYCwgYG1hcmt5YCByZW5kZXJzIGFsbCBkb2N1bWVu
dHMsIHdoaWNoIGNhbgpiZSB1bmRlc2lyYWJsZSBpZiBvbmx5IG9uZSBwYXJ0aWN1bGFyIGRv
Y3VtZW50IHNoYWxsIGJlIHJlbmRlcmVkLgpCeSBgbWFrZSBzY2FuYCwgYG1hcmt5YCBzY2Fu
cyB0aGUgZGlyZWN0b3J5IGBtZC8qLm1kYCBmb3IgbmV3IE1hcmtkb3duCmRvY3VtZW50cyB0
byBiZSBwcm9jZXNzZWQuIEZvciBlYWNoIGRvY3VtZW50LCB3aGljaCBoYXMgYmVlbiBmb3Vu
ZCwKYG1hcmt5YCBzZXRzIHVwIGFsaWFzIHRhcmdldHMgaW4gb3JkZXIgdG8gZGVidWcgdGhl
IHByZXByb2Nlc3NpbmcsCmxpbmtpbmcgYW5kIHJlbmRlcmluZyBvZiB0aGlzIGRvY3VtZW50
LgoKQXNzdW1pbmcgdGhlIGRvY3VtZW50IGBtZC9tYXJreS5tZGAgc2hhbGwgYmUgcmVuZGVy
ZWQgc3RlcCBieSBzdGVwLApgbWFya3lgIGludHJvZHVjZXMgdGhlIGZvbGxvd2luZyB0YXJn
ZXRzLgoKMS4gKlByZXByb2Nlc3NpbmcqOiBgbWFrZSBtZC1tYXJreWAgXAoJKiBgbWQvbWFy
a3kubWRgIC0+IGBidWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcgYGh0bWxgKjogYG1ha2Ug
bGh0bWwtbWFya3lgIFwKCSogYGJ1aWxkL21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kuaHRt
bC5tZGAKMy4gKkxpbmtpbmcgYHBkZmAqOiBgbWFrZSBscGRmLW1hcmt5YCBcCgkqIGBidWls
ZC9tYXJreS5tZGAgLT4gYGJ1aWxkL21hcmt5LnBkZi5tZGAKNC4gKlJlbmRlcmluZyBgaHRt
bGAqOiBgbWFrZSBodG1sLW1hcmt5YAoJKiBgYnVpbGQvbWFya3kuaHRtbC5tZGAgLT4gYGh0
bWwvbWFya3kuaHRtbGAKNS4gKlJlbmRlcmluZyBgcGRmYCo6IGBtYWtlIHBkZi1tYXJreWAK
CSogYGJ1aWxkL21hcmt5LnBkZi5tZGAgLT4gYHBkZi9tYXJreS5wZGZgCgotLS0KCiMgV3Jp
dGUgQSBOZXcgRG9jdW1lbnQKCkluIG9yZGVyIHRvIHJlbmRlciBhIG5ldyBkb2N1bWVudCB0
aGUgTWFya2Rvd24gdGV4dCBuZWVkcyB0byBiZSBzYXZlZAp0byBhIGZpbGUgbG9jYXRlZCBp
biBgbWQvZXhhbXBsZS5tZGAgd2hpY2ggY2FuIGJlIGZvdW5kIHJlbmRlcmVkCltoZXJlXShl
eGFtcGxlLj8/PykuIFRoZSBmb2xsb3dpbmcgTWFya2Rvd24gc25pcHBldApjYW4gYmUgdXNl
ZCBhcyBhIHN0YXJ0aW5nIHBvaW50LgoKYGBgeWFtbAohISEgZXhhbXBsZS5tZCByYXcgPj4x
CmBgYAoKLS0tCgojIENvZGUgQmxvY2tzCgpDb2RlIGJsb2NrcyBhcmUgZW1iZWRkZWQgaW4g
TWFya2Rvd24gdXNpbmcgZmVuY2VkIGNvZGUgdXNpbmcKZWl0aGVyIHRoZSBgXCFgIG9yIGBc
ISFgIGZsYWcgZm9yIGRpc3BsYXllZCBhbmQgaGlkZGVuIGNvZGUKcmVzcGVjdGl2ZWx5LgoK
YGBgdGV4dAogICAgYGBgXCEKCUNPREVfQkxPQ0tfU0hPV04KICAgIGBgYAoKICAgIGBgYFwh
IQoJQ09ERV9CTE9DS19ISURERU4KICAgIGBgYApgYGAKCioqRGlzcGxheSBhbmQgRXhlY3V0
ZSBDb2RlKioKClRoaXMgY29kZSBibG9jayBhbm5vdGF0ZWQgd2l0aCBgIWAgaXMgZGlzcGxh
eWVkIGFuZCBleGVjdXRlZC4KCmBgYCEKCWltcG9ydCBtYXRoCgl4ID0gbWF0aC5zcXJ0KDIp
CmBgYAoKKipFeGVjdXRlIENvZGUgd2l0aG91dCBEaXNwbGF5KioKClRoZSBjb2RlIGJsb2Nr
IGFubm90YXRlZCB3aXRoIGAhYCBpcyBub3QgZGlzcGxheWVkLCBidXQgZXhlY3V0ZWQuCgpg
YGAhIQoJeSA9IHggKyAxCmBgYAoKKipEaXNwbGF5IENvZGUgYnV0IGRvIG5vdCBFeGVjdXRl
KioKClRoaXMgY29kZSBibG9jayBpcyBkaXNwbGF5ZWQgYXMgcHl0aG9uLCBidXQgbm90IGV4
ZWN1dGVkLgoKYGBgcHl0aG9uCgl6ID0gMC4vMC4KYGBgCgoqKlVzaW5nIHRoZSBQeXRob24g
YGltcG9ydGAgU3RhdGVtZW50KioKCkxhcmdlIGNvZGUgYmxvY2tzIGNhbiBiZSBpbXBvcnRl
ZCBmcm9tIHB5dGhvbiBtb2R1bGVzIGFuZCB0aGUKYGltcG9ydGAgc3RhdGVtZW50IGNhbiBi
ZSB1c2VkIGZvciBsb2FkaW5nIGluc3RhbGxlZCBsaWJyYXJpZXMuCgpgYGBweXRob24KCWlt
cG9ydCBudW1weQoJaW1wb3J0IHN5cwoJc3lzLnBhdGguYXBwZW5kKCIuIikKCSNpbXBvcnQg
bW9kdWxlX2luX3dvcmtpbmdfZGlyZWN0b3J5CmBgYAoKLS0tCgojIElubGluZSBDb2RlCgpJ
bmxpbmUgc3RhdGVtZW50cyBhcmUgZGlyZWN0bHkgZW1iZWRkZWQgaW50byB0aGUgdGV4dCBm
bG93IHVzaW5nCmV4cHJlc3Npb25zIGFuZCB2YXJpYWJsZXMgd2l0aCB0aGUgY29ycmVzcG9u
ZGluZwpzeW50YXggYGAgYFwhRVhQUkVTU0lPTmAgYGAgb3IgYGAgYFwhVkFSSUFCTEVgIGBg
LgpUaGUgb3V0cHV0IG9mIHZhcmlhYmxlcyBjYW4gYmUgZm9ybWF0dGVkIHVzaW5nIHRoZQpg
YCBgXCFWQVJJQUJMRVs6Rk9STUFUXWAgYGAgb3IgYGAgYFwhRVhQUkVTU0lPTls6Rk9STUFU
XWAgYGAKc3RhdGVtZW50IGFjY29yZGluZyB0byB0aGUgcHl0aG9uIG9wZXJhdG9yIGB7PHZh
cmlhYmxlPls6PGZvcm1hdD5dfWAKaW1wbGVtZW50ZWQgaW4gdGhlCltgc3RyLmZvcm1hdCgp
YF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1h
dHN0cmluZ3MpCnNwZWNpZmljYXRpb24gYW5kIHRoZSBvcGVyYXRvciBgezxleHByZXNzaW9u
Pls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4KW2BmYC1zdHJpbmdzXShodHRwczovL2Rv
Y3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJp
bmdzKS4KCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhlIHJlc3VsdCBvZiAkXHNx
cnR7Mn0kIGlzOgoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgbWF0aC5zcXJ0KDIuMClgCiog
Zm9ybWF0dGVkIG91dHB1dDogYCEgIiUuNGYiICUgbWF0aC5zcXJ0KDIuMClgCgpUaGUgdmFy
aWFibGUgJHgkIGlzCiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBgISB4YAoqIGZvcm1hdHRlZCBv
dXRwdXQ6IGAhIHg6LjRmYAoKVGhlIHZhcmlhYmxlICR5PXgrMSQgaXMKKiB1bmZvcm1hdHRl
ZCBvdXRwdXQ6IGAhIHlgCiogZm9ybWF0dGVkIG91dHB1dDogYCEgeTouNGZgCgooVGhlIGNv
ZGUgYmxvY2sgZm9yIHRoZSBkZWZpbml0aW9uIG9mICR5JCBpcyBoaWRkZW4uKQoKKipJbmxp
bmUgRXhwcmVzc2lvbiBPdXRwdXQqKgoKYGBgIQoJeCA9IGxpc3QocmFuZ2UoMSwgMTEpKQoJ
eSA9IFtpKmkgZm9yIGkgaW4geF0KCglkZWYgbGlzdF9zdHIoYSk6CgkJcmV0dXJuIFtzdHIo
aSkgZm9yIGkgaW4gYV0KCWRlZiBsaXN0X2FuZChhKToKCQlyZXR1cm4gIiwgIi5qb2luKGxp
c3Rfc3RyKGFbOi0xXSkpICsgIiBhbmQgIiArIHN0cihhWy0xXSkKYGBgCgpUaGUgbGlzdCBj
YW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgdGV4dC4gVGhlIHNxdWFyZSBvZiB0aGUgZmlyc3QK
YCFsZW4oeClgIG51bWJlcnMgYCFsaXN0X2FuZCh4KWAgaXMgYCFsaXN0X2FuZCh5KWAuIFNx
dWFyZSBudW1iZXJzCmFyZSBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCioqSW5s
aW5lIFN0YXRlbWVudHMgaW4gVGFibGVzKioKCmBgYCEKCWNsYXNzIHNxdWFyZToKCQlkZWYg
X19pbml0X18oc2VsZik6CgkJCXNlbGYueCA9IDAKCQlkZWYgZ2V0X3goc2VsZik6CgkJCXJl
dHVybiBzZWxmLngKCQlkZWYgbmV4dF95KHNlbGYpOgoJCQl5ID0gc2VsZi54KioyCgkJCXNl
bGYueCArPSAxCgkJCXJldHVybiB5CglzcSA9IHNxdWFyZSgpCmBgYAoKVGhlIGZvbGxvd2lu
ZyB0YWJsZSBpcyBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCnggICAgICAgICAg
ICB8eQotLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tCmAhc3EuZ2V0X3goKWB8YCFzcS5u
ZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAh
c3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgp
YHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0
X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNx
LmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAK
Ci0tLQoKIyBHZW5lcmF0ZSBNYXJrZG93biBUZXh0CgpNYXJrZG93biB0ZXh0IGNhbiBiZSBw
cm9kdWNlZCBhbGdvcml0aG1pY2FsbHkgZnJvbSBhIHB5dGhvbiBhbGdvcml0aG0KdXNpbmcg
dGhlIGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24uIFRoZSBgXygpYCBhbmQgYF9fKClgIGZ1
bmN0aW9uIGFyZQpzcGVjaWFsIG5hbWVzIHdoaWNoIGFyZSByZXNlcnZlZCBieSBgbWFya3lg
LiAocmVmZXIgdG8gR2VuZXJhdGlvbiBvZgpNYXJrZG93biBUZXh0LCBbYG1hcmt5YCBkb2N1
bWVudGF0aW9uXShtYXJreS4/Pz8pIGZvciBpbi1kZXB0aApleHBsYW5hdGlvbikuCgojIyBU
aGUgYF8oKWAgRnVuY3Rpb24KCiBUaGUgYF8oKWAgZnVuY3Rpb24gYmFzaWNseSByZXNlbWJs
ZWQgdGhlIHB5dGhvbiBgcHJpbnQoKWAgZnVuY3Rpb24uCmBtYXJreWAgZG9lcyBub3QgcGF0
Y2ggdGhlIHN0YW5kYXJkIGBwcmludCgpYCBmdW5jdGlvbiB3aGljaCBzdGlsbApkaXNwbGF5
cyB0ZXh0IGluIHRoZSBjb25zb2xlIGFuZCBub3QgaW4gdGhlIE1hcmtkb3duIHRleHQuClRo
ZSBgXygpYCBmdW5jdGlvbiBzdXBwb3J0cyBhcHBlbmRpbmcgdGV4dCB0byB0aGUgcHJldmlv
dXMgYW5kIHRoZSBuZXh0CmxpbmUgb2Ygb3V0cHV0IGJ5IHVzaW5nIGBfYCBhcyB0aGUgZmlz
dCBvciBsYXN0IHBhcmFtZXRlci4KMS4gYF8oXywgKmFyZ3MgICApYDogYXBwZW5kIHRoaXMg
b3V0cHV0IHRvIHByZXZpb3VzIG91dHB1dAoyLiBgXyhfLCAqYXJncywgXylgOiBhcHBlbmQg
dG8gcHJldmlvdXMgYW5kIG5leHQgb3V0cHV0CjMuIGBfKCAgICphcmdzLCBfKWA6IGFwcGVu
ZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1dAo0LiBgXygpYDogZGlzYWJsZSBhcHBlbmQg
ZmxhZwoKKipNb25rZXkgUGF0Y2ggYHByaW50KClgIEZ1bmN0aW9uKioKClRoZSBgcHJpbnQo
KWAgZnVuY3Rpb24gY2FuIGJlICptb25rZXkgcGF0Y2hlZCogdXNpbmcgdGhlIGZvbGxvd2lu
ZwpzdGF0bWVudCBpbiBvcmRlciB0byBjYWxsIHRoZSBgXygpYCBmdW5jdGlvbiBpbnN0ZWFk
LgoKYGBgIQoJcHJpbnQoIlByaW50IiwgInRvIiwgICJjb25zb2xlIiwgIiEiKQoJXygiUHJp
bnQiLCAidG8iLCAgIk1hcmtkb3duIiwgIiEiKQoKCXByaW50ID0gXyAjIG1vbmtleSBwYXRj
aAoJcHJpbnQoIlByaW50IiwgInRvIiwgICJNYXJrZG93biIsICIhIikKYGBgCgoqKkpvaW4g
QXJndW1lbnRzIHVzaW5nIGBzZXBgKioKClRoZSBzaWduYXR1cmUgb2YgdGhlIGBfKClgIGlz
IGBfKCphcmdzLCBzZXA9IiAiKWAuIGBzZXBgIGlzIHVzZWQgdG8Kam9pbiB0aGUgYXJndW1l
bnRzIGAqYXJnc2AgaW50byBvbmUgc3RyaW5nLgoKYGBgIQoJXygiVGhlIGZpcnN0IGZpdmUg
bmF0dXJhbCBudW1iZXJzIGFyZToiKQoJXygxLCAyLCAzLCA0LCA1LCBzZXA9IiwgIikKYGBg
CgoqKkdlbmVyYXRlIGEgVGFibGUgd2l0aCBBcHBlbmRpbmcqKgoKVGhlIGFwcGVuZCBmZWF0
dXJlIGlzIHVzZWQgdG8gY3JlYXRlIGEgdGFibGUuCgpgYGAhCglfKCJDb2x1bW4gMSIsIF8p
CglfKCJ8Q29sdW1uIDIiLCBfKQoJXygifENvbHVtbiAzIiwgXykKCV8oKQoKCV8oInwiLmpv
aW4oWyItLS0tLS0tLSJdKjMpKQoKCWZvciBpIGluIHJhbmdlKDUpOgoJCV8oIiUgOGQiICUg
KGkqMykpCgkJZm9yIGogaW4gWzEsIDJdOgoJCQlfKF8sICJ8JSA4ZCIgJSAoaSozK2opKQpg
YGAKClRoZSBhbGdvcml0aG0gcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBNYXJrZG93biB0ZXh0
LgoKYGBgbWQKQ29sdW1uIDF8Q29sdW1uIDJ8Q29sdW1uIDMKLS0tLS0tLS18LS0tLS0tLS18
LS0tLS0tLS0KICAgICAgIDB8ICAgICAgIDF8ICAgICAgIDIKICAgICAgIDN8ICAgICAgIDR8
ICAgICAgIDUKICAgICAgIDZ8ICAgICAgIDd8ICAgICAgIDgKICAgICAgIDl8ICAgICAgMTB8
ICAgICAgMTEKICAgICAgMTJ8ICAgICAgMTN8ICAgICAgMTQKYGBgCgojIyBUaGUgYF9fKClg
IEZ1bmN0aW9uCgpDb21wYXJlZCB0byB0aGUgYF8oKWAgZnVuY3Rpb24sIHRoZSBgX18oKWAg
ZnVuY3Rpb24gb25seSB0YWtlcyBvbmUKYXJndW1lbnQgYW5kIGl0cyBwdXJwb3NlIGlzIHRv
IG91dHB1dCBhIGZvcm1hdHRlZCBwYXJhZ3JhcGggd2l0aAppbmRlbnRhdGlvbi4gVGhlIHNp
Z25hdHVyZSBvZiB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIGBfKGFyZywgY3JvcD1UcnVlKWAu
CgoqKkdlbmVyYXRlIGEgUGFyYWdyYXBoIHdpdGggYGZgLVN0cmluZ3MqKgoKVGhlIGBfXygp
YCBmdW5jdGlvbiBjYW4gYmUgY29tYmluZWQgd2l0aCB0cmlwbGUgcXVvdGVkIGJsb2NrIHN0
cmluZ3MKYW5kIHRoZSBweXRob24gMyBgZmAtc3RyaW5ncyBvciBgZiIuLi4iYCBzdHJpbmcg
aW50ZXJwb2xhdGlvbiwgcmVmZXIgdG8KW2BmYC1zdHJpbmdzXShodHRwczovL2RvY3MucHl0
aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJpbmdzKS4K
CmBgYCEKCWltcG9ydCByYW5kb20KCXMgPSAwCglyYW5kb20uc2VlZChzKQoJcCA9IFtyYW5k
b20ucmFuZG9tKCkgZm9yIGkgaW4gcmFuZ2UoMyldCgoJX18oZiIiIgoJCVBhcmFtZXRlciBv
bmUgaXMge3BbMF06LjNmfSBhbmQgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHNlZWQKCQlv
ZiB0aGUgcHNldWRvIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLCB3aGljaCB3YXMgY2hvc2Vu
CgkJdG8gYmUge3N9LiBGb3IgdGhlIHNhbWUgc2VlZCBhbHdheXMgdGhlIHNhbWUgcmFuZG9t
IG51bWJlcnMKCQlhcmUgY3JlYXRlZC4gVGhlIG5leHQgdHdvIG51bWJlcnMgYXJlIHtwWzFd
Oi4zZn0gYW5kIHtwWzJdOi4zZn0uCgkJVGhlIHN1bSBvZiB0aGUgdGhyZWUgbnVtYmVycyBp
cyB7c3VtKHApOi4zZn0gYW5kIGl0IGlzCgkJeydncmVhdGVyJyBpZiBzdW0ocCkgPiAyLiBl
bHNlICdsZXNzZXIgb3IgZXF1YWwnfSB0aGFuIHR3by4KCSIiIikKYGBgCgoqKkNyb3BwaW5n
IGFuZCBJbmRlbnRhdGlvbiBvZiBPdXRwdXQqKgoKQmVmb3JlIHRoZSB0ZXh0IGdlbmVyYXRl
ZCBieSB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIHByaW50ZWQgaW50byB0aGUKZG9jdW1lbnQu
IFRoZSB0ZXh0IGlzIGNyb3BwZWQgYWNjb3JkaW5nIHRvIHRoZSBsZWFkaW5nIHdoaXRlIHNw
YWNlCm9mIHRoZSBmaXJzdCBub24tZW1wdHkgbGluZS4gVGhlIGxlYWRpbmcgd2hpdGUgc3Bh
Y2Ugb2YgdGhlIGZpcnN0Cm5vbi1lbXB0eSBsaW5lIGlzIHJlbW92ZWQgZnJvbSBhbGwgb3Ro
ZXIgbGluZXMgb2YgdGhlIG91dHB1dC4KCmBgYCEKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAx
CgkJCSogTGlzdCBMZXZlbCAyCgkJCSogTGlzdCBMZXZlbCAyCgkJCQkqIExpc3QgTGV2ZWwg
MwoJCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDEK
CSIiIikKYGBgCgpUaGUgY29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIG91dHB1
dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkqIExpc3QgTGV2ZWwgMgoJKiBMaXN0IExldmVs
IDIKCQkqIExpc3QgTGV2ZWwgMwoJKiBMaXN0IExldmVsIDIKKiBMaXN0IExldmVsIDEKKiBM
aXN0IExldmVsIDEKYGBgCgoqKkRpc2FibGUgQ3JvcHBpbmcgb2YgT3V0cHV0KioKClRoZSBj
cm9wcGluZyBpcyBkaXNhYmxlZCB1c2luZyB0aGUga2V5d29yZCBgX18odGV4dCwgY3JvcD1G
YWxzZSlgLgoKYGBgIQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEKCSIiIiwgY3JvcD1UcnVl
KQoKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgkiIiIsIGNyb3A9RmFsc2UpCmBgYAoKVGhl
IGNvZGUgYmxvY2sgcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBvdXRwdXQuCgpgYGBtZAoqIExp
c3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAyCmBgYAoKLS0tCgojIEZvcm1hdCBEZXBlbmRl
bnQgTGlua3MKCldoZW4gd3JpdGluZyBzZXZlcmFsIE1hcmtkb3duIGRvY3VtZW50cyBvZnRl
biBkb2N1bWVudHMgYXJlIGxpbmtlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgdGhlIE1h
cmtkb3duIGxpbmsgc3RhdGVtZW50CmBbTGluayBOYW1lXShmaWxlLmh0bWwpYCBvciBgW0xp
bmsgTmFtZV0oZmlsZS5wZGYpYC4KSG93ZXZlciwgd2hlbiByZW5kZXJpbmcgZG9jdW1lbnRz
IHdpdGggbGlua3MgaW50byBgaHRtbGAgYW5kIGBwZGZgCnRoZSBmaWxlIGV4dGVuc2lvbiBv
ZnRlbiBtdXN0IGJlIGFkanVzdGVkIGFjY29yZGluZyB0byB0aGUgb3V0cHV0IGZvcm1hdC4K
YG1hcmt5YCBzdXBwb3J0cyB0aGUgYC5cPz8/YCBzdGF0ZW1lbnQsIHdoaWNoIHdpbGwgYmUg
cmVwbGFjZWQgYnkKYC5odG1sYCBvciBgLnBkZmAgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQg
Zm9ybWF0LgoKYGBgbWQKW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuXD8/PykKYGBgCgp3aWxs
IGJlIHByb3Byb2Nlc3NlZCBpbnRvIHRoZSBmb2xsb3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxg
OiBgW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuaHRtbClgCiogZm9yIGBwZGZgOiBgW0xpbmsg
dG8gZG9jdW1lbnRdKGZpbGUucGRmKWAKCltMaW5rIHRvIHRoaXMgZG9jdW1lbnRdKHF1aWNr
c3RhcnQuPz8/KQoKLS0tCgojIEZvcm1hdCBEZXBlbmRlbnQgQ29kZQoKYHBhbmRvY2AgTWFy
a2Rvd24gYWxsb3dzIHRvIHdyaXRlIGZvcm1hdCBzcGVjaWZpYyBjb2RlIHdpdGhpbiBNYXJr
ZG93bgp1c2luZyBgaHRtbGAgYW5kICp0ZXgqIGZvciBgcGRmYCBkb2N1bWVudHMuIEhvd2V2
ZXIsIHdoZW4gaW5zZXJ0aW5nCnJhdyBgaHRtbGAgb3IgcmF3ICp0ZXgqIGNvZGUsIHRoZSBk
b2N1bWVudCBvbmx5IGNhbiBiZSByZW5kZXJlZCBpbnRvCmBodG1sYCBvciBgcGRmYCBhY2Nv
cmRpbmdseS4gVGhpcyBpcyBvbmx5IGEgc2hvcnQgc3VtbWFyeSwgZm9yIGFuCmluLWRlcHRo
IGV4cGxhbmF0aW9uIG9mIGFsbCBmZWF0dXJlcyBwbGVhc2UgcmVmZXIgdG8gRm9ybWF0IENv
ZGVzLApbYG1hcmt5YCBkb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pLgoKYG1hcmt5YCBpbnRy
b2R1Y2VzIGZvcm1hdCBjb2Rlcywgd2hpY2ggYXJlIGFwcGxpZWQgZHVyaW5nIGxpbmtpbmcK
YWZ0ZXIgcHJlcHJvY2Vzc2luZy4gRHVyaW5nIGxpbmtpbmcgZm9ybWF0IHNwZWNpZmljIGNv
ZGVzIGZvciBgaHRtbGAKYW5kIGBwZGZgIGFyZSBhcHBsaWVkIGluIGEgY29uc2lzdGVudCBt
YW5uZXIsIHJlc3VsdGluZyBpbiBkb2N1bWVudHMKd2l0aCBNYXJrZG93biBhbmQgYGh0bWxg
IG9yIE1hcmtkb3duIGFuZCAqdGV4KiBvbmx5LiBVc2luZyB0aGlzCnBhdHRlcm4gYG1hcmt5
YCBkb2N1bWVudHMgY29udGFpbiByZWd1bGFyIE1hcmtkb3duLCB3aGljaCBjYW4gYmUKcmVu
ZGVyZWQgaW50byBgaHRtbGAgYW5kIGBwZGZgLCBhcyB3ZWxsIGFzIGZvcm1hdCBzcGVjaWZp
YyBjb2Rlcwpmb3IgdHdlYWtpbmcgb3IgcG9saXNoaW5nIGBodG1sYCBhbmQgYHBkZmAgb3V0
cHV0LgoKRm9ybWF0IGNvZGVzIGFyZSBzcGVjaWZpZWQgaW4gY29kZSBibG9ja3MgYW5kIGNh
bGxlZCB1c2luZyB0aGUKaW5saW5lIHN5bnRheCBgYCBgXD9GVU5DQUxMKEFSR1MpYCBgYCBv
ciBgYCBgXD9WQVJJQUJMRShBUkdTKWAgYGAsCndoaWNoIGlzIHRyYW5zbGF0ZWQgaW50byB0
aGUgZm9sbG93aW5nIHB5aG9uIGZ1bmN0aW9uIGNhbGxzLgoxLiBgaHRtbEZNVENPREUoQVJH
UylgOiBjYWxsZWQgd2hlbiBsaW5rZWQgZm9yIGBodG1sYC4KMi4gYHBkZkZNVENPREUoQVJH
UylgOiBjYWxsZWQgd2hlbiBsaW5rZWQgZm9yIGBwZGZgLgoKQXNzdW1pbmcgcHJlcHJvY2Vz
c2luZyB0aGUgZmlsZSBgbWQvbWFya3kubWRgLCBsaW5raW5nIGZvcm1hdCBjb2RlcwpyZXN1
bHRzIGluIHRoZSB0d28gZm9sbG93aW5nIG91dHB1dCBmaWxlcy4KMS4gYGJ1aWxkL21hcmt5
Lmh0bWwubWRgOiBjb250YWlucyBvdXRwdXQgb2YgYGh0bWxgIGZvcm1hdCBjb2Rlcy4KMi4g
YGJ1aWxkL21hcmt5LnBkZi5tZGA6IGNvbnRhaW5zIG91dHB1dCBvZiBgcGRmYCBmb3JtYXQg
Y29kZXMuCgoqKkV4YW1wbGUgMTogTXVsdGktQ29sdW1uIFRleHQgaW4gYHBkZmAgYW5kIGBo
dG1sYCoqCgpEZWZuaXRpb24gb2YgdHdvIGZvcm1hdCBjb2RlcyBgbWNvbF9iZWdpbmAgYW5k
IGBtY29sX2VuZGAsIG9uZSBmb3IgdGhlCmJlZ2luIG9mIG11bHRpIGNvbHVtbiBhbmQgYW5v
dGhlciBmb3IgdGhlIGVuZCBvZiB0aGUgbXVsdGkgY29sdW1uCnNlY3Rpb24uIFRoZSBmb3Jt
YXQgY29kZXMgYXJlIGFwcGVuZGVkIHdpdGggYF9odG1sYCBhbmQgYF9wZGZgCnJlc3BlY3Rp
dmVseS4KCmBgYCEKCWRlZiBwZGZfbWNvbF9iZWdpbigpOiByZXR1cm4gciJcYmVnaW57bXVs
dGljb2xzfXsyfSIKCWRlZiBwZGZfbWNvbF9lbmQoKTogcmV0dXJuIHIiXGVuZHttdWx0aWNv
bHN9IgoJZGVmIGh0bWxfbWNvbF9iZWdpbigpOiByZXR1cm4gciI8ZGl2IHN0eWxlPSdjb2x1
bW4tY291bnQ6IDI7Jz4iCglkZWYgaHRtbF9tY29sX2VuZCgpOiByZXR1cm4gciI8L2Rpdj4i
CmBgYAoKVGhlIGBjb2x1bW4tY291bnRgIENTUyBwcm9wZXJ0eSByZXF1aXJlcyBJbnRlcm5l
dCBFeHBsb3Jlcj49MTAsCkZpcmVmb3g+PTUyLCBTYWZhcmk+PTksIE9wZXJhPj0zNyBvciBD
aHJvbWU+PTUwLCByZWZlciB0bwpbdzNzY2hvb2xzXShodHRwczovL3d3dy53M3NjaG9vbHMu
Y29tL2Nzcy9jc3MzX211bHRpcGxlX2NvbHVtbnMuYXNwKS4KSW4gb3JkZXIgdG8gdXNlIHRo
ZSBgbXVsdGljb2xgICp0ZXgqIHBhY2thZ2UsIHRoZSBzdGF0ZW1lbnQKYFx1c2VwYWNrYWdl
e211bHRpY29sfWAgaGFzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSB5YW1sIG1ldGEgZGF0YQpp
biB0aGUgZnJvbnQgbWF0dGVyIG9mIHRoZSBNYXJrZG93biBkb2N1bWVudC4KCmA/X21jb2xf
YmVnaW4oKWBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0CmA/X21jb2xfZW5kKClgCgoqKkV4YW1wbGUg
MjogTXVsdGktQ29sdW1uIFRleHQgaW4gYHBkZmAgYW5kIGBodG1sYCoqCgpgYGAhCglkZWYg
cGRmX21jb2wodGV4dCk6IHJldHVybiByIlxiZWdpbnttdWx0aWNvbHN9ezJ9IiArIHRleHQg
KyByIlxlbmR7bXVsdGljb2xzfSIKCWRlZiBodG1sX21jb2wodGV4dCk6IHJldHVybiByIjxk
aXYgc3R5bGU9J2NvbHVtbi1jb3VudDogMjsnPiIgKyByIjwvZGl2PiIKYGBgCgpgP19tY29s
KCIiIgpUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0CiIiIilgCgotLS0KCiMg
SW5jbHVkZSBTdGF0ZW1lbnQKCmBtYXJreWAgYWxsb3dzIHRvIGluY2x1ZGUgb3RoZXIgTWFy
a2Rvd24gdGV4dCB1c2luZyB0aGUgYFwhISFgIHN0YXRlbWVudC4KUGxlYXNlIHJlZmVyIHRv
IHRoZSBgbWFya3lgIGRvY3VtZW50YXRpb24gZm9yIGNvbXBsZXRlIGRlc2NyaXB0aW9uCm9m
IHRoZSBgXCEhIWAgc3RhdGVtZW50LiBEdXJpbmcgcmVuZGVyaW5nIGBtYXJreWAga2VlcHMg
dHJhY2sgb2YKaW5jbHVkZWQgZmlsZXMgYW5kIGNyZWF0ZXMgTWFrZWZpbGUgcnVsZXMgZm9y
IGRlcGVuZGVudCBtYWtlLgoKYGBgbWQKCSEhISBmaWxlLm1kaQpgYGAKCi0tLQoKIyBNZXRh
IERhdGEKCmBtYXJreWAgc3VwcG9ydHMgZG9jdW1lbnQgbWV0YSBkYXRhIGluIE1hcmtkb3du
IGZyb250IG1hdHRlci4KVGhpcyBmZWF0dXJlIGlzIG5vdCBleHBsYWluZWQgaW4gdGhlIHF1
aWNrc3RhcnQuIFBsZWFzZSByZWZlcgp0byB0aGUgYG1hcmt5YCBkb2N1bWVudGF0aW9uIGZv
ciBleHBsYW5hdGlvbi4KCmBgYG1kCgktLS0KCU1FVEFfREFUQQoJLS0tCglNQVJLRE9XTgpg
YGAKCi0tLQoKIyBFc2NhcGUgTWFya3VwCgpUaGUgYG1hcmt5YCBtYXJrdXAgY2FuIGJlIGVz
Y2FwZWQuIFdoZW4gbWFya3VwIGlzIGVzY2FwZWQKYG1hcmt5YCByZW1vdmVzIHRoZSBlc2Nh
cGUgc2VxdWVuY2UgYW5kIHByaW50cyBvdXQgdGhlCnVuZXNjYXBlZCBzdGF0ZW1lbnQuCgpN
YXJrdXAgICAgICAgICAgIHxFc2NhcGUgU2VxdWVuY2V8VW5zZWNhcGVkIFNlcXVlbmNlCi0t
LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLQpjb2Rl
IGJsb2NrIGhpZGRlbnxgYCBgYGBcXCEhIGBgICB8YGAgYGBgXCEhIGBgCmNvZGUgYmxvY2sg
c2hvd24gfGBgIGBgYFxcISBgYCAgIHxgYCBgYGBcISBgYAppbmxpbmUgY29kZSAgICAgIHxg
YCBgXFwhLi4uYCBgYCB8YGAgYFwhLi4uYCBgYApmb3JtYXQgY29kZSAgICAgIHxgYCBgXFw/
Li4uYCBgYCB8YGAgYFw/Li4uYCBgYAppbmNsdWRlIHN0YXRlbWVudHxgXFwhISFgICAgICAg
ICB8YFwhISFgCmZvcm1hdCBsaW5rICAgICAgfGAuXFw/Pz9gICAgICAgIHxgLlw/Pz9gCgot
LS0KCipUaGFua3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCg==
'''
pack_quick_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBgbWFya3lgIG1h
cmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRz
IHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNv
ZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBkb2N1bWVudGF0
aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3Np
dG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoKYGBgcHl0
aG9uCiEhISBxdWlja3N0YXJ0Lm1kIHJhdyA+PjEKYGBgCg==
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IGRhdGEvbWFya3kuYmliCmhlYWRl
ci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAg
IGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9
fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBi
b3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxp
c2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBU
aGlzIGlzIGEgYG1hcmt5YCBleGFtcGxlIGRvY3VtZW50IGZvcgo+IGlsbHVzdHJhdGluZyBg
bWFya3lgIG1hcmt1cC4gVGhlIGBtYXJreWAgc291cmNlIGNvZGUgb2YgdGhpcwo+IGRvY3Vt
ZW50IGNhbiBiZSByZWFkIFtoZXJlXShleGFtcGxlLXNyYy4/Pz8pLgo+IEZvciBtb3JlIGlu
Zm9ybWF0aW9uIHBsZWFzZSByZWZlciB0byB0aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XSho
dHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcvbWFya3kpLAo+IFtgbWFya3lgIGRvY3VtZW50
YXRpb25dKG1hcmt5Lj8/Pykgb3IgdGhlCj4gW2BtYXJreWAgcXVpY2tzdGFydF0ocXVpY2tz
dGFydC4/Pz8pLgoKLS0tCgojIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0KClRo
aXMgaXMgYSByZWZlcmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2FwdGlv
bl0oZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBVUFB
QUFGQ0FZQUFBQ05ieWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4Z2xq
TkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBp
cyBhIHJlZmVyZW5jZSB0byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0t
LXwtLS0KMDAwfDExMXw0NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMg
dGhlIGNhcHRpb24geyN0Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6
bGFiZWwuCgokJFxtYm94e2V9XntcbWJveHtpfVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhp
cyBpcyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BN
dWxsZXIxOTkzXS4KCiMgYG1hcmt5YCBNYXJrdXAgZm9yIEV4ZWN1dGlvbiBvZiBFbWJlZGRl
ZCBQeXRob24gQ29kZQoKKipEaXNwbGF5ZWQgQ29kZSwgRXhlY3V0ZWQqKgoKYGBgIQoJaW1w
b3J0IG1hdGgKCWRlZiBsaXN0X2FuZChsKToKCQlyZXR1cm4gIiwgIi5qb2luKHN0cihpKSBm
b3IgaSBpbiBsWzotMV0pICsgIiBhbmQgIiArIHN0cihsWy0xXSkKCgl4ID0gMgoJeSA9IG1h
dGguc3FydCh4KQpgYGAKCioqSGlkZGVuIENvZGUsIEV4ZWN1dGVkKioKCmBgYCEhCglwcmlu
dCgiSGVsbG8gQ29uc29sZSEiKQpgYGAKCioqRGlzcGxheWVkIENvZGUsIE5vdCBFeGVjdXRl
ZCoqCgpgYGBweXRob24KCXggPSAzCmBgYAoKKipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoq
CgpUaGUgc3F1YXJlIHJvb3Qgb2YgJHg9YCF4YCQgaXMgYCF5Oi4zZmAuCgoqKklubGluZSBF
eHByZXNzaW9uKioKClRoZSBmaXJzdCB0ZW4gbnVtYmVycyBhcmUgYCFsaXN0X2FuZChyYW5n
ZSgxMCkpYC4KCioqRm9ybWF0IExpbmtzKioKCmBgYG1kCltMaW5rIHRvIGRvY3VtZW50XShm
aWxlLlw/Pz8pCmBgYAoKd2lsbCBiZSBwcm9wcm9jZXNzZWQgaW50byB0aGUgZm9sbG93aW5n
IHRleHQ6CiogZm9yIGBodG1sYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLmh0bWwpYAoq
IGZvciBgcGRmYDogYFtMaW5rIHRvIGRvY3VtZW50XShmaWxlLnBkZilgCgpbTGluayB0byB0
aGlzIGRvY3VtZW50XShleGFtcGxlLj8/PykKCioqRm9ybWF0IENvZGVzKioKCmBgYCEKCWRl
ZiBodG1sX0ZNVENPREUoKTogcmV0dXJuICJIPHN1cD5UPC9zdXA+PHN1Yj5NPC9zdWI+TCIK
CWRlZiBwZGZfRk1UQ09ERSgpOiByZXR1cm4gIlxMYVRlWCIKYGBgCgpUaGlzIGlzIGEgYD9f
Rk1UQ09ERSgpYCBkb2N1bWVudC4KCi0tLQoKKlRoYW5rcyBmb3IgcmVhZGluZywgcGxlYXNl
IHRyeSBgbWFya3lgLioKCi0tLQoKIyBSZWZlcmVuY2VzIHstfQo=
'''
pack_example_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBgbWFya3lgIG1h
cmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRz
IHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNv
ZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBkb2N1bWVudGF0
aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3Np
dG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoKYGBgcHl0
aG9uCiEhISBleGFtcGxlLm1kIHJhdyA+PjEKYGBgCg==
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	flag_only_code = 0
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "nodep":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "nobody":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			elif f.startswith("!!"):
				flag_only_code = 2 # only hidden code
			elif f.startswith("!"):
				flag_only_code = 1 # shown and hidden code
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text, run_marky=flag_run_marky,
				shift_atx=flag_shift_atx, shift_str=shift_str, code_only=flag_only_code)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True, read_text=True,
	run_marky=True, shift_atx=0, shift_str="", code_only=0):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			if code_only > 0:
				print("ERROR: opposing flags: code_only and not run_marky")
				exit(1)
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == None:
						continue
					else:
						for k in j.split("\n"):
							if code_only == 0: md_text.append(shift_str + k)
						appendbuf = ""
						continue
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if code_only == 0 and show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					if code_only == 2 and show_code:
						pass
					else:
						rl = run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)
					if code_only == 0:
						for j in rl:
							md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					if code_only == 0: md_text.append(shift_str + i)
				elif i.startswith(r"\\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[2:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[1:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					if code_only == 0:
						j = parse_line(fpath, n, i)
						if j == None:
							appendbuf = i
						else:
							for k in j.split("\n"):
								md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return None
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				text += run_shortcode(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def print_trace(ex):
	def go_deeper(deeep, first=False):
		print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
		if first:
			print("# FILE", args.marky)
		if os.path.exists(deeep.tb_frame.f_code.co_filename):
			with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
				print("#", fh.read().split("\n")[deeep.tb_lineno-1])
		if deeep.tb_next != None:
			go_deeper(deeep.tb_next)
	if ex.__traceback__.tb_next:
		go_deeper(ex.__traceback__.tb_next, first=True)

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		print_trace(ex)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		if "???" in expr:
			shexpr = expr.replace("???", f).strip()
		else:
			shexpr = f + expr.strip()
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		exec_text = list()
		exec_append = False
		try:
			value = eval(shexpr, exec_dict, None)
		except Exception as ex:
			print_trace(ex)
			print("ERROR", type(ex), str(ex))
			exit(1)
		if not value is None:
			__(value)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<?%s %s %s?>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def print_inline(fpath, n, i, text):
	text = text.strip()
	shcode = ""
	for f in ["html", "pdf"]:
		if ":" in text:
			p = text.find(":")
			expr = text[0:p] + "_" + f + text[p:]
		else:
			expr = text + "_" + f
		print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % expr, end="", flush=True)
		try:
			value = ("{" + expr + "}").format(**exec_dict)
		except Exception as ex:
			print("")
			print("ERROR", type(ex), str(ex))
			exit(1)
		if "\n" in value:
			print("")
			print("# OUT")
			for a, b in enumerate(value.split("\n")):
				print("#    %03d" % (a + 1), b)
		else:
			print(" ->", value)
		shcode += "<?%s %s %s?>" % (f, value, f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text, end="", flush=True)
	try:
		if not "'''" in text:
			value = str(eval("f'''{%s}'''" % text, exec_dict, None))
		elif not '"""' in text:
			value = str(eval('f"""{%s}"""' % text, exec_dict, None))
		else:
			raise ValueError("\"\"\" and ''' in expression:", text)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		print("# OUT")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--marky")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	lsep = 2
	p = md_text.find("<?")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("?>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<?", c)
		else:
			p = md_text.find("<?", p + lsep)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
