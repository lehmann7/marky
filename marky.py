#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogYXV4ICAgICAgb25seSBNYWtlZmls
ZSBkZXBlbmRlbmN5LCBubyBpbmNsdWRlCgkjICAqIG5vZGVwICAgIGluY2x1ZGUgd2l0aG91
dCBNYWtlZmlsZSBkZXBlbmRlbmN5CgkjICAqIHJhdyAgICAgIGRvIG5vdCBwYXJzZSBmaWxl
LCBpbmNsdWRlIGFzLWlzCgkjICAqIG5vbWV0YSAgIGlnbm9yZSBhbmQgc2tpcCBhbGwgbWV0
YSBkYXRhCgkjICAqIG5vYm9keSAgIGlnbm9yZSBhbmQgc2tpcCBNYXJrZG93biBib2R5Cgkj
ICAqIG5vbWFya3kgIG5vIHByb2Nlc3Npbmcgb2YgbWFya3kgbWFya3VwCgkjICAqICEgICAg
ICAgIGluY2x1ZGUgb25seSBjb2RlIGJsb2NrcwoJIyAgKiAhISAgICAgICBpbmNsdWRlIG9u
bHkgaGlkZGVuIGNvZGUgYmxvY2tzCgkjICAqICMrTiAgICAgIGluY3JlYXNlIGxldmVsIG9m
IEFUWCBoZWFkaW5ncyBieSBOCgkjICAqID4+TiAgICAgIGluY3JlYXNlIGluZGVudGF0aW9u
IGxldmVsIGJ5IE4gdGFicwoJIyAgKiA+TiAgICAgICBpbmNyZWFzZSBpbmRlbnRhdGlvbiBs
ZXZlbCBieSBOIHNwYWNlcwoJIwoKLlBIT05ZOiBjaGVhdC1tZXRhCmNoZWF0LW1ldGE6Cgkj
CgkjIE1FVEEgREFUQQoJIwoJIyAgLS0tCgkjICB0aXRsZTogRG9jdW1lbnQKCSMgIGRhdGU6
IFRvZGF5CgkjICBhdXRob3I6IE5hbWUKCSMgIGxpbmstY2l0YXRpb25zOiB0cnVlCgkjICBi
aWJsaW9ncmFwaHk6IGJpYmwuYmliCgkjICBmb250c2l6ZS0tcGRmOiAxMXB0CgkjICBmb250
c2l6ZS0taHRtbDogMTBwdAoJIyAgaGVhZGVyLWluY2x1ZGVzLS1wZGY6ID4KCSMgICAgIFx1
c2VwYWNrYWdley4uLn0KCSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgIGhlYWRlci1pbmNs
dWRlcy0taHRtbDogPgoJIyAgICAgPHNjcmlwdCAuLi4+CgkjICAgICA8bGluayAuLi4+Cgkj
ICAgICA8c3R5bGUgLi4uPgoJIyAgeG5vcy1jbGV2ZXJlZjogdHJ1ZQoJIyAgeG5vcy1jYXBp
dGFsaXNlOiB0cnVlCgkjICAtaGlkZGVuX2ZpZWxkOiB0ZXh0CgkjICAtLS0KCSMKCi5QSE9O
WTogY2hlYXQtbGluawpjaGVhdC1saW5rOgoJIwoJIyBGT1JNQVQgTElOSwoJIwoJIyAgW0xp
bmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5odG1sKQoJIyAgW0xpbmsgdG8gRG9jdW1l
bnRdKHBhdGgvdG8vZmlsZS5wZGYpCgkjICBbRm9ybWF0IExpbmsgdG8gRG9jdW1lbnRdKHBh
dGgvdG8vZmlsZS4/Pz8pCgkjICBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgZm9ybWF0IGxpbmsg
Llw/Pz8KCSMKCi5QSE9OWTogY2hlYXQtY29kZQpjaGVhdC1jb2RlOgoJIwoJIyBGT1JNQVQg
Q09ERQoJIwoJIyAgIGBgYCEKCSMgICBkZWYgdGVzdDFfaHRtbCgpOgoJIyAgICAgICBfKCJU
aGlzIGlzIEhUTUwxISIpCgkjICAgZGVmIHRlc3QxX3BkZigpOgoJIyAgICAgICByZXR1cm4g
IlRoaXMgaXMgXHtQREYxXH0hIgoJIyAgIGRlZiB0ZXN0Ml9odG1sKCk6CgkjICAgICAgIF9f
KCIiIgoJIyAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgIFRoaXMgaXMg
SFRNTDIhCgkjICAgICAgICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAiIiIpCgkjICAg
ZGVmIHRlc3QyX3BkZigpOgoJIyAgICAgICByZXR1cm4gIiIiCgkjICAgICAgICAgICBUaGlz
IGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAg
ICAgIFRoaXMgaXMgXHtQREYyXH0hCgkjICAgICAgICIiIgoJIyAgIGBgYAoJIyAgIFJ1biBG
b3JtYXQgQ29kZSBgP3Rlc3QxKClgIGFuZCBgP3Rlc3QyKClgLgoJIyAgIGBcP3Rlc3QxKClg
IGFuZCBgXD90ZXN0MigpYCBhcmUgbm90IHBhcnNlZC4KCSMKCiMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IwoKLlBIT05ZOiBhbGwKYWxsOiAkKEhUTUwpICQoUERGKQoKLlBIT05ZOiBhbGwtbWsKYWxs
LW1rOiAkKE1LKQoKLlBIT05ZOiBhbGwtbWQKYWxsLW1kOiAkKE1EKQoKLlBIT05ZOiBhbGwt
bGluawphbGwtbGluazogJChNREhUTUwpICQoTURQREYpCgouUEhPTlk6IGFsbC1odG1sCmFs
bC1odG1sOiAkKEhUTUwpCgouUEhPTlk6IGFsbC1wZGYKYWxsLXBkZjogJChQREYpCgouUEhP
Tlk6IGNsZWFuCmNsZWFuOgoJcm0gLXJmIC4vYnVpbGQvKiAuL2h0bWwvKiAuL3BkZi8qCgou
UEhPTlk6IGh0dHBkCmh0dHBkOgoJY2QgaHRtbCAmJiBweXRob24gLW0gaHR0cC5zZXJ2ZXIK
Ci5QSE9OWTogc2NhbgpzY2FuOiBhbGwtbWsKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKYnVpbGQv
JS5tZC5tazogbWQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21h
cmt5LnB5IC0tbWtkZXAgLS1tYXJreT0iJDwiCgpidWlsZC8lLm1kOiBidWlsZC8lLm1kLm1r
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1tZD0iJEAi
CgpidWlsZC8lLmh0bWwubWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFt
ZSAiJEAiKQoJLi9tYXJreS5weSAtLWxpbmsgaHRtbCAtLW1kPSIkPCIKCmJ1aWxkLyUucGRm
Lm1kOiBidWlsZC8lLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFy
a3kucHkgLS1saW5rIHBkZiAtLW1kPSIkPCIKCmh0bWwvJS5odG1sOiBidWlsZC8lLmh0bWwu
bWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNuZiAuLi9kYXRhIGh0
bWwvZGF0YQoJcGFuZG9jICIkPCIgLS1maWx0ZXIgcGFuZG9jLXhub3MgLS1jaXRlcHJvYyAt
LWZyb209bWFya2Rvd24rcmF3X2h0bWwrJChNREVMKSAtLXRvPWh0bWw1IC0tb3V0cHV0PSIk
QCIgLS1yZXNvdXJjZS1wYXRoPSIuL2RhdGEvIiAtLXNlbGYtY29udGFpbmVkIC0tdGFibGUt
b2YtY29udGVudHMgLS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEKCnBkZi8lLnBkZjog
YnVpbGQvJS5wZGYubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNu
ZiAuLi9kYXRhIHBkZi9kYXRhCglwYW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5vcyAt
LWNpdGVwcm9jIC0tZnJvbT1tYXJrZG93bityYXdfdGV4KyQoTURFTCkgLS10bz1sYXRleCAt
LW91dHB1dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9kYXRhLyIgLS10YWJsZS1vZi1jb250
ZW50cyAtLW51bWJlci1zZWN0aW9ucyAtLWNvbHVtbnM9MSAtLXBkZi1lbmdpbmU9eGVsYXRl
eAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpQU0VVRE89aGVscCB0cmVlIGNoZWF0IGNsZWFuIGh0
dHBkIHNjYW4KCklOQ0ZMQUc9MAoKZGVmaW5lIExPT1BCT0RZCiAgaWZlcSAoJCQoZmlsdGVy
ICQkKFBTRVVETyksJCQoRykpLCkKICAgIElOQ0ZMQUc9MQogIGVuZGlmCmVuZGVmCgppZm5l
cSAoJChNQUtFQ01ER09BTFMpLCkKICAkKGZvcmVhY2ggRywkKE1BS0VDTURHT0FMUyksJChl
dmFsICQoTE9PUEJPRFkpKSkKZW5kaWYKCmlmZXEgKCQoSU5DRkxBRyksMSkKICAtaW5jbHVk
ZSAkKE1LKQplbmRpZgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmxpbmstY2l0YXRpb25zOiB0cnVlCmJp
Ymxpb2dyYXBoeTogbWFya3kuYmliCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBl
cnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAog
ICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4K
ICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1j
bGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKLWZp
Z3NpemU6IFsxMCw4XQotZmlnZHBpOiAzMDAKLXZlcnNpb246IHVuZGVmaW5lZAoKLS0tCiEh
ISAuLi9NYWtlZmlsZSBhdXgKISEhIC4uL21hcmt5LnB5IGF1eApgYGAhIQoJaW1wb3J0IHN1
YnByb2Nlc3MKCU1EID0gIk1hcmtkb3duIgoJTSA9ICJgbWFya3lgIgoJTUYgPSAiYE1ha2Vm
aWxlYCIKCU1QID0gImBtYXJreS5weWAiCglNcCA9ICJtYXJreS5weSIKCVAgPSAiYHBhbmRv
Y2AiCglOVSA9ICJgbnVtcHlgIgoJUEwgPSAiYG1hdHBsb3RsaWJgIgoJUiA9ICJSTWFya2Rv
d24iCglRID0gIlF1YXJ0byIKCUJUID0gImAiCglQMT0gImBfKClgIgoJUDI9ICJgX18oKWAi
Cgl2ZXJzaW9uID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJweXRob24iLCAibWFya3ku
cHkiLAoJCSItLXZlcnNpb24iXSkuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkKYGBgCgotLS0K
Cj4gKipBYnN0cmFjdCoqIC0tIGAhTWAgaXMgYSBwcmVwcm9jZXNzb3IgZm9yIGAhTURgIHVz
aW5nIFB5dGhvbi4KPiBgIU1gIGlzIGluc3BpcmVkIGJ5IFtwYW5kb2NdKGh0dHBzOi8vd3d3
LnBhbmRvYy5vcmcvKSwKPiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20v
KSwgW2AhUWBdKGh0dHBzOi8vcXVhcnRvLm9yZy8pLgo+IFRoaXMgZG9jdW1lbnQgaXMgY3Jl
YXRlZCB1c2luZyBgIU1gIChWZXJzaW9uIGAhdmVyc2lvbmApIGFuZAo+IGNvbnRhaW5zIGV4
YW1wbGVzIHdoaWNoIGlsbHVzdHJhdGUgdGhlIGdlbmVyYXRpb24gb2YKPiBkb2N1bWVudCBj
b250ZW50IGZvciBgaHRtbGAgYW5kIGBwZGZgIGFuZCB0aGUgZHluYW1pY2FsIGFkanVzdG1l
bnQKPiBvZiBgIU1EYCB0ZXh0IGR1cmluZyBwcmVwcm9jZXNzaW5nIGJhc2VkIG9uIGBweXRo
b25gIGNvZGUuCj4gVGhlIGZ1bGwgcmF3IGAhTWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1
bWVudGF0aW9uIGFwcGVuZGVkIGF0Cj4gdGhlIGVuZC4gVGhlIGBtYXJreWAgc291cmNlIGNv
ZGUgb2YgdGhpcyBkb2N1bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJlXShtYXJreS1zcmMuPz8/
KS4KPiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJr
eWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KSwKPiBb
YG1hcmt5YCBxdWlja3N0YXJ0XShxdWlja3N0YXJ0Lj8/Pykgb3IgdGhlCj4gc2ltcGxlIFtg
bWFya3lgIGV4YW1wbGVdKGV4YW1wbGUuPz8/KS4KCgotLS0KCiMgSW50cm9kdWN0aW9uCgpg
IU1gIGlzIGEgYCFNRGAgcHJlcHJvY2Vzc29yIHdoaWNoIHRyYW5zZm9ybXMgYSBgIU1EYCBk
b2N1bWVudAp1c2luZyBweXRob24uIGAhTWAgaW1wbGVtZW50cyBuZXcgbWFya3VwIHdoaWNo
IGNvbnRyb2xzIHRoZSBleGVjdXRpb24Kb2YgcHl0aG9uIGNvZGUgYW5kIHRoZSBnZW5lcmF0
aW9uIGFuZCBtYW5pcHVsYXRpb24gb2YgYCFNRGAgdGV4dC4KVGhlIGAhTWAgcXVpY2tzdGFy
dCBjYW4gYmUgZm91bmQgW2hlcmVdKHF1aWNrc3RhcnQuPz8/KSBhbmQgYSB2ZXJ5CnNpbXBs
ZSBgIU1gIGV4YW1wbGUgY2FuIGJlIGZvdW5kIFtoZXJlXShleGFtcGxlLj8/PykuCgpgIU1g
IG9ubHkgZGVwZW5kcyBvbiBgIVBgIGFuZCBgcHl5YW1sYC4gYCFQYCBpcyB1c2VkIGZvciBy
ZW5kZXJpbmcKdGhlIGAhTURgIGludG8gYGh0bWxgIGFuZCBgcGRmYC4gYCFQYCBzdXBwb3J0
cyB2YXJpb3VzIGAhTURgCmV4dGVuc2lvbnMgYWxsb3dpbmcgZm9yIHNjaWVudGlmaWMgd3Jp
dGluZyB1c2luZyBlcXVhdGlvbnMsIGZpZ3VyZXMsCnRhYmxlcywgY2l0YXRpb25zIGFuZCBj
b3JyZXNwb25kaW5nIHJlZmVyZW5jaW5nIG1lY2hhbmlzbSBmb3IgdGhlIGxhdHRlci4KYHB5
eWFtbGAgaXMgdXNlZCBmb3IgcGFyc2luZyBtZXRhIGRhdGEgaW4gdGhlIGZyb250IG1hdHRl
ciBvZiB0aGUKYCFNRGAgdGV4dCBpZiBpdCBpcyBwcmVzZW50LgoKV29ya2Zsb3cgZm9yIGNy
ZWF0aW5nIGBodG1sYCBvciBgcGRmYCB1c2luZyBgIU1gCgoxLiB1c2VyIHdyaXRlcyBhIGAh
TURgIHRleHQgZmlsZSBhbmQgcGxhY2VzIGl0IGluIGBtZC8qLm1kYApkaXJlY3Rvcnkgd2l0
aCB0aGUgZXh0ZW5zaW9uIGAubWRgLiB0aGUgYCFNRGAgdGV4dCBjb250YWlucwpzcGVjaWFs
IGAhTWAgbWFya3VwIHdoaWNoIGV4ZWN1dGVzIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRl
cwp0aGUgYCFNRGAgdGV4dC4KCjIuIGAhTWAgdHJhbnNmb3JtcyB0aGUgZmlsZXMgaW4gYG1k
LyoubWRgIGludG8gcmVndWxhciBgIU1EYCB0ZXh0CmFuZCBwbGFjZXMgdGhlIHRyYW5zZm9y
bWVkIGZpbGVzIGluIGBidWlsZC8qLm1kYC4gVGhlIHRyYW5zZm9ybWVkIHRleHQKb25seSBj
b250YWlucyByZWd1bGFyIGAhTURgLCBhbmQgcGxhY2Vob2xkZXJzIGZvciBmb3JtYXQgZGVw
ZW5kZW50Cm91dHB1dCBmb3IgYGh0bWxgIGFuZCBgcGRmYC4KCjMuIGJlZm9yZSByZW5kZXJp
bmcgYCFNYCByZXBsYWNlcyBwbGFjZWhvbGRlcnMgZm9yIGZvcm1hdCBkZXBlbmRlbnQKb3V0
cHV0IHdpdGggY29udGVudCBjcmVhdGluZyBhIHRlbXBvcmFyeSBmaWxlIHdoaWNoIG9ubHkg
Y29udGFpbnMKcmVndWxhciBgIU1EYCB0ZXh0IGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3Vt
ZW50cyBhY2NvcmRpbmcgdG8KYCFQYCBgIU1EYCBzcGVjaWZpY2F0aW9uLgoKNC4gdGhlIHJl
Z3VsYXIgYCFNRGAgdGV4dCBpbiB0aGUgZmlsZXMgYGJ1aWxkLyoubWRgIGlzIHJlbmRlcmVk
IGludG8KYGh0bWxgIGFuZCBgcGRmYCB1c2luZyBgIVBgLgoKVGhlIHRocmVlIHN0ZXBzIGFy
ZSBpbXBsZW1lbnRlZCBpbiBgIU1QYCBhbmQgYSBgIU1GYC4gVGhlCmZvbGxvd2luZyBkb2N1
bWVudCBkZXNjcmliZXMgdGhlIHNwZWNpYWwgYCFNYCBtYXJrdXAgYW5kIHNob3dzCmhvdyB0
byB1c2UgYCFNUGAgYW5kIHRoZSBgIU1GYC4KCi0tLQoKIyBSZWxhdGVkIFdvcmsgeyNzZWM6
cmVsYXRlZH0KCkZvciBzY2llbnRpZmljIHJlcG9ydGluZyBhbmQgd3JpdGluZyB1c3VhbGx5
IHR5cGVzZXR0aW5nIHN5c3RlbXMgb3IKY29tcGxpY3RlZCBXWVNJV1lHIGVkaXRvcnMgYXJl
IHVzZWQuIEluIG9yZGVyIHRvIHNpbXBsaWZ5IHRoZSB3cml0aW5nCmRpZmZlcmVudCBhcHBy
b2FjaGVzIGFuZCBmcmFtZXdvcmtzIGhhdmUgYmVlbiBkZXZlbG9wZWQuCgoqIFtgIVBgXSho
dHRwczovL3d3dy5wYW5kb2Mub3JnLyksCiogW2AhUmBdKGh0dHBzOi8vcm1hcmtkb3duLnJz
dHVkaW8uY29tLykKKiBbUXVhcnRvXShodHRwczovL3F1YXJ0by5vcmcvKQoqIFtTY2llbnRp
ZmljIGAhTURgXShodHRwczovL2phYW50b2xsYW5kZXIuY29tL3Bvc3Qvc2NpZW50aWZpYy13
cml0aW5nLXdpdGgtbWFya2Rvd24vKQoqIFtUZWNobmljYWwgYCFQYF0oaHR0cHM6Ly9sZWUt
cGhpbGxpcHMub3JnL3BhbmZsdXRlLWdudXBsb3QvKQoKQWxsIG9mIHRob3NlIGFwcHJvYWNo
ZXMgdXNlIGAhUGAgYXMgYW4gdW5kZXJseWluZyBmcmFtZXdvcmsgZm9yIGRvY3VtZW50CmNv
bnZlcnNpb24uIGAhUGAgaXMgYSBwb3dlcmZ1bCBmcmFtZXdvcmsgZm9yIGNvbnZlcnNpb24g
YmV0d2VlbiBkaWZmZXJlbnQKZG9jdW1lbnQgZm9ybWF0cyBpbmNsdWRpbmcgYCFNYCwgYGh0
bWxgIGFuZCBgcGRmYC4gYCFQYCBpbXBsZW1lbnRzIGFuCm93biBpbnRlcm5hbCBBU1QsIGlu
IHdoaWNoIGRpZmZlcmVudCBkb2N1bWVudCBmb3JtYXRzIGNhbiBiZSBpbXBvcnRlZCBhbmQK
ZXhwb3J0ZWQuIFVzaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGRvY3VtZW50IHJlcHJlc2VudGF0
aW9uLCBgIVBgIGFsbG93cwp0byBtb2RpZnkgZG9jdW1lbnQgdXNpbmcgZmlsdGVycywgd2hp
Y2ggb3BlcmF0ZSBvbiB0aGUgQVNULiBGaWx0ZXJzCmNhbiBiZSB3cml0dGVuIGluIFtgaGFz
a2VsbGBdKGh0dHBzOi8vcGFuZG9jLm9yZy9maWx0ZXJzLmh0bWwpLApbYGx1YWBdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9sdWEtZmlsdGVycy5odG1sKSBhbmQKW2BweXRob25gXShodHRwczov
L3BhbmRvYy5vcmcvZmlsdGVycy5odG1sI2J1dC1pLWRvbnQtd2FudC10by1sZWFybi1oYXNr
ZWxsKS4KCldoZXJlIGFzIGAhUmAgYW5kIGAhUWAgYXJlIGludGVncmF0ZWQgZnJhbWV3b3Jr
cywgd2hpY2ggYWRkaXRpb25hbGx5CmRlcGVuZCBvbiBga25pdHJgLCBgUlN0dWRpb2AsIGBK
dXB5dGVyYCwgYCFNYCBkZXBlbmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgCm9ubHkuIGAhTWAg
bmF0aXZlbHkgb25seSBzdXBwb3J0cyBleGVjdXRhYmxlIHB5dGhvbiBjb2RlIGJsb2Nrcywg
aG93ZXZlciwKb3RoZXIgbGFuZ3VhZ2VzIGNhbiBiZSBleGVjdXRlZCB1c2luZyB3cmFwcGVy
cywgd2hpY2ggYXJlIGF2YWlsYWJsZSBmb3IKb3RoZXIgbGFuZ3VhZ2VzLgoKLS0tCgojIGAh
TWAgRmVhdHVyZXMgeyNzZWM6ZmVhdHVyZXN9CgpgIU1gIGltcGxlbWVudHMgZm9sbG93aW5n
IGZlYXR1cmVzIHVzaW5nIGFuIHNpbXBsZSBgIU1EYC1zdHlsZSBzeW50YXguCgoxLiByZWFk
IGAhTURgIG1ldGEgZGF0YSBmcm9tIGZyb250IG1hdHRlciwKc2VlIEBzZWM6bWV0YWRhdGEK
YGBgbWQKCS0tLQoJCTxrZXk+OiA8dmFsdWU+CgktLS0KYGBgCgoyLiBleGVjdXRlIGFuZCBo
aWRlL3Nob3cgcHl0aG9uIGNvZGUgYmxvY2tzIGluc2lkZSBgIU1EYCB0ZXh0LApzZWUgQHNl
YzpibG9jawpgYGBtZAoJYCFCVCozYCEKCQk8cHl0aG9uX2NvZGVfc2hvd24+CglgIUJUKjNg
CgoJYCFCVCozYCEhCgkJPHB5dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AKYGBgCgozLiBn
ZW5lcmF0ZSBgIU1EYCB0ZXh0IHVzaW5nIHB5dGhvbiBjb2RlLCBzZWUgQHNlYzptZHByaW50
CmBgYG1kCglgIUJUKjNgIQoJCV8oIjxtYXJrZG93bl90ZXh0PiIpCgkJX18oIiIiCgkJCTxt
YXJrZG93bl90ZXh0PgoJCQk8bWFya2Rvd25fdGV4dD4KCQkJPG1hcmtkb3duX3RleHQ+CgkJ
IiIiKQoJYCFCVCozYApgYGAKCjQuIGZvcm1hdCBvdXRwdXQgb2YgcHl0aG9uIHZhcmlhYmxl
cyBpbnRvIGAhTURgIHRleHQsCnNlZSBAc2VjOmZvcm1hdApgYGBtZAoJT3V0cHV0IGludG8g
dGV4dDogYFwhPHB5dGhvbl92YXJpYWJsZT5gCmBgYAoKNS4gb3V0cHV0IHRoZSByZXN1bHQg
b2YgcHl0aG9uIGV4cHJlc3Npb25zIGludG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6aW5saW5l
CmBgYG1kCglPdXRwdXQgaW50byB0ZXh0OiBgXCE8cHl0aG9uX2V4cHJlc3Npb24+YApgYGAK
CjYuIGluY2x1ZGUgYCFNRGAgdGV4dCwgbWFrZSBkZXBlbmRlbmNpZXMgYW5kIGZvcndhcmQg
bWV0YSBkYXRhLApzZWUgQHNlYzppbmNsdWRlIGFuZCAhQHNlYzppbmNtZXRhLgpgYGBtZAoJ
ISEhIGluY2x1ZGVfZmlsZS5tZGkKYGBgCgo3LiBmb3JtYXQgbGlua3MgaW4gYGh0bWxgIGFu
ZCBgcGRmYCBkb2N1bWVudHMgZm9yCnJlZmVyZW5jaW5nIGV4dGVybmFsIGRvY3VtZW50cyBv
ZiB0aGUgc2FtZSBmb3JtYXQsCnNlZSBAc2VjOmZvcm1saW5rLgpgYGBtZAoJW0Zvcm1hdCBM
aW5rIHRvIGh0bWwvcGRmIGRvY3VtZW50XShwYXRoL3RvL2ZpbGUuXD8/PykKYGBgCgo4LiB1
c2UgZm9ybWF0IGNvZGVzIGluIG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMKY29k
ZSBpbiBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cywKc2VlIEBzZWM6Zm9ybWNvZGUuCmBg
YG1kCglgIUJUKjNgIQoJCWRlZiBjb2RlX2h0bWwoKToKCQkJXygiPEhUTUxfQ09ERT4iKQoJ
CQlyZXR1cm4gIiIiCgkJCQk8TU9SRV9DT0RFPgoJCQkJPE1PUkVfQ09ERT4KCQkJCTxNT1JF
X0NPREU+CgkJCSIiIgoJCWRlZiBjb2RlX3BkZigpOgoJCQlfXygiIiIKCQkJCXtURVhfQ09E
RX0KCQkJCXtURVhfQ09ERX0KCQkJCXtURVhfQ09ERX0KCQkJIiIiKQoJYCFCVCozYAoKCUZv
cm1hdCBkZXBlbmRlbnQgb3V0cHV0OiBgXCFjb2RlKClgCmBgYAoKLS0tCgojIFNjaWVudGlm
aWMgV3JpdGluZyBpbiBgIU1EYCB7I3NlYzpwYW5tZH0KCltgIU1EYF0oaHR0cHM6Ly9wYW5k
b2Mub3JnL01BTlVBTC5odG1sI3BhbmRvY3MtbWFya2Rvd24pIGlzIGEgbWFya3VwCmxhbmd1
YWdlIGZvciB0ZWNobmljYWwgd3JpdGluZywgd2l0aCBlbXBoYXNpcyBvbiByZWFkYWJpbGl0
eS4gYCFNRGAKY2FuIGJlIHJlbmRlcmVkIGluIG1hbnkgZm9ybWF0cyBpbmNsdWRpbmcgYGh0
bWxgIGFuZCBgcGRmYCBieSB1c2luZwpbYCFQYF0oaHR0cHM6Ly9wYW5kb2Mub3JnLykgZm9y
IGV4YW1wbGUuCgpVc2luZyB2YXJpb3VzIGAhTURgIGV4dGVuc2lvbnMgb2YgYCFQYCBhIHN1
ZmZpY2llbnQgc3RydWN0dXJlIGZvcgp3cml0aW5nIHNjaWVudGlmaWMgZG9jdW1lbnRzIGNh
biBiZSByZWZsZWN0ZWQgdXNpbmcgYCFNRGAgc3ludGF4LgpgIU1gIHVzZXMgdGhlIGZvbGxv
d2luZyBgIVBgIGAhTURgIGV4dGVuc2lvbnMuCiogcGFyc2luZyBleHRlbnNpb25zCgkqIFth
bGxfc3ltYm9sc19lc2NhcGFibGVdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tYWxsX3N5bWJvbHNfZXNjYXBhYmxlKQoJKiBbaW50cmF3b3JkX3VuZGVyc2Nv
cmVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWludHJhd29y
ZF91bmRlcnNjb3JlcykKCSogW2VzY2FwZWRfbGluZV9icmVha3NdKGh0dHBzOi8vcGFuZG9j
Lm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tZXNjYXBlZF9saW5lX2JyZWFrcykKCSogW3Nw
YWNlX2luX2F0eF9oZWFkZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRl
bnNpb24tc3BhY2VfaW5fYXR4X2hlYWRlcikKCSogW2xpc3RzX3dpdGhvdXRfcHJlY2VkaW5n
X2JsYW5rbGluZV0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1s
aXN0c193aXRob3V0X3ByZWNlZGluZ19ibGFua2xpbmUpCiogc3R5bGluZyBleHRlbnNpb25z
CgkqIFtpbmxpbmVfY29kZV9hdHRyaWJ1dGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjZXh0ZW5zaW9uLWlubGluZV9jb2RlX2F0dHJpYnV0ZXMpCgkqIFtzdHJpa2VvdXRd
KGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3RyaWtlb3V0KQoq
IHN0cnVjdHVyaW5nIGV4dGVuc2lvbnMKCSogW3lhbWxfbWV0YWRhdGFfYmxvY2tdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24teWFtbF9tZXRhZGF0YV9ibG9j
aykKCSogW3BpcGVfdGFibGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0
ZW5zaW9uLXBpcGVfdGFibGVzKQoJKiBbbGluZV9ibG9ja3NdKGh0dHBzOi8vcGFuZG9jLm9y
Zy9NQU5VQUwuaHRtbCNleHRlbnNpb24tbGluZV9ibG9ja3MpCgkqIFtpbXBsaWNpdF9maWd1
cmVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWltcGxpY2l0
X2ZpZ3VyZXMpCgkqIFthYmJyZXZpYXRpb25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjZXh0ZW5zaW9uLWFiYnJldmlhdGlvbnMpCgkqIFtpbmxpbmVfbm90ZXNdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5lX25vdGVzKQoqIGNv
ZGUgaW5qZWN0aW9uCgkqIFtyYXdfaHRtbF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi1yYXdfaHRtbCkKCSogW3Jhd190ZXhdKGh0dHBzOi8vcGFuZG9jLm9y
Zy9NQU5VQUwuaHRtbCNleHRlbnNpb24tcmF3X3RleCkKCmAhUGAgc3VwcG9ydHMKW2VxdWF0
aW9uc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi10ZXhfbWF0
aF9kb2xsYXJzKQpyZW5kZXJlZCBpbmxpbmUgYW5kIHNpbmdsZS1saW5lIGluIHRleC1zdHls
ZSB1c2luZyBgJC4uLiRgIGFuZCBgJCQuLi4kJGAsCltiaWJsaW9ncmFwaHldKGh0dHBzOi8v
cGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNjaXRhdGlvbnMpCnVzaW5nIHRoZSBgLS1jaXRlcHJv
Y2Agb3B0aW9uLApbc2VjdGlvbiBudW1iZXJpbmddKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5V
QUwuaHRtbCNleHRlbnNpb24taGVhZGVyX2F0dHJpYnV0ZXMpCnVzaW5nIHRoZSBgLS1udW1i
ZXItc2VjdGlvbnNgIG9wdGlvbiBhbmQKW3RhYmxlIG9mIGNvbnRlbnRzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjb3B0aW9uLS10b2MpCnVzaW5nIHRoZSBgLS10YWJsZS1v
Zi1jb250ZW50c2Agb3B0aW9uLgoKYCFQYCBzdXBwb3J0cyBbYHhub3NgXShodHRwczovL2dp
dGh1Yi5jb20vdG9tZHVjay9wYW5kb2MteG5vcykgZmlsdGVycwpmb3IgcmVmZXJlbmNpbmcg
ZG9jdW1lbnQgY29udGVudCBsaWtlCltmaWd1cmVzXShodHRwczovL2dpdGh1Yi5jb20vdG9t
ZHVjay9wYW5kb2MtZmlnbm9zI3VzYWdlKSwKW2VxdWF0aW9uc10oaHR0cHM6Ly9naXRodWIu
Y29tL3RvbWR1Y2svcGFuZG9jLWVxbm9zI3VzYWdlKSwKW3RhYmxlc10oaHR0cHM6Ly9naXRo
dWIuY29tL3RvbWR1Y2svcGFuZG9jLXRhYmxlbm9zI3VzYWdlKSwKW3NlY3Rpb25zXShodHRw
czovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mtc2Vjbm9zI3VzYWdlKQpieSB1c2luZyB0
aGUgYC0tZmlsdGVyIHBhbmRvYy14bm9zYCBvcHRpb24uCmB4bm9zYCBpbnRlZ3JhdGVzIGNs
ZXZlciByZWZlcmVuY2VzLCB3aGljaCBtZWFucyAiRmlnLiIsICJTZWMuIiwgIkVxLiIKYW5k
ICJUYWIuIiBhcmUgYWRkZWQgYXV0b21hdGljYWxseSB0byB0aGUgY29ycmVzcG9uZGluZyBl
bGVtZW50LgpJZiB0aGUgcHJlZml4IGlzIHRvIGJlIG9taXR0ZWQsIHRoZSByZWZlcmVuY2Ug
Y2FuIGJlIHdyaXR0ZW4gYXMKYFwhQHJlZjpsYWJlbGAuCgoqKkV4YW1wbGUqKgpgYGBtZAoj
IyBSZWZlcmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNl
IHRvIEBzZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5n
O2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOUwpVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxB
QUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJLRTBESAp4Z2xqTkJBQU85VFhMMFk0T0h3
QUFBQUJKUlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0
byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0
NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24geyN0
Ymw6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94
e2V9XntcbWJveHtpfVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5j
ZSB0byBAZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KYGBg
CgpUaGUgZmlsZSBgbWFya3kuYmliYCBpcyBzcGVjaWZpZWQgaW4gdGhlIG1ldGEgZGF0YSBp
biB0aGUgZnJvbnQKbWF0dGVyIG9mIHRoZSBgIU1EYCB0ZXh0IGFuZCBjb250YWlucyB0aGUg
Zm9sbG93aW5nIGFydGljbGUuCgpgYGBiaWJ0ZXgKISEhIC4uL2RhdGEvbWFya3kuYmliIHJh
dwpgYGAKCioqT3V0cHV0KioKCiMjIFJlZmVyZW5jZWQgU2VjdGlvbiB7I3NlYzpsYWJlbH0K
ClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhpcyBpcyB0aGUgY2Fw
dGlvbl0oZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFB
VUFBQUFGQ0FZQUFBQ05ieWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93MzhHSUFYRElCS0UwREh4
Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJKUlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhp
cyBpcyBhIHJlZmVyZW5jZSB0byBAZmlnOmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0t
fC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMg
aXMgdGhlIGNhcHRpb24uIHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBA
dGJsOmxhYmVsLgoKJCRcbWJveHtlfV57aVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBp
cyBhIHJlZmVyZW5jZSB0byBAZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxs
ZXIxOTkzXS4KCi0tLQoKIyBgIU1QYCBDb21tYW5kLUxpbmUgVXNhZ2UKCiMjIGAhTVBgIFNj
cmlwdCBVc2FnZQoKYCFNYCBpcyBzdXBwbGllZCBhcyBhIHNpbmdsZS1maWxlIHNjcmlwdCB3
aGljaCBjb250YWlucyB0aGUgYCFNYApgIU1GYCBhcyB3ZWxsIGFzIHRoZSBgIU1gIGRvY3Vt
ZW50YXRpb24gYG1hcmt5Lm1kYCwgYG1hcmt5Lm1kaWAKYW5kIGBtYXJreS5iaWJgLgoKQWZ0
ZXIgZG93bmxvYWRpbmcgYCFNUGAgdGhlIHNjcmlwdCBuZWVkcyB0byBiZSBwbGFjZWQgaW4g
YSBwcm9qZWN0CndvcmtpbmcgZGlyZWN0b3J5IGB3b3JraW5nX2RpcmAuIFRoZSBzY3JpcHQg
Y2FuIGJlIGludm9rZWQgdXNpbmcKYSBweXRob24gaW50ZXJwcmV0ZXIgYHB5dGhvbmAgYCFN
cGAgb3IgaXQgY2FuIGJlIGV4ZWN1dGVkIHVzaW5nIGEKc2hlbGw6CmBgYGJhc2gKPiBjZCB3
b3JraW5nX2Rpcgo+IGNobW9kICt4IG1hcmt5LnB5Cj4gLi9tYXJreS5weQpgYGAKCkEgbmV3
IHByb2plY3QgaXMgaW5pdGlhbGl6ZWQgaW4gdGhlIGB3b3JraW5nX2RpcmAgdXNpbmcgdGhl
IGAtLWluaXRgCm9wdGlvbi4gYCFNYCBjcmVhdGVzIGEgZGlyZWN0b3J5IHRyZWUgZm9yIHRo
ZSBwcm9qZWN0LCB3aGljaCBpcwpleHBsYWluZWQgaW4gZGV0YWlsIGluIEBzZWM6cHJvamVj
dC4gVGhlIGAhTWAgYCFNRmAgYW5kCmRvY3VtZW50YXRpb24gYG1hcmt5Lm1kYCwgYG1hcmt5
Lm1kaWAgYW5kIGBtYXJreS5iaWJgIGFyZSBhdXRvLWdlbmVyYXRlZAphbmQgcGxhY2VkIGlu
c2lkZSB0aGUgc3ViZGlycyBgbWQvYCBhbmQgYGRhdGEvYCBpbiBgd29ya2luZ19kaXJgCmFj
Y29yZGluZ2x5LgpgYGBiYXNoCj4gY2Qgd29ya2luZ19kaXIKPiAuL21hcmt5LnB5IC0taW5p
dApXUklURSAuL01ha2VmaWxlCldSSVRFIC4vbWQvbWFya3kubWQKV1JJVEUgLi9tZC9tYXJr
eS5tZGkKV1JJVEUgLi9kYXRhL21hcmt5LmJpYgpVU0FHRQoxLiBgbWFrZSBoZWxwYAoyLiBg
bWFrZSBhbGwtaHRtbCBodHRwZGAKMy4gYG1ha2UgYWxsLXBkZmAKYGBgCgpgIU1gIHJlbmRl
cnMgdGhlIGRvY3VtZW50YXRpb24gdXNpbmcgYCFQYCBpbnRvIGBodG1sYCBhbmQKYHBkZmAg
dXNpbmcgYG1ha2UgYWxsYC4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgY2FuIGJlIHJl
bmRlcmVkIGFmdGVyCmluc3RhbGxpbmcgdGhlIGRlcGVuZGVuY2llcyBgcHl0aG9uLXB5eWFt
bGAsIGBwYW5kb2NgIGFuZCBgcGFuZG9jLXhub3NgCihgcGFuZG9jLWZpZ25vc2AsIGBwYW5k
b2Mtc2Vjbm9zYCwgYHBhbmRvYy1lcW5vc2AsIGBwYW5kb2MtdGFibGVub3NgKS4KVGhlIGRl
dGFpbHMgYXJlIHNob3duIGluIHRoZSBgIU1GYCBoZWxwIG1lc3NhZ2UgaW4gQHNlYzptYWtl
ZmlsZS4KCiMjIGAhTWAgUHJvamVjdCBTdHJ1Y3R1cmUgeyNzZWM6cHJvamVjdH0KCkEgYCFN
YCBwcm9qZWN0IGhhcyB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZSwgd2hpY2ggaXMgYXV0by1n
ZW5lcmF0ZWQKaW4gdGhlIHByb2plY3QgZGlyZWN0b3J5IGB3b3JraW5nX2RpcmAgYWZ0ZXIg
aW52b2NhdGlvbiBvZgpgIU1wYCBgLS1pbml0YC4KYGBgISEKCXRleHQgPSAiIgoJZm9yIGkg
aW4gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJtYWtlIiwKCQkidHJlZSJdKS5kZWNvZGUo
InV0Zi04Iikuc3BsaXQoIlxuIik6CgkJaWYgaS5zdGFydHN3aXRoKCIjIik6CgkJCXRleHQg
Kz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApgYGAKCkJ5IGludm9raW5nIGBtYWtlIGFs
bGAgYWxsIGZpbGVzIGBtZC8qLm1kYCBhcmUgdHJhbnNmb3JtZWQKaW50byBjb3JyZXNwb25k
aW5nIGBodG1sLyouaHRtbGAgYW5kIGBwZGYvKi5wZGZgIGZpbGVzLiBCeQppbnZva2luZyBg
bWFrZSBodHRwZGAgYSBweXRob24gd2ViIHNlcnZlciBpcyBzdGFydGVkIGluIGBodG1sL2Au
CgpBbGwgdXNlci1nZW5lcmF0ZWQgcHJvamVjdCBjb250ZW50IGdvZXMgaW50byBgbWQvKi5t
ZChpKWAgZm9yCmAhTURgIHRleHQgYW5kIGAhTURgIGluY2x1ZGUgZmlsZXMgYW5kIGBkYXRh
LypgIGZvciBpbWFnZXMsCmJpYmxpb2dyYXBoeSwgdmlkZW9zLCBodG1sIGZyYW1lcywgZXRj
Li4uCgoqKkFUVEVOVElPTjoqKiBUaGUgZmlsZXMgaW4gdGhlIGRpcmVjdG9yaWVzIGBidWls
ZC8qLm1kYCBhcmUKKiphdXRvLWdlbmVyYXRlZCoqLiBBbGwgdXNlci1nZW5lcmF0ZWQgY29u
dGVudCBgKi5tZGAgYW5kIGAqLm1kaWAKaGFzIHRvIGJlIHBsYWNlZCBpbnNpZGUgdGhlIGRp
cmVjdG9yeSBgbWQvYC4gSW52b2tpbmcgYG1ha2UgY2xlYW5gCndpbGwgZGVsZXRlIGFsbCBm
aWxlcyBpbiBgaHRtbC9gLCBgYnVpbGQvYCBhbmQgYHBkZi9gLgoKIyMgYCFNYCBNYWtlZmls
ZSBVc2FnZSB7I3NlYzptYWtlZmlsZX0KCkJ5IHJ1bm5pbmcgYG1ha2VgIG9yIGBtYWtlIGhl
bHBgIGluIHRoZSBwcm9qZWN0IGB3b3JraW5nX2RpcmAgdGhlCmAhTUZgIGhlbHAgaXMgc2hv
d24uCmBgYCEhCgl0ZXh0ID0gIiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0
KFsibWFrZSIsCgkJImhlbHAiXSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIpOgoJCWlm
IGkuc3RhcnRzd2l0aCgiIyIpOgoJCQl0ZXh0ICs9IGkgKyAiXG4iCmBgYAoKYGBgCmAhdGV4
dGAKYGBgCgojIyBgIU1gIENoZWF0IFNoZWV0CgpCeSBydW5uaW5nIGBtYWtlIGNoZWF0YCBp
biB0aGUgcHJvamVjdCBgd29ya2luZ19kaXJgIHRoZSBgIU1gIGNoZWF0CnNoZWV0IGlzIHNo
b3duLCB3aGljaCBwcmVzZW50cyBhIHF1aWNrIG92ZXJ2aWV3IG9mIGAhTWAgc3BlY2lhbApt
YXJrdXAgZm9yIGV4ZWN1dGlvbiBvZiBweXRob24gY29kZSBhbmQgbWFuaXB1bGF0aW9uIG9m
IGAhTURgIHRleHQsCmFjY29yZGluZyB0byB0aGUgZmVhdHVyZXMgZGVzY3JpYmVzIGluIEBz
ZWM6ZmVhdHVyZXMuCmBgYCEhCgl0ZXh0ID0gIiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hl
Y2tfb3V0cHV0KFsibWFrZSIsCgkJImNoZWF0Il0pLmRlY29kZSgidXRmLTgiKS5zcGxpdCgi
XG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJaSA9IGkucmVwbGFjZShyIi5cPz8/
IiwgciIuXFw/Pz8iKQoJCQlpID0gaS5yZXBsYWNlKHIiLj8/PyIsIHIiLlw/Pz8iKQoJCQl0
ZXh0ICs9IGkgKyAiXG4iCmBgYAoKYGBgCmAhdGV4dGAKYGBgCgotLS0KCiMgYCFNYCBQcmVw
cm9jZXNzb3IgTWFya3VwCgojIyBZYW1sIE1ldGEgRGF0YSBpbiBGcm9udCBNYXR0ZXIgeyNz
ZWM6bWV0YWRhdGF9CgpNZXRhIGRhdGEgaXMgYW5ub3RhdGVkIGluIHRoZSBmcm9udCBtYXR0
ZXIgb2YgYSBgIU1EYCB0ZXh0IGRvY3VtZW50LgpUaGUgZnJvbnQgbWF0dGVyIG11c3Qgc3Rh
cnQgaW4gdGhlIGZpcnN0IGxpbmUgd2l0aCBgLS0tYCBhbmQgcHJlY2VkZXMgYWxsCm90aGVy
IHRleHQgYmVpbmcgZmVuY2VkIGJ5IGAtLS1gLiBUaGUgbWV0YSBkYXRhIGlzIGluIGB5YW1s
YCBmb3JtYXQuClRoZSBgeWFtbGAgYmxvY2sgaXMgcGFyc2VkIHVzaW5nIGBweXRob24tcHl5
YW1sYC4gQnkgZGVmYXVsdCBhbGwgbWV0YQpkYXRhIGlzIGltcG9ydGVkIGludG8gdGhlIHBy
ZXByb2Nlc3NlZCBkb2N1bWVudC4gSWYgYSBtZXRhCmRhdGEga2V5IHN0YXJ0cyB3aXRoIGAt
YCB0aGUga2V5IGlzIG5vdCBpbXBvcnRlZCBpbnRvIHRoZSByZXN1bHRpbmcKbWV0YSBkYXRh
IG9mIHRoZSBwcmVwcm9jZXNzZWQgZG9jdW1lbnQsIGhvd2V2ZXIgdGhlIGtleSB3aWxsIGJl
CmV4cG9zZWQgaW50byB0aGUgcHl0aG9uIHNjb2xlIGFzIGEgbG9jYWwgdmFyaWFibGUuIElu
IHRoZSBmb2xsb3dpbmcKZXhtYW1wbGUgYWxsIGtleXMgZXhjZXB0IGBmaWdzaXplYCwgYGZp
Z2RwaWAgYW5kIGB2ZXJzaW9uYCBhcmUgY29waWVkCmludG8gdGhlIHByZXByb2Nlc3NlZCBg
IU1EYCBkb2N1bWVudC4KCioqRXhhbXBsZSoqCmBgYHlhbWwKCi0tLQp0aXRsZTogYCF0aXRs
ZWAKZGF0ZTogYERhdGVgCmF1dGhvcjogYEF1dGhvcmAKbGluay1jaXRhdGlvbnM6IGAhbGlu
a19jaXRhdGlvbnNgCmJpYmxpb2dyYXBoeTogYCFiaWJsaW9ncmFwaHlgCmhlYWRlci1pbmNs
dWRlcy0tcGRmOiA+CiAgXGh5cGVyc2V0dXB7CiAgY29sb3JsaW5rcz1mYWxzZSwKICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFk
ZXItaW5jbHVkZXMtLWh0bWw6ID4KICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1i
b3g7IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiBgIXhub3NfY2xldmVyZWZgCnhub3MtY2Fw
aXRhbGlzZTogYCF4bm9zX2NhcGl0YWxpc2VgCmZvbnRzaXplOiBgIWZvbnRzaXplYAotdmVy
c2lvbjogYCF2ZXJzaW9uYAotZmlnc2l6ZTogYCFmaWdzaXplYAotZmlnZHBpOiBgIWZpZ2Rw
aWAKCi0tLQoKYGBgCgpUaGUgbWV0YSBkYXRhIGZpZWxkcwpbYHRpdGxlYCwgYGRhdGVgLCBg
YXV0aG9yYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI21ldGFkYXRhLXZhcmlh
YmxlcyksCltgbGluay1jaXRhdGlvbnNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0
bWwjb3RoZXItcmVsZXZhbnQtbWV0YWRhdGEtZmllbGRzKSwKW2BiaWJsaW9ncmFwaHlgXSho
dHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjY2l0YXRpb24tcmVuZGVyaW5nKSBhbmQK
W2BoZWFkZXItaW5jbHVkZXNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjdmFy
aWFibGVzLXNldC1hdXRvbWF0aWNhbGx5KQphcmUgcHJvY2Vzc2VkIGJ5IGAhUGAgZHVyaW5n
IGRvY3VtZW50IHJlbmRlcmluZy4gYGZvbnRzaXplYCBhZGp1c3RzIHRoZQpmb250IHNpemUg
aW4gW2BodG1sYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1m
b3ItaHRtbCkKYW5kIFtgcGRmYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3Zh
cmlhYmxlcy1mb3ItbGF0ZXgpIGRvY3VtZW50cy4KVGhlIGBoZWFkZXItaW5jbHVkZXNgIGZp
ZWxkIGlzIHVzZWQgZm9yIHVuZGVybGluaW5nIGxpbmtzIGluIGBwZGZgCmFuZCBgaHRtbGAg
ZG9jdW1lbnRzLiBUaGUgYHhub3MtY2xldmVyZWZgIGFuZCBgeG5vcy1jYXBpdGFsaXNlYApm
aWVsZHMgYXJlIHVzZWQgYnkgdGhlIFtgcGFuZG9jLXhub3NgXShodHRwczovL2dpdGh1Yi5j
b20vdG9tZHVjay9wYW5kb2MteG5vcykKZXh0ZW5zaW9ucyBmb3IgcmVmZXJlbmNpbmcKW2Zp
Z3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1maWdub3MjY3VzdG9t
aXphdGlvbiksClt0YWJsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy10
YWJsZW5vcyNjdXN0b21pemF0aW9uKSwKW3NlY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20v
dG9tZHVjay9wYW5kb2Mtc2Vjbm9zI2N1c3RvbWl6YXRpb24pIGFuZApbZXF1YXRpb25zXSho
dHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZXFub3MjY3VzdG9taXphdGlvbiku
CgpUaGUgZmllbGQgYGhlYWRlci1pbmNsdWRlc2AgZW5kcyB3aXRoIGAtLXBkZmAgYW5kIGAt
LWh0bWxgLCB3aGljaApzcGVjaWZpZXMgY29ycmVzcG9uZGluZyBvcHRpb25zIGZvciBnZW5l
cmF0aW9uIG9mIGBwZGZgIGFuZCBgaHRtbGAKZG9jdW1lbnRzLiBEdXJpbmcgbWFrZSwgYCFN
YCBzY2FucyBhbGwgbWV0YSBkYXRhIGZpZWxkcywgYW5kCmZpZWxkcyB3aGljaCBlbmQgd2l0
aCBgLS1wZGZgIGFuZCBgLS1odG1sYCBhcmUgc2VsZWN0ZWQgYW5kIGZvcndhcmRlZAp0byBg
IVBgIGJhc2VkIG9uIHRoZSBmb3JtYXQgdG8gYmUgcmVuZGVyZWQuIFRoaXMgd2FzIGZvcm1h
dCBkZXBlbmRlbnQKbWV0YSBkYXRhIGNhbiBiZSBzcGVjaWZpZWQgaW4gYCFNYCBNYXJrZG93
biB0ZXh0LgoKVGhlIGB2ZXJzaW9uYCBmaWVsZCBpcyBhIHVzZXItZGVmaW5lZCBmaWVsZAp3
aGljaCBzaG93cyB0aGUgdmVyc2lvbiBvZiB0aGlzIGRvY3VtZW50OiAqYCF2ZXJzaW9uYCou
IGBmaWdzaXplYCBhbmQKYGZpZ2RwaWAgYXJlIHVzZWQgaW4gdGhpcyBkb2N1bWVudCB0byBj
b250cm9sIHRoZSBmaWd1cmUgc2l6ZSBhbmQKcmVzb2x1dGlvbiBpbiB0aGUgYCFOVWAgYW5k
IGAhUExgIGV4YW1wbGUsIHNlZSBAc2VjOmV4YW1wbGVzLiBUaGUgZm9udApzaXplIGlzIGAh
Zm9udHNpemVgIGFuZCB0aGUgQGZpZzpmaWd1cmUxLCAhQGZpZzpmaWd1cmUyXzEsCiFAZmln
OmZpZ3VyZTJfMiwgIUBmaWc6ZmlndXJlMl8zIGFuZCAhQGZpZzpmaWd1cmUyXzQgaGF2ZSBh
IHNpemUgb2YKYCEieCIuam9pbihzdHIoaSkgZm9yIGkgaW4gZmlnc2l6ZSlgY20uIFRoZSBm
b250IHNpemUgYXBwbGllcyB0bwpib3RoIGRvY3VtZW50IHRleHQgYW5kIGZpZ3VyZSB0ZXh0
LgoKQXMgdGhlIHVzZXItZGVmaW5lZCBmaWVsZHMgYXJlIHByZWNlZWRlZCB3aXRoIGAtYCwg
dGhleSBhcmUgbm90IGNvcGllZAppbnRvIHRoZSBtZXRhIGRhdGEgb2YgdGhlIHByZXByb2Nl
c3NlZCBgIU1EYCB0ZXh0LiBUaGV5IGFyZSBvbmx5CmV4cG9zZWQgaW50byB0aGUgcHl0aG9u
IHNjb3BlIGFzIHZhcmlhYmxlcyBmb3IgcHJvY2Vzc2luZyB0aGUgYCFNYApgIU1EYCB0ZXh0
LCBhcyBkZXNjcmliZWQgaW4gQHNlYzppbmNtZXRhLgoKIyMgUHl0aG9uIENvZGUgQmxvY2tz
IGluc2lkZSBgIU1EYCBUZXh0IHsjc2VjOmJsb2NrfQoKUHl0aG9uIGNvZGUgY2FuIGJlIGV4
ZWN1dGVkIGR1cmluZyB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgYCFNRGAgdGV4dC4KUHl0aG9u
IGNvZGUgaXMgZGlyZWN0bHkgd3JpdHRlbiBpbnNpZGUgdGhlIGAhTURgIHRleHQgYW5kIGlz
IGZlbmNlZAp1c2luZyB0aGUgYGAgYCFCVCozYCBgYCBzdGF0ZW1lbnQuIFRoZSBibG9jayBu
ZWVkcyB0byBzdGFydCB3aXRoIGVpdGhlcgpgXCFgIG9yIGBcISFgLgoqIGBcIWA6IFRoZSBw
eXRob24gY29kZSBpcyBleGVjdXRlZCBhbmQgKipzaG93bioqIGluIHRoZSBvdXRwdXQuCiog
YFwhIWA6IFRoZSBweXRob24gY29kZSBpcyBleGVjdXRlZCBhbmQgKipoaWRkZW4qKiBpbiB0
aGUgb3V0cHV0LgoKYGBgbWQKCWAhQlQqM2AhCgkJPHB5dGhvbl9jb2RlX3Nob3duPgoJYCFC
VCozYAoKCWAhQlQqM2AhIQoJCTxweXRob25fY29kZV9oaWRkZW4+CglgIUJUKjNgCmBgYAoK
TWV0YSBkYXRhIGZyb20gYCFNRGAgZnJvbnQgbWF0dGVyIGNhbiBiZSB1c2VkIGFzIGxvY2Fs
IHZhcmlhYmxlcyBpbgpweXRob24gY29kZSBibG9ja3MuIFRoZSBgaW1wb3J0YCBzdGF0ZW1l
bnQgY2FuIGJlIHVzZWQgaW4gcHl0aG9uIGNvZGUKYmxvY2tzIGluIG9yZGVyIHRvIGFjY2Vz
cyBpbnN0YWxsZWQgcHl0aG9uIHBhY2thZ2VzLiBBbGwgY29kZSBibG9ja3MKc3BhbiBvbmUg
bGFyZ2Ugc2NvcGUgZm9yIHNoYXJpbmcgZnVuY3Rpb25zIGFuZCBsb2NhbCB2YXJpYWJsZXMu
ClVzaW5nIHRoZSBgcHJpbnQoKWAgZnVuY3Rpb24gdGhlIHRleHQgd2lsbCBiZSBwcmludGVk
IHRvIHRoZSBjb25zb2xlCmFuZCAqKm5vdCoqIGluc2lkZSB0aGUgcmVzdWx0aW5nIGAhTURg
IHRleHQuIEluIG9yZGVyIHRvIG1vZGlmeQp0aGUgYCFNRGAgdGV4dCB1c2luZyBgIU1gIGR1
cmluZyBwcmVwcm9jZXNzaW5nLCB0aGUgYCFQMWAgc3RhdGVtZW50CmhhcyB0byBiZSB1c2Vk
LCBzZWUgQHNlYzptZHByaW50LgoKKipFeGFtcGxlKioKYGBgIQoJaW1wb3J0IG51bXB5IGFz
IG5wCglkZWYgZ2V0X3goYT0wKToKCQlyZXR1cm4gbnAuYXJyYXkoWzQxICsgYV0pCgl5ID0g
MQpgYGAKClRoaXMgaXMgYSBwYXJhZ3JhcGguCgpgYGAhCgl4ID0gZ2V0X3goeSkKCXByaW50
KCJIZWxsbyBDb25zb2xlISB4IGlzIiwgeCkKYGBgCgojIyBHZW5lcmF0aW9uIG9mIGAhTURg
IFRleHQgdXNpbmcgUHl0aG9uIENvZGUgeyNzZWM6bWRwcmludH0KCiMjIyBUaGUgYCFQMWAg
U3RhdGVtZW50CgpVc2luZyB0aGUgYHByaW50KClgIHN0YXRlbWVudCB0aGUgdGV4dCB3aWxs
IGJlIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUuCldoZW4gdXNpbmcgdGhlIGAhUDFgIGFuZCBg
IVAyYCBzdGF0ZW1lbnRzIG5ldyBgIU1EYCB0ZXh0IGNhbiBiZQppbnNlcnRlZCBkeW5hbWlj
YWxseSBpbnRvIHRoZSBkb2N1bWVudCBkdXJpbmcgcHJlcHJvY2Vzc2luZy4KCioqYCFQMWAg
U3RhdGVtZW50KioKKiBgXygqYXJncywgc2VwPSIgIilgOgoJMS4gY29udmVydCBhcmd1bWVu
dHMgdG8gc3RyaW5nCgkyLiBqb2luIGFyZ3VtZW50cyB1c2luZyBgc2VwYAoqIGBfKF8sICph
cmdzICAgKWA6IGFwcGVuZCB0byBwcmV2aW91cyBvdXRwdXQKKiBgXyhfLCAqYXJncywgXylg
OiBhcHBlbmQgdG8gcHJldmlvdXMgb3V0cHV0IGFuZCBhcHBlbmQgbmV4dCBvdXRwdXQKKiBg
XyggICAqYXJncywgXylgOiBhcHBlbmQgbmV4dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKCioq
YCFQMmAgU3RhdGVtZW50KioKKiBgX18oYXJnLCBjcm9wPVRydWUsIHNoaWZ0PSIiKWA6Cgkx
LiBjb252ZXJ0IGBhcmdgIHRvIHN0cmluZwoJMi4gY3JvcCBhbmQgcHJlcGVuZCBgc2hpZnRg
IHN0cmluZyB0byBlYWNoIGxpbmUKKiBgX18oYXJnLCBfKWA6IGFwcGVuZCBuZXh0IG91dHB1
dCB0byB0aGlzIG91dHB1dAoKKipDcm9wIGFuZCBTaGlmdCoqCmBgYHB5CmRlZiB0ZXN0KCk6
CglfXygiIiIKCQkqIExpc3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAxCgkiIiIpCglfXygi
IiIKCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAyCgkJICAgICogTGlzdCBMZXZl
bCAzCgkiIiIsIHNoaWZ0PSIgIio0KQpgYGAKCmBgYG1kCiogTGlzdCBMZXZlbCAxCiogTGlz
dCBMZXZlbCAxCiAgICAqIExpc3QgTGV2ZWwgMgogICAgKiBMaXN0IExldmVsIDIKICAgICAg
ICAqIExpc3QgTGV2ZWwgMwpgYGAKCioqRXhhbXBsZSoqCmBgYCEKCXkgKz0gMQoJX18oZiIi
IgoJCSogVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkJKiBUaGlzIGlz
IGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259Ki4KCSIiIikKCV9fKGYiIiIKCQkxLiBUaGlz
IGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259Ki4KCQkyLiBUaGlzIGlzIGBtYXJreWAg
VmVyc2lvbiAqe3ZlcnNpb259Ki4KCSIiIiwgc2hpZnQ9IiAiKjQpCmBgYAoKYGBgIQoJXygi
VGhpcyIsIF8pCglfKCJpcyIpCglfKF8sICIgb25lIiwgXykKCV8oImxpbmUhIG5vdCBlbmRp
bmcgd2l0aCBcXCIpCglfKCJ0aGlzPyIpCmBgYAoKYGBgIQoJXyhmIkhlbGxvIE1hcmtkb3du
ISB4IGlzICoqe3h9KiogYW5kIHkgaXMgKnt5fSoiKQpgYGAKCiMjIyBJbmRlbnRhdGlvbiBv
ZiB0aGUgYCFQMWAgU3RhdGVtZW50CgpUaGUgYCFQMWAgc3RhdGVtZW50IG5lZWRzIHRvIGJl
IGluZGVudGVkIGFjY29yZGluZyB0byB0aGUgcHl0aG9uIHByb2dyYW0KZmxvdyAoYGZvcmAs
IGB3aGlsZWAsIGBpZmAsIGBlbHNlYCwgYHRyeWAsIGB3aXRoYCwgYGRlZmAsIGBjbGFzc2Ap
IGFuZApzdXBwb3J0cyBkeW5hbWljIGluc2VydGlvbiBvZiBgIU1EYCB0ZXh0IGludG8gdGhl
IGRvY3VtZW50IGJhc2VkCm9uIGxvb3BzIGFuZCBjb25kaXRpb25zLgoKKipFeGFtcGxlIDEq
KgoKYGBgIQoJXygiVGhpcyBpcyB0aGUgKipnZW5lcmF0ZWQgb3V0cHV0Kio6IikKCV8oIiIp
CglfKCI+IFRoaXMgaXMgYSAqbGlzdGluZyo6IikKCXRleHQgPSBbInplcm8iLCAib25lIiwg
InR3byIsICJ0aHJlZSJdCglmb3IgaSBpbiByYW5nZSgxMCk6CgkJaWYgaSA8IDI6CgkJCV8o
ZiI+IHtpfSIpCgkJZWxpZiBpID09IDI6CgkJCWogPSB0ZXh0W2ldCgkJCV8oZiI+IHtqfSIp
CgkJZWxpZiBpID09IDM6CgkJCV8oIiIpCgkJZWxpZiBpIDwgNzoKCQkJXyhmIj4+IHsnICAg
ICcqKGktNCl9KiB7aX0iKQoJCWVsaWYgaSA9PSA3OgoJCQlfKCIiKQoJCWVsc2U6CgkJCWog
PSBpIC0gNwoJCQlrID0gdGV4dFtqXQoJCQlfKGYiPiB7an0uIHtrfSIpCmBgYAoKKipFeGFt
cGxlIDIqKgoKQHRibDp0YWJsZTEgaXMgZ2VuZXJhdGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcg
cHl0aG9uIGNsb2RlIGJsb2NrLgoKYGBgIQoJbiA9IDEzCglkZWMgPSBbIiolcyoiLCAiKiol
cyoqIiwgIn5+JXN+fiIsICJgJXNgIiwKCQlyIiRcdGltZXNeJXMkIiwgIiRcaW5mdHlfJXMk
Il0KCV8oInwiLmpvaW4oIlgiKm4pICsgIlxuIiArICJ8Ii5qb2luKCItIipuKSkKCWZvciBp
IGluIHJhbmdlKG4pOgoJCWZpbGwgPSBbY2hyKG9yZCgiQSIpKygyKmkrMyprKSUyNikgZm9y
IGsgaW4gcmFuZ2UoaSsxKV0KCQlmaWxsID0gW2RlY1sobCtpKSVsZW4oZGVjKV0layBmb3Ig
bCwgayBpbiBlbnVtZXJhdGUoZmlsbCldCgkJdGV4dCA9IGxpc3QoIjAiKSpuCgkJdGV4dFso
bj4+MSktKGk+PjEpOihuPj4xKSsoaT4+MSldID0gZmlsbAoJCV8oInwiLmpvaW4odGV4dCkp
CmBgYAoKVGFibGU6IFRhYmxlIGlzIGdlbmVyYXRlZCB1c2luZyBjb2RlIGFuZCB0aGUgYCFQ
MWAgc3RhdGVtZW50LiB7I3RibDp0YWJsZTF9CgojIyBGb3JtYXR0ZWQgT3V0cHV0IG9mIFB5
dGhvbiBWYXJpYWJsZXMgeyNzZWM6Zm9ybWF0fQoKYCFNYCBjYW4gb3V0cHV0IHB5dGhvbiB2
YXJpYWJsZXMgaW5saW5lIGludG8gYCFNRGAgdGV4dCB1c2luZwp0aGUgYGAgYFwhVkFSSUFC
TEVgIGBgIHN0YXRlbWVudC4gYFZBUklBQkxFYCBjYW4gYmUgYW55IHB5dGhvbiB2YXJpYWJs
ZQpmcm9tIGEgcHl0aG9uIGNvZGUgYmxvY2sgb3IgbWV0YSBkYXRhIGZpZWxkLiBUaGUgb3V0
cHV0IGNhbiBiZQpmb3JtYXR0ZWQgdXNpbmcgdGhlIGBgIGBcIVZBUklBQkxFWzpGT1JNQVRd
YCBgYCBzdGF0ZW1lbnQgYWNjb3JkaW5nCnRvIHRoZSBweXRob24gb3BlcmF0b3IgYHs8dmFy
aWFibGU+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbiB0aGUKW2BzdHIuZm9ybWF0KClg
XShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvc3RyaW5nLmh0bWwjZm9ybWF0
c3RyaW5ncykKc3BlY2lmaWNhdGlvbi4gVGhlIGBgIGBcIVZBUklBQkxFYCBgYCBzdGF0ZW1l
bnQgaXMgZXNjYXBlZAp1c2luZyBgYCBgXFwhVkFSSUFCTEVgIGBgLgoKKipFeGFtcGxlKioK
YGBgIQoJeCA9IGludCgxKQoJeSA9IGZsb2F0KDIuMykKCXogPSAwCglhID0gWzEsIDIsIDNd
CgliID0gKDQsIDUpCmBgYAoKYGBgbWQKVGhpcyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyBg
XCF4OjAzZGAgYW5kIHkgaXMgYFwheTouMmZgLgpPdGhlciBjb250ZW50IGlzOiBgXCFhYCwg
YFwhYmAgYW5kIGVzY2FwaW5nIHdvcmtzOiBgXFwhemAuCmBgYAoKVGhpcyBpcyBhIHBhcmFn
cmFwaCBhbmQgeCBpcyBgIXg6MDNkYCBhbmQgeSBpcyBgIXk6LjJmYC4KT3RoZXIgY29udGVu
dCBpczogYCFhYCwgYCFiYCBhbmQgZXNjYXBpbmcgd29ya3M6IGBcIXpgLgoKIyMgT3V0cHV0
IFJlc3VsdHMgb2YgUHl0aG9uIEV4cHJlc3Npb25zIHsjc2VjOmlubGluZX0KCmAhTWAgb3V0
cHV0cyByZXN1bHRzIG9mIHB5dGhvbiBleHByZXNzaW9ucyBpbmxpbmUgaW50byBgIU1EYCB0
ZXh0CnVzaW5nIHRoZSBgYCBgXCFFWFBSRVNTSU9OYCBgYCBzdGF0ZW1lbnQuIGBFWFBSRVNT
SU9OYCBjYW4gYmUgYW55IHB5dGhvbgpleHByZXNzaW9uLiBUaGUgb3V0cHV0IGNhbiBiZSBm
b3JtYXR0ZWQgdXNpbmcgdGhlIHB5dGhvbgpgYCBgXCFFWFBSRVNTSU9OWzpGT1JNQVRdYCBg
YCBzdGF0ZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBweXRob24gb3BlcmF0b3IKYHs8ZXhwcmVz
c2lvbj5bOjxmb3JtYXQ+XX1gIGltcGxlbWVudGVkIGluIHRoZSBweXRob24KW2BmYC1zdHJp
bmdzXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5
c2lzLmh0bWwjZi1zdHJpbmdzKQpzcGVjaWZpY2F0aW9uLiBUaGUgYGAgYFwhRVhQUkVTU0lP
TmAgYGAgc3RhdGVtZW50IGlzIGVzY2FwZWQKdXNpbmcgYGAgYFxcIUVYUFJFU1NJT05gIGBg
LgoKKipFeGFtcGxlKioKYGBgbWQKVGhpcyBpcyBhIGxpc3Qgd2l0aCB0aGUgbnVtYmVycyBg
XCEiLCAiLmpvaW4oW3N0cihpKSBmb3IgaSBpbiBhXSlgLgpUaGUgcmVzdWx0IG9mIHRoZSBm
dW5jdGlvbiBgZ2V0X3hgIGlzIGBcIWdldF94KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFxc
IWdldF94KGJbMV0pWzBdYC4KYGBgCgpUaGlzIGlzIGEgbGlzdCB3aXRoIHRoZSBudW1iZXJz
IGAhIiwgIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gYV0pYC4KVGhlIHJlc3VsdCBvZiB0aGUg
ZnVuY3Rpb24gYGdldF94YCBpcyBgIWdldF94KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFwh
Z2V0X3goYlsxXSlbMF1gLgoKIyMgSW5jbHVkZSBTdGF0ZW1lbnQgYW5kIE1ha2UgRGVwZW5k
ZW5jaWVzIHsjc2VjOmluY2x1ZGV9CgpgIU1gIHN1cHBvcnRzIGluY2x1ZGUgb2YgYCFNRGAg
dGV4dCB1c2luZyB0aGUgYFwhISFgIHN0YXRlbWVudC4KVGhlIGBcISEhYCBzdGF0ZW1lbnQg
bXVzdCBiZSBvbiBhIHNpbmdsZSBsaW5lIGFuZCBmb2xsb3dzIHRoZSBwYXRoCm9mIHRoZSBp
bmNsdWRlIGZpbGUuIFRoZSBwYXRoIG9mIHRoZSBpbmNsdWRlIGZpbGUgaXMgcmVsYXRpdmUg
dG8KdGhlIHJvb3QgYCFNRGAgZG9jdW1lbnQgd2hpY2ggaXMgcHJvY2Vzc2VkLiBUaGUgcGF0
aHMgb2YgYWxsCmluY2x1ZGVkIGZpbGVzIGFyZSBjb2xsZWN0ZWQgYW5kIGEgYCFNRmAgcnVs
ZSBpcyBjcmVhdGVkIGFuZApzdG9yZWQgaW4gYSBmaWxlIChwYXRoIG9mIG91dHB1dCBgIU1E
YCB0ZXh0IGFwcGVuZGVkIHdpdGggYC5ta2ApLgoKVGhlIGBcISEhYCBzdGF0ZW1lbnQgaXMg
ZXNjYXBlZCB1c2luZyBgXFwhISFgLgpUaGUgaW5jbHVkZSBzdGF0ZW1lbnQgKipjYW5ub3Qq
KiBiZSB1c2VkIGluIGNvZGUgYmxvY2tzLiBgIU1gIGAhTURgCnRleHQgbXVzdCBoYXZlIHRo
ZSBleHRlbnNpb24gYC5tZGAgYW5kIGluY2x1ZGUgZmlsZXMgbXVzdCBoYXZlIHRoZQpleHRl
bnNpb24gYC5tZGlgCgpUaGUgaW5jbHVkZSBzdGF0ZW1lbnQgc3VwcG9ydHMgZmxhZ3MgZm9y
IHBhcnNpbmcgdGhlIGluY2x1ZGUgZmlsZS4KYGBgbWQKXCEhISBQQVRIL0ZJTEUubWRpIEZM
QUdTCmBgYAoKKipGbGFncyoqCiogYGF1eGA6IHJlZmVyZW5jZSBhcyBNYWtlZmlsZSBkZXBl
bmRlbmN5LCBidXQgZG8gbm90IHByb2Nlc3MKKiBgbm9kZXBgOiBkbyBub3QgcmVmZXJlbmNl
IHRoaXMgZmlsZSBhcyBNYWtlZmlsZSBkZXBlbmRlbmN5CiogYHJhd2A6IHRoZSBmaWxlIGlz
IGluY2x1ZGVkIGFzLWlzIHdpdGhvdXQgYW55IHBhcnNpbmcKKiBgbm9tZXRhYDogbWV0YSBk
YXRhIGluIGZyb250IG1hdHRlciBpcyBza2lwcGVkIGR1cmluZyBwYXJzaW5nCiogYG5vYm9k
eWA6IGFsbCBNYXJrZG93biB0ZXh0IGlzIHNraXBwZWQgZHVyaW5nIHBhcnNpbmcKKiBgbm9t
YXJreWA6IGluY2x1ZGUgdGhlIGAhTURgIHRleHQgd2l0aG91dCBhbnkgYCFNYCBwcm9jZXNz
aW5nCiogYFwhYDogb25seSBpbmNsdWRlIGNvZGUgYmxvY2tzCiogYFwhIWA6IG9ubHkgaW5j
bHVkZSBoaWRkZW4gY29kZSBibG9ja3MKKiBgPj5OYDogaW5jcmVhc2UgdGhlIGluZGVudGF0
aW9uIHVzaW5nIGBOYCB0YWJzCiogYD5OYDogaW5jcmVhc2UgdGhlIGluZGVudGF0aW9uIHVz
aW5nIGBOYCBzcGFjZXMKKiBgIytOYDogaW5jcmVhc2UgdGhlIGxldmVsIG9mIEFUWCBoZWFk
aW5ncyBgI2AuIFRoZSBoZWFkaW5ncyBhcmUKcGFyc2VkIGFjY29yZGluZyB0byBgIVBgIGV4
dGVuc2lvbnMKKFtibGFua19iZWZvcmVfaGVhZGVyXShodHRwczovL3BhbmRvYy5vcmcvTUFO
VUFMLmh0bWwjZXh0ZW5zaW9uLWJsYW5rX2JlZm9yZV9oZWFkZXIpLApbc3BhY2VfaW5fYXR4
X2hlYWRlcl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zcGFj
ZV9pbl9hdHhfaGVhZGVyKSkKCioqRXhhbXBsZSoqCmBgYG1kClwhISEgbWFya3kubWRpICMr
MgpUaGUgZmlsZSB3YXMgaW5jbHVkZWQ6IGBcIWluY2x1ZGVkYCBhbmQgJHg9YFwheGAkIGFu
ZCAkeT1gXCF5YCQuCmBgYAoKISEhIG1hcmt5Lm1kaSAjKzIKVGhlIGZpbGUgd2FzIGluY2x1
ZGVkOiBgIWluY2x1ZGVkYCBhbmQgJHg9YCF4YCQgYW5kICR5PWAheWAkLgoKVGhlIGZpbGUg
YG1hcmt5Lm1kaWAgd2FzIGxvYWRlZCB3aXRoIHNoaWZ0aW5nIEFUWCBoZWFkaW5ncyBieSAy
IHdoaWNoCm1lYW5zIGAjI2AgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIGluY2x1ZGVkIHNlY3Rp
b24uIFRoZSBmaWxlIGNvbnRhaW5zOgpgYGBtZAohISEgbWFya3kubWRpIHJhdyA+PjEKYGBg
ClRoZSB1bm1vZGlmaWVkIHNvdXJjZSB3YXMgbG9hZGVkIHVzaW5nIHRoZSBmbGFncyBgcmF3
ID4+MWAuCgpUaGUgZmlsZSBgbWFya3kubWQubWtgIGNvbnRhaW5zOgpgYGBNYWtlZmlsZQpi
dWlsZC9tYXJreS5tZDogXAptZC9tYXJreS5tZGkKCi5QSE9OWTogbWQtbWFya3kKbWQtbWFy
a3k6IGJ1aWxkL21hcmt5Lm1kCgouUEhPTlk6IGh0bWwtbWFya3kKaHRtbC1tYXJreTogaHRt
bC9tYXJreS5odG1sCgouUEhPTlk6IHBkZi1tYXJreQpwZGYtbWFya3k6IHBkZi9tYXJreS5w
ZGYKYGBgCgojIyBJbmNsdWRlIFN0YXRlbWVudCBhbmQgTWV0YSBEYXRhIEltcG9ydCB7I3Nl
YzppbmNtZXRhfQoKVGhlIGluY2x1ZGUgc3RhdGVtZW50IGBcISEhYCBsb2FkcyBhbmQgcGFy
c2VzIGFuIGAqLm1kaWAgaW5jbHVkZSBmaWxlLgpUaGUgYHlhbWxgIG1ldGEgZGF0YSBpbiB0
aGUgZnJvbnQgbWF0dGVyIG9mIHRoZSBkb2N1bWVudCBhbHNvIGlzIGxvYWRlZAphbmQgcGFy
c2VkIGlmIHRoZSBgbm9tZXRhYCBmbGFnIGlzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGluY2x1
ZGUKc3RhdGVtZW50LiBBc3N1bWluZyB0aGUgcm9vdCBkb2N1bWVudCBhbmQgdGhlIGluY2x1
ZGVkIGRvY3VtZW50IGhhdmUgdGhlCmZvbGxvd2luZyBtZXRhIGRhdGEuCgoqKlJvb3QgRG9j
dW1lbnQqKgpgYGB5YW1sCgotLS0Kd2lkdGg6IDEwCmhlaWdodDogMjAKCi0tLQpcISEhIGlu
Y2x1ZGUubWRpCmBgYAoKKipJbmNsdWRlZCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQpkZXB0
aDogMzAKdm9sdW1lOiA2MDAwCi1zZXJpYWw6IEE1NkdISgoKLS0tCmBgYAoKQnkgZGVmYXVs
dCBhbGwgYHlhbWxgIG1ldGEgZGF0YSBmaWVsZHMgYXJlIGNvcGllZCB0byB0aGUgbWV0YSBk
YXRhIG9mCnRoZSByb290IGAhTURgIGRvY3VtZW50IHdoaWNoIGlzIHByb2Nlc3NlZC4gSG93
ZXZlciwgaWYgYSBtZXRhIGRhdGEKa2V5IGlzIHByZWNlZWRlZCBieSBgLWAgdGhlIGtleSBp
cyBub3QgaW1wb3J0ZWQgaW50byB0aGUgcm9vdCBkb2N1bWVudC4KQWxsIGB5YW1sYCBtZXRh
IGRhdGEga2V5cyB3aGljaCBzdGFydCB3aXRoIGAtYCBhcmUgZXhwb3NlZCB0byB0aGUKcHl0
aG9uIHNjb3BlIGFuZCB3aWxsIGFwcGVhciBhcyBsb2NhbCB2YXJpYWJsZXMsIGJ1dCB0aGV5
IHdpbGwgbm90CmFwcGVhciBpbiB0aGUgbWV0YSBkYXRhIG9mIHRoZSBmcm9udCBtYXR0ZXIg
aW4gdGhlIHByZXByb2Nlc3NlZApgIU1EYCB0ZXh0LiBHaXZlbiB0aGUgZXhhbXBsZSBhYm92
ZSwgdGhlIHJlc3VsdGluZyBtZXRhIGRhdGEgaW4KdGhlIGZyb250IG1hdHRlciBvZiB0aGUg
cHJlcHJvY2Vzc2VkIGAhTURgIHRleHQgbG9va3MgYXMgZm9sbG93cy4KCioqUHJlcHJvY2Vz
c2VkIERvY3VtZW50KioKYGBgeWFtbAoKLS0tCndpZHRoOiAxMApoZWlnaHQ6IDIwCmRlcHRo
OiAzMAp2b2x1bWU6IDYwMDAKCi0tLQpgYGAKCiMjIEZvcm1hdCBMaW5rcyBmb3IgYGh0bWxg
IGFuZCBgcGRmYCBEb2N1bWVudHMgeyNzZWM6Zm9ybWxpbmt9CgpXaGVuIHdyaXRpbmcgbXVs
dGlwbGUgZG9jdW1lbnRzLCBvZnRlbiBkb2N1bWVudHMgYXJlIHJlZmVyZW5jZWQKYmV0d2Vl
biBlYWNoIG90aGVyIHVzaW5nIGxpbmtzLiBJbiBvcmRlciB0byByZWZlciB0byBleHRlcm5h
bApgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyB0aGUgYCFNRGAgbGluayBzdGF0ZW1lbnQg
aXMgdXNlZC4KYGBgbWQKW0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLmh0bWwpCltMaW5r
IENhcHRpb25dKHBhdGgvdG8vZmlsZS5wZGYpCmBgYAoKV2hlbiB1c2luZyByZWxhdGl2ZSBw
YXRocyBpbiB0aGUgVVJMLCB0aGUgZG9jdW1lbnRzIGNhbiBiZSByZWZlcmVuY2VkCmFjY29y
ZGluZyB0byB0aGUgZGlyZWN0b3J5IHRyZWUgb2YgdGhlIHNvdXJjZSBgIU1gIGAhTURgIHRl
eHQKYG1kLyovKi5tZGAuIEhvd2V2ZXIsIHRoZSByZXN1bHRpbmcgbGluayB3aWxsIGJlIGEg
cGF0aCByZWxhdGl2ZQp0byB0aGUgZGlyZWN0b3J5IGBodG1sL2AgZm9yIGBodG1sYCBkb2N1
bWVudHMgYW5kIHJlbGF0aXZlIHRvIGBwZGYvYApmb3IgYHBkZmAgZG9jdW1lbnRzLiBBcyBh
bGwgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgYXJlIGtlcHQgaW4Kc2VwYXJhdGUgZGly
ZWN0b3JpZXMsIG9uZSBsaW5rIHN0YXRlbWVudCBjYW5ub3QgYmUgdXNlZCBmb3IgcmVuZGVy
aW5nCmBodG1sYCBhbmQgYHBkZmAgd2l0aCBjb25zaXN0ZW50IHBhdGhzIGluIHRoZSBsaW5r
IHN0YXRlbWVudC4KCkJ5IHVzaW5nIHRoZSBgIU1gIGZvcm1hdCBsaW5rIHN0YXRlbWVudCBg
Llw/Pz9gLCB0aGUgZmlsZSBleHRlbnNpb24KaW4gdGhlIGxpbmtzIGlzIHJlcGxhY2VkIGRl
cGVuZGluZyBvbiB0aGUgb3V0cHV0IGZvcm1hdApyZXN1bGluZyBpbiBjb25zaXN0ZW50IGxp
bmtzIGZvciBgaHRtbGAgYW5kIGBwZGZgCmRvY3VtZW50cy4gVGhlIGZvcm1hdCBsaW5rIHN0
YXRlbWVudCBjYW4gYmUgZXNjYXBlZCB1c2luZyBgLlxcPz8/YC4KCioqRXhhbXBsZSoqCmBg
YG1kCltMaW5rIHRvIHRoaXMgRG9jdW1lbnRdKG1hcmt5Llw/Pz8pCmBgYAoKW0xpbmsgdG8g
dGhpcyBEb2N1bWVudF0obWFya3kuPz8/KQoKIyMgRm9ybWF0IENvZGVzIGZvciBgaHRtbGAg
YW5kIGBwZGZgIERvY3VtZW50cyB7I3NlYzpmb3JtY29kZX0KCk9mdGVuIHdoZW4gd3JpdGlu
ZyBtYXJrZG93biBmb3IgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMsIHRoZQpmb3JtYXQg
bmVlZHMgdG8gYmUgYWRqdXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb3JtYXQuIGAhUGAgYCFN
RGAKYWxyZWFkeSByZW5kZXJzIGFsbCBjb21tb24gTWFya2Rvd24gaW50byBgaHRtbGAgYW5k
IGBwZGZgLgpgIU1gIHN1cHBvcnRzIGZvcm1hdCBzcGVjaWZpYyB0d2Vha2luZyB1c2luZyBm
b3JtYXQgY29kZXMuCgpJbiBvcmRlciB0byBpbmplY3QgZm9ybWF0IHNwZWNpZmljIGNvZGUs
IGBodG1sYCBjb2RlIG9yIGB0ZXhgIGNvZGUKZm9yIGBwZGZgIGRvY3VtZW50cywgdGhlIGZv
cm1hdCBjb2RlcyBhcmUgdXNlZC4gRm9ybWF0IGNvZGVzIGFyZQp3cml0dGVuIGFzIGBgIGBc
P0ZVTkNBTEwoQVJHUylgIGBgIG9yIGBgIGBcP1ZBUklBQkxFYCBgYAp3aGljaCBhcmUgdHJh
bnNsYXRlZCBpbiB0aGUgZm9sbG93aW5nIHB5dGhvbiBleHByZXNzaW9ucyBieQpwcmVwZW5k
aW5nIHRoZSBmb3JtYXQgYGh0bWxgIG9yIGBwZGZgIHRvIHRoZSBleHByZXNzaW9uLgoxLiBg
aHRtbEZVTkNBTEwoQVJHUylgIGFuZCBgaHRtbFZBUklBQkxFYCBmb3IgaW5qZWN0aW9uIG9m
IHJhdyBgaHRtbGAKY29kZSBmb3IgcmVuZGVyaW5nIGBodG1sYC1iYXNlZCBkb2N1bWVudHMg
aW4gYCFQYC4KMi4gYHBkZkZVTkNBTEwoQVJHUylgIGFuZCBgcGRmVkFSSUFCTEVgICBmb3Ig
aW5qZWN0aW9uIG9mIHJhdyBgdGV4YApjb2RlIGluIGBwZGZgLWJhc2VkIGRvY3VtZW50cyBp
biBgIVBgLgoKQWx0ZXJuYXRpdmVseSBgXD8/P2AgY2FuIGJlIHVzZWQgdG8gc3BlY2lmeSB0
aGUgbG9jYXRpb24gd2hlcmUgdGhlCmZvcm1hdCBpcyBpbnNlcnRlZC4gVGhlIHR3byBmb3Jt
YXQgY29kZXMgYGAgYFw/RlVOQ0FMTCgiPz8/IilgIGBgCmFuZCBgYCBgXD9WQVJJQUJMRV8/
Pz9gIGBgIHdvdWxkIHJlc3VsdCBpbiB0aGUgZm9sbG93aW5nIHB5dGhvbgpleHByZXNzaW9u
cy4KMS4gYEZVTkNBTEwoImh0bWwiKWAgYW5kIGBWQVJJQUJMRV9odG1sYCBmb3IgaW5qZWN0
aW9uIG9mIHJhdyBgaHRtbGAKY29kZSBmb3IgcmVuZGVyaW5nIGBodG1sYC1iYXNlZCBkb2N1
bWVudHMgaW4gYCFQYC4KMi4gYEZVTkNBTEwoInBkZiIpYCBhbmQgYFZBUklBQkxFX3BkZmAg
IGZvciBpbmplY3Rpb24gb2YgcmF3IGB0ZXhgCmNvZGUgaW4gYHBkZmAtYmFzZWQgZG9jdW1l
bnRzIGluIGAhUGAuCgpEdXJpbmcgcHJlcHJvY2Vzc2luZywgYCFNYCBwcm9jZXNzZXMgYWxs
IGZvcm1hdCBjb2RlcyBmb3IgZWFjaApmb3JtYXQgYGh0bWxgIGFuZCBgcGRmYCBhbmQgY2Fj
aGVzIHRoZSBvdXRwdXQuIEJlZm9yZSByZW5kZXJpbmcKdGhlIE1hcmtkb3duIGluIG9uZSBw
YXJ0aWN1bGFyIGZvcm1hdCB1c2luZyBgIVBgLCBgIU1gIGV4dHJhY3RzCnRoZSByZXN1bHRz
IG9mIHRoZSBjb3JyZXNwb25kaW5nIGZvcm1hdCBjb2RlcyBhbmQgc2tpcHMgdGhlIG90aGVy
cy4KQWRkaXRpb25hbCBgdGV4YCBwYWNrYWdlcyBoYXZlIHRvIGJlIGluY2x1ZGVkIHVzaW5n
IHRoZSBtZXRhIGRhdGEKZmllbGQgYGhlYWRlci1pbmNsdWRlc2AuCgpGb3IgcmV0dXJuaW5n
IHRoZSByYXcgZm9ybWF0IGNvZGUsIGVpdGhlciB0aGUgYCFQMWAgc3RhdGVtZW50IGNhbgpi
ZSB1c2VkIEBzZWM6bWRwcmludCAqKm9yKiogdGhlIGByZXR1cm5gIHN0YXRlbWVudCBjYW4g
YmUgdXNlZC4KSWYgYm90aCBzdGF0ZW1lbnRzIGFyZSBtaXhlZCwgdGhlIG91dHB1dCB3aGlj
aCBoYWQgYmVlbiByZXR1cm5lZAp3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSB0ZXh0IGdlbmVy
YXRlZCB3aXRoIHRoZSBgIVAxYCBzdGF0ZW1lbnQuCgoqKkV4YW1wbGU6IEZ1bmN0aW9ucyBh
bmQgVmFyaWFibGVzKioKYGBgIQoJZGVmIGh0bWxUZXN0MSgpOgoJCV8oIjxzdXA+SFRNTCBp
biIpCgkJcmV0dXJuICJzdXBlcnNjcmlwdDwvc3VwPiIKCWRlZiBwZGZUZXN0MSgpOgoJCV9f
KCIiIgoJCQkke31fXG1ib3h7UERGIGluIHN1YnNjcmlwdH0kCgkJIiIiKQoJdGVzdDJfaHRt
bCA9ICI8c3ViPkhUTUwgaW4gc3Vic2NyaXB0PC9zdWI+IgoJdGVzdDJfcGRmID0gICIke31e
XG1ib3h7UERGIGluIHN1cGVyc2NyaXB0fSQiCglkZWYgdGVzdDMoZm10KToKCQlyZXR1cm4g
Zm10LnVwcGVyKCkKYGBgCgpgYGBtZApUaGUgZm9ybWF0IGNvZGUgYFxcP3Rlc3QzKD8/Pylg
IHJldHVybnMgdGhlIGZvcm1hdCBvZgp0aGUgZG9jdW1lbnQ6IGBcP3Rlc3QzKCI/Pz8iKWAu
CiogYFw/VGVzdDEoKWAKKiBgXD90ZXN0Ml8/Pz9gCmBgYAoKVGhlIGZvcm1hdCBjb2RlIGBc
P3Rlc3QzKD8/PylgIHJldHVybnMgdGhlIGZvcm1hdCBvZgp0aGUgZG9jdW1lbnQ6IGA/dGVz
dDMoIj8/PyIpYC4KKiBgP1Rlc3QxKClgCiogYD90ZXN0Ml8/Pz9gCgoqKkV4YW1wbGU6IENs
YXNzZXMqKgpgYGAhCgljbGFzcyBodG1sOgoJCWRlZiB0ZXN0MSgpOgoJCQlfKCI8c3VwPkhU
TUwgaW4iKQoJCQlyZXR1cm4gInN1cGVyc2NyaXB0PC9zdXA+IgoJCXRlc3QyID0gIjxzdWI+
SFRNTCBpbiBzdWJzY3JpcHQ8L3N1Yj4iCgljbGFzcyBwZGY6CgkJZGVmIHRlc3QxKCk6CgkJ
CV9fKCIiIgoJCQkJJHt9X1xtYm94e1BERiBpbiBzdWJzY3JpcHR9JAoJCQkiIiIpCgkJdGVz
dDIgPSAgIiR7fV5cbWJveHtQREYgaW4gc3VwZXJzY3JpcHR9JCIKCWNsYXNzIGRvY2ZtdDoK
CQlkZWYgX19pbml0X18oc2VsZik6CgkJCXNlbGYuaHRtbCA9ICJIVE1MIgoJCQlzZWxmLnBk
ZiA9ICJQREYiCgkJZGVmIGdldF9odG1sKHNlbGYpOgoJCQlyZXR1cm4gc2VsZi5odG1sCgkJ
ZGVmIGdldF9wZGYoc2VsZik6CgkJCXJldHVybiBzZWxmLnBkZgoJdGVzdDMgPSBkb2NmbXQo
KQpgYGAKCmBgYG1kClRoZSBmb3JtYXQgY29kZSBgXFw/dGVzdDMuZ2V0Xz8/PygpYCByZXR1
cm5zIHRoZSBmb3JtYXQgb2YKdGhlIGRvY3VtZW50OiBgXD90ZXN0My5nZXRfPz8/KClgLgoq
IGBcPy50ZXN0MSgpYAoqIGBcPy50ZXN0MmAKYGBgCgpUaGUgZm9ybWF0IGNvZGUgYFw/dGVz
dDMuZ2V0Xz8/PygpYCByZXR1cm5zIHRoZSBmb3JtYXQgb2YKdGhlIGRvY3VtZW50OiBgP3Rl
c3QzLmdldF8/Pz8oKWAuCiogYD8udGVzdDEoKWAKKiBgPy50ZXN0MmAKCi0tLQoKIyBgIU1g
IGAhTURgIEV4YW1wbGVzIHsjc2VjOmV4YW1wbGVzfQoKIyMgSmF2YVNjcmlwdCBpbiBgaHRt
bGAgYW5kIFBsYWNlaG9sZGVyIGluIGBwZGZgCgpXaGVuIGNyZWF0aW5nIGAhTURgIHRleHQg
Zm9yIGBodG1sYCBvdXRwdXQsIHRoZSB1c2VyIG9mdGVuIHdhbnRzCmludGVyYWN0aXZpdHkg
dXNpbmcgd2lkZ2V0cyBsaWtlIHNsaWRlcnMsIGNoZWNrIGJveGVzLCBkcm9wIGRvd24gYm94
ZXMKZXRjLiBIb3dldmVyLCB3aGVuIGV4cG9ydGluZyBpbnRvIGBwZGZgIHRob3NlIGVsZW1l
bnRzIG5lZWQgdG8gYmUKcmVwbGFjZWQgd2l0aCBub24taW50ZXJhY3RpdmUgcGxhY2Vob2xk
ZXJzLiBJbiBvcmRlciB0byBkZXZlbG9wIGEgc2luZ2xlCmAhTURgIGRvY3VtZW50LCB3aGlj
aCBjYW4gYmUgcmVuZGVyZWQgaW4gYGh0bWxgIHdpdGggaW50ZXJhY3RpdmUKZWxlbWVudHMg
YW5kIGludG8gYHBkZmAgd2l0aCBwbGFjZWhvbGRlciwgdGhlIGAhTWAgZm9ybWF0IGNvZGVz
IGNhbiBiZQp1c2VkLCBzZWUgQHNlYzpmb3JtY29kZS4gVGhlIGZvbGxvd2luZyBleGFtcGxl
IGRlZmluZXMgYQpgPGlucHV0IHR5cGU9InJhbmdlIj5gIGFuZCB0d28gYDxzcGFucz5gIHdp
dGggYGlkPSJteXZhbCJgIGFuZApgaWQ9Im15cmVzImAsIGluIG9yZGVyIHRvIHVwZGF0ZSB0
aGUgdmFsdWUgb2YgJHk9c2luKHgpJCBpbiBgaHRtbGAuIEZvcgpgcGRmYCBvdXRwdXQgdGhl
IGVxdWF0aW9uIGFuZCB0aGUgdmFsdWUgcmFuZ2UgaXMgc2hvd24uCgoqKkV4YW1wbGUqKgpg
YGAhCglkZWYgcmFuZ2VfaHRtbCgpOgoJCV9fKCIiIgoJCQkkeFxpbiBbMCQgPGlucHV0IHR5
cGU9J3JhbmdlJyB2YWx1ZT0nMCcgbWluPScwJyBtYXg9JzEwMCcKCQkJb25jaGFuZ2U9IgoJ
CQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXl2YWwnKS5pbm5lckhUTUwgPSB0aGlzLnZh
bHVlOwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlyZXMnKS5pbm5lckhUTUwgPQoJ
CQlNYXRoLnNpbih0aGlzLnZhbHVlKTsiPiAkMTAwXSQKCQkiIiIpCglkZWYgcmFuZ2VfcGRm
KCk6CgkJcmV0dXJuICIkeFxpblswLDEwMF0kIgoJZGVmIGZvcm11bGFfaHRtbCgpOgoJCV9f
KCIiIgoJCQkkeT1zaW4oeCk9JCA8c3BhbiBpZD0ibXlyZXMiPjAuMDAwPC9zcGFuPgoJCQl3
aXRoICR4PSQgPHNwYW4gaWQ9Im15dmFsIj4wPC9zcGFuPgoJCSIiIikKCWRlZiBmb3JtdWxh
X3BkZigpOgoJCXJldHVybiAiJHk9c2luKHgpJCIKYGBgCgpgYGBtZAokeCQgYW5kICR5JCBh
cmUgcmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGBcP2Zvcm11bGFfPz8/KClgLgoKJHgkIG11
c3QgYmUgaW4gdGhlIHJhbmdlIGBcP3JhbmdlXz8/PygpYC4KYGBgCgokeCQgYW5kICR5JCBh
cmUgcmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGA/Zm9ybXVsYV8/Pz8oKWAuCgokeCQgbXVz
dCBiZSBpbiB0aGUgcmFuZ2UgYD9yYW5nZV8/Pz8oKWAuCgojIyBHZW5lcmF0ZSBhIEZpZ3Vy
ZSBvbi10aGUtZmx5IGR1cmluZyBQcmVwcm9jZXNzaW5nCgpUaGlzIHNlY3Rpb24gaWxsdXN0
cmF0ZXMgaG93IHB5dGhvbiBtb2R1bGVzIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZQpkb2N1bWVu
dCBjb250ZW50LiBEb2N1bWVudCBjb250ZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGBkYXRh
L2AKZGlyZWN0b3J5IG9mIHRoZSBjdXJyZW50IHByb2plY3Qgd29ya2luZyBkaXJlY3Rvcnkg
KHJlZmVyIHRvIGAhTWAKcHJvamVjdCBzdHJ1Y3R1cmUsIEBzZWM6cHJvamVjdCkKCiFbVGhp
cyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2luZyBgIU5VYCBhbmQKYCFQTGAuXShmaWd1cmUx
LnBuZyl7I2ZpZzpmaWd1cmUxfQoKW2AhTlVgXShodHRwczovL3d3dy5udW1weS5vcmcpIGFu
ZCBbYCFQTGBdKGh0dHBzOi8vd3d3Lm1hdHBsb3RsaWIub3JnKQphcmUgcG93ZXJmdWwgcHl0
aG9uIG1vZHVsZXMgZm9yIG1hdGhlbWF0aWNhbCBjb21wdXRpbmcgYW5kIHBsb3QKZ2VuZXJh
dGlvbi4gVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBnZW5lcmF0ZSBAZmln
OmZpZ3VyZTEKdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBpbmNsdWRlIGl0IGludG8gdGhl
IGRvY3VtZW50LgoKKipFeGFtcGxlKioKCmBgYCEKCWltcG9ydCBudW1weSBhcyBucAoJaW1w
b3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoJR1JFRUsgPSBsYW1iZGEgQTogY2hyKG9y
ZCh1Ilx1MDM5MSIpICsgb3JkKEEpIC0gb3JkKCJBIikpCglncmVlayA9IGxhbWJkYSBhOiBj
aHIob3JkKHUiXHUwM2IxIikgKyBvcmQoYSkgLSBvcmQoImEiKSkKCWNtMmluY2ggPSBsYW1i
ZGEgeHk6IHR1cGxlKGkvMi41NCBmb3IgaSBpbiB4eSkKCWZvbnRzaXplID0gaW50KGZvbnRz
aXplWzotMl0pICMgY29udmVydCB0byBpbnQKCWZpZ3NpemUgPSBjbTJpbmNoKGZpZ3NpemUp
ICMgY29udmVydCBmcm9tIGNtIHRvIGluY2gKCXBhcmFtcyA9IHsKCQknZmlndXJlLmZpZ3Np
emUnOiBmaWdzaXplLAoJCSdsZWdlbmQuZm9udHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy5s
YWJlbHNpemUnOiBmb250c2l6ZSwKCQknYXhlcy50aXRsZXNpemUnOiBmb250c2l6ZSwKCQkn
eHRpY2subGFiZWxzaXplJzogZm9udHNpemUsCgkJJ3l0aWNrLmxhYmVsc2l6ZSc6IGZvbnRz
aXplLAoJCSdmb250LmZhbWlseSc6ICdUaW1lcyBOZXcgUm9tYW4nCgl9CglwbHQucmNQYXJh
bXMudXBkYXRlKHBhcmFtcykKCXggPSBucC5yYW5kb20ucmFuZCg1MCkKCXkgPSBucC5yYW5k
b20ucmFuZCg1MCkKCXBsdC5maWd1cmUoKQoJcGx0LnNjYXR0ZXIoeCwgeSwgbGFiZWw9IlJh
bmRvbSBDb29yZGluYXRlcyIpCgl0ZXh0ID0gIiIuam9pbihbZ3JlZWsoaSkgZm9yIGkgaW4g
WyJhIiwgImIiLCAiYyIsICJkIl1dKQoJcGx0LmFubm90YXRlKHRleHQsIHh5PSgwLjUsMC41
KSwgeHl0ZXh0PSgwLjI1LDAuMjUpLAoJCWFycm93cHJvcHM9ZGljdChhcnJvd3N0eWxlPSct
PicsbHc9MS41KSkKCXBsdC50aXRsZSgiVHdvIFJhbmRvbSBEYXRhc2V0cyIpCglwbHQueGxh
YmVsKHIiRGF0YSAjMSAtICRcbWF0aGRlZmF1bHR7JXNfMX0kIiAlIEdSRUVLKCJDIikpCglw
bHQueWxhYmVsKHIiRGF0YSAjMiAtICRcbWF0aGRlZmF1bHR7JXNfMn0kIiAlIEdSRUVLKCJE
IikpCglwbHQuZ3JpZCgpCglwbHQubGVnZW5kKCkKCXBsdC50aWdodF9sYXlvdXQoKQoJcGx0
LnNhdmVmaWcoImRhdGEvZmlndXJlMS5wbmciLCBkcGk9ZmlnZHBpKQoJcGx0LmNsb3NlKCJh
bGwiKQpgYGAKCmBgYG1kCiFbVGhpcyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2luZyBgIU5V
YAphbmQgYCFQTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpmaWd1cmUxfQpgYGAKCiMjIEdlbmVy
YXRlIGEgU2VxdWVuY2Ugb2YgRmlndXJlcyBvbi10aGUtZmx5CgpUaGlzIHNlY3Rpb24gaWxs
dXN0cmF0ZXMgaG93IGEgc2VxdWVuY2Ugb2YgY29tcGxleCBmaWd1cmVzIGNhbiBiZQpnZW5l
cmF0ZWQgdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBob3cgdGhlIGZpZ3VyZXMgYXJlIGZv
cm1hdHRlZAp1c2luZyBweXRob24gYW5kIHJlZmVyZW5jZWQgdXNpbmcgYCFNYC4KClN1cHBv
c2Ugb25lIGV4cGVyaW1lbnQgd2hpY2ggY2FuIGJlIHJ1biBpbiBmb3VyIGRpZmZlcmVudCBz
ZXR1cHMgd2l0aApkaWZmZXJlbnQgdmFsdWVzIGZvciAkXGxhbWJkYT0kCmAhIiwgIi5qb2lu
KFsiKCVkKSAkJS4yZiRubSIlKGssIDEyNS4zMyprKSBmb3IgayBpbiByYW5nZSgxLCA1KV0p
YC4KRWFjaCBydW4gb2YgdGhlIGV4cGVyaW1lbnQgdXNpbmcgc2V0dXAgKDEpLS0oNCksIHR3
byBhZGRpdGlvbmFsCnBhcmFtZXRlcnMgJFx2YXJlcHNpbG9uJCBhbmQgJFxhbHBoYSQgYXJl
IHZhcnJpZWQgYmV0d2VlbgokMTAuMlxsZG90czMwLjZcJSQgYW5kICQwLjFcbGRvdHMwLjMk
SHogcmVzcGVjdGl2ZWx5LgoKVGhlIHJlc3VsdHMgb2YgdGhlIGV4cGVyaW1lbnRzIGZvciB0
aGUgc2V0dXBzICgxKS0tKDQpIGFyZSBzdW1tYXJpemVkCmluIHRoZSBAZmlnOmZpZ3VyZTJf
MSwgIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMgYW5kCiFAZmlnOmZpZ3VyZTJf
NC4KCioqRXhhbXBsZSoqCgpgYGAhCgluID0gMTAwCglhbHBoYSA9IHUiXHUwM2IxIgoJZXBz
aWxvbiA9IHUiXHUwM2I1IgoJbGFtZGEgPSB1Ilx1MDNiYiIKCWYgPSBsYW1iZGEgeCwgYSwg
YjogYSoobnAuc3FydCh4KStiKm5wLnNpbih4KmIpKQoJZyA9IGxhbWJkYSB4LCBhICxiLCBj
OiBucC5mYWJzKGYoeCwgYSwgYikgLSBmKGMsIGEsIGIpKSArIGMKCWRhdCA9IG5wLnplcm9z
KChuLTEsIDMsIDMsIDQpLCBkdHlwZT1ucC5mbG9hdDMyKQoJY29scyA9IFsicmVkIiwgImdy
ZWVuIiwgImJsdWUiXQoJbWFyayA9IFsibyIsICJ4IiwgIjwiXQoJeCA9IG5wLmFycmF5KFs1
MC4qeC9uIGZvciB4IGluIHJhbmdlKDEsIG4pXSwgZHR5cGU9bnAuZmxvYXQzMikKCWZvciBr
LCBjIGluIGVudW1lcmF0ZShbMTAuLCAyMC4sIDMwLiwgNDAuXSk6CgkJZm9yIGksIGEgaW4g
ZW51bWVyYXRlKFsxLCAyLCA0XSk6CgkJCWZvciBqLCBiIGluIGVudW1lcmF0ZShbMC4yLCAw
LjQsIDAuNl0pOgoJCQkJZGF0WzosIGksIGosIGtdID0gZyh4LCBhLCBiLCBjKQoJCXBsdC5m
aWd1cmUoKQoJCWZvciBqIGluIHJhbmdlKDMpOgoJCQlmb3IgaSBpbiByYW5nZSgzKToKCQkJ
CWxhYmVsX2kgPSAiJXM9JS4xZiUlIiAlIChlcHNpbG9uLCAoaSsxKSoxMC4yKSBcCgkJCQkJ
aWYgaiA9PSAwIGVsc2UgTm9uZQoJCQkJbGFiZWxfaiA9ICIlcz0lLjFmSHoiICUgKGFscGhh
LCAoaisxKS8xMC4pIFwKCQkJCQlpZiBpID09IDAgZWxzZSBOb25lCgkJCQl5ID0gZGF0Wzos
IGksIGosIGtdLmZsYXR0ZW4oKQoJCQkJcGx0LnBsb3QoeCwgeSwgY29sb3I9Y29sc1tpXSwg
bHc9MC43NSwgbGFiZWw9bGFiZWxfaSkKCQkJCXBsdC5zY2F0dGVyKHhbMTo6NF0sIHlbMTo6
NF0sIGNvbG9yPSJibGFjayIsCgkJCQkJbWFya2VyPW1hcmtbal0sIGx3PTAuNSwgcz01LCBs
YWJlbD1sYWJlbF9qKQoJCWsgPSBrICsgMQoJCWt2YWwgPSBrKjEyNS4zMwoJCXBsdC50aXRs
ZSgiRXhwZXJpbWVudCBTZXR1cCAjJWQ6ICVzPSUuMmZubSIgJSAoaywgbGFtZGEsIGt2YWwp
KQoJCXBsdC54bGFiZWwoIlRpbWUgW3NdIikKCQlwbHQueWxhYmVsKCJJbnRlbnNpdHkgW2tn
L3PCs10iKQoJCXBsdC5ncmlkKCkKCQlwbHQubGVnZW5kKCkKCQlwbHQudGlnaHRfbGF5b3V0
KCkKCQlwbHQuc2F2ZWZpZygiZGF0YS9maWd1cmUyLSVkLnBuZyIgJSBrLCBkcGk9ZmlnZHBp
KQoJCXBsdC5jbG9zZSgiYWxsIikKCQlfXyhmIiIiCgkJCSFbVGhpcyBpcyB0aGUgcmVzdWx0
IG9mIHRoZSBleHBlcmltZW50IGFjY29yZGluZwoJCQl0byB0aGUgc2V0dXAgI3trfSB3aXRo
ICR7bGFtZGF9PXtrdmFsfSRubS4gVGhlIHBhcmFtZXRlcnMKCQkJJHtlcHNpbG9ufSQgYW5k
ICR7YWxwaGF9JCBhcmUgdmFycmllZCBiZXR3ZWVuCgkJCSQxMC4yXGxkb3RzMzAuNlwlJCBh
bmQgJDAuMVxsZG90czAuMyRIegoJCQlyZXNwZWN0aXZlbHkuXShmaWd1cmUyLXtrfS5wbmcp
e3sjZmlnOmZpZ3VyZTJfe2t9fX0KCgkJIiIiKQpgYGAKCi0tLQoKKlRoYW5rcyBmb3IgcmVh
ZGluZywgcGxlYXNlIHRyeSBgbWFya3lgLioKCi0tLQoKIyBSZWZlcmVuY2VzCg==
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmAheDowNWRgfGAheTouNGZgCg==
'''
pack_marky_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIERvY3VtZW50YXRpb24uCj4gVGhpcyBkb2N1
bWVudCByZXByZXNlbnRzIHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nl
c3NpbmcgcHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+
IEZvciBkb2N1bWVudGF0aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4g
W2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5
KS4KCi0tLQoKYGBgcHl0aG9uCiEhISBtYXJreS5tZCByYXcgPj4xCmBgYAo=
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpoZWFkZXItaW5jbHVkZXMtLXBkZjoK
ICAgXHVzZXBhY2thZ2V7bXVsdGljb2x9CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFs
c2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1Mv
VS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6
aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNh
cGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3Qq
KiAtLSBUaGlzIGlzIGEgYG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvcgo+IGlsbHVz
dHJhdGluZyBgbWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhlIGBt
YXJreWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudCBjYW4gYmUgcmVhZAo+IFtoZXJl
XShxdWljay1zcmMuPz8/KS4KPiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIg
dG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1h
bm43L21hcmt5KSwKPiBbYG1hcmt5YCBkb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pIG9yIHRo
ZQo+IHNpbXBsZSBbYG1hcmt5YCBleGFtcGxlXShleGFtcGxlLj8/PykuCgotLS0KCiMgSW50
cm9kdWN0aW9uCgpUaGlzIGlzIGEgYG1hcmt5YCBxdWlja3N0YXJ0IGRvY3VtZW50IGZvciBp
bGx1c3RyYXRpbmcgYG1hcmt5YCBtYXJrdXAKdXNpbmcgc2ltcGxlIGV4YW1wbGVzLiBUaGlz
IGRvY3VtZW50IGlzIHRoZSByZW5kZXJlZCB2ZXJzaW9uIG9mCnRoZSBzb3VyY2UgY29kZSBw
cmVzZW50ZWQgW2hlcmVdKHF1aWNrLXNyYy4/Pz8pLiBUaGUgYG1hcmt5YCBtYXJrdXAKaXMg
Y29tcGF0aWJsZSB3aXRoIHN0YW5kYXJkIE1hcmtkb3duIGFuZCBjYW4gYmUgcmVhZCBhcy1p
cy4KVGhpcyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBvdXRwdXQgb2YgYG1hcmt5YCBhZnRl
ciBwcm9jZXNzaW5nCnB5dGhvbiBjb2RlLCB3aGljaCBpcyBlbWJlZGRlZCBpbnRvIHRoZSBk
b2N1bWVudCBpdHNlbGYuCkluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhlIGV4YW1wbGVzIGFu
ZCBzZWUgdGhlIGNvbXBsZXRlCmBtYXJreWAgc3ludGF4LCB0aGUgc291cmNlIGNvZGUgb2Yg
dGhpcyBmaWxlIGNhbiBiZSByZWFkCltoZXJlXShxdWljay1zcmMuPz8/KS4gVGhlIGNvbXBs
ZXRlIGRvY3VtZW50YXRpb24gb2YgYG1hcmt5YAppcyBhdmFpbGFibGUgW2hlcmVdKG1hcmt5
Lj8/PykKCi0tLQoKIyBNYXJrZG93bgoKYG1hcmt5YCBpcyBhIE1hcmtkb3duIHByZXByb2Nl
c3NvciBhbGxvd2luZyB0byB0cmFuc2Zvcm0gTWFya2Rvd24KdGV4dCB1c2luZyBweXRob24u
IFRoZSBwcmVwcm9jZXNzZWQgTWFya2Rvd24gdGV4dCBpcyByZW5kZXJlZCB0byBgcGRmYAph
bmQgYGh0bWxgIChvdGhlciBmb3JtYXRzIHVzaW5nIGBwYW5kb2NgKS4gYHBhbmRvY2AgaGFz
IGEgcG93ZXJmdWwgc2V0Cm9mIE1hcmtkb3duIGV4dGVuc2lvbnMgc3VwcG9ydGluZyBzdHJ1
Y3R1cmVkIHdyaXRpbmcgYXMgd2VsbCBhcwpiaWJsaW9ncmFwaHksIGZpZ3VyZSByZWZlcmVu
Y2luZywgdGFibGUgcmVmZXJlbmNpbmcsIHRleC1zdHlsZQplcXVhdGlvbnMgd2l0aCByZWZl
cmVuY2luZyBldGMuIChyZWZlciB0byBTY2llbnRpZmljIFdyaXRpbmcgaW4KTWFya2Rvd24s
IFtgbWFya3lgIERvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykpLgoKVGhlIHJlbmRlcmluZyBv
ZiBNYXJrZG93biB0ZXh0IGludG8gYGh0bWxgIGFuZCBgcGRmYCBjb25zaXN0cyBvZiB0aHJl
ZQpzdGVwcyB3aGljaCBhcmUgaWxsdXN0cmF0ZWQgdXNpbmcgdGhlIGBtYXJreWAgZG9jdW1l
bnRhdGlvbgpgbWQvbWFya3kubWRgLgoKMS4gKlByZXByb2Nlc3NpbmcqIFwKICAgKHByb2Nl
c3MgYG1hcmt5YCBtYXJrdXAsIHJ1biBjb2RlLCBnZW5lcmF0ZSBjb250ZW50KQoJKiBJbnB1
dDogYG1hcmt5YCBNYXJrZG93biB0ZXh0OiBgbWQvbWFya3kubWRgCgkqIE91dHB1dDogcGFu
ZG9jIE1hcmtkb3duIHRleHQ6IGBidWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcqIFwKCShh
cHBseSBmb3JtYXQgc3BlY2lmaWMgY29kZSBmb3IgYGh0bWxgIGFuZCBgcGRmYCkKCSogSW5w
dXQ6IHBhbmRvYyBNYXJrZG93biB0ZXh0OiBgYnVpbGQvbWFya3kubWRgCgkqIE91dHB1dAoJ
MS4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBodG1sYDogYGJ1aWxkL21hcmt5Lmh0bWwu
bWRgCgkyLiBwYW5kb2MgTWFya2Rvd24gdGV4dCBmb3IgYHBkZmA6IGBidWlsZC9tYXJreS5w
ZGYubWRgCjMuICpSZW5kZXJpbmcqIFwKICAgKHJlbmRlciBgaHRtbGAgYW5kIGBwZGZgIGRv
Y3VtZW50IHVzaW5nIGBwYW5kb2NgKQoJKiBJbnB1dAoJMS4gcGFuZG9jIE1hcmtkb3duIHRl
eHQgZm9yIGBodG1sYDogYGJ1aWxkL21hcmt5Lmh0bWwubWRgCgkyLiBwYW5kb2MgTWFya2Rv
d24gdGV4dCBmb3IgYHBkZmA6IGBidWlsZC9tYXJreS5wZGYubWRgCgkqIE91dHB1dAoJMS4g
YGh0bWxgIGRvY3VtZW50OiBgaHRtbC9tYXJreS5odG1sYAoJMi4gYHBkZmAgZG9jdW1lbnQ6
IGBwZGYvbWFya3kucGRmYAoKVGhlIHdob2xlIHByb2Nlc3MgaXMgZWNhcHN1bGF0ZWQgaW50
byBhIHB5dGhvbiBzY3JpcHQgYW5kIGEgTWFrZWZpbGUuClJlbmRlcmluZyBkb2N1bWVudHMg
dXNpbmcgYG1hcmt5YCByZXF1aXJlcyB0byB3cml0ZSBNYXJrZG93biB0ZXh0CmFuZCBydW4g
YG1ha2UgYWxsYC4KCi0tLQoKIyBBdXRvbWF0ZWQgUmVwb3J0aW5nCgpNYXJrZG93biB0ZXh0
IHdpdGggZW1iZWRkZWQgY29kZSBzbmlwcGV0cyBpcyBhIHBvd2VyZnVsIHBhcmFkaWdtIGZv
cgphdXRvbWF0ZWQgdGVjaG5pY2FsIGFuZCBzY2llbnRpZmljIHJlcG9ydGluZyBhbmQgcG9z
c2libHkgb3RoZXIKZG9jdW1lbnRzLiBPbiBvbmUgaGFuZCBkYXRhIGNhbiBiZSBvcmdhbml6
ZWQgYWNjb3JkaW5nIHRvIHRoZSBkb2N1bWVudApzdHJ1Y3R1cmUgdXNpbmcgYWxnb3JpdGht
cyBlbWJlZGRlZCBpbiB0aGUgcmVwb3J0IGl0c2VsZiwgYW5kIG9uIHRoZQpvdGhlciBoYW5k
IHRoZSBkYXRhIGNhbiBiZSBpbnNlcnRlZCBpbiB0aGUgcmVwb3J0IGRpcmVjdGx5IGZyb20K
dmFyaWFibGVzLiBUaGlzIGVsbGltaW5hdGVzIHRoZSBuZWVkIGZvciBtYW51YWwgY29weWlu
ZyBvZiBkYXRhIGludG8KdGhlIHRleHQgYW5kIGFsbG93cyB0byB1cGRhdGUgb3IgcmVwcm9k
dWNlIHRoZSByZXBvcnQgYXV0b21hdGljYWxseQpmb3IgdGhlIHNhbWUgYW5kIG90aGVyIGRh
dGEuIFVzaW5nIHRoZSBzaW1wbGUgYG1hcmt5YCBzeW50YXggdGhlIHVzZXIKY2FuIGNvbmNl
bnRyYXRlIG9uIGRvY3VtZW50YXRpb24gd3JpdGluZyBmcm9tIHRoZSBNYXJrZG93biBwZXJz
cGVjdGl2ZQphbmQgYXNzaXN0IHRoZSBjcmVhdGlvbiBvZiBkb2N1bWVudCBjb250ZW50IHVz
aW5nIHB5dGhvbiBjb2RlCnNuaXBwZXRzLgoKYHBhbmRvY2AgZmlsdGVycyAocmVmZXIgdG8g
UmVsYXRlZCBXb3JrLCBbYG1hcmt5YCBEb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pKQphbGxv
dyB0cmFuc2Zvcm1pbmcgdGhlIGRvY3VtZW50IHdoaWxlIHJlbmRlcmluZyBpdC4gYHBhbmRv
Y2AgZmlsdGVycwpvcGVyYXRlIG9uIGFuIGludGVybmFsIGFic3RyYWN0IHN5bnRheCB0cmVl
IChBU1QpIHJlcHJlc2VudGF0aW9uLAp0aGVyZWZvcmUgdGhlIHVzZXIgbXVzdCBleHByZXNz
IGR5bmFtaWNhbGx5IGNyZWF0ZWQgZG9jdW1lbnQgY29udGVudAphcyBub2RlcyBpbiB0aGUg
Zm9ybWF0IG9mIHRoZSBBU1QuIGBtYXJreWAgdGFrZXMgYSBzbGlnaHQgZGlmZmVyZW50CmFw
cHJvYWNoIGFuZCBvcGVyYXRlcyBvbiB0aGUgTWFya2Rvd24gdGV4dCBpdHNlbGYsIGJlZm9y
ZSBpdCBpcyBwYXJzZWQKYW5kIHJlbmRlcmVkLgoKUHl0aG9uIGNvZGUgaXMgZW1iZWRkZWQg
aW50byB0aGUgZG9jdW1lbnQgd2l0aCBhIHNpbXBsZSBtYXJrdXAgc3ludGF4CnNpbWlsYXIg
dG8gW1JtYXJrZG93bl0oaHR0cHM6Ly93d3cucm1hcmtkb3duLm9yZykKdXNpbmcgY29kZSBi
bG9ja3MgYW5kIGlubGluZSBleHByZXNzaW9ucy4gYG1hcmt5YCBwYXJzZXMgdGhlIGNvZGUs
CmV4ZWN1dGVzIGl0IGFuZCB3cml0ZXMgdGhlIHJlc3VsdHMgYmFjayBpbnRvIHRoZSBNYXJr
ZG93biB0ZXh0LiBUaGUKY29kZSBjYW4gcHJvZHVjZSBvdXRwdXQgdXNpbmcgYWxnb3JpdGht
cyBvciBvdXRwdXQgZm9ybWF0dGVkIHN0cmluZwp2YXJpYWJsZXMuIGBtYXJreWAgYWxzbyBh
bGxvd3MgZm9yIHRoZSBpbnNlcnRpb24gb2YgZm9ybWF0IGRlcGVuZGVudApyYXcgY29kZSBp
biBgaHRtbGAgYW5kICp0ZXgqIChmb3IgYHBkZmAgIGRvY3VtZW50cykuCgoxLiBjb2RlIHNu
aXBwZXRzIGFyZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCB0ZXh0CjIuIGNvZGUgc25p
cHBldHMgYXJlIGV4ZWN1dGVkIGR1cmluZyBwcmVwcm9jZXNzaW5nCjMuIGNvZGUgcHJvZHVj
ZXMgdGV4dCBmb3IgdGhlIE1hcmtkb3duIGRvY3VtZW50CjQuIGNvZGUgdmFyaWFibGVzIGFy
ZSBkaXNwbGF5ZWQgaW4gdGhlIGRvY3VtZW50IHRleHQKNS4gZm9ybWF0IGRlcGVuZGVudCBj
b2RlIGlzIGFwcGxpZWQgZm9yIGBodG1sYCBhbmQgYHBkZmAKCi0tLQoKIyBEb3dubG9hZCBh
bmQgUnVuIGBtYXJreWAKCmBtYXJreWAgaXMgTWFya2Rvd24gcHJlcHJvY2Vzc29yIGFsbG93
aW5nIHRvIGV4ZWN1dGUgZW1iZWRkZWQgcHl0aG9uCmNvZGUgaW4gTWFya2Rvd24gZG9jdW1l
bnRzLiBBZnRlciBwcmVwcm9jZXNzaW5nLCBhIHJlZ3VsYXIgTWFya2Rvd24KZmlsZSBpcyBw
cmVzZW50LCB3aGljaCBpcyByZW5kZXJlZCBpbnRvIGBodG1sYCBhbmQgYHBkZmAgdXNpbmcK
YHBhbmRvY2AuIGBtYXJreWAgaGFuZGxlcyBhbGwgdGhpcyBzdGVwcyB1c2luZyBhIE1ha2Vm
aWxlLgpgbWFya3lgIGlzIGEgc2luZ2xlLWZpbGUgc2NyaXB0IHdoaWNoIGRlcGVuZHMgb24g
YHB5dGhvbmAgKD49My42KSwKYHBhbmRvY2AgKD49Mi4xMSksIGBweXlhbWxgIGFuZCBgcGFu
ZG9jLXhub3NgLgoKKipJbnN0YWxsaW5nIERlcGVuZGVuY2llcyoqCgpgcGFuZG9jYCBiaW5h
cmllcyBmb3IgRGViaWFuLWJhc2VkIExpbnV4IGFyZSByZWxlYXNlZApbaGVyZV0oaHR0cHM6
Ly9naXRodWIuY29tL2pnbS9wYW5kb2MvcmVsZWFzZXMpLgpgcHl5YW1sYCBpcyBpbnN0YWxs
ZWQgdXNpbmcgdGhlIGxpbnV4IHBhY2thZ2UgbWFuYWdlciBvciBgcGlwYCBhbmQKYHBhbmRv
Yy14bm9zYCBjb25zaXN0cyBvZiB0aGUgY29tcG9uZW50cyBgZmlnbm9zYCwgYHNlY25vc2As
IGBlcW5vc2AKYW5kIGB0YWJsZW5vc2Agd2hpY2ggYXJlIGluc3RhbGxlZCB1c2luZyBgcGlw
YC4gRGVwZW5kaW5nIG9uIHRoZQpsaW51eCBpbnN0YWxsYXRpb24gbWF5YmUgYHBpcDNgIGhh
cyB0byBiZSB1c2VkLgoKYGBgYmFzaApwaXAgaW5zdGFsbCBweXlhbWwKcGlwIGluc3RhbGwg
cGFuZG9jLWZpZ25vcwpwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCnBpcCBpbnN0YWxsIHBh
bmRvYy1lcW5vcwpwaXAgaW5zdGFsbCBwYW5kb2MtdGFibGVub3MKYGBgCgoqKkRvd25sb2Fk
IGBtYXJreWAgU2NyaXB0KioKCmBtYXJreWAgaXMgZG93bmxvYWRlZCB1c2luZyB0aGUgZm9s
bG93aW5nIGNvbW1hbmRzLgoKYGBgYmFzaApjZCAkSE9NRQpnaXQgY2xvbmUgaHR0cHM6Ly9n
aXRodWIuY29tL2xlaG1hbm43L21hcmt5LmdpdApjZCBtYXJreQpgYGAKCkFsdGVybmF0aXZl
bHksIG1hcmt5IGNhbiBiZSBvYnRhaW5lZCBkaXJldGx5IHdpdGhvdXQgYGdpdGA6CgpgYGBi
YXNoCmNkICRIT01FCm1rZGlyIG1hcmt5CmNkIG1hcmt5CndnZXQgaHR0cHM6Ly9yYXcuZ2l0
aHVidXNlcmNvbnRlbnQuY29tL2xlaG1hbm43L21hcmt5L21haW4vbWFya3kucHkKY2htb2Qg
K3ggbWFya3kucHkKYGBgCgoqKkluaXRpYWxpemUgYG1hcmt5YCBFbnZpcm9ubWVudCoqCgpU
aGUgYG1hcmt5YCBlbnZpcm9ubWVudCBjb25zaXN0cyBvZiB0aGUgTWFrZWZpbGUgYW5kIHRo
ZSBkb2N1bWVudGF0aW9uLgpUaGUgYG1hcmt5YCBNYWtlZmlsZSwgZG9jdW1lbnRhdGlvbiBh
bmQgcXVpY2tzdGFydCBhcmUgdW5wYWNrZWQgZnJvbQp0aGUgYG1hcmt5LnB5YCBzY3JpcHQg
ZmlsZSBpbnRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LgpUaGUgYG1hcmt5YCBl
bnZpcm9ubWVudCBpcyBpbml0aWFsaXplZCB1c2luZyB0aGUgZm9sbG93aW5nIGNvbW1hbmRz
LgoKYGBgYmFzaApjZCAkSE9NRQpjZCBtYXJreQouL21hcmt5LnB5IC0taW5pdApXUklURSAu
L21kL21hcmt5Lm1kCldSSVRFIC4vbWQvbWFya3kubWRpCldSSVRFIC4vbWQvbWFya3ktc3Jj
Lm1kCldSSVRFIC4vbWQvcXVpY2tzdGFydC5tZApXUklURSAuL21kL3F1aWNrLXNyYy5tZApX
UklURSAuL21kL2V4YW1wbGUubWQKV1JJVEUgLi9tZC9leGFtcGxlLXNyYy5tZApXUklURSAu
L2RhdGEvbWFya3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBgCjIuIGBtYWtlIGFsbC1odG1s
IGh0dHBkYAozLiBgbWFrZSBhbGwtcGRmYApgYGAKCkR1cmluZyBpbml0aWFsaXphdGlvbiBg
bWFya3lgIGNyZWF0ZXMgdHdvIGRpcmVjdG9yaWVzIGBtZC9gIGFuZCBgZGF0YS9gLgpgbWQv
YCBpcyB0aGUgZGlyZWN0b3J5IHdoaWNoIGNvbnRhaW5zIHRoZSBNYXJrZG93biB0ZXh0IHRv
IGJlIHJlbmRlcmVkCmludG8gYGh0bWxgIGFuZCBgcGRmYC4gYGRhdGEvYCBpcyB0aGUgcmVz
b3VyY2UgZGlyZWN0b3J5IHdoaWNoIGNvbnRhaW5zCmJpYmxpb2dyYXBoeSwgaW1hZ2VzLCB2
aWRlb3MgYW5kIG90aGVyIGFzc2V0cy4KCioqUmVuZGVyIERvY3VtZW50YXRpb24gYW5kIEV4
YW1wbGVzKioKCklmIGFsbCBkZXBlbmRlbmNpZXMgaGF2ZSBiZWVuIGluc3RhbGxlZCBhY2Nv
cmRpbmdseSBhbmQgdGhlIGBtYXJreWAKZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQsIGBt
YXJreWAgY2FuIGJlIHVzZWQgdG8gcmVuZGVyIGEgbG9jYWwKY29weSBvZiB0aGUgZG9jdW1l
bnRhdGlvbiwgdGhlIHF1aWNrc3RhcnQgYW5kIHRoZSBleGFtcGxlLgoKVGhlIGZvbGxvd2lu
ZyBjb21tYW5kcyByZW5kZXIgdGhlIE1hcmtkb3duIHRleHQgb2YgdGhlIGRvY3VtZW50YXRp
b24uCgpgYGBiYXNoCmNkICRIT01FCmNkIG1hcmt5Cm1ha2UgYWxsLXBkZgptYWtlIGFsbC1o
dG1sCmBgYAoKRHVyaW5nIGBtYWtlYCBhIG5ldyBkaXJlY3RvcnkgYGJ1aWxkL2AgaXMgY3Jl
YXRlZCwgd2hpY2ggY29udGFpbnMKdGVtcG9yYXJ5IGZpbGVzIChwcmVwcm9jZXNzZWQgTWFy
a2Rvd24gdGV4dCwgbGlua2VkIHRleHQgZm9yIGBodG1sYAphbmQgYHBkZmApLiBUaGUgcmVz
dWx0aW5nIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIGFyZSBwbGFjZWQgaW5zaWRlCmBo
dG1sL2AgYW5kIGBwZGYvYC4gRm9yIHJlbmRlcmluZyBgcGRmYCBhIHRleCBlbnZpcm9ubWVu
dCBsaWtlCmB0ZXhsaXZlYCBuZWVkcyB0byBiZSBpbnN0YWxsZWQuIEZvciByZW5kZXJpbmcg
dGhlIGBodG1sYCBkb2N1bWVudHMsCmBwYW5kb2NgIHJlcXVpcmVzIGludGVybmV0IGFjY2Vz
cywgYmVjYXVzZSBqYXZhIHNjcmlwdHMgYW5kIHN0eWxlCnNoZWV0cyBhcmUgZmV0Y2hlZCBm
cm9tIGNvbnRlbnQgZGVsaXZlcnkgbmV0d29ya3MuCgoqKmBtYXJreWAgTWFrZWZpbGUqKgoK
VGhlIGBtYXJreWAgTWFrZWZpbGUgY29vcmRpbmF0ZXMgdGhlIHRocmVlIHN0ZXBzIG9mIHRo
ZSBgbWFya3lgCmRvY3VtZW50IHByb2Nlc3NpbmcgcGlwZWxpbmU6IHByZXByb2Nlc3Npbmcs
IGxpbmtpbmcgYW5kIHJlbmRlcmluZy4KVGhlIGBtYXJreWAgTWFrZWZpbGUgc3VwcG9ydHMg
c2V2ZXJhbCB0YXJnZXRzIGZvciBkaXNwbGF5aW5nIGhlbHAKb3IgcmVuZGVyaW5nIGFsbCwg
bXVsdGlwbGUgb3Igc3BlY2lmaWMgZG9jdW1lbnRzLgoKKk1ha2VmaWxlIFRhcmdldHMqCgox
LiBgbWFrZSBoZWxwYDogZGlzcGxheSBoZWxwIG1lc3NhZ2Ugb24gdGhlIGNvbnNvbGUKMi4g
YG1ha2UgY2hlYXRgOiBkaXNwbGF5IHRoZSBgbWFya3lgIG1hcmt1cCBDaGVhdCBTaGVldAoz
LiBgbWFrZSBzY2FuYDogc2NhbiBmb3IgbmV3IGRvY3VtZW50cyBgbWQvKi5tZGAgYW5kIHVw
ZGF0ZSBNYWtlZmlsZQo0LiBgbWFrZSBhbGxgOiByZW5kZXIgYWxsIGRvY3VtZW50cyBgbWQv
Ki5tZGAgaW50byBgaHRtbGAgYW5kIGBwZGZgCjUuIGBtYWtlIGFsbC1wZGZgOiByZW5kZXIg
YWxsIGRvY3VtZW50cyBgbWQvKi5tZGAgaW50byBgcGRmYAo2LiBgbWFrZSBhbGwtaHRtbGA6
IHJlbmRlciBhbGwgZG9jdW1lbnRzIGBtZC8qLm1kYCBpbnRvIGBodG1sYAo3LiBgbWFrZSBo
dHRwZGA6IHN0YXJ0IHB5dGhvbiB3ZWJzZXJ2ZXIgaW4gYGh0bWwvYAo4LiBgbWFrZSBjbGVh
bmA6IHJlbW92ZSBhbGwgZmlsZXM6IGBidWlsZC8qYCwgYHBkZi8qYCwgYGh0bWwvKmAKCipN
YWtlIFNpbmdsZSBEb2N1bWVudCoKCldoZW4gcnVubmluZyBgbWFrZSBhbGxgLCBgbWFya3lg
IHJlbmRlcnMgYWxsIGRvY3VtZW50cywgd2hpY2ggY2FuCmJlIHVuZGVzaXJhYmxlIGlmIG9u
bHkgb25lIHBhcnRpY3VsYXIgZG9jdW1lbnQgc2hhbGwgYmUgcmVuZGVyZWQuCkJ5IGBtYWtl
IHNjYW5gLCBgbWFya3lgIHNjYW5zIHRoZSBkaXJlY3RvcnkgYG1kLyoubWRgIGZvciBuZXcg
TWFya2Rvd24KZG9jdW1lbnRzIHRvIGJlIHByb2Nlc3NlZC4gRm9yIGVhY2ggZG9jdW1lbnQs
IHdoaWNoIGhhcyBiZWVuIGZvdW5kLApgbWFya3lgIHNldHMgdXAgYWxpYXMgdGFyZ2V0cyBp
biBvcmRlciB0byBkZWJ1ZyB0aGUgcHJlcHJvY2Vzc2luZywKbGlua2luZyBhbmQgcmVuZGVy
aW5nIG9mIHRoaXMgZG9jdW1lbnQuCgpBc3N1bWluZyB0aGUgZG9jdW1lbnQgYG1kL21hcmt5
Lm1kYCBzaGFsbCBiZSByZW5kZXJlZCBzdGVwIGJ5IHN0ZXAsCmBtYXJreWAgaW50cm9kdWNl
cyB0aGUgZm9sbG93aW5nIHRhcmdldHMuCgoxLiAqUHJlcHJvY2Vzc2luZyo6IGBtYWtlIG1k
LW1hcmt5YCBcCgkqIGBtZC9tYXJreS5tZGAgLT4gYGJ1aWxkL21hcmt5Lm1kYAoyLiAqTGlu
a2luZyBgaHRtbGAqOiBgbWFrZSBsaHRtbC1tYXJreWAgXAoJKiBgYnVpbGQvbWFya3kubWRg
IC0+IGBidWlsZC9tYXJreS5odG1sLm1kYAozLiAqTGlua2luZyBgcGRmYCo6IGBtYWtlIGxw
ZGYtbWFya3lgIFwKCSogYGJ1aWxkL21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kucGRmLm1k
YAo0LiAqUmVuZGVyaW5nIGBodG1sYCo6IGBtYWtlIGh0bWwtbWFya3lgCgkqIGBidWlsZC9t
YXJreS5odG1sLm1kYCAtPiBgaHRtbC9tYXJreS5odG1sYAo1LiAqUmVuZGVyaW5nIGBwZGZg
KjogYG1ha2UgcGRmLW1hcmt5YAoJKiBgYnVpbGQvbWFya3kucGRmLm1kYCAtPiBgcGRmL21h
cmt5LnBkZmAKCi0tLQoKIyBXcml0ZSBBIE5ldyBEb2N1bWVudAoKSW4gb3JkZXIgdG8gcmVu
ZGVyIGEgbmV3IGRvY3VtZW50IHRoZSBNYXJrZG93biB0ZXh0IG5lZWRzIHRvIGJlIHNhdmVk
CnRvIGEgZmlsZSBsb2NhdGVkIGluIGBtZC9leGFtcGxlLm1kYCB3aGljaCBjYW4gYmUgZm91
bmQgcmVuZGVyZWQKW2hlcmVdKGV4YW1wbGUuPz8/KS4gVGhlIGZvbGxvd2luZyBNYXJrZG93
biBzbmlwcGV0CmNhbiBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQuCgpgYGB5YW1sCiEh
ISBleGFtcGxlLm1kIHJhdyA+PjEKYGBgCgotLS0KCiMgQ29kZSBCbG9ja3MKCkNvZGUgYmxv
Y2tzIGFyZSBlbWJlZGRlZCBpbiBNYXJrZG93biB1c2luZyBmZW5jZWQgY29kZSB1c2luZwpl
aXRoZXIgdGhlIGBcIWAgb3IgYFwhIWAgZmxhZyBmb3IgZGlzcGxheWVkIGFuZCBoaWRkZW4g
Y29kZQpyZXNwZWN0aXZlbHkuCgpgYGB0ZXh0CiAgICBgYGBcIQoJQ09ERV9CTE9DS19TSE9X
TgogICAgYGBgCgogICAgYGBgXCEhCglDT0RFX0JMT0NLX0hJRERFTgogICAgYGBgCmBgYAoK
KipEaXNwbGF5IGFuZCBFeGVjdXRlIENvZGUqKgoKVGhpcyBjb2RlIGJsb2NrIGFubm90YXRl
ZCB3aXRoIGAhYCBpcyBkaXNwbGF5ZWQgYW5kIGV4ZWN1dGVkLgoKYGBgIQoJaW1wb3J0IG1h
dGgKCXggPSBtYXRoLnNxcnQoMikKYGBgCgoqKkV4ZWN1dGUgQ29kZSB3aXRob3V0IERpc3Bs
YXkqKgoKVGhlIGNvZGUgYmxvY2sgYW5ub3RhdGVkIHdpdGggYCFgIGlzIG5vdCBkaXNwbGF5
ZWQsIGJ1dCBleGVjdXRlZC4KCmBgYCEhCgl5ID0geCArIDEKYGBgCgoqKkRpc3BsYXkgQ29k
ZSBidXQgZG8gbm90IEV4ZWN1dGUqKgoKVGhpcyBjb2RlIGJsb2NrIGlzIGRpc3BsYXllZCBh
cyBweXRob24sIGJ1dCBub3QgZXhlY3V0ZWQuCgpgYGBweXRob24KCXogPSAwLi8wLgpgYGAK
CioqVXNpbmcgdGhlIFB5dGhvbiBgaW1wb3J0YCBTdGF0ZW1lbnQqKgoKTGFyZ2UgY29kZSBi
bG9ja3MgY2FuIGJlIGltcG9ydGVkIGZyb20gcHl0aG9uIG1vZHVsZXMgYW5kIHRoZQpgaW1w
b3J0YCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQgZm9yIGxvYWRpbmcgaW5zdGFsbGVkIGxpYnJh
cmllcy4KCmBgYHB5dGhvbgoJaW1wb3J0IG51bXB5CglpbXBvcnQgc3lzCglzeXMucGF0aC5h
cHBlbmQoIi4iKQoJI2ltcG9ydCBtb2R1bGVfaW5fd29ya2luZ19kaXJlY3RvcnkKYGBgCgot
LS0KCiMgSW5saW5lIENvZGUKCklubGluZSBzdGF0ZW1lbnRzIGFyZSBkaXJlY3RseSBlbWJl
ZGRlZCBpbnRvIHRoZSB0ZXh0IGZsb3cgdXNpbmcKZXhwcmVzc2lvbnMgYW5kIHZhcmlhYmxl
cyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nCnN5bnRheCBgYCBgXCFFWFBSRVNTSU9OYCBgYCBv
ciBgYCBgXCFWQVJJQUJMRWAgYGAuClRoZSBvdXRwdXQgb2YgdmFyaWFibGVzIGNhbiBiZSBm
b3JtYXR0ZWQgdXNpbmcgdGhlCmBgIGBcIVZBUklBQkxFWzpGT1JNQVRdYCBgYCBvciBgYCBg
XCFFWFBSRVNTSU9OWzpGT1JNQVRdYCBgYApzdGF0ZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBw
eXRob24gb3BlcmF0b3IgYHs8dmFyaWFibGU+Wzo8Zm9ybWF0Pl19YAppbXBsZW1lbnRlZCBp
biB0aGUKW2BzdHIuZm9ybWF0KClgXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJh
cnkvc3RyaW5nLmh0bWwjZm9ybWF0c3RyaW5ncykKc3BlY2lmaWNhdGlvbiBhbmQgdGhlIG9w
ZXJhdG9yIGB7PGV4cHJlc3Npb24+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbgpbYGZg
LXN0cmluZ3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxf
YW5hbHlzaXMuaHRtbCNmLXN0cmluZ3MpLgoKKipJbmxpbmUgRm9ybWF0dGVkIE91dHB1dCoq
CgpUaGUgcmVzdWx0IG9mICRcc3FydHsyfSQgaXM6CiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBg
ISBtYXRoLnNxcnQoMi4wKWAKKiBmb3JtYXR0ZWQgb3V0cHV0OiBgISAiJS40ZiIgJSBtYXRo
LnNxcnQoMi4wKWAKClRoZSB2YXJpYWJsZSAkeCQgaXMKKiB1bmZvcm1hdHRlZCBvdXRwdXQ6
IGAhIHhgCiogZm9ybWF0dGVkIG91dHB1dDogYCEgeDouNGZgCgpUaGUgdmFyaWFibGUgJHk9
eCsxJCBpcwoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgeWAKKiBmb3JtYXR0ZWQgb3V0cHV0
OiBgISB5Oi40ZmAKCihUaGUgY29kZSBibG9jayBmb3IgdGhlIGRlZmluaXRpb24gb2YgJHkk
IGlzIGhpZGRlbi4pCgoqKklubGluZSBFeHByZXNzaW9uIE91dHB1dCoqCgpgYGAhCgl4ID0g
bGlzdChyYW5nZSgxLCAxMSkpCgl5ID0gW2kqaSBmb3IgaSBpbiB4XQoKCWRlZiBsaXN0X3N0
cihhKToKCQlyZXR1cm4gW3N0cihpKSBmb3IgaSBpbiBhXQoJZGVmIGxpc3RfYW5kKGEpOgoJ
CXJldHVybiAiLCAiLmpvaW4obGlzdF9zdHIoYVs6LTFdKSkgKyAiIGFuZCAiICsgc3RyKGFb
LTFdKQpgYGAKClRoZSBsaXN0IGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSB0ZXh0LiBUaGUg
c3F1YXJlIG9mIHRoZSBmaXJzdApgIWxlbih4KWAgbnVtYmVycyBgIWxpc3RfYW5kKHgpYCBp
cyBgIWxpc3RfYW5kKHkpYC4gU3F1YXJlIG51bWJlcnMKYXJlIGNvbXB1dGVkIGFjY29yZGlu
ZyB0byAkeT14XjIkLgoKKipJbmxpbmUgU3RhdGVtZW50cyBpbiBUYWJsZXMqKgoKYGBgIQoJ
Y2xhc3Mgc3F1YXJlOgoJCWRlZiBfX2luaXRfXyhzZWxmKToKCQkJc2VsZi54ID0gMAoJCWRl
ZiBnZXRfeChzZWxmKToKCQkJcmV0dXJuIHNlbGYueAoJCWRlZiBuZXh0X3koc2VsZik6CgkJ
CXkgPSBzZWxmLngqKjIKCQkJc2VsZi54ICs9IDEKCQkJcmV0dXJuIHkKCXNxID0gc3F1YXJl
KCkKYGBgCgpUaGUgZm9sbG93aW5nIHRhYmxlIGlzIGNvbXB1dGVkIGFjY29yZGluZyB0byAk
eT14XjIkLgoKeCAgICAgICAgICAgIHx5Ci0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0K
YCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95
KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5l
eHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFz
cS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClg
fGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRf
eCgpYHxgIXNxLm5leHRfeSgpYAoKLS0tCgojIEdlbmVyYXRlIE1hcmtkb3duIFRleHQKCk1h
cmtkb3duIHRleHQgY2FuIGJlIHByb2R1Y2VkIGFsZ29yaXRobWljYWxseSBmcm9tIGEgcHl0
aG9uIGFsZ29yaXRobQp1c2luZyB0aGUgYF8oKWAgYW5kIGBfXygpYCBmdW5jdGlvbi4gVGhl
IGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24gYXJlCnNwZWNpYWwgbmFtZXMgd2hpY2ggYXJl
IHJlc2VydmVkIGJ5IGBtYXJreWAuIChyZWZlciB0byBHZW5lcmF0aW9uIG9mCk1hcmtkb3du
IFRleHQsIFtgbWFya3lgIGRvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykgZm9yIGluLWRlcHRo
CmV4cGxhbmF0aW9uKS4KCiMjIFRoZSBgXygpYCBGdW5jdGlvbgoKIFRoZSBgXygpYCBmdW5j
dGlvbiBiYXNpY2x5IHJlc2VtYmxlZCB0aGUgcHl0aG9uIGBwcmludCgpYCBmdW5jdGlvbi4K
YG1hcmt5YCBkb2VzIG5vdCBwYXRjaCB0aGUgc3RhbmRhcmQgYHByaW50KClgIGZ1bmN0aW9u
IHdoaWNoIHN0aWxsCmRpc3BsYXlzIHRleHQgaW4gdGhlIGNvbnNvbGUgYW5kIG5vdCBpbiB0
aGUgTWFya2Rvd24gdGV4dC4KVGhlIGBfKClgIGZ1bmN0aW9uIHN1cHBvcnRzIGFwcGVuZGlu
ZyB0ZXh0IHRvIHRoZSBwcmV2aW91cyBhbmQgdGhlIG5leHQKbGluZSBvZiBvdXRwdXQgYnkg
dXNpbmcgYF9gIGFzIHRoZSBmaXN0IG9yIGxhc3QgcGFyYW1ldGVyLgoxLiBgXyhfLCAqYXJn
cyAgIClgOiBhcHBlbmQgdGhpcyBvdXRwdXQgdG8gcHJldmlvdXMgb3V0cHV0CjIuIGBfKF8s
ICphcmdzLCBfKWA6IGFwcGVuZCB0byBwcmV2aW91cyBhbmQgbmV4dCBvdXRwdXQKMy4gYF8o
ICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQgb3V0cHV0IHRvIHRoaXMgb3V0cHV0CjQuIGBf
KClgOiBkaXNhYmxlIGFwcGVuZCBmbGFnCgoqKk1vbmtleSBQYXRjaCBgcHJpbnQoKWAgRnVu
Y3Rpb24qKgoKVGhlIGBwcmludCgpYCBmdW5jdGlvbiBjYW4gYmUgKm1vbmtleSBwYXRjaGVk
KiB1c2luZyB0aGUgZm9sbG93aW5nCnN0YXRtZW50IGluIG9yZGVyIHRvIGNhbGwgdGhlIGBf
KClgIGZ1bmN0aW9uIGluc3RlYWQuCgpgYGAhCglwcmludCgiUHJpbnQiLCAidG8iLCAgImNv
bnNvbGUiLCAiISIpCglfKCJQcmludCIsICJ0byIsICAiTWFya2Rvd24iLCAiISIpCgoJcHJp
bnQgPSBfICMgbW9ua2V5IHBhdGNoCglwcmludCgiUHJpbnQiLCAidG8iLCAgIk1hcmtkb3du
IiwgIiEiKQpgYGAKCioqSm9pbiBBcmd1bWVudHMgdXNpbmcgYHNlcGAqKgoKVGhlIHNpZ25h
dHVyZSBvZiB0aGUgYF8oKWAgaXMgYF8oKmFyZ3MsIHNlcD0iICIpYC4gYHNlcGAgaXMgdXNl
ZCB0bwpqb2luIHRoZSBhcmd1bWVudHMgYCphcmdzYCBpbnRvIG9uZSBzdHJpbmcuCgpgYGAh
CglfKCJUaGUgZmlyc3QgZml2ZSBuYXR1cmFsIG51bWJlcnMgYXJlOiIpCglfKDEsIDIsIDMs
IDQsIDUsIHNlcD0iLCAiKQpgYGAKCioqR2VuZXJhdGUgYSBUYWJsZSB3aXRoIEFwcGVuZGlu
ZyoqCgpUaGUgYXBwZW5kIGZlYXR1cmUgaXMgdXNlZCB0byBjcmVhdGUgYSB0YWJsZS4KCmBg
YCEKCV8oIkNvbHVtbiAxIiwgXykKCV8oInxDb2x1bW4gMiIsIF8pCglfKCJ8Q29sdW1uIDMi
LCBfKQoJXygpCgoJXygifCIuam9pbihbIi0tLS0tLS0tIl0qMykpCgoJZm9yIGkgaW4gcmFu
Z2UoNSk6CgkJXygiJSA4ZCIgJSAoaSozKSkKCQlmb3IgaiBpbiBbMSwgMl06CgkJCV8oXywg
InwlIDhkIiAlIChpKjMraikpCmBgYAoKVGhlIGFsZ29yaXRobSBwcm9kdWNlcyB0aGUgZm9s
bG93aW5nIE1hcmtkb3duIHRleHQuCgpgYGBtZApDb2x1bW4gMXxDb2x1bW4gMnxDb2x1bW4g
MwotLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLQogICAgICAgMHwgICAgICAgMXwgICAgICAg
MgogICAgICAgM3wgICAgICAgNHwgICAgICAgNQogICAgICAgNnwgICAgICAgN3wgICAgICAg
OAogICAgICAgOXwgICAgICAxMHwgICAgICAxMQogICAgICAxMnwgICAgICAxM3wgICAgICAx
NApgYGAKCiMjIFRoZSBgX18oKWAgRnVuY3Rpb24KCkNvbXBhcmVkIHRvIHRoZSBgXygpYCBm
dW5jdGlvbiwgdGhlIGBfXygpYCBmdW5jdGlvbiBvbmx5IHRha2VzIG9uZQphcmd1bWVudCBh
bmQgaXRzIHB1cnBvc2UgaXMgdG8gb3V0cHV0IGEgZm9ybWF0dGVkIHBhcmFncmFwaCB3aXRo
CmluZGVudGF0aW9uLiBUaGUgc2lnbmF0dXJlIG9mIHRoZSBgX18oKWAgZnVuY3Rpb24gaXMg
YF8oYXJnLCBjcm9wPVRydWUpYC4KCioqR2VuZXJhdGUgYSBQYXJhZ3JhcGggd2l0aCBgZmAt
U3RyaW5ncyoqCgpUaGUgYF9fKClgIGZ1bmN0aW9uIGNhbiBiZSBjb21iaW5lZCB3aXRoIHRy
aXBsZSBxdW90ZWQgYmxvY2sgc3RyaW5ncwphbmQgdGhlIHB5dGhvbiAzIGBmYC1zdHJpbmdz
IG9yIGBmIi4uLiJgIHN0cmluZyBpbnRlcnBvbGF0aW9uLCByZWZlciB0bwpbYGZgLXN0cmlu
Z3NdKGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvcmVmZXJlbmNlL2xleGljYWxfYW5hbHlz
aXMuaHRtbCNmLXN0cmluZ3MpLgoKYGBgIQoJaW1wb3J0IHJhbmRvbQoJcyA9IDAKCXJhbmRv
bS5zZWVkKHMpCglwID0gW3JhbmRvbS5yYW5kb20oKSBmb3IgaSBpbiByYW5nZSgzKV0KCglf
XyhmIiIiCgkJUGFyYW1ldGVyIG9uZSBpcyB7cFswXTouM2Z9IGFuZCB0aGUgdmFsdWUgZGVw
ZW5kcyBvbiB0aGUgc2VlZAoJCW9mIHRoZSBwc2V1ZG8gcmFuZG9tIG51bWJlciBnZW5lcmF0
b3IsIHdoaWNoIHdhcyBjaG9zZW4KCQl0byBiZSB7c30uIEZvciB0aGUgc2FtZSBzZWVkIGFs
d2F5cyB0aGUgc2FtZSByYW5kb20gbnVtYmVycwoJCWFyZSBjcmVhdGVkLiBUaGUgbmV4dCB0
d28gbnVtYmVycyBhcmUge3BbMV06LjNmfSBhbmQge3BbMl06LjNmfS4KCQlUaGUgc3VtIG9m
IHRoZSB0aHJlZSBudW1iZXJzIGlzIHtzdW0ocCk6LjNmfSBhbmQgaXQgaXMKCQl7J2dyZWF0
ZXInIGlmIHN1bShwKSA+IDIuIGVsc2UgJ2xlc3NlciBvciBlcXVhbCd9IHRoYW4gdHdvLgoJ
IiIiKQpgYGAKCioqQ3JvcHBpbmcgYW5kIEluZGVudGF0aW9uIG9mIE91dHB1dCoqCgpCZWZv
cmUgdGhlIHRleHQgZ2VuZXJhdGVkIGJ5IHRoZSBgX18oKWAgZnVuY3Rpb24gaXMgcHJpbnRl
ZCBpbnRvIHRoZQpkb2N1bWVudC4gVGhlIHRleHQgaXMgY3JvcHBlZCBhY2NvcmRpbmcgdG8g
dGhlIGxlYWRpbmcgd2hpdGUgc3BhY2UKb2YgdGhlIGZpcnN0IG5vbi1lbXB0eSBsaW5lLiBU
aGUgbGVhZGluZyB3aGl0ZSBzcGFjZSBvZiB0aGUgZmlyc3QKbm9uLWVtcHR5IGxpbmUgaXMg
cmVtb3ZlZCBmcm9tIGFsbCBvdGhlciBsaW5lcyBvZiB0aGUgb3V0cHV0LgoKYGBgIQoJX18o
IiIiCgkJKiBMaXN0IExldmVsIDEKCQkJKiBMaXN0IExldmVsIDIKCQkJKiBMaXN0IExldmVs
IDIKCQkJCSogTGlzdCBMZXZlbCAzCgkJCSogTGlzdCBMZXZlbCAyCgkJKiBMaXN0IExldmVs
IDEKCQkqIExpc3QgTGV2ZWwgMQoJIiIiKQpgYGAKClRoZSBjb2RlIGJsb2NrIHByb2R1Y2Vz
IHRoZSBmb2xsb3dpbmcgb3V0cHV0LgoKYGBgbWQKKiBMaXN0IExldmVsIDEKCSogTGlzdCBM
ZXZlbCAyCgkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAzCgkqIExpc3QgTGV2ZWwg
MgoqIExpc3QgTGV2ZWwgMQoqIExpc3QgTGV2ZWwgMQpgYGAKCioqRGlzYWJsZSBDcm9wcGlu
ZyBvZiBPdXRwdXQqKgoKVGhlIGNyb3BwaW5nIGlzIGRpc2FibGVkIHVzaW5nIHRoZSBrZXl3
b3JkIGBfXyh0ZXh0LCBjcm9wPUZhbHNlKWAuCgpgYGAhCglfXygiIiIKCQkqIExpc3QgTGV2
ZWwgMQoJIiIiLCBjcm9wPVRydWUpCgoJX18oIiIiCgkJKiBMaXN0IExldmVsIDIKCSIiIiwg
Y3JvcD1GYWxzZSkKYGBgCgpUaGUgY29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5n
IG91dHB1dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDIKYGBgCgot
LS0KCiMgRm9ybWF0IERlcGVuZGVudCBMaW5rcwoKV2hlbiB3cml0aW5nIHNldmVyYWwgTWFy
a2Rvd24gZG9jdW1lbnRzIG9mdGVuIGRvY3VtZW50cyBhcmUgbGlua2VkCmJldHdlZW4gZWFj
aCBvdGhlciB1c2luZyB0aGUgTWFya2Rvd24gbGluayBzdGF0ZW1lbnQKYFtMaW5rIE5hbWVd
KGZpbGUuaHRtbClgIG9yIGBbTGluayBOYW1lXShmaWxlLnBkZilgLgpIb3dldmVyLCB3aGVu
IHJlbmRlcmluZyBkb2N1bWVudHMgd2l0aCBsaW5rcyBpbnRvIGBodG1sYCBhbmQgYHBkZmAK
dGhlIGZpbGUgZXh0ZW5zaW9uIG9mdGVuIG11c3QgYmUgYWRqdXN0ZWQgYWNjb3JkaW5nIHRv
IHRoZSBvdXRwdXQgZm9ybWF0LgpgbWFya3lgIHN1cHBvcnRzIHRoZSBgLlw/Pz9gIHN0YXRl
bWVudCwgd2hpY2ggd2lsbCBiZSByZXBsYWNlZCBieQpgLmh0bWxgIG9yIGAucGRmYCBkZXBl
bmRpbmcgb24gdGhlIG91dHB1dCBmb3JtYXQuCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0o
ZmlsZS5cPz8/KQpgYGAKCndpbGwgYmUgcHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2lu
ZyB0ZXh0OgoqIGZvciBgaHRtbGA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAK
KiBmb3IgYHBkZmA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8g
dGhpcyBkb2N1bWVudF0ocXVpY2tzdGFydC4/Pz8pCgotLS0KCiMgRm9ybWF0IERlcGVuZGVu
dCBDb2RlCgpgcGFuZG9jYCBNYXJrZG93biBhbGxvd3MgdG8gd3JpdGUgZm9ybWF0IHNwZWNp
ZmljIGNvZGUgd2l0aGluIE1hcmtkb3duCnVzaW5nIGBodG1sYCBhbmQgKnRleCogZm9yIGBw
ZGZgIGRvY3VtZW50cy4gSG93ZXZlciwgd2hlbiBpbnNlcnRpbmcKcmF3IGBodG1sYCBvciBy
YXcgKnRleCogY29kZSwgdGhlIGRvY3VtZW50IG9ubHkgY2FuIGJlIHJlbmRlcmVkIGludG8K
YGh0bWxgIG9yIGBwZGZgIGFjY29yZGluZ2x5LiBUaGlzIGlzIG9ubHkgYSBzaG9ydCBzdW1t
YXJ5LCBmb3IgYW4KaW4tZGVwdGggZXhwbGFuYXRpb24gb2YgYWxsIGZlYXR1cmVzIHBsZWFz
ZSByZWZlciB0byBGb3JtYXQgQ29kZXMsCltgbWFya3lgIGRvY3VtZW50YXRpb25dKG1hcmt5
Lj8/PykuCgpgbWFya3lgIGludHJvZHVjZXMgZm9ybWF0IGNvZGVzLCB3aGljaCBhcmUgYXBw
bGllZCBkdXJpbmcgbGlua2luZwphZnRlciBwcmVwcm9jZXNzaW5nLiBEdXJpbmcgbGlua2lu
ZyBmb3JtYXQgc3BlY2lmaWMgY29kZXMgZm9yIGBodG1sYAphbmQgYHBkZmAgYXJlIGFwcGxp
ZWQgaW4gYSBjb25zaXN0ZW50IG1hbm5lciwgcmVzdWx0aW5nIGluIGRvY3VtZW50cwp3aXRo
IE1hcmtkb3duIGFuZCBgaHRtbGAgb3IgTWFya2Rvd24gYW5kICp0ZXgqIG9ubHkuIFVzaW5n
IHRoaXMKcGF0dGVybiBgbWFya3lgIGRvY3VtZW50cyBjb250YWluIHJlZ3VsYXIgTWFya2Rv
d24sIHdoaWNoIGNhbiBiZQpyZW5kZXJlZCBpbnRvIGBodG1sYCBhbmQgYHBkZmAsIGFzIHdl
bGwgYXMgZm9ybWF0IHNwZWNpZmljIGNvZGVzCmZvciB0d2Vha2luZyBvciBwb2xpc2hpbmcg
YGh0bWxgIGFuZCBgcGRmYCBvdXRwdXQuCgpGb3JtYXQgY29kZXMgYXJlIHNwZWNpZmllZCBp
biBjb2RlIGJsb2NrcyBhbmQgY2FsbGVkIHVzaW5nIHRoZQppbmxpbmUgc3ludGF4IGBgIGBc
P0ZVTkNBTEwoQVJHUylgIGBgIG9yIGBgIGBcP1ZBUklBQkxFKEFSR1MpYCBgYCwKd2hpY2gg
aXMgdHJhbnNsYXRlZCBpbnRvIHRoZSBmb2xsb3dpbmcgcHlob24gZnVuY3Rpb24gY2FsbHMu
CjEuIGBodG1sRk1UQ09ERShBUkdTKWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYGh0bWxg
LgoyLiBgcGRmRk1UQ09ERShBUkdTKWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYHBkZmAu
CgpBc3N1bWluZyBwcmVwcm9jZXNzaW5nIHRoZSBmaWxlIGBtZC9tYXJreS5tZGAsIGxpbmtp
bmcgZm9ybWF0IGNvZGVzCnJlc3VsdHMgaW4gdGhlIHR3byBmb2xsb3dpbmcgb3V0cHV0IGZp
bGVzLgoxLiBgYnVpbGQvbWFya3kuaHRtbC5tZGA6IGNvbnRhaW5zIG91dHB1dCBvZiBgaHRt
bGAgZm9ybWF0IGNvZGVzLgoyLiBgYnVpbGQvbWFya3kucGRmLm1kYDogY29udGFpbnMgb3V0
cHV0IG9mIGBwZGZgIGZvcm1hdCBjb2Rlcy4KCioqRXhhbXBsZSAxOiBNdWx0aS1Db2x1bW4g
VGV4dCBpbiBgcGRmYCBhbmQgYGh0bWxgKioKCkRlZm5pdGlvbiBvZiB0d28gZm9ybWF0IGNv
ZGVzIGBtY29sX2JlZ2luYCBhbmQgYG1jb2xfZW5kYCwgb25lIGZvciB0aGUKYmVnaW4gb2Yg
bXVsdGkgY29sdW1uIGFuZCBhbm90aGVyIGZvciB0aGUgZW5kIG9mIHRoZSBtdWx0aSBjb2x1
bW4Kc2VjdGlvbi4gVGhlIGZvcm1hdCBjb2RlcyBhcmUgYXBwZW5kZWQgd2l0aCBgX2h0bWxg
IGFuZCBgX3BkZmAKcmVzcGVjdGl2ZWx5LgoKYGBgIQoJZGVmIHBkZl9tY29sX2JlZ2luKCk6
IHJldHVybiByIlxiZWdpbnttdWx0aWNvbHN9ezJ9IgoJZGVmIHBkZl9tY29sX2VuZCgpOiBy
ZXR1cm4gciJcZW5ke211bHRpY29sc30iCglkZWYgaHRtbF9tY29sX2JlZ2luKCk6IHJldHVy
biByIjxkaXYgc3R5bGU9J2NvbHVtbi1jb3VudDogMjsnPiIKCWRlZiBodG1sX21jb2xfZW5k
KCk6IHJldHVybiByIjwvZGl2PiIKYGBgCgpUaGUgYGNvbHVtbi1jb3VudGAgQ1NTIHByb3Bl
cnR5IHJlcXVpcmVzIEludGVybmV0IEV4cGxvcmVyPj0xMCwKRmlyZWZveD49NTIsIFNhZmFy
aT49OSwgT3BlcmE+PTM3IG9yIENocm9tZT49NTAsIHJlZmVyIHRvClt3M3NjaG9vbHNdKGh0
dHBzOi8vd3d3Lnczc2Nob29scy5jb20vY3NzL2NzczNfbXVsdGlwbGVfY29sdW1ucy5hc3Ap
LgpJbiBvcmRlciB0byB1c2UgdGhlIGBtdWx0aWNvbGAgKnRleCogcGFja2FnZSwgdGhlIHN0
YXRlbWVudApgXHVzZXBhY2thZ2V7bXVsdGljb2x9YCBoYXMgdG8gYmUgaW5jbHVkZWQgaW4g
dGhlIHlhbWwgbWV0YSBkYXRhCmluIHRoZSBmcm9udCBtYXR0ZXIgb2YgdGhlIE1hcmtkb3du
IGRvY3VtZW50LgoKYD9fbWNvbF9iZWdpbigpYFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKYD9fbWNv
bF9lbmQoKWAKCioqRXhhbXBsZSAyOiBNdWx0aS1Db2x1bW4gVGV4dCBpbiBgcGRmYCBhbmQg
YGh0bWxgKioKCmBgYCEKCWRlZiBwZGZfbWNvbCh0ZXh0KTogcmV0dXJuIHIiXGJlZ2lue211
bHRpY29sc317Mn0iICsgdGV4dCArIHIiXGVuZHttdWx0aWNvbHN9IgoJZGVmIGh0bWxfbWNv
bCh0ZXh0KTogcmV0dXJuIHIiPGRpdiBzdHlsZT0nY29sdW1uLWNvdW50OiAyOyc+IiArIHIi
PC9kaXY+IgpgYGAKCmA/X21jb2woIiIiClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQKIiIiKWAKCi0tLQoKIyBJbmNsdWRlIFN0YXRlbWVudAoKYG1hcmt5YCBhbGxvd3Mg
dG8gaW5jbHVkZSBvdGhlciBNYXJrZG93biB0ZXh0IHVzaW5nIHRoZSBgXCEhIWAgc3RhdGVt
ZW50LgpQbGVhc2UgcmVmZXIgdG8gdGhlIGBtYXJreWAgZG9jdW1lbnRhdGlvbiBmb3IgY29t
cGxldGUgZGVzY3JpcHRpb24Kb2YgdGhlIGBcISEhYCBzdGF0ZW1lbnQuIER1cmluZyByZW5k
ZXJpbmcgYG1hcmt5YCBrZWVwcyB0cmFjayBvZgppbmNsdWRlZCBmaWxlcyBhbmQgY3JlYXRl
cyBNYWtlZmlsZSBydWxlcyBmb3IgZGVwZW5kZW50IG1ha2UuCgpgYGBtZAoJISEhIGZpbGUu
bWRpCmBgYAoKLS0tCgojIE1ldGEgRGF0YQoKYG1hcmt5YCBzdXBwb3J0cyBkb2N1bWVudCBt
ZXRhIGRhdGEgaW4gTWFya2Rvd24gZnJvbnQgbWF0dGVyLgpUaGlzIGZlYXR1cmUgaXMgbm90
IGV4cGxhaW5lZCBpbiB0aGUgcXVpY2tzdGFydC4gUGxlYXNlIHJlZmVyCnRvIHRoZSBgbWFy
a3lgIGRvY3VtZW50YXRpb24gZm9yIGV4cGxhbmF0aW9uLgoKYGBgbWQKCS0tLQoJTUVUQV9E
QVRBCgktLS0KCU1BUktET1dOCmBgYAoKLS0tCgojIEVzY2FwZSBNYXJrdXAKClRoZSBgbWFy
a3lgIG1hcmt1cCBjYW4gYmUgZXNjYXBlZC4gV2hlbiBtYXJrdXAgaXMgZXNjYXBlZApgbWFy
a3lgIHJlbW92ZXMgdGhlIGVzY2FwZSBzZXF1ZW5jZSBhbmQgcHJpbnRzIG91dCB0aGUKdW5l
c2NhcGVkIHN0YXRlbWVudC4KCk1hcmt1cCAgICAgICAgICAgfEVzY2FwZSBTZXF1ZW5jZXxV
bnNlY2FwZWQgU2VxdWVuY2UKLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0t
LS0tLS0tLS0tLS0tLS0tCmNvZGUgYmxvY2sgaGlkZGVufGBgIGBgYFxcISEgYGAgIHxgYCBg
YGBcISEgYGAKY29kZSBibG9jayBzaG93biB8YGAgYGBgXFwhIGBgICAgfGBgIGBgYFwhIGBg
CmlubGluZSBjb2RlICAgICAgfGBgIGBcXCEuLi5gIGBgIHxgYCBgXCEuLi5gIGBgCmZvcm1h
dCBjb2RlICAgICAgfGBgIGBcXD8uLi5gIGBgIHxgYCBgXD8uLi5gIGBgCmluY2x1ZGUgc3Rh
dGVtZW50fGBcXCEhIWAgICAgICAgIHxgXCEhIWAKZm9ybWF0IGxpbmsgICAgICB8YC5cXD8/
P2AgICAgICAgfGAuXD8/P2AKCi0tLQoKKlRoYW5rcyBmb3IgcmVhZGluZywgcGxlYXNlIHRy
eSBgbWFya3lgLioK
'''
pack_quick_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIHF1aWNrc3RhcnQubWQgcmF3ID4+MQpgYGAK
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IG1hcmt5LmJpYgpoZWFkZXItaW5j
bHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgZXhhbXBsZSBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5
YCBtYXJrdXAuIFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9mIHRoaXMKPiBkb2N1bWVudCBj
YW4gYmUgcmVhZCBbaGVyZV0oZXhhbXBsZS1zcmMuPz8/KS4KPiBGb3IgbW9yZSBpbmZvcm1h
dGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6
Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KSwKPiBbYG1hcmt5YCBkb2N1bWVudGF0aW9u
XShtYXJreS4/Pz8pIG9yIHRoZQo+IFtgbWFya3lgIHF1aWNrc3RhcnRdKHF1aWNrc3RhcnQu
Pz8/KS4KCi0tLQoKIyBSZWZlcmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlz
IGEgcmVmZXJlbmNlIHRvIEBzZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRh
dGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQVVBQUFBRkNB
WUFBQUNOYnlibEFBQUFIRWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERIeGdsak5CQUFP
OVRYTDBZNE9Id0FBQUFCSlJVNUVya0pnZ2c9PSl7I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSBy
ZWZlcmVuY2UgdG8gQGZpZzpsYWJlbC4KCkEgIHxCICB8QyAgfEQKLS0tfC0tLXwtLS18LS0t
CjAwMHwxMTF8NDQ0fDU1NQoyMjJ8MzMzfDY2Nnw3NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBj
YXB0aW9uIHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVs
LgoKJCRcbWJveHtlfV57XG1ib3h7aX1ccGl9KzE9MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMg
YSByZWZlcmVuY2UgdG8gQGVxOmxhYmVsLgoKVGhpcyBpcyBhIGNpdGF0aW9uIFtATXVsbGVy
MTk5M10uCgojIGBtYXJreWAgTWFya3VwIGZvciBFeGVjdXRpb24gb2YgRW1iZWRkZWQgUHl0
aG9uIENvZGUKCioqRGlzcGxheWVkIENvZGUsIEV4ZWN1dGVkKioKCmBgYCEKCWltcG9ydCBt
YXRoCglkZWYgbGlzdF9hbmQobCk6CgkJcmV0dXJuICIsICIuam9pbihzdHIoaSkgZm9yIGkg
aW4gbFs6LTFdKSArICIgYW5kICIgKyBzdHIobFstMV0pCgoJeCA9IDIKCXkgPSBtYXRoLnNx
cnQoeCkKYGBgCgoqKkhpZGRlbiBDb2RlLCBFeGVjdXRlZCoqCgpgYGAhIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKYGBgCgoqKkRpc3BsYXllZCBDb2RlLCBOb3QgRXhlY3V0ZWQqKgoK
YGBgcHl0aG9uCgl4ID0gMwpgYGAKCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhl
IHNxdWFyZSByb290IG9mICR4PWAheGAkIGlzIGAheTouM2ZgLgoKKipJbmxpbmUgRXhwcmVz
c2lvbioqCgpUaGUgZmlyc3QgdGVuIG51bWJlcnMgYXJlIGAhbGlzdF9hbmQocmFuZ2UoMTAp
KWAuCgoqKkZvcm1hdCBMaW5rcyoqCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0oZmlsZS5c
Pz8/KQpgYGAKCndpbGwgYmUgcHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2luZyB0ZXh0
OgoqIGZvciBgaHRtbGA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAKKiBmb3Ig
YHBkZmA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8gdGhpcyBk
b2N1bWVudF0oZXhhbXBsZS4/Pz8pCgoqKkZvcm1hdCBDb2RlcyoqCgpgYGAhCglkZWYgaHRt
bF9GTVRDT0RFKCk6IHJldHVybiAiSDxzdXA+VDwvc3VwPjxzdWI+TTwvc3ViPkwiCglkZWYg
cGRmX0ZNVENPREUoKTogcmV0dXJuICJcTGFUZVgiCmBgYAoKVGhpcyBpcyBhIGA/X0ZNVENP
REUoKWAgZG9jdW1lbnQuCgotLS0KCipUaGFua3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkg
YG1hcmt5YC4qCgotLS0KCiMgUmVmZXJlbmNlcyB7LX0K
'''
pack_example_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KICAgXGh5cGVyc2V0dXB7Y29sb3JsaW5rcz1mYWxzZSwKICAgYWxsYm9yZGVy
Y29sb3JzPXswIDAgMH0sCiAgIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX19CmhlYWRlci1p
bmNsdWRlcy0taHRtbDogPgogICA8c3R5bGU+KiB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7
IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiB0cnVlCnhub3MtY2FwaXRhbGlzZTogdHJ1ZQpm
b250c2l6ZTogMTFwdAoKLS0tCgotLS0KCj4gKipBYnN0cmFjdCoqIC0tIFRoaXMgaXMgdGhl
IHNvdXJjZSBjb2RlIG9mIHRoZSBgbWFya3lgIEV4YW1wbGUKPiBkb2N1bWVudCBmb3IgaWxs
dXN0cmF0aW5nIGBtYXJreWAgbWFya3VwIHVzaW5nIHNpbXBsZSBleGFtcGxlcy4KPiBUaGlz
IGRvY3VtZW50IHJlcHJlc2VudHMgdGhlIGBtYXJreWAgc291cmNlIGNvZGUgYmVmb3JlCj4g
cHJvY2Vzc2luZyBweXRob24gY29kZSBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVudCBpdHNl
bGYuCj4gRm9yIGRvY3VtZW50YXRpb24gYW5kIGRvd25sb2FkIHBsZWFzZSByZWZlciB0byB0
aGUKPiBbYG1hcmt5YCByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vbGVobWFubjcv
bWFya3kpLgoKLS0tCgpgYGBweXRob24KISEhIGV4YW1wbGUubWQgcmF3ID4+MQpgYGAK
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	flag_only_code = 0
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "nodep":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "nobody":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			elif f.startswith("!!"):
				flag_only_code = 2 # only hidden code
			elif f.startswith("!"):
				flag_only_code = 1 # shown and hidden code
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text, run_marky=flag_run_marky,
				shift_atx=flag_shift_atx, shift_str=shift_str, code_only=flag_only_code)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True, read_text=True,
	run_marky=True, shift_atx=0, shift_str="", code_only=0):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			if code_only > 0:
				print("ERROR: opposing flags: code_only and not run_marky")
				exit(1)
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == None:
						continue
					else:
						for k in j.split("\n"):
							if code_only == 0: md_text.append(shift_str + k)
						appendbuf = ""
						continue
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if code_only == 0 and show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					if code_only == 2 and show_code:
						pass
					else:
						rl = run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)
					if code_only == 0:
						for j in rl:
							md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					if code_only == 0: md_text.append(shift_str + i)
				elif i.startswith(r"\\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[2:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[1:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					if code_only == 0:
						j = parse_line(fpath, n, i)
						if j == None:
							appendbuf = i
						else:
							for k in j.split("\n"):
								md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return None
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				text += run_shortcode(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def print_trace(ex):
	def go_deeper(deeep, first=False):
		print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
		if first:
			print("# FILE", args.marky)
		if os.path.exists(deeep.tb_frame.f_code.co_filename):
			with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
				print("#", fh.read().split("\n")[deeep.tb_lineno-1])
		if deeep.tb_next != None:
			go_deeper(deeep.tb_next)
	if ex.__traceback__.tb_next:
		go_deeper(ex.__traceback__.tb_next, first=True)

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		print_trace(ex)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		if "???" in expr:
			shexpr = expr.replace("???", f).strip()
		else:
			shexpr = f + expr.strip()
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		exec_text = list()
		exec_append = False
		try:
			value = eval(shexpr, exec_dict, None)
		except Exception as ex:
			print_trace(ex)
			print("ERROR", type(ex), str(ex))
			exit(1)
		if not value is None:
			__(value)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<?%s %s %s?>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def print_inline(fpath, n, i, text):
	text = text.strip()
	shcode = ""
	for f in ["html", "pdf"]:
		if ":" in text:
			p = text.find(":")
			expr = text[0:p] + "_" + f + text[p:]
		else:
			expr = text + "_" + f
		print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % expr, end="", flush=True)
		try:
			value = ("{" + expr + "}").format(**exec_dict)
		except Exception as ex:
			print("")
			print("ERROR", type(ex), str(ex))
			exit(1)
		if "\n" in value:
			print("")
			print("# OUT")
			for a, b in enumerate(value.split("\n")):
				print("#    %03d" % (a + 1), b)
		else:
			print(" ->", value)
		shcode += "<?%s %s %s?>" % (f, value, f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text, end="", flush=True)
	try:
		if not "'''" in text:
			value = str(eval("f'''{%s}'''" % text, exec_dict, None))
		elif not '"""' in text:
			value = str(eval('f"""{%s}"""' % text, exec_dict, None))
		else:
			raise ValueError("\"\"\" and ''' in expression:", text)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		print("# OUT")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--marky")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	lsep = 2
	p = md_text.find("<?")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("?>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<?", c)
		else:
			p = md_text.find("<?", p + lsep)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
