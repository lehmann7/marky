#!/usr/bin/env python3
# -*- coding: utf-8 -*-

########################################################################
# marky Markdown Preprocessor ##########################################
########################################################################

# Quick Make Example Project
############################
#
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make scan html-all pdf-all httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/

########################################################################

import sys
import argparse
import glob
import os
import base64
import yaml

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("# ERROR", type(ex), str(ex))
		sys.exit(1)

########################################################################

_MARKY_VERSION = (0, 9)

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###
pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgouUEhPTlk6IGhlbHAKaGVscDoKCSMKCSMgbWFya3kgREVQ
RU5ERU5DSUVTCgkjIyMjIyMjIyMjIyMjIyMjIyMjIwoJIyAqIHBhbmRvYyA+PSAyLjEwCgkj
ICogcGlwIGluc3RhbGwgcGFuZG9jLWZpZ25vcwoJIyAqIHBpcCBpbnN0YWxsIHBhbmRvYy1l
cW5vcwoJIyAqIHBpcCBpbnN0YWxsIHBhbmRvYy1zZWNub3MKCSMgKiBwaXAgaW5zdGFsbCBw
YW5kb2MtdGFibGVub3MKCSMgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAqIHBpcCBp
bnN0YWxsIHB5eWFtbAoJIwoJIyBBVFRFTlRJT04KCSMjIyMjIyMjIyMjCgkjIEFsbCBmaWxl
cyBpbiBgYnVpbGQvKi5tZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVk
IQoJIyBVc2VyIGZpbGVzIGAqLm1kYCBoYXZlIHRvIGJlIHBsYWNlZCBpbiBgbWQvKi5tZGAh
CgkjIGBtYWtlIGNsZWFuYCBkZWxldGVzIGFsbCBmaWxlcyBpbiBgYnVpbGQvYCwgYGh0bWwv
YCBhbmQgYHBkZi9gLgoJIwoJIyBtYXJreSBVVElMUwoJIyMjIyMjIyMjIyMjIwoJIyAqIG1h
a2UgaGVscCAgICAgICAgICAgIC0gc2hvdyB0aGlzICpIZWxwIE1lc3NhZ2UqCgkjICogbWFr
ZSB0cmVlICAgICAgICAgICAgLSBzaG93IHRoZSAqUHJvamVjdCBUcmVlKgoJIyAqIG1ha2Ug
aHR0cGQgICAgICAgICAgIC0gcnVuIHB5dGhvbiAtbSBodHRwZC5zZXJ2ZXIgaW4gYGh0bWwv
YAoJIyAqIG1ha2UgY2xlYW4gICAgICAgICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1s
LypgLCBgcGRmLypgCgkjICogbWFrZSBxdWlldCBbLi4uXSAgICAgLSBidWlsZCB3aXRoIGAu
L21hcmt5IC0tcXVpZXQgWy4uLl1gCgkjICogbWFrZSBsaXN0ICAgICAgICAgICAgLSBsaXN0
IGFsbCBzY2FubmVkIGZpbGVzIGFuZCB0YXJnZXRzCgkjCgkjIG1hcmt5IEJVSUxEIEFMTAoJ
IyMjIyMjIyMjIyMjIyMjIyMKCSMgKiBtYWtlIHJlc2NhbiAgICAgICAgICAtPiBgYnVpbGQv
Ki5tYWtlYCwgb3ZlcndyaXRlIGFsbAoJIyAqIG1ha2Ugc2NhbiAgICAgICAgICAgIC0+IGBi
dWlsZC8qLm1ha2VgLCBvbmx5IG5ldyBmaWxlcwoJIyAqIG1ha2UgYnVpbGQgICAgICAgICAg
IC0+IGBidWlsZC8qLntodG1sLHBkZn0ubWRgCgkjICogbWFrZSB0ZXggICAgICAgICAgICAg
LT4gYGJ1aWxkLyoudGV4YAoJIyAqIG1ha2UgaHRtbCAgICAgICAgICAgIC0+IGBodG1sLyou
aHRtbGAKCSMgKiBtYWtlIHBkZiAgICAgICAgICAgICAtPiBgcGRmLyoucGRmYAoJIyAqIG1h
a2UgdGV4ICAgICAgICAgICAgIC0+IGBidWlsZC8qLnRleGAKCSMgKiBtYWtlIGF1eCAgICAg
ICAgICAgICAtPiBydW4gYWxsIGF1eCBjb21tYW5kcwoJIyAqIG1ha2UgYWxsICAgICAgICAg
ICAgIC0+IGBodG1sLyouaHRtbGAsIGBwZGYvKi5wZGZgCgkjCgkjIG1hcmt5IEJVSUxEIEZJ
TEUKCSMjIyMjIyMjIyMjIyMjIyMjIwoJIyAqIG1ha2Ugc2Nhbi9maWxlICAgICAgIC0+IGBi
dWlsZC9maWxlLm1ha2VgLCBvdmVyd3JpdGUKCSMgKiBtYWtlIGJ1aWxkL2ZpbGUgICAgICAt
PiBgYnVpbGQvZmlsZS57aHRtbCxwZGZ9Lm1kLHB5YAoJIyAqIG1ha2UgdGV4L2ZpbGUgICAg
ICAgIC0+IGBidWlsZC9maWxlLnRleGAKCSMgKiBtYWtlIGh0bWwvZmlsZSAgICAgICAtPiBg
aHRtbC9maWxlLmh0bWxgCgkjICogbWFrZSBwZGYvZmlsZSAgICAgICAgLT4gYHBkZi9wZGYu
cGRmYAoJIyAqIG1ha2UgYXV4L2ZpbGUgICAgICAgIC0+IHJ1biBhdXggY29tbWFuZHMgZm9y
IGZpbGUKCSMgKiBtYWtlIGNsZWFuL2ZpbGUgICAgICAtPiBjbGVhbiwgYnV0IGtlZXAgYG1h
a2UscGRmLGh0bWwsdGV4YAoJIwoJIyBFWEFNUExFCgkjIyMjIyMjIyMKCSMgMS4gcnVuIGBt
YWtlIHNjYW47IG1ha2UgaHRtbC9maWxlLmh0bWwgaHR0cGRgOgoJIyAgICAqIGdlbmVyYXRl
IGBidWlsZC9maWxlLm1ha2VgCgkjICAgICogdHJhbnNmb3JtIGBtZC9maWxlLm1kYCAtPiBg
aHRtbC9maWxlLmh0bWxgCgkjICAgICogc3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGlu
IGBodG1sYAoJIyAyLiBydW4gYG1ha2Ugc2NhbjsgbWFrZSBwZGYvZmlsZS5wZGZgCgkjICAg
ICogZ2VuZXJhdGUgYGJ1aWxkL2ZpbGUubWFrZWAKCSMgICAgKiB0cmFuc2Zvcm0gYG1kL2Zp
bGUubWRgIC0+IGBwZGYvZmlsZS5wZGZgCgkjIDMuIHJ1biBgbWFrZSBzY2FuOyBtYWtlIGxp
c3RgOiBsaXN0IGFsbCB0YXJnZXRzCgkjCgouUEhPTlk6IHRyZWUKdHJlZToKCSMKCSMgUFJP
SkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJIyA8d29ya2luZ19kaXI+CgkjIHwtIG1hcmt5
LnB5ICAgICAgICAgICAgLSBtYXJreSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAg
ICAoKikgLSBtYXJreSBNYWtlZmlsZQoJIyB8LSBwYW5kb2MtcnVuICAgICAgKCopIC0gcGFu
ZG9jIHdyYXBwZXIKCSMgfC0gbWQvICAgICAgICAgICAgICgqKSAtIHVzZXIgTWFya2Rvd24g
ZGlyCgkjIHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQKCSMg
fC0gZGF0YS8gICAgICAgICAgICgqKSAtIHVzZXIgZGF0YSBkaXIKCSMgfCAgfC0gKi4qICAg
ICAgICAgICAgICAgIHVzZXIgZGF0YSBmaWxlcwoJIyB8LSBidWlsZC8gICAgICAgICAgKCop
IC0gYnVpbGQgTWFya2Rvd24gZGlyCgkjIHwgIHwtICoucHkgICAgICAgICAoKikgLSBtYXJr
eSBQeXRob24gY29kZQoJIyB8ICB8LSAqLm1ha2UgICAgICAgKCopIC0gTWFrZWZpbGUgcnVs
ZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIE1hcmtkb3duIGZvciBodG1sIGZvcm1h
dAoJIyB8ICB8LSAqLnBkZi5tZCAgICAgKCopIC0gTWFya2Rvd24gZm9yIHBkZiBmb3JtYXQK
CSMgfC0gaHRtbC8qLmh0bWwgICAgICgqKSAtIHJlbmRlcmVkIGh0bWwgZGlyCgkjIHwtIHBk
Zi8qLnBkZiAgICAgICAoKikgLSByZW5kZXJlZCBwZGYgZGlyCgkjCgkjICgqKSBkaXJlY3Rv
cmllcy9maWxlcyBhcmUgYXV0by1nZW5lcmF0ZWQgdXNpbmcKCSMgICAgYC4vbWFya3kucHkg
LS1pbml0OyBtYWtlIHNjYW47IG1ha2UgYWxswrQKCSMKCi5QSE9OWTogaHR0cGQKaHR0cGQ6
CgljZCBodG1sICYmIHB5dGhvbiAtbSBodHRwLnNlcnZlcgoKLlBIT05ZOiBzY2FuCnNjYW46
CgkuL21hcmt5LnB5IC0tc2NhbgoKLlBIT05ZOiByZXNjYW4KcmVzY2FuOgoJLi9tYXJreS5w
eSAtLXNjYW4gLS1mb3JjZQoKYWxsX3F1aWV0IDo9ICQoZmlsdGVyIHF1aWV0LCQoTUFLRUNN
REdPQUxTKSkKLlBIT05ZOiBxdWlldApxdWlldDoKCSMgZW5hYmxlIC4vbWFya3kgLS1xdWll
dCBbLi4uXQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgptYXJreV9hbGlhczo9Ci1pbmNsdWRlIGJ1
aWxkLyoubWFrZSBidWlsZC8qKi8qLm1ha2UKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05Z
OiBsaW5rCmJ1aWxkOiAkKGZvcmVhY2ggaSwkKG1hcmt5X2FsaWFzKSxidWlsZC8kKGkpKQoK
LlBIT05ZOiBodG1sCmh0bWw6ICQoZm9yZWFjaCBpLCQobWFya3lfYWxpYXMpLGh0bWwvJChp
KSkKCi5QSE9OWTogcGRmCnBkZjogJChmb3JlYWNoIGksJChtYXJreV9hbGlhcykscGRmLyQo
aSkpCgouUEhPTlk6IHRleAp0ZXg6ICQoZm9yZWFjaCBpLCQobWFya3lfYWxpYXMpLHRleC8k
KGkpKQoKLlBIT05ZOiBhdXgKYXV4OiAkKGZvcmVhY2ggaSwkKG1hcmt5X2FsaWFzKSxhdXgv
JChpKSkKCi5QSE9OWTogY2xlYW4KY2xlYW46CglybSAtcmYgLi9idWlsZC8qIC4vaHRtbC8q
IC4vcGRmLyoKCi5QSE9OWTogYWxsCmFsbDogaHRtbCBwZGYKCi5QSE9OWTogbGlzdApsaXN0
OgoJIwoJIyBtYXJreSBUQVJHRVRTCgkjIyMjIyMjIyMjIyMjIyMKCSMgbWFrZSBzY2FuLzxB
TElBUz4gIC0gY3JlYXRlIE1ha2VmaWxlIGBidWlsZC88QUxJQVM+Lm1ha2VgCgkjIG1ha2Ug
YnVpbGQvPEFMSUFTPiAtIGJ1aWxkIGBidWlsZC88QUxJQVM+LntodG1sLHBkZn0ubWQscHlg
CgkjIG1ha2UgdGV4LzxBTElBUz4gICAtIGJ1aWxkIGBidWlsZC88QUxJQVM+LnRleGAKCSMg
bWFrZSBodG1sLzxBTElBUz4gIC0gYnVpbGQgYGh0bWwvPEFMSUFTPi5odG1sYAoJIyBtYWtl
IHBkZi88QUxJQVM+ICAgLSBidWlsZCBgcGRmLzxBTElBUz4ucGRmYAoJIyBtYWtlIGF1eC88
QUxJQVM+ICAgLSBydW4gYXV4IGNvbW1hbmRzIGZvciA8QUxJQVM+CgkjIG1ha2UgY2xlYW4v
PEFMSUFTPiAtIGNsZWFuIGZpbGVzLCBrZWVwOmBtYWtlLGh0bWwscGRmLHRleGAKCSMKCSMg
PEFMSUFTPgoJIyMjIyMjIyMjCgkjJChtYXJreV9hbGlhcykK
'''
pack_pandoc_run = '''
IyEvYmluL2Jhc2gKClsgJCMgPT0gMCBdICYmIGVjaG8gIiIiCiMgVXNhZ2U6ICQwOiA8Rk9S
TUFUPiA8SU5GSUxFPiA8T1VURklMRT4KIyBFeGFtcGxlOgojICQwIGh0bWwgYnVpbGQvZmls
ZS5odG1sLm1kIGh0bWwvZmlsZS5odG1sCiMgJDAgcGRmIGJ1aWxkL2ZpbGUucGRmLm1kIHBk
Zi9maWxlLnBkZgoiIiIgJiYgZXhpdCAxCgpQQU5ET0M9cGFuZG9jCgpNREVYVD1cCmFsbF9z
eW1ib2xzX2VzY2FwYWJsZStcCmludHJhd29yZF91bmRlcnNjb3JlcytcCmVzY2FwZWRfbGlu
ZV9icmVha3MrXApzcGFjZV9pbl9hdHhfaGVhZGVyK1wKbGlzdHNfd2l0aG91dF9wcmVjZWRp
bmdfYmxhbmtsaW5lK1wKaW5saW5lX2NvZGVfYXR0cmlidXRlcytcCnN0cmlrZW91dCtcCnlh
bWxfbWV0YWRhdGFfYmxvY2srXApwaXBlX3RhYmxlcytcCmxpbmVfYmxvY2tzK1wKaW1wbGlj
aXRfZmlndXJlcytcCmFiYnJldmlhdGlvbnMrXAppbmxpbmVfbm90ZXMKClBET1BUPSIiIgot
LXRhYmxlLW9mLWNvbnRlbnRzCi0tbnVtYmVyLXNlY3Rpb25zCiIiIgoKaWYgWyAkMSA9PSBo
dG1sIF0gOyB0aGVuCiRQQU5ET0MgIiQyIiBcCi0tZmlsdGVyIHBhbmRvYy14bm9zIFwKLS1j
aXRlcHJvYyBcCi0tZnJvbT1tYXJrZG93bityYXdfaHRtbCskTURFWFQgXAotLXRvPWh0bWw1
IFwKLS1zZWxmLWNvbnRhaW5lZCBcCi0tb3V0cHV0PSIkMyIgXAotLXJlc291cmNlLXBhdGg9
Ii4vYnVpbGQvIiBcCiRQRE9QVApmaQoKaWYgWyAkMSA9PSBwZGYgXSA7IHRoZW4KJFBBTkRP
QyAiJDIiIFwKLS1maWx0ZXIgcGFuZG9jLXhub3MgXAotLWNpdGVwcm9jIFwKLS1mcm9tPW1h
cmtkb3duK3Jhd190ZXgrJE1ERVhUIFwKLS10bz1sYXRleCBcCi0tb3V0cHV0PSIkMyIgXAot
LXJlc291cmNlLXBhdGg9Ii4vYnVpbGQvIiBcCi0tcGRmLWVuZ2luZT14ZWxhdGV4IFwKJFBE
T1BUCmZpCgppZiBbICQxID09IHRleCBdIDsgdGhlbgokUEFORE9DICIkMiIgXAotLWZpbHRl
ciBwYW5kb2MteG5vcyBcCi0tY2l0ZXByb2MgXAotLWZyb209bWFya2Rvd24rcmF3X3RleCsk
TURFWFQgXAotLXRvPWxhdGV4IFwKLS1vdXRwdXQ9IiQzIiBcCi0tcmVzb3VyY2UtcGF0aD0i
Li9idWlsZC8iIFwKJFBET1BUCmZpCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBEb2N1bWVudGF0aW9uICIKdGl0bGUtLXBkZjogIi0tIGBw
ZGZgIgp0aXRsZS0taHRtbDogIi0tIGBodG1sYCIKYXV0aG9yOiBsZWhtYW5uNwpiaWJsaW9n
cmFwaHk6IGRhdGEvbWFya3kuYmliCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBl
cnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAog
ICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4K
ICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1j
bGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0t
LQo8Pwpjb2wgPSBmbXRjb2RlKAoJaHRtbD0iPHNwYW4gc3R5bGU9J2NvbG9yOnsxfTsnPnsw
fTwvc3Bhbj4iLAoJcGRmPXIiXHRleHRjb2xvcnt7ezF9fX17e3swfX19IgopCmRlZiB0ZXh0
X3Byb2MoY21kLCBjcm9wPVRydWUpOgoJaW1wb3J0IHN1YnByb2Nlc3MgYXMgc3AKCXRleHQg
PSAiIgoJZm9yIGkgaW4gc3AuY2hlY2tfb3V0cHV0KGNtZC5zcGxpdCgpKS5kZWNvZGUoInV0
Zi04Iikuc3BsaXQoIlxuIik6CgkJaWYgbm90IGNyb3A6CgkJCXRleHQgKz0gaSArICJcbiIK
CQllbGlmIGkuc3RhcnRzd2l0aCgiIyAiKToKCQkJdGV4dCArPSBpWzI6XSArICJcbiIKCQll
bGlmIGkgPT0gIiMiOgoJCQl0ZXh0ICs9ICJcbiIKCQllbGlmIGkuc3RhcnRzd2l0aCgiIyIp
OgoJCQl0ZXh0ICs9IGkgKyAiXG4iCglyZXR1cm4gdGV4dAp2ZXJzaW9uID0gdGV4dF9wcm9j
KCJweXRob24gbWFya3kucHkgLS12ZXJzaW9uIiwgY3JvcD1GYWxzZSkuc3RyaXAoKQo/Pgot
LS0KCj4gKipBYnN0cmFjdCoqIC0tIGBtYXJreWAgaXMgYSBwcmVwcm9jZXNzb3Igd2l0aCBh
biBlYXN5IGFuZCBpbnR1aXRpdmUKPiBzeW50YXggZm9yIGV4ZWN1dGlvbiBvZiBlbWJlZGRl
ZCB7e2NvbCgicHlob24iLCJibHVlIil9fSBjb2RlIGR1cmluZyByZW5kZXJpbmcKPiBgaHRt
bGAgYW5kIGBwZGZgIGRvY3VtZW50cyBmcm9tIE1hcmtkb3duIHRleHQuCj4gVGhpcyBkb2N1
bWVudCBpcyBjcmVhdGVkIHVzaW5nIGBtYXJreWAsIHZlcnNpb24gKnt7dmVyc2lvbn19Ki4K
PiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAg
cmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoK
IyBgbWFya3lgIER5bmFtaWMgTWFya2Rvd24KCmBtYXJreWAgaXMgYSBNYXJrZG93biBwcmVw
cm9jZXNzb3Igd2hpY2ggdHJhbnNmb3JtcyBhIE1hcmtkb3duIGRvY3VtZW50CnVzaW5nIHB5
dGhvbi4gYG1hcmt5YCBpbXBsZW1lbnRzIHRocmVlIHN0YXRlbWVudHMgd2l0aCBleHRyZW1l
bHkgZWFzeQphbmQgaW50dWl0aXZlIHN5bnRheCwgd2hpY2ggYXJlIGVtYmVkZGVkIGRpcmVj
dGx5IGluIHRoZSBNYXJrZG93biB0ZXh0OgoKMS4gYDxcPy4uLj9cPmA6IFB5dGhvbiBjb2Rl
IGJsb2NrLgoyLiBge1x7Li4ufVx9YDogYGZgLXN0cmluZyBvdXRwdXQgaW50byBNYXJrZG93
bi4KMy4gYF9fXygpYDogRnVuY3Rpb24gZm9yIG91dHB1dCBpbnRvIE1hcmtkb3duLgoKVXNp
bmcgYDxcPy4uLj9cPmAgYW5kIGB7XHsuLi59XH1gIHB5dGhvbiBjb2RlIGFuZCBgZmAtc3Ry
aW5nIG91dHB1dAphcmUgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIHRoZSBNYXJrZG93biB0
ZXh0LgoKIyMjIyBFeGFtcGxlIDE6IElubGluZSBGb3JtYXR0ZWQgT3VwdXQgey19Cjw/IQp4
ID0gMTIzLjQ1CkxFRyA9IGxhbWJkYSB2LCB3OiAibGVzc2VyIiBpZiB2IDwgdyBlbHNlICJl
cXVhbCBvciBncmVhdGVyIgo/PgpgYGBwaHAKPFw/e3tfX18oY29kZT1UcnVlKX19P1w+CmBg
YApgYGBtYXJrZG93bgpUaGlzIGlzIGFuIGV4YW1wbGUgd2l0aCBhIHZhbHVlIHg9e1x7eDou
M2Z9XH0sCndoaWNoIGlzIHtce0xFRyh4LCAxMDApfVx9IHRoYW4gMTAwLgpgYGAKIyMjIyBS
dW4gYW5kIE91dHB1dCB7LX0KYGBgbWFya2Rvd24KVGhpcyBpcyBhbiBleGFtcGxlIHdpdGgg
YSB2YWx1ZSB4PXt7eDouM2Z9fSwKd2hpY2ggaXMge3tMRUcoeCwgMTAwKX19IHRoYW4gMTAw
LgpgYGAKClVzaW5nIHRoZSBgX19fKClgIGZ1bmN0aW9uIHRleHQgaXMgZ2VuZXJhdGVkIGZy
b20gcHl0aG9uCmFsZ29yaXRobXMgYW5kIGR5bmFtaWNhbGx5IGluc2VydGVkIGludG8gdGhl
IHJlc3VsdGluZyBNYXJrZG93bi4KCiMjIyMgRXhhbXBsZSAyOiBEeW5hbWljIFRleHQgZnJv
bSBDb2RlIHstfQpgYGBwaHAKPFw/e3tfX18oY29kZT1UcnVlKX19P1w+CmBgYAojIyMjIFJ1
biBhbmQgT3V0cHV0IHstfQpgYGBtYXJrZG93bgo8PyEKZm9yIGkgaW4gcmFuZ2UoMyk6Cglf
X18oZiJ7aSsxfS4gYGkgPSB7aX1gIiwgImFiY2RlZmdoaWoiWzA6KGkrMSkqM10pCj8+CmBg
YAoKUHl0aG9uIGNvZGUsIHdoaWNoIGlzIGVtYmVkZGVkIGluIHRoZSBNYXJrZG93biB0ZXh0
CmZvbGxvd3MgdGhlIFB5dGhvbiBpbmRlbnRhdGlvbiBzdGFuZGFyZC4gTWFya2Rvd24KdGV4
dCBpcyBpbnRlZ3JhdGVkIGludG8gdGhlIHByb2dyYW0gZmxvdyB3aGVuIGJlaW5nCmluc2Vy
dGVkIGluIHB5dGhvbiBzdGF0ZW1lbnRzIGFjY29yZGluZ2x5LgoKIyMjIyBFeGFtcGxlIDM6
IFRleHQgaW4gQ29uZGl0aW9uIHstfQpgYGBwaHAKVGhpcyBpcyB0aGUgZmlyc3QgbGluZS4K
PFw/CmlmIEZhbHNlOgoJP1w+VGhpcyBMaW5lIGlzICoqbm90Kiogc2hvd24uPFw/CmVsc2U6
Cgk/XD5UaGlzIExpbmUgaXMgc2hvd24uPFw/Cj9cPgpUaGlzIGlzIHRoZSBsYXN0IGxpbmUu
CmBgYAojIyMjIFJ1biBhbmQgT3V0cHV0IHstfQpgYGBtYXJrZG93bgpUaGlzIGlzIHRoZSBm
aXJzdCBsaW5lLgo8PwppZiBGYWxzZToKCT8+VGhpcyBMaW5lIGlzICoqbm90Kiogc2hvd24u
PD8KZWxzZToKCT8+VGhpcyBMaW5lIGlzIHNob3duLjw/Cj8+ClRoaXMgaXMgdGhlIGxhc3Qg
bGluZS4KYGBgCgojIyMjIEV4YW1wbGUgNDogVGV4dCBpbiBQcm9ncmFtIEZsb3cgey19CmBg
YHBocAo8XD8KZm9yIGkgaW4gcmFuZ2UoMyk6Cgk/XD57XHtpKzF9XH0uIGBpID0ge1x7aX1c
fWAgaW4gdGhpcyBpdGVyYXRpb24uCjxcPwo/XD4KYGBgCiMjIyMgUnVuIGFuZCBPdXRwdXQg
ey19CmBgYG1hcmtkb3duCjw/CmZvciBpIGluIHJhbmdlKDMpOgoJPz57e2krMX19LiBgaSA9
IHt7aX19YCBpbiB0aGlzIGl0ZXJhdGlvbi4KPD8KPz4KYGBgCgojIyBBIEZpcnN0IGBtYXJr
eWAgRXhhbXBsZQoKYG1hcmt5YCBjb21iaW5lcyBweXRob24gZXhwcmVzc2lvbnMgd2l0aCBN
YXJrZG93biwgZm9yIGR5bmFtaWMgY3JlYXRpb24Kb2YgdGV4dC4gSW4gdGhlIGZvbGxvd2lu
ZywgdHdvIGluLWRlcHRoIGV4YW1wbGVzIG9mIGBtYXJreWAgYXJlIHByZXNlbnRlZC4KCiMj
IyMgRXhhbXBsZSAxOiBgbWFya3lgIFN5bnRheCB7LX0KPD8hCnggPSAxMjMKeSA9IDQ1CmRl
ZiBhYmNfZnVuKHYsIGEsIGIsIGMpOgoJcmV0dXJuIGEgaWYgdiA8IDEwMCBlbHNlIGIgaWYg
diA9PSAxMDAgZWxzZSBjCkxFRyA9IGxhbWJkYSB2OiBhYmNfZnVuKHYsICJsZXNzZXIiLCAi
ZXF1YWwiLCAiZ3JlYXRlciIpCj8+CmBgYHBocAo8XD97e19fXyhjb2RlPVRydWUpfX0/XD4K
YGBgCmBgYG1hcmtkb3duClRoaXMgaXMgYW4gZXhhbXBsZSB3aXRoIGEgdmFsdWUgeD17XHt4
fVx9LCB3aGljaCBpcwp7XHtMRUcoeCl9XH0gdGhhbiAxMDAuIFRoZXJlIGlzIGFub3RoZXIg
dmFsdWUgeT17XHt5fVx9LAp3aGljaCBpcyB7XHtMRUcoeSl9XH0gdGhhbiAxMDAuIEJvdGgg
dmFsdWVzIHRvZ2V0aGVyCmFyZSB4K3k9e1x7eCt5fVx9LgpgYGAKIyMjIyBSdW4gYW5kIE91
dHB1dCB7LX0KYGBgbWFya2Rvd24KVGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB2YWx1ZSB4
PXt7eH19LCB3aGljaCBpcwp7e0xFRyh4KX19IHRoYW4gMTAwLiBUaGVyZSBpcyBhbm90aGVy
IHZhbHVlIHk9e3t5fX0sCndoaWNoIGlzIHt7TEVHKHkpfX0gdGhhbiAxMDAuIEJvdGggdmFs
dWVzIHRvZ2V0aGVyCmFyZSB4K3k9e3t4K3l9fS4KYGBgCgpUaGUgZm9sbG93aW5nIGV4YW1w
bGUgY29udGFpbnMgbWV0YSBkYXRhIGluIHRoZSBmcm9udCBtYXR0ZXIKYW5kICBjYW4gYmUg
cmVuZGVyZWQgaW50byBgcGRmYCBhbmQgYGh0bWxgIGJ5IGp1c3QgY2FsbGluZwpgbWFrZSBw
ZGYvZmlsZWAgb3IgYG1ha2UgaHRtbC9maWxlYC4KCiMjIyMgRXhhbXBsZSAyOiBgbWQvZmls
ZS5tZGAgey19CmBgYHBocAotLS0KdGl0bGU6IEFuIEV4YW1wbGUKLS0tCjxcPwpkZWYgY2Fw
X2ZpcnN0KGkpOgoJcmV0dXJuICIgIi5qb2luKFtpWzBdLnVwcGVyKCkgKyBpWzE6XSBmb3Ig
aSBpbiBpLnNwbGl0KCldKQpmb3IgaSBpbiBbInZlcnkiLCAibm90IHNvIl06Cgk/XD4KKip7
XHtjYXBfZmlyc3QoaSl9XH0gU2VjdGlvbioqCgpUbyBkYXkgaXMgYSB7XHtpfVx9IHZlcnkg
bmljZSBkYXkuClRoZSBzdW4gaXMgc2hpbmluZyB7XHtpfVx9IGJyaWdodCBhbmQKdGhlIGJp
cmRzIGFyZSBzaW5naW5nIHtce2l9XH0gbG91ZCBhbmQKZmx5IHtce2l9XH0gaGlnaCBpbiB0
aGUge1x7aX1cfSBibHVlIHNreS4KCTxcPwo/XD4KYGBgCiMjIyMgT3V0cHV0IGBidWlsZC9m
aWxlLm1kYCB7LX0KYGBgbWFya2Rvd24KLS0tCnRpdGxlOiBBbiBFeGFtcGxlCi0tLQo8Pwpk
ZWYgY2FwX2ZpcnN0KGkpOgoJcmV0dXJuICIgIi5qb2luKFtpWzBdLnVwcGVyKCkgKyBpWzE6
XSBmb3IgaSBpbiBpLnNwbGl0KCldKQpmb3IgaSBpbiBbInZlcnkiLCAibm90IHNvIl06Cgk/
PgoqKnt7Y2FwX2ZpcnN0KGkpfX0gU2VjdGlvbioqCgpUbyBkYXkgaXMgYSB7e2l9fSB2ZXJ5
IG5pY2UgZGF5LgpUaGUgc3VuIGlzIHNoaW5pbmcge3tpfX0gYnJpZ2h0IGFuZAp0aGUgYmly
ZHMgYXJlIHNpbmdpbmcge3tpfX0gbG91ZCBhbmQKZmx5IHt7aX19IGhpZ2ggaW4gdGhlIHt7
aX19IGJsdWUgc2t5LgoJPD8KPz4KYGBgCgojIyBIb3cgZG9lcyBgbWFya3lgIHdvcmsgaW50
ZXJuYWxseT8KCmBtYXJreWAgdXNlcyBhbiBleHRyZW1lbHkgc2ltcGxlIG1lY2hhbmlzbSBm
b3IgZ2VuZXJhdGluZyBhIHB5dGhvbiBwcm9ncmFtbQpmcm9tIHRoZSBNYXJrZG93biB0ZXh0
LiBVc2luZyB0aGUgYDxcPy4uLj9cPmAgYW5kIGB7XHsuLi59XH1gIHN0YXRlbWVudCwKUHl0
aG9uIGNvZGUgaXMgZW1iZWRkZWQgaW50byB0aGUgTWFya2Rvd24gdGV4dCBhbmQgdHJhbnNs
YXRlZCBpbnRvIGEgc2VyaWVzCm9mIGNhbGxzIHRvIHRoZSBgX19fKClgIGZ1bmN0aW9uIHVz
aW5nIGBmYC1zdHJpbmdzIGFzIGFyZ3VtZW50cywgd2hlcmUKcHl0aG9uIHZhcmlhYmxlcyBh
cmUgcmVmZXJlbmNlZC4gVGhpcyByZXN1bHRzIGludG8gYSBweXRob24gcHJvZ3JhbQp3aGlj
aCBjYW4gZ2VuZXJhdGUgTWFya2Rvd24gdGV4dCBhbGdvcml0aG1pY2FsbHkuCgojIyMjIEV4
YW1wbGU6IGBtZC9maWxlLm1kYCB7LX0KYGBgcGhwCiogVGhpcyBpcyB7Zmlyc3R9LiA8XD8K
eCA9IDEgIyB0aGlzIGlzIGNvZGUKZm9yIGkgaW4gcmFuZ2UoMyk6CglpZiB4OgoJCT9cPgp7
XHtpKzF9XH0uIFRoZSB2YWx1ZSBpcyB7XHtce3h9XH1cfS4KPFw/CgllbHNlOgoJCT9cPntc
e2krMX1cfS4gVGhlIHZhbHVlIGlzIHplcm8uCjxcPwoJeCA9IDAKP1w+KiBUaGlzIGlzIGxh
c3QuCmBgYApUaGUgZmlsZSBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIE1hcmtkb3duIG91dHB1
dC4KCiMjIyMgT3V0cHV0OiBNYXJrZG93biB7LX0KYGBgYmFzaAoqIFRoaXMgaXMge2ZpcnN0
fS4gPD8KeCA9IDEgIyB0aGlzIGlzIGNvZGUKZm9yIGkgaW4gcmFuZ2UoMyk6CglpZiB4OgoJ
CT8+Cnt7aSsxfX0uIFRoZSB2YWx1ZSBpcyB7e3t4fX19Lgo8PwoJZWxzZToKCQk/Pnt7aSsx
fX0uIFRoZSB2YWx1ZSBpcyB6ZXJvLgo8PwoJeCA9IDAKPz4qIFRoaXMgaXMgbGFzdC4KYGBg
CgpgbWFya3lgIHRyYW5zZm9ybXMgdGhlIE1hcmtkb3duIGludG8gUHl0aG9uIHNvdXJjZSBj
b2RlLgpFeGVjdXRpb24gb2YgdGhlIFB5dGhvbiBzb3VyY2UgY29kZSB5aWVsZHMgdGhlIG5l
dyBNYXJrZG93biB0ZXh0LgoKIyMjIyBPdXRwdXQ6IGBidWlsZC9maWxlLnB5YCB7LX0KYGBg
cHl0aG9uCl9fXyhyZiIiIiogVGhpcyBpcyB7XHtmaXJzdH1cfS4gIiIiLCBfX18pOwp4ID0g
MSAjIHRoaXMgaXMgY29kZQpmb3IgaSBpbiByYW5nZSgzKToKCWlmIHg6CgkJX19fKHJmIiIi
CntpKzF9LiBUaGUgdmFsdWUgaXMge1x7XHt4fVx9XH0uCiIiIiwgX19fKTsKCWVsc2U6CgkJ
X19fKHJmIiIie2krMX0uIFRoZSB2YWx1ZSBpcyB6ZXJvLgoiIiIsIF9fXyk7Cgl4ID0gMApf
X18ocmYiIiIqIFRoaXMgaXMgbGFzdC4KIiIiLCBfX18pOwpgYGAKCiMgUXVpY2sgU3RhcnQK
CiMjIGBtYXJreWAgRGVwZW5kZW5jaWVzCgpgbWFya3lgIGRlcGVuZHMgb24gYHBhbmRvY2Ag
YW5kIGBweXlhbWxgLiBgcGFuZG9jYCBpcyB1c2VkIGZvciByZW5kZXJpbmcKdGhlIE1hcmtk
b3duIGludG8gYGh0bWxgIGFuZCBgcGRmYC4gYG1hcmt5YCB1c2VzCltwYW5kb2NdKGh0dHBz
Oi8vd3d3LnBhbmRvYy5vcmcvKSBmb3IgcmVuZGVyaW5nIGBodG1sYCBhbmQgYHBkZmAuCmBw
YW5kb2M+PTIuMTBgIHJlbGVhc2VzIGNhbiBiZSBmb3VuZApbaGVyZV0oaHR0cHM6Ly9naXRo
dWIuY29tL2pnbS9wYW5kb2MvcmVsZWFzZXMpLgpUaGUgb3RoZXIgcGFja2FnZXMgY2FuIGJl
IGluc3RhbGxlZCB3aXRoIGBwaXBgLgoKYGBgYmFzaApwaXAgaW5zdGFsbCBwYW5kb2MtZmln
bm9zCnBpcCBpbnN0YWxsIHBhbmRvYy1lcW5vcwpwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9z
CnBpcCBpbnN0YWxsIHBhbmRvYy10YWJsZW5vcwpwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwpw
aXAgaW5zdGFsbCBweXlhbWwKYGBgCgojIyBgbWFya3lgIFdvcmtmbG93CgpXb3JrZmxvdyBm
b3IgY3JlYXRpbmcgYGh0bWxgIG9yIGBwZGZgIHVzaW5nIGBtYXJreWAgYnkKaW52b2NhdGlv
biBvZiBgbWFrZSBzY2FuYCBhbmQgYG1ha2UgYWxsYC4KCiptYWtlKnwxLiAqd3JpdGUqICB8
ICB8Mi4gKmJ1aWxkKiAgICAgICAgICB8ICB8My4gKnJlbmRlcioKLS0tLS0tfC0tLS0tLS0t
LS0tLXwtLXwtLS0tLS0tLS0tLS0tLS0tLS0tLXwtLXwtLS0tLS0tLS0tLS0tLS0tCmBwZGZg
IHwgICAgICAgICAgICB8ICB8YGJ1aWxkL2ZpbGUuaHRtbC5tZGB8LT58YGh0bWwvZmlsZS5o
dG1sYApgLWAgICB8YG1kL2ZpbGUubWRgfC0+fCAgICAgICAgICAgICAgICAgICAgfCAgfApg
aGZtbGB8ICAgICAgICAgICAgfCAgfGBidWlsZC9maWxlLnBkZi5tZGAgfC0+fGBwZGYvZmls
ZS5wZGZgCgoxLiAqKndyaXRlKio6IHVzZXIgd3JpdGVzIGEgTWFya2Rvd24gdGV4dCBmaWxl
IGFuZCBwbGFjZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9yeSB3aXRoIHRoZSBleHRlbnNp
b24gYC5tZGAuCjIuICoqYnVpbGQqKjogYG1hcmt5YCB0cmFuc2Zvcm1zIHRoZSBmaWxlcyBp
biBgbWQvKi5tZGAgaW50byByZWd1bGFyIE1hcmtkb3duIHRleHQKYW5kIHBsYWNlcyB0aGUg
dHJhbnNmb3JtZWQgZmlsZXMgaW4gYGJ1aWxkL2AuCjMuICoqcmVuZGVyKio6IHRoZSByZWd1
bGFyIE1hcmtkb3duIHRleHQgaW4gdGhlIGZpbGVzIGBidWlsZC8qLm1kYCBpcyByZW5kZXJl
ZCBpbnRvCmBodG1sYCBhbmQgYHBkZmAgdXNpbmcgYHBhbmRvY2AuCgpUaGUgdGhyZWUgc3Rl
cHMgYXJlIGltcGxlbWVudGVkIGluIGEgTWFrZWZpbGUuCgojIyBEb3dubG9hZCBhbmQgSW5p
dGlhbGl6ZQoKYG1hcmt5YCBpcyBzdXBwbGllZCBhcyBhIHNpbmdsZS1maWxlIHNjcmlwdCB3
aGljaCBhdXRvbWF0aWNhbGx5CnNldHMgdXAgdGhlIHByb2plY3Qgc3RydWN0dXJlIGNvbnRh
aW5pbmcgYWxsIHNjcmlwdHMKcmVxdWlyZWQgZm9yIHByb2Nlc3NpbmcgYW5kIHJlbmRlcmlu
ZyBNYXJrZG93bi4KCkZvciBleGFtcGxlLCBkb3dubG9hZCBgbWFya3lgIGZyb20gZ2l0aHVi
LgpgYGBiYXNoCmdpdCBjbG9uZSBodHRwczovL2xlaG1hbm43LmdpdGh1Yi5jb20vbWFya3ku
Z2l0CmNkIG1hcmt5CmBgYAoKQWZ0ZXIgZG93bmxvYWQsIHRoZSBgbWFya3lgIGVudmlyb25t
ZW50IGlzIGluaXRpYWxpemVkIHVzaW5nIGBtYXJreWAuCmBgYGJhc2gKLi9tYXJreS5weSAt
LWluaXQKIyBta2RpciBidWlsZC8KIyBta2RpciBkYXRhCiMgbWtkaXIgbWQvCiMgV1JJVEUg
TWFrZWZpbGUKIyBXUklURSBwYW5kb2MtcnVuCiMgV1JJVEUgbWQvbWFya3kubWQKIyBXUklU
RSAuZ2l0aWdub3JlCiMgVVNBR0UKbWFrZSBoZWxwCmBgYAoKIyMgYG1hcmt5YCBFbnZpcm9u
bWVudAoKRHVyaW5nIGluaXRpYWxpemF0aW9uLCBgbWFya3lgIGNyZWF0ZXMgZGlyZWN0b3Jp
ZXMgYW5kIGZpbGVzLgpBZnRlciBpbml0aWFsaXphdGlvbiwgdGhlIGZvbGxvd2luZyBzdHJ1
Y3R1cmUgaXMgYXV0by1nZW5lcmF0ZWQKaW4gdGhlIHByb2plY3QgZGlyZWN0b3J5LiBgbWFy
a3lgIHNob3dzIHRoZSBwcm9qZWN0IHN0cnVjdHVyZQp3aGVuIGludm9raW5nIGBtYWtlIHRy
ZWVgLgpgYGBiYXNoCjw/Cl9fXyh0ZXh0X3Byb2MoIm1ha2UgdHJlZSIpKQo/PgpgYGAKClRo
ZSBzY3JpcHQgYHBhbmRvYy1ydW5gIGNhbiBiZSBhZGp1c3RlZCBpbiBjYXNlIHNwZWNpZmlj
CmBwYW5kb2NgIG9wdGlvbnMgYXJlIHJlcXVpcmVkIGZvciByZW5kZXJpbmcgdGhlIGBodG1s
YCBhbmQgYHBkZmAgZG9jdW1lbnRzLgoKIyMgRG9jdW1lbnQgUmVuZGVyaW5nCgpCeSBpbnZv
a2luZyBgbWFrZSBhbGxgIGFsbCBmaWxlcyBgbWQvKi5tZGAgYXJlIHRyYW5zZm9ybWVkCmlu
dG8gY29ycmVzcG9uZGluZyBgaHRtbC8qLmh0bWxgIGFuZCBgcGRmLyoucGRmYCBmaWxlcy4g
QnkKaW52b2tpbmcgYG1ha2UgaHR0cGRgIGEgcHl0aG9uIHdlYiBzZXJ2ZXIgaXMgc3RhcnRl
ZCBpbiBgaHRtbC9gLgoKQWxsIHVzZXItZ2VuZXJhdGVkIE1hcmtkb3duIGNvbnRlbnQgZ29l
cyBpbnRvIGBtZC8qYCB1c2VyLWdlbmVyYXRlZApkYXRhIGZpbGVzIGdvIGludG8gYGRhdGEv
KmAuCgoqKkFUVEVOVElPTjoqKiBUaGUgZmlsZXMgaW4gdGhlIGRpcmVjdG9yaWVzIGBidWls
ZC8qYCBhcmUKKiphdXRvLWdlbmVyYXRlZCoqLiBBbGwgdXNlciBmaWxlcyBoYXZlIHRvIGJl
IHBsYWNlZCBpbnNpZGUgdGhlCmRpcmVjdG9yeSBgbWQvKmAuIEludm9raW5nIGBtYWtlIGNs
ZWFuYCB3aWxsICoqZGVsZXRlIGFsbCBmaWxlcyoqCmluIGBodG1sL2AsIGBidWlsZC9gIGFu
ZCBgcGRmL2AuCgojIyBgbWFya3lgIE1ha2VmaWxlIFRhcmdldHMKCmBtYXJreWAgbWFuYWdl
cyBhbGwgZmlsZXMgdXNpbmcgTWFrZWZpbGUgdGFyZ2V0cy4gTWFrZWZpbGUgdGFyZ2V0cwph
cmUgaW5pdGlhbGl6ZWQgdXNpbmcgYG1ha2Ugc2NhbmAgYW5kIHNob3duIHVzaW5nIGBtYWtl
IGxpc3RgLgpgYGBiYXNoCjw/Cl9fXyh0ZXh0X3Byb2MoIm1ha2UgbGlzdCIpKQo/PgpgYGAK
CiMjIEludGVncmF0ZWQgRG9jdW1lbnRhdGlvbgoKYG1hcmt5YCBoYXMgYW4gaW50ZWdyYXRl
ZCBlbnZpcm9ubWVudC4gVXNpbmcgYG1ha2UgaGVscGAgZGlzcGxheXMKYSBzaG9ydCBpbmZv
IGFib3V0IHRoZSBgbWFya3lgIGRlcGVuZGVuY2llcywgbWFrZSB0YXJnZXRzIGFuZApleGFt
cGxlcy4KYGBgYmFzaAo8PwpfX18odGV4dF9wcm9jKCJtYWtlIGhlbHAiKSkKPz4KYGBgCgoj
IGBtYXJreWAgRmVhdHVyZXMKCkluIG9yZGVyIHRvIHF1aWNrIHN0YXJ0IGEgbmV3IE1hcmtk
b3duIHByb2plY3QsIGp1c3QgbGluayB0aGUKYG1hcmt5LnB5YCBleGVjdXRhYmxlIGluIHRo
ZSBwcm9qZWN0IGRpciBvciBjbG9uZSB0aGUgZ2l0IGFzCmRlc2NyaWJlZCBhYm92ZSwgYW5k
IGluaXRpYWxpemUgdGhlIGVudmlyb25tZW50IHVzaW5nIGAtLWluaXRgLgpgYGBiYXNoCm1r
ZGlyIG15X3Byb2plY3QKY2QgbXlfcHJvamVjdApsbiAtcyB+L21hcmt5L21hcmt5LnB5IC4K
IyAuLi4gb3IgZ2l0IGNsb25lIC4uLgouL21hcmt5LnB5IC0taW5pdApgYGAKCk5vdyBgbWFy
a3lgIGlzIHJlYWR5IGZvciBvcGVyYXRpb24uIFBsYWNlIGEgbmV3IGZpbGUgaW4gYG1kL2Zp
bGUubWRgCmFuZCBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KYGBgYmFzaAp0b3VjaCBt
ZC9maWxlLm1kCm1ha2Ugc2NhbgojIFdSSVRFIGJ1aWxkL2ZpbGUubWFrZQpgYGAKCmBtYXJr
eWAgZGlzY292ZXJzIHRoZSBuZXcgZG9jdW1lbnQgd2hlbiBpbnZva2luZyBgbWFrZSBzY2Fu
YC4KYG1hcmt5YCBhbHNvIHJlbmRlcnMgYGh0bWxgIGFuZCBgcGRmYCB1c2luZyBtYWtlIHRh
cmdldHMuCmBgYGJhc2gKbWFrZSBodG1sL2ZpbGUKbWFrZSBwZGYvZmlsZQpgYGAKCiMjIE1l
dGEgRGF0YSBpbiBGcm9udCBNYXR0ZXIKCklmIGRvY3VtZW50IHN0YXJ0cyB3aXRoIGAtLS1g
LCB5YW1sIGlzIHVzZWQgdG8gcGFyc2UKdGhlIGZyb250IG1hdHRlciBibG9jayBkZWxpbWl0
ZWQgYnkgYC0tLWAuCkFsbCBtZXRhIGRhdGEga2V5cyB3aWxsIGJlIGV4cG9zZWQgaW50byB0
aGUgcHl0aG9uIHNjb3BlIGFzIGEgbG9jYWwKdmFyaWFibGUsIHVubGVzcyB0aGUgdmFyaWFi
bGUgYWxyZWFkeSBleGlzdHMuCgojIyMjIEV4YW1wbGUgey19CmBgYHBocAotLS0KdGl0bGU6
ICJQcmltZSBOdW1iZXJzIgphdXRob3I6IC4uLgpkYXRlOiAuLi4Kbm1heDogMjAKLS0tClRo
ZSB0aXRsZSBvZiB0aGlzIGRvY3VtZW50IGlzIHtce3RpdGxlfVx9Lgo8XD8KZm9yIGkgaW4g
cmFuZ2UoMiwgbm1heCk6CglwcmltID0gVHJ1ZQoJZm9yIGogaW4gcmFuZ2UoMiwgaSk6CgkJ
aWYgaSAlIGogPT0gMDoKCQkJcHJpbSA9IEZhbHNlCgkJCWJyZWFrCglpZiBwcmltOgoJCT9c
PiogcHJpbWUgbnVtYmVyOiB7XHtpfVx9CmBgYAojIyMjIE91dHB1dCB7LX0KYGBgbWFya2Rv
d24KLS0tCnRpdGxlOiAiUHJpbWUgTnVtYmVycyIKYXV0aG9yOiAuLi4KZGF0ZTogLi4uCm5t
YXg6IDIwCi0tLQpUaGUgdGl0bGUgb2YgdGhpcyBkb2N1bWVudCBpcyBQcmltZSBOdW1iZXJz
LgoqIHByaW1lIG51bWJlcjogMgoqIHByaW1lIG51bWJlcjogMwoqIHByaW1lIG51bWJlcjog
NQoqIHByaW1lIG51bWJlcjogNwoqIHByaW1lIG51bWJlcjogMTEKKiBwcmltZSBudW1iZXI6
IDEzCiogcHJpbWUgbnVtYmVyOiAxNwpgYGAKCiMjIElubGluZSBGb3JtYXR0ZWQgT3V0cHV0
CgpQeXRob24gbG9jYWwgdmFyaWFibGVzIGFuZCB2YXJpYWJsZXMgZnJvbSBtZXRhIGRhdGEg
aW4gZnJvbnQgbWF0dGVyCmNhbiBiZSBhY2Nlc3NlZCBkaXJldGx5IGZyb20gdGhlIG1hcmtk
b3duIHRleHQuClRoZSBge1x7Li4ufVx9YCBzdGF0ZW1lbnQgdXNlcyBzeW50YXggc2ltaWxh
ciB0byBweXRob24gYGZgLXN0cmluZ3MgZm9yCmZvcm1hdHRlZCBvdXRwdXQgb2YgdmFyaWFi
bGVzIGFuZCByZXN1bHRzIG9mIGV4cHJlc3Npb25zIGludG8gTWFya2Rvd24KdGV4dC4gVGhl
IGBtYXJreWAgb3BlcmF0b3IgYHtcezxleHByZXNzaW9uPls6PGZvcm1hdD5dfVx9YCB1c2Vz
IHRoZQpzeW50YXggb2YgW2BmYC1zdHJpbmdzXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8z
L3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJpbmdzKS4KCiMjIyMgRXhh
bXBsZSAxIHstfQpgYGBiYXNoClRpdGxlIG9mIHRoaXMgZG9jdW1lbnQgaXMge1x7dGl0bGV9
XH0gYW5kIGZvbnQgc2l6ZSBpcyB7XHtmb250c2l6ZX1cfS4KYHhgIGlzIHtce3h9XH0gYW5k
IHtceyIsIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gcmFuZ2UoeC0xMCx4KV0pfVx9LgpgYGAK
IyMjIyBPdXRwdXQgey19Cj4gVGl0bGUgb2YgdGhpcyBkb2N1bWVudCBpcyB7e3RpdGxlfX0g
YW5kIGZvbnQgc2l6ZSBpcyB7e2ZvbnRzaXplfX0uCj4gYHhgIGlzIHt7eH19IGFuZCB7eyIs
Ii5qb2luKFtzdHIoaSkgZm9yIGkgaW4gcmFuZ2UoeC0xMCx4KV0pfX0uCgojIyMjIEV4YW1w
bGUgMiB7LX0KPD8hCnggPSBpbnQoMSkKeSA9IGZsb2F0KDIuMykKeiA9IDAKYSA9IFsxLCAy
LCAzXQpiID0gKDQsIDUpCj8+CmBgYHB5dGhvbgp7e19fXyhjb2RlPVRydWUsIGNyb3A9VHJ1
ZSl9fQpgYGAKYGBgbWFya2Rvd24KVGhpcyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyB7XHt4
OjAzZH1cfSBhbmQgeSBpcyB7XHt5Oi4yZn1cfS4KT3RoZXIgY29udGVudCBpczogYSA9IHtc
e2F9XH0sIGIgPSB7XHtifVx9LgpgYGAKIyMjIyBPdXRwdXQgey19Cj4gVGhpcyBpcyBhIHBh
cmFncmFwaCBhbmQgeCBpcyB7e3g6MDNkfX0gYW5kIHkgaXMge3t5Oi4yZn19Lgo+IE90aGVy
IGNvbnRlbnQgaXM6IGEgPSB7e2F9fSwgYiA9IHt7Yn19LgoKIyMgRW1iZWRkaW5nIFB5dGhv
biBDb2RlCgpQeXRob24gY29kZSBibG9ja3MgYXJlIGVtYmVkZGVkIGludG8gTWFya2Rvd24g
dXNpbmcgYDxcPy4uLj9cPmAgYW5kIGB7XHsuLi59XH1gLgpBbGwgY29kZSBibG9ja3Mgc3Bh
biBvbmUgbGFyZ2Ugc2NvcGUgc2hhcmluZyBmdW5jdGlvbnMgYW5kIGxvY2FsCnZhcmlhYmxl
cy4gTWV0YSBkYXRhIGlzIGltcG9ydGVkIGZyb20gTWFya2Rvd24gZnJvbnQgbWF0dGVyIGFz
IGxvY2FsCnZhcmlhYmxlcyBpbiB0aGUgcHl0aG9uIHNjb3BlLiBUaGUgYGltcG9ydGAgc3Rh
dGVtZW50IGNhbiBiZSB1c2VkIGluCnB5dGhvbiBjb2RlIGluIG9yZGVyIHRvIGFjY2VzcyBp
bnN0YWxsZWQgcHl0aG9uIHBhY2thZ2VzIGFzIHVzdWFsLgoKIyMjIFZpc2libGUgQ29kZQoK
VXNpbmcgYDxcPyEuLi4/XD5gIGNvZGUgaXMgZXhlY3V0ZWQgYW5kIHN0b3JlZC4KVGhlIHRl
eHQgb2YgdGhlIGxhc3QgYDxcPyEuLi4/XD5gIGJsb2NrIGNhbiBiZQphY2Nlc3NlZCBhbmQg
cGxhY2VkIHZpYSBge1x7X19fKGNvZGU9VHJ1ZSl9XH1gLgoKIyMjIyBFeGFtcGxlIHstfQpg
YGBweXRob24KPFw/IQp4ID0gNDIgIyB2aXNpYmxlIGNvZGUKcHJpbnQoIkhlbGxvIGNvbnNv
bGUhIikKP1w+Cntce19fXyhjb2RlPVRydWUpfVx9CmBgYAoKIyMjIyBSdW4gYW5kIE91dHB1
dCB7LX0KPD8hCnggPSA0MiAjIHZpc2libGUgY29kZQpwcmludCgiSGVsbG8gY29uc29sZSEi
KQo/PgpgYGBweXRob24Ke3tfX18oY29kZT1UcnVlLCBjcm9wPVRydWUpfX0KYGBgCgoqKkFU
VEVOVElPTjoqKiBVc2luZyB0aGUgYHByaW50KClgIGZ1bmN0aW9uIHRoZSB0ZXh0IHdpbGwg
YmUgcHJpbnRlZAp0byB0aGUgY29uc29sZSBhbmQgKipub3QqKiBpbnNpZGUgdGhlIHJlc3Vs
dGluZyBNYXJrZG93biB0ZXh0LgoKIyMjIEhpZGRlbiBDb2RlCgpVc2luZyBgPFw/Li4uP1w+
YCBjb2RlIGlzIGV4ZWN1dGVkIGJ1dCBub3Qgc2hvd24gaW4gTWFya2Rvd24uCgojIyMjIEV4
YW1wbGUgey19CmBgYHB5dGhvbgo8XD97e19fXyhjb2RlPVRydWUpfX0/XD4KYGBgCiMjIyMg
UnVuIGFuZCBPdXRwdXQgey19CmBgYHB5dGhvbgo8PyEKeCA9IDQxICMgaGlkZGVuIGNvZGUK
X19fKGYiT3V0cHV0IHRvIE1hcmtkb3duLiB4ID0ge3h9ISIpCj8+CmBgYAoKKipBVFRFTlRJ
T046KiogVXNpbmcgdGhlIGBfX18oKWAgZnVuY3Rpb24gdGhlIHRleHQgd2lsbCBiZSBwcmlu
dGVkCmluc2lkZSB0aGUgcmVzdWx0aW5nIE1hcmtkb3duIHRleHQgKiphbmQgbm90Kiogb24g
dGhlIGNvbnNvbGUuCgojIyMgRXJyb3IgTWVzc2FnZXMKCmBtYXJreWAgc2hvd3MgZXJyb3Ig
bWVzc2FnZXMgZGlyZWN0bHkgaW5zaWRlIHRoZSBNYXJrZG93biB0ZXh0LgoKIyMjIyBFeGFt
cGxlIDE6IGBtZC9maWxlLm1kYCB7LX0KYGBgc2NhbGEKICAgMSAgLS0tCiAgIDIgIHRpdGxl
OiAiU3ludGF4IEVycm9yIgogICAzICAtLS0KICAgNCAgPFw/CiAgIDUgIHggPSAxCiAgIDYg
ID9cPgogICA3ICBUaGUgdmFsdWUgeCBpcyB7XHt5fVx9LgpgYGAKIyMjIyBSdW4gYW5kIE91
dHB1dDogYG1ha2UgYnVpbGQvZmlsZWAgey19CmBgYGJhc2gKPCEtLSBydW4gbWQvZmlsZS5t
ZCAtLSE+CjwhLS0gcnVuIGJ1aWxkL2ZpbGUucHkgLS0hPgo8IS0tIFBZVEhPTiBFUlJPUgog
IEZpbGUgIm1kL2ZpbGUubWQiLCBsaW5lIDcsIGluIDxtb2R1bGU+CiAgICBUaGUgdmFsdWUg
eCBpcyB7XHt5fVx9LgogIEVycm9yIDxjbGFzcyAnTmFtZUVycm9yJz4gOiBuYW1lICd5JyBp
cyBub3QgZGVmaW5lZAotLSE+CmBgYAoKIyMjIyBFeGFtcGxlIDI6IGBtZC9maWxlLm1kYCB7
LX0KYGBgc2NhbGEKICAgMSAgLS0tCiAgIDIgIHRpdGxlOiAiSW50ZW5kYXRpb24gRXJyb3Ii
CiAgIDMgIC0tLQogICA0ICA8XD8KICAgNSAgZm9yIGkgaW4gcmFuZ2UoMyk6CiAgIDYgICAg
ICBpZiBpICUgMjoKICAgNyAgICAgID9cPiogZXZlbiBsaXN0IGl0ZW0KICAgOCAgPFw/CiAg
IDkgICAgICBlbHNlOgogIDEwICAgICAgICAgID9cPiogb2RkIGxpc3QgaXRlbQpgYGAKIyMj
IyBSdW4gYW5kIE91dHB1dDogYG1ha2UgYnVpbGQvZmlsZWAgey19CmBgYGJhc2gKPCEtLSBy
dW4gbWQvZmlsZS5tZCAtLSE+CjwhLS0gcnVuIGJ1aWxkL2ZpbGUucHkgLS0hPgo8IS0tIFBZ
VEhPTiBFUlJPUgogIEVycm9yIDxjbGFzcyAnSW5kZW50YXRpb25FcnJvcic+IDogZXhwZWN0
ZWQgYW4gaW5kZW50ZWQgYmxvY2sKICAgICAgICA/XD4qIGV2ZW4gbGlzdCBpdGVtICAgICAg
ICAgKG1kL2ZpbGUubWQsIGxpbmUgNykKLS0hPgpgYGAKCiMjIFRoZSBgX19fKClgIEZ1bmN0
aW9uCgpVc2luZyB0aGUgYHByaW50KClgIHN0YXRlbWVudCB0aGUgdGV4dCB3aWxsIGJlIHBy
aW50ZWQgdG8gdGhlIGNvbnNvbGUuCldoZW4gdXNpbmcgdGhlIGBfX18oKWAgc3RhdGVtZW50
IG5ldyBNYXJrZG93biB0ZXh0IGlzCmluc2VydGVkIGR5bmFtaWNhbGx5IGludG8gdGhlIGRv
Y3VtZW50IGR1cmluZyBwcmVwcm9jZXNzaW5nLgoKIyMjIyBFeGFtcGxlOiBMaW5lIEJyZWFr
IHstfQpgYGBweXRob24KPFw/e3tfX18oY29kZT1UcnVlKX19P1w+CmBgYAojIyMjIFJ1biBh
bmQgT3V0cHV0IHstfQpgYGBiYXNoCjw/IQp4ID0gNDAgIyBoaWRkZW4gY29kZQpfX18oIk91
dHB1dCBpbiAiLCBfX18pCl9fXygic2luZ2xlIGxpbmUhICIsIF9fXykKX19fKGYieCA9IHt4
fSIpCj8+CmBgYAoKIyMjIyBFeGFtcGxlOiBTaGlmdCwgQ3JvcCwgUmV0dXJuIHstfQpgYGBw
eXRob24KPFw/e3tfX18oY29kZT1UcnVlKX19P1w+CmBgYAojIyMjIFJ1biBhbmQgT3V0cHV0
IHstfQpgYGBiYXNoCjw/IQpyZXN1bHQgPSBfX18oIiIiCiAgICogdGV4dCBpcyBjcm9wcGVk
IGFuZCBzaGlmdGVkCiAgICAgICAgICogc2hpZnQgYW5kIGNyb3AKICAgICAgICAgICAgKiBj
YW4gYmUgY29tYmluZWQKICAgICAgICAgICogcmV0dXJuaW5nIHRoZSByZXN1bHQKIiIiLCBz
aGlmdD0iIyMjIyMjIyMiLCBjcm9wPVRydWUsIHJldD1UcnVlKQpfX18ocmVzdWx0KQo/Pgpg
YGAKCiMjIEFsZ29yaXRobWljIFRhYmxlIEV4YW1wbGUKCkB0Ymw6YWxndCBpcyBnZW5lcmF0
ZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBweXRob24gY2xvZGUgYmxvY2suCgo8PyEKbiA9IDUK
dGFibGUgPSAiIgpkZWMgPSBbIiolcyoiLCAiKiolcyoqIiwgIn5+JXN+fiIsICJgJXNgIiwK
ICAgICAgIHIiJFx0aW1lc14lcyQiLCAiJFxpbmZ0eV8lcyQiXQp0YWJsZSArPSAifCIuam9p
bigiWCIqbikgKyAiXG4iICsgInwiLmpvaW4oIi0iKm4pICsgIlxuIgpmb3IgaSBpbiByYW5n
ZShuKToKCWZpbGwgPSBbY2hyKG9yZCgiQSIpKygyKmkrMyprKSUyNikgZm9yIGsgaW4gcmFu
Z2UoaSsxKV0KCWZpbGwgPSBbZGVjWyhsK2kpJWxlbihkZWMpXSVrIGZvciBsLCBrIGluIGVu
dW1lcmF0ZShmaWxsKV0KCXRleHQgPSBsaXN0KCIwIikqbgoJdGV4dFsobj4+MSktKGk+PjEp
OihuPj4xKSsoaT4+MSldID0gZmlsbAoJdGFibGUgKz0gInwiLmpvaW4odGV4dCkgKyAiXG4i
Cj8+CmBgYHB5dGhvbgp7e19fXyhjb2RlPVRydWUsIGNyb3A9VHJ1ZSl9fQpgYGAKCnt7dGFi
bGV9fQoKVGFibGU6IFRhYmxlIGlzIGdlbmVyYXRlZCB1c2luZyBjb2RlIGFuZCB0aGUgYF9f
XygpYCBzdGF0ZW1lbnQuIHsjdGJsOmFsZ3R9CgojIyBGb3JtYXQgTGluayBFeHRlbnNpb24K
CldoZW4gd3JpdGluZyBtdWx0aXBsZSBkb2N1bWVudHMsIG9mdGVuIGRvY3VtZW50cyBhcmUg
cmVmZXJlbmNlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgbGlua3MuIEluIG9yZGVyIHRv
IHJlZmVyIHRvIGV4dGVybmFsCmBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIHRoZSBNYXJr
ZG93biBsaW5rIHN0YXRlbWVudCBpcyB1c2VkLgpgYGBtZApbTGluayBDYXB0aW9uXShwYXRo
L3RvL2ZpbGUuaHRtbCkKW0xpbmsgQ2FwdGlvbl0ocGF0aC90by9maWxlLnBkZikKYGBgCk9u
ZSBsaW5rIHN0YXRlbWVudCBjYW5ub3QgYmUgdXNlZCBmb3IgcmVuZGVyaW5nIGBodG1sYCBh
bmQgYHBkZmAKd2l0aCBjb25zaXN0ZW50IHBhdGhzLiBVc2luZyB0aGUgYG1hcmt5YCBmb3Jt
YXQgbGluawogYC5cPz8/YCBmaWxlIGV4dGVuc2lvbiByZXN1bHRzIGluIGNvbnNpc3RlbnQg
bGlua3MgZm9yIGBodG1sYCBhbmQKYHBkZmAgZG9jdW1lbnRzLgoKIyMjIyBFeGFtcGxlIHst
fQpgYGBtZApbTGluayB0byB0aGlzIERvY3VtZW50XShtYXJreS5cPz8/KQpgYGAKIyMjIyBP
dXRwdXQgey19Cj4gW0xpbmsgdG8gdGhpcyBEb2N1bWVudF0obWFya3kuPz8/KQoKIyMgRm9y
bWF0IENvZGVzCgpPZnRlbiB3aGVuIHdyaXRpbmcgbWFya2Rvd24gZm9yIGBodG1sYCBhbmQg
YHBkZmAgZG9jdW1lbnRzLCB0aGUKb3V0cHV0IG5lZWRzIHRvIGJlIHR3ZWFrZWQgYWNjb3Jk
aW5nbHkuCmBtYXJreWAgc3VwcG9ydHMgZm9ybWF0IHNwZWNpZmljIHR3ZWFraW5nIGJ5IGlu
amVjdGluZwpyYXcgYGh0bWxgIG9yIGB0ZXhgIGNvZGUgaW50byBNYXJrZG93biB1c2luZyBm
b3JtYXQgY29kZXMuCgpJbiBvcmRlciB0byBpbmplY3QgZm9ybWF0IHNwZWNpZmljIGNvZGUg
dGhlIGBmbXRjb2RlYCBjbGFzcyBpcyB1c2VkLgpUaGUgYGZtdGNvZGVgIGNsYXNzIG1hbmFn
ZXMgaW5qZWN0aW9uIG9mIGBodG1sYCBhbmQgYHRleGAgY29kZQpkZXBlbmRpbmcgb24gdGhl
IG91dHB1dCBmb3JtYXQuCgoqKkFUVEVOVElPTjoqKiBgdGV4YCBwYWNrYWdlcyBoYXZlIHRv
IGJlIGluY2x1ZGVkIGZvciBgcGRmYCBhcyB3ZWxsIGFzCkphdmFTY3JpcHQgYW5kIHN0eWxl
IHNoZWV0cyBmb3IgYGh0bWxgIHVzaW5nIHRoZSBtZXRhIGRhdGEgZmllbGRzCmBoZWFkZXIt
aW5jbHVkZXMtLXBkZmAgYW5kIGBoZWFkZXItaW5jbHVkZXMtLWh0bWxgIHJlc3BlY3RpdmVs
eS4KCiMjIyMgRXhhbXBsZTogYGZtdGNvZGVgIHstfQo8PyEKRiA9IGZtdGNvZGUoaHRtbD0i
SDxzdXA+VDwvc3VwPjxzdWI+TTwvc3ViPkwiLCBwZGY9ciJcTGFUZVgiKQo/PgpgYGBweXRo
b24Ke3tfX18oY29kZT1UcnVlLCBjcm9wPVRydWUpfX0KYGBgCmBgYG1hcmtkb3duCkludm9j
YXRpb24gb2YgZm9ybWF0IGNvZGUgcmVzdWx0cyBpbjoge1x7RigpfVx9LgpgYGAKIyMjIyBP
dXRwdXQgey19Cj4gSW52b2NhdGlvbiBvZiBmb3JtYXQgY29kZSByZXN1bHRzIGluOiB7e0Yo
KX19LgoKIyMjIyBFeGFtcGxlOiBDb2xvciB7LX0KPD8hCkMgPSBsYW1iZGEgY29sb3I6IGZt
dGNvZGUoCglodG1sPSI8c3BhbiBzdHlsZT0nY29sb3I6JXM7Jz57MH08L3NwYW4+IiAlIGNv
bG9yLAoJcGRmPXIiXHRleHRjb2xvcnt7JXN9fXt7ezB9fX0iICUgY29sb3IKKQpCID0gQygi
Ymx1ZSIpClIgPSBDKCJyZWQiKQo/PgpgYGBweXRob24Ke3tfX18oY29kZT1UcnVlLCBjcm9w
PVRydWUpfX0KYGBgCmBgYG1hcmtkb3duClRleHQgd2l0aCB7XHtCKCJibHVlIil9XH0gYW5k
IHtce1IoIlJFRCIpfVx9LgpgYGAKIyMjIyBPdXRwdXQgey19Cj4gVGV4dCB3aXRoIHt7Qigi
Ymx1ZSIpfX0gYW5kIHt7UigiUkVEIil9fS4KCgojIyMjIEV4YW1wbGU6IENsYXNzZXMgey19
Cjw/IQpjbGFzcyBjb2xvcjoKCWRlZiBfX2luaXRfXyhzZWxmLCBjb2xvcik6CgkJc2VsZi5j
b2xvciA9IGNvbG9yCglkZWYgdXBwZXIoc2VsZiwgeCk6CgkJcmV0dXJuIHNlbGYudGV4dCh4
LnVwcGVyKCkpCglkZWYgbG93ZXIoc2VsZiwgeCk6CgkJcmV0dXJuIHNlbGYudGV4dCh4Lmxv
d2VyKCkpCgpjbGFzcyBodG1sKGNvbG9yKToKCWRlZiB0ZXh0KHNlbGYsIHgpOgoJCXJldHVy
biBmIjxzcGFuIHN0eWxlPSdjb2xvcjp7c2VsZi5jb2xvcn07Jz57eH08L3NwYW4+IgoKY2xh
c3MgcGRmKGNvbG9yKToKCWRlZiB0ZXh0KHNlbGYsIHgpOgoJCXJldHVybiByZiJcdGV4dGNv
bG9ye3t7c2VsZi5jb2xvcn19fXt7e3h9fX0iCgpDQyA9IGxhbWJkYSB4OiBmbXRjb2RlKGh0
bWw9aHRtbCh4KSwgcGRmPXBkZih4KSkKQkIgPSBDQygiYmx1ZSIpClJSID0gQ0MoInJlZCIp
Cj8+CmBgYHB5dGhvbgp7e19fXyhjb2RlPVRydWUsIGNyb3A9VHJ1ZSl9fQpgYGAKYGBgbWFy
a2Rvd24KVGV4dCB3aXRoIHtce0JCLnVwcGVyKCJibHVlIil9XH0gYW5kIHtce1JSLmxvd2Vy
KCJSRUQiKX1cfS4KYGBgCiMjIyMgT3V0cHV0IHstfQo+IFRleHQgd2l0aCB7e0JCLnVwcGVy
KCJibHVlIil9fSBhbmQge3tSUi5sb3dlcigiUkVEIil9fS4KCiMjIE1hcmtkb3duIEluY2x1
ZGUKClRoZSBgbWFya3lgIGluY2x1ZGUgc3RhdGVtZW50IGBfX18oZmlsZSlgIEZvciBpbmNs
dXNpb24gb2YgdGV4dCBmcm9tCm90aGVyIGZpbGVzIGNhbiBiZSB1c2VkIHRvIGluY2x1ZGUg
dGV4dCBpbnRvIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLgpgYGBweXRob24KPFw/Cl9f
XyhmaWxlPSJpbmNsdWRlLm1kIiwgX19tYXJreV9fPUZhbHNlLCByYXc9RmFsc2UsIGF1eD1G
YWxzZSkKP1w+CmBgYAoKYF9fXyhmaWxlKWAgc3VwcG9ydHMgZm9sbG93aW5nIG9wdGlvbnMu
CiogYF9fbWFya3lfX2A6IGNvbnRyb2xzIHdoZXRoZXIgdGhlIGluY2x1ZGUgZmlsZSBpcyBw
cm9jZXNzZWQgYXMgYG1hcmt5YApzY3JpcHQgKGBUcnVlYCkgb3IgYXMgYSBgbWFya3lgIG1v
ZHVsZSAoYEZhbHNlYCwgZGVmYXVsdCkuCiogYHJhd2A6IGNvbnRyb2xzIHdoZXRoZXIgdGhl
IGluY2x1ZGUgZmlsZSBpcyBpbmNsdWRlZCBhcy1pcyAoYFRydWVgKQpvciBwcm9jZXNzZWQg
dmlhIGBtYXJreWAgKGBGYWxzZWAsIGRlZmF1bHQpLgoqIGBhdXhgOiBkaXNhYmxlcyBwcm9j
ZXNzaW5nIG9mIHRoZSBmaWxlIGlmIGBUcnVlYCwgKGRlZmF1bHQ6IGBGYWxzZWApLgoKV2hl
biBzY3JpcHQgbW9kZSBpcyBhY3RpdmF0ZWQgKGBfX21hcmt5X189VHJ1ZWApIHRoZW4gdGhl
ICptb2R1bGUgY29kZSoKYXMgd2VsbCBhcyB0aGUgKnNjcmlwdCBjb2RlKiBhcmUgZXhlY3V0
ZWQuIEhvd2V2ZXIsIGlmIG1vZHVsZSBtb2RlIGlzCmFjdGl2YXRlZCAgKGBfX21hcmt5X189
RmFsc2VgKSwgb25seSB0aGUgKm1vZHVsZSBjb2RlKiBpcyBwcm9jZXNzZWQuCgpgYGBwaHAK
LS0tCnRpdGxlOiBUZXN0Ci0tLQo8XD8KIyBtYXJreSBtb2R1bGUgY29kZQo/XD4KYG1hcmt5
YCBtb2R1bGUgb3V0cHV0CjxcPwppZiBfX21hcmt5X186CgkjIG1hcmt5IHNjcmlwdCBjb2Rl
Cgk/XD5gbWFya3lgIHNjcmlwdCBvdXRwdXQ8XD8KP1w+CmBgYAoKIyBNZXRhIERhdGEgaW4g
RnJvbnQgTWF0dGVyCgpNZXRhIGRhdGEgaXMgYW5ub3RhdGVkIGluIHRoZSBmcm9udCBtYXR0
ZXIgb2YgYSBNYXJrZG93biB0ZXh0IGRvY3VtZW50LgpUaGUgZnJvbnQgbWF0dGVyIG11c3Qg
c3RhcnQgaW4gdGhlIGZpcnN0IGxpbmUgd2l0aCBgLS0tYCBhbmQgcHJlY2VkZXMgYWxsCm90
aGVyIHRleHQgYmVpbmcgZmVuY2VkIGJ5IGAtLS1gLiBUaGUgbWV0YSBkYXRhIGlzIGluIGB5
YW1sYCBmb3JtYXQuClRoZSBgeWFtbGAgYmxvY2sgaXMgcGFyc2VkIHVzaW5nIGBweXRob24t
cHl5YW1sYC4gQWxsIG1ldGEKZGF0YSBpcyBpbXBvcnRlZCBpbnRvIHRoZSBwcmVwcm9jZXNz
ZWQgZG9jdW1lbnQuCgojIyBQYW5kb2MgRnJvbnQgTWF0dGVyCgojIyMjIEV4YW1wbGUgey19
CmBgYHlhbWwKLS0tCnRpdGxlOiBNeSBEb2N1bWVudApkYXRlOiAyMDIyLTAxLTAxCmF1dGhv
cjogLi4uCmxpbmstY2l0YXRpb25zOiB0cnVlCmJpYmxpb2dyYXBoeTogZGF0YS9tYXJreS5i
aWIKaGVhZGVyLWluY2x1ZGVzOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2Us
CiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9X
IDF9XH0KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNp
emU6IDExcHQKLS0tCmBgYApUaGUgbWV0YSBkYXRhIGZpZWxkcwpbYHRpdGxlYCwgYGRhdGVg
LCBgYXV0aG9yYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI21ldGFkYXRhLXZh
cmlhYmxlcyksCltgbGluay1jaXRhdGlvbnNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjb3RoZXItcmVsZXZhbnQtbWV0YWRhdGEtZmllbGRzKSwKW2BiaWJsaW9ncmFwaHlg
XShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjY2l0YXRpb24tcmVuZGVyaW5nKSBh
bmQKW2BoZWFkZXItaW5jbHVkZXNgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwj
dmFyaWFibGVzLXNldC1hdXRvbWF0aWNhbGx5KQphcmUgcHJvY2Vzc2VkIGJ5IGBwYW5kb2Ng
IGR1cmluZyBkb2N1bWVudCByZW5kZXJpbmcuIGBmb250c2l6ZWAgYWRqdXN0cyB0aGUKZm9u
dCBzaXplIGluIFtgaHRtbGBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJp
YWJsZXMtZm9yLWh0bWwpCmFuZCBbYHBkZmBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwu
aHRtbCN2YXJpYWJsZXMtZm9yLWxhdGV4KSBkb2N1bWVudHMuClRoZSBgeG5vcy1jbGV2ZXJl
ZmAgYW5kIGB4bm9zLWNhcGl0YWxpc2VgCmZpZWxkcyBhcmUgdXNlZCBieSB0aGUgW2BwYW5k
b2MteG5vc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy14bm9zKQpleHRl
bnNpb25zIGZvciByZWZlcmVuY2luZwpbZmlndXJlc10oaHR0cHM6Ly9naXRodWIuY29tL3Rv
bWR1Y2svcGFuZG9jLWZpZ25vcyNjdXN0b21pemF0aW9uKSwKW3RhYmxlc10oaHR0cHM6Ly9n
aXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXRhYmxlbm9zI2N1c3RvbWl6YXRpb24pLApbc2Vj
dGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjY3VzdG9t
aXphdGlvbikgYW5kCltlcXVhdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3Bh
bmRvYy1lcW5vcyNjdXN0b21pemF0aW9uKS4KCiMjIGBtYXJreWAgRm9ybWF0IEZpZWxkcwoK
IyMjIyBFeGFtcGxlOiBgbWQvZmlsZS5tZGAgey19CmBgYHlhbWwKLS0tCmhlYWRlci1pbmNs
dWRlcy0tcGRmOiA+CiAgXGh5cGVyc2V0dXB7CiAgY29sb3JsaW5rcz1mYWxzZSwKICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9XH0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXIt
Ym94OyB9PC9zdHlsZT4KLS0tCmBgYAoKVGhlIHBhbmRvYyBgaGVhZGVyLWluY2x1ZGVzYCBm
aWVsZCBpcyB1c2VkIGZvciBgcGRmYCBhbmQgYGh0bWxgIGRvY3VtZW50cywKdGhlcmVmb3Jl
IGl0IG11c3QgY29udGFpbiBjb3JyZXNwb25kaW5nIHRleCBhbmQgYGh0bWxgIGNvZGUuCgpU
aGUgZmllbGQgYGhlYWRlci1pbmNsdWRlc2AgZW5kaW5nIHdpdGggYC0tcGRmYCBvciBgLS1o
dG1sYApzcGVjaWZpZXMgY29ycmVzcG9uZGluZyBvcHRpb25zIGZvciB0aGUgZ2VuZXJhdGlv
biBvZiBgcGRmYCBhbmQgYGh0bWxgCmRvY3VtZW50cy4gRHVyaW5nIG1ha2UsIGBtYXJreWAg
c2NhbnMgYWxsIG1ldGEgZGF0YSBmaWVsZHMsIGFuZApmaWVsZHMgd2hpY2ggZW5kIHdpdGgg
YC0tcGRmYCBhbmQgYC0taHRtbGAgYXJlIHNlbGVjdGVkIGFuZCBmb3J3YXJkZWQKdG8gYHBh
bmRvY2AgYmFzZWQgb24gdGhlIGZvcm1hdCB0byBiZSByZW5kZXJlZC4KCkFmdGVyIGJ1aWxk
IGBtYWtlIGJ1aWxkL2ZpbGVgIHRoZSBtZXRhIGRhdGEgZmllbGQgYGhlYWRlci1pbmNsdWRl
c2AKaXMgcHJlc2VudCBpbiB0aGUgZmlsZXMgYGJ1aWxkL2ZpbGUuaHRtbC5tZGAgYW5kYGJ1
aWxkL2ZpbGUucGRmLm1kYAphY2NvcmRpbmdseS4KCiMjIyMgRXhhbXBsZTogYGJ1aWxkL2Zp
bGUuaHRtbC5tZGAgey19CmBgYHlhbWwKLS0tCmhlYWRlci1pbmNsdWRlczogPgogIDxzdHls
ZT4qIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Ci0tLQpgYGAKIyMjIyBF
eGFtcGxlOiBgYnVpbGQvZmlsZS5wZGYubWRgIHstfQpgYGB5YW1sCi0tLQpoZWFkZXItaW5j
bHVkZXM6ID4KICBcaHlwZXJzZXR1cHsKICBjb2xvcmxpbmtzPWZhbHNlLAogIGFsbGJvcmRl
cmNvbG9ycz17MCAwIDB9LAogIHBkZmJvcmRlcnN0eWxlPXsvUy9VL1cgMX1cfQotLS0KYGBg
CgojIFNjaWVudGlmaWMgV3JpdGluZyBpbiBNYXJrZG93bgoKW01hcmtkb3duXShodHRwczov
L3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjcGFuZG9jcy1tYXJrZG93bikgaXMgYSBtYXJrdXAK
bGFuZ3VhZ2UgZm9yIHRlY2huaWNhbCB3cml0aW5nLCB3aXRoIGVtcGhhc2lzIG9uIHJlYWRh
YmlsaXR5LiBNYXJrZG93bgpjYW4gYmUgcmVuZGVyZWQgaW4gbWFueSBmb3JtYXRzIGluY2x1
ZGluZyBgaHRtbGAgYW5kIGBwZGZgIGJ5IHVzaW5nCltgcGFuZG9jYF0oaHR0cHM6Ly9wYW5k
b2Mub3JnLykgZm9yIGV4YW1wbGUuCgpVc2luZyB2YXJpb3VzIE1hcmtkb3duIGV4dGVuc2lv
bnMgb2YgYHBhbmRvY2AgYSBzdWZmaWNpZW50IHN0cnVjdHVyZSBmb3IKd3JpdGluZyBzY2ll
bnRpZmljIGRvY3VtZW50cyBpcyByZWZsZWN0ZWQgdXNpbmcgTWFya2Rvd24gc3ludGF4Lgpg
bWFya3lgIGJ5IGRlZmF1bHQgdXNlcyB0aGUgZm9sbG93aW5nIGBwYW5kb2NgIE1hcmtkb3du
IGV4dGVuc2lvbnMuCiogcGFyc2luZyBleHRlbnNpb25zCgkqIFthbGxfc3ltYm9sc19lc2Nh
cGFibGVdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYWxsX3N5
bWJvbHNfZXNjYXBhYmxlKQoJKiBbaW50cmF3b3JkX3VuZGVyc2NvcmVzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWludHJhd29yZF91bmRlcnNjb3JlcykK
CSogW2VzY2FwZWRfbGluZV9icmVha3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tZXNjYXBlZF9saW5lX2JyZWFrcykKCSogW3NwYWNlX2luX2F0eF9oZWFk
ZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3BhY2VfaW5f
YXR4X2hlYWRlcikKCSogW2xpc3RzX3dpdGhvdXRfcHJlY2VkaW5nX2JsYW5rbGluZV0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1saXN0c193aXRob3V0X3By
ZWNlZGluZ19ibGFua2xpbmUpCiogc3R5bGluZyBleHRlbnNpb25zCgkqIFtpbmxpbmVfY29k
ZV9hdHRyaWJ1dGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LWlubGluZV9jb2RlX2F0dHJpYnV0ZXMpCgkqIFtzdHJpa2VvdXRdKGh0dHBzOi8vcGFuZG9j
Lm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3RyaWtlb3V0KQoqIHN0cnVjdHVyaW5nIGV4
dGVuc2lvbnMKCSogW3lhbWxfbWV0YWRhdGFfYmxvY2tdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24teWFtbF9tZXRhZGF0YV9ibG9jaykKCSogW3BpcGVfdGFi
bGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXBpcGVfdGFi
bGVzKQoJKiBbbGluZV9ibG9ja3NdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tbGluZV9ibG9ja3MpCgkqIFtpbXBsaWNpdF9maWd1cmVzXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWltcGxpY2l0X2ZpZ3VyZXMpCgkqIFth
YmJyZXZpYXRpb25zXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9u
LWFiYnJldmlhdGlvbnMpCgkqIFtpbmxpbmVfbm90ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9N
QU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5lX25vdGVzKQoqIGNvZGUgaW5qZWN0aW9uCgkq
IFtyYXdfaHRtbF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1y
YXdfaHRtbCkKCSogW3Jhd190ZXhdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNl
eHRlbnNpb24tcmF3X3RleCkKCmBwYW5kb2NgIHN1cHBvcnRzCltlcXVhdGlvbnNdKGh0dHBz
Oi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tdGV4X21hdGhfZG9sbGFycykK
cmVuZGVyZWQgaW5saW5lIGFuZCBzaW5nbGUtbGluZSBpbiB0ZXgtc3R5bGUgdXNpbmcgYCQu
Li4kYCBhbmQgYCQkLi4uJCRgLApbYmlibGlvZ3JhcGh5XShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjY2l0YXRpb25zKQp1c2luZyB0aGUgYC0tY2l0ZXByb2NgIG9wdGlvbiwK
W3NlY3Rpb24gbnVtYmVyaW5nXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0
ZW5zaW9uLWhlYWRlcl9hdHRyaWJ1dGVzKQp1c2luZyB0aGUgYC0tbnVtYmVyLXNlY3Rpb25z
YCBvcHRpb24gYW5kClt0YWJsZSBvZiBjb250ZW50c10oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI29wdGlvbi0tdG9jKQp1c2luZyB0aGUgYC0tdGFibGUtb2YtY29udGVudHNg
IG9wdGlvbi4KCmBwYW5kb2NgIHN1cHBvcnRzIFtgeG5vc2BdKGh0dHBzOi8vZ2l0aHViLmNv
bS90b21kdWNrL3BhbmRvYy14bm9zKSBmaWx0ZXJzCmZvciByZWZlcmVuY2luZyBkb2N1bWVu
dCBjb250ZW50IGxpa2UKW2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3Bh
bmRvYy1maWdub3MjdXNhZ2UpLApbZXF1YXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vdG9t
ZHVjay9wYW5kb2MtZXFub3MjdXNhZ2UpLApbdGFibGVzXShodHRwczovL2dpdGh1Yi5jb20v
dG9tZHVjay9wYW5kb2MtdGFibGVub3MjdXNhZ2UpLApbc2VjdGlvbnNdKGh0dHBzOi8vZ2l0
aHViLmNvbS90b21kdWNrL3BhbmRvYy1zZWNub3MjdXNhZ2UpCmJ5IHVzaW5nIHRoZSBgLS1m
aWx0ZXIgcGFuZG9jLXhub3NgIG9wdGlvbi4KYHhub3NgIGludGVncmF0ZXMgY2xldmVyIHJl
ZmVyZW5jZXMsIHdoaWNoIG1lYW5zICJGaWcuIiwgIlNlYy4iLCAiRXEuIgphbmQgIlRhYi4i
IGFyZSBhZGRlZCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQu
CklmIHRoZSBwcmVmaXggaXMgdG8gYmUgb21pdHRlZCwgdGhlIHJlZmVyZW5jZSBpcyB3cml0
dGVuIGFzCmBcIUByZWY6bGFiZWxgLgoKIyMjIyBFeGFtcGxlIHstfQpgYGBtZAojIyBSZWZl
cmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBz
ZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2
NCxpVkJPUncwS0dnb0FBQUFOUwpVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVs
RVFWUUkxMlA0Ly84L3czOEdJQVhESUJLRTBESAp4Z2xqTkJBQU85VFhMMFk0T0h3QUFBQUJK
UlU1RXJrSmdnZz09KXsjZmlnOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAZmln
OmxhYmVsLgoKQSAgfEIgIHxDICB8RAotLS18LS0tfC0tLXwtLS0KMDAwfDExMXw0NDR8NTU1
CjIyMnwzMzN8NjY2fDc3NwoKVGFibGU6IFRoaXMgaXMgdGhlIGNhcHRpb24geyN0Ymw6bGFi
ZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9Xntc
bWJveHtpfVxwaX0rMT0wJCR7I2VxOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBA
ZXE6bGFiZWwuCgpUaGlzIGlzIGEgY2l0YXRpb24gW0BNdWxsZXIxOTkzXS4KYGBgCgpUaGUg
ZmlsZSBgbWFya3kuYmliYCBpcyBzcGVjaWZpZWQgaW4gdGhlIG1ldGEgZGF0YSBpbiB0aGUg
ZnJvbnQKbWF0dGVyIG9mIHRoZSBNYXJrZG93biB0ZXh0LgoKIyMgUmVmZXJlbmNlZCBTZWN0
aW9uIHsjc2VjOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoK
IVtUaGlzIGlzIHRoZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtH
Z29BQUFBTlNVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84
L3czOEdJQVhESUJLRTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0p
eyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8
QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8
Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlvbi4geyN0Ymw6bGFiZWx9CgpUaGlzIGlz
IGEgcmVmZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9XntpXHBpfSsxPTAkJHsj
ZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMg
YSBjaXRhdGlvbiBbQE11bGxlcjE5OTNdLgoKLS0tCgoqVGhhbmtzIGZvciByZWFkaW5nLCBw
bGVhc2UgdHJ5KiBgbWFya3lgLgoKLS0tCgojIFJlZmVyZW5jZXMK
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''
pack__gitignore = '''
YnVpbGQvCmh0bWwvCnBkZi8K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

########################################################################

def _marky_front_join(y, text):
	return """---\n%s\n---\n%s""" % (
		yaml.dump(y, allow_unicode=True, default_flow_style=False),
		text
	)

def _marky_front_split(t):
	global _MARKY_EXEC_GLOBALS
	global _MARKY_EXEC_QUIET
	if not t.startswith("---\n"):
		return dict(), t, 0
	y = t.split("---\n")[1]
	meta_lines = len(y.split("\n")) + 2
	mark = "---\n".join(t.split("---\n")[2:])
	_marky_print_mark("---\n" + y + "---")
	data = dict()
	try:
		data = yaml.safe_load(y)
	except Exception as ex:
		print("# YAML ERROR", type(ex), str(ex))
		sys.exit(1)
	return data, mark, meta_lines

########################################################################

def _marky_print_mesg(*args):
	print("<!--", *args, "--!>")

def _marky_print_mark(*args, end="\n"):
	if not _MARKY_EXEC_QUIET: print(*args, end=end, flush=True)

def _marky_print_trace(ex, mlines, code):
	print("# TRACEBACK")
	import traceback
	traceback.print_tb(ex.__traceback__)
	print(dir(ex), ex.args, ex.__dict__)
	if hasattr(ex, "filename") and ex.filename == "<string>":
		print("# ERROR LOCATION")
		code = code.split("\n")
		print(len(code))
		for i in range(max(0, ex.lineno-5), min(len(code), ex.lineno+5)):
			print("*" if i + 1 == ex.lineno else " ", "%03d" % i, code[i])
	print("# PYTHON ERROR")
	print(type(ex), str(ex))

def _marky_file_mtime_older(f1, f2):
	return os.path.getmtime(f1) < os.path.getmtime(f2)

def _marky_file_mtime_newer(f1, f2):
	return os.path.getmtime(f1) > os.path.getmtime(f2)

def _marky_file_make_basename(f):
	return "/".join(".".join(f.split(".")[0:-1]).split("/")[1:])

def _marky_mdtext_print(*args, sep=" ", shift="", crop=False, ret=False, code=False, text=False, pop=True,
	file=None, __marky__=False, raw=False, aux=False, cmd=None):
	# MD output: args, sep=" ", shift="", crop=False, ret=False
	# MD code output: code=False, pop=True
	# MD include: file, __marky__, raw, aux
	global _MARKY_EXEC_QUIET
	global _MARKY_EXEC_TEXT
	global _MARKY_EXEC_APPEND
	global _MARKY_PASTE_CODE
	global _MARKY_PASTE_TEXT
	global _MARKY_COMMAND_LIST
	if text:
		text = _MARKY_EXEC_TEXT[_MARKY_PASTE_TEXT:]
		if pop: _MARKY_PASTE_TEXT = len(_MARKY_EXEC_TEXT)
		return _marky_mdtext_print(text, shift=shift, crop=crop, ret=True)
	if code:
		if len(_MARKY_PASTE_CODE) == 0: return ""
		code = _MARKY_PASTE_CODE[0]
		if pop: _MARKY_PASTE_CODE = _MARKY_PASTE_CODE[1:]
		return _marky_mdtext_print(code, shift=shift, crop=crop, ret=True)
	if not file is None:
		if aux:
			if not os.path.exists(file):
				if cmd is None or len(cmd.strip()) == 0:
					_marky_print_mesg("aux file not found:", file)
					sys.exit(1)
				_marky_print_mesg("run aux cmd for", file, ":", cmd)
				os.system(str(cmd))
				if not os.path.exists(file):
					_marky_print_mesg("aux file not found:", file)
					sys.exit(1)
			else:
				_marky_print_mesg("aux file exists:", file)
			_MARKY_INCLUDE_LIST.append(file)
			_MARKY_COMMAND_LIST.append("" if cmd is None or len(str(cmd).strip()) == 0 else cmd)
		elif raw:
			if not os.path.exists(file):
				print("# ERROR", "no such file", file)
				sys.exit(1)
			_marky_mdtext_print(open(file, "r").read(), _marky_mdtext_print)
		else:
			_marky_run(file, _marky_file_make_basename(file), __marky__)
		return
	if len(args) == 0:
		if _MARKY_EXEC_APPEND == False: _MARKY_EXEC_TEXT += "\n"
		_MARKY_EXEC_APPEND = False
	else:
		if ret: return _marky_mdtext_ret(args[0], shift, crop)
		if crop or shift != "":
			_marky_mdtext_crop(args[0], shift, crop)
			if args[-1] == _marky_mdtext_print:
				_MARKY_EXEC_APPEND = True
			return
		exec_append_new = False
		if args[-1] == _marky_mdtext_print:
			exec_append_new = True
			args = args[0:-1]
		text = sep.join([str(i) for i in args])
		if _MARKY_EXEC_APPEND and len(_MARKY_EXEC_TEXT) > 0:
			_MARKY_EXEC_TEXT += text
		else:
			_MARKY_EXEC_TEXT += "\n" + text
		_MARKY_EXEC_APPEND = exec_append_new
		_marky_print_mark(text, end="" if _MARKY_EXEC_APPEND else "\n")

def _marky_mdtext_crop(arg, shift, crop):
	global _MARKY_EXEC_TEXT
	global _MARKY_EXEC_APPEND
	if not type(arg) is str:
		arg = str(arg)
	arg = arg.split("\n")
	if crop:
		if len(arg[0].strip()) == 0:
			arg = arg[1:]
		if len(arg[-1].strip()) == 0:
			arg = arg[:-1]
	n = len(arg[0]) - len(arg[0].lstrip())
	for i in arg:
		if crop and len(i[0:n].lstrip()) == 0:
			i = i[n:]
		_MARKY_EXEC_TEXT += "\n" + shift + i

def _marky_mdtext_ret(arg, shift="", crop=True):
	if not type(arg) is str:
		arg = str(arg)
	text = []
	arg = arg.split("\n")
	if crop:
		if len(arg[0].strip()) == 0:
			arg = arg[1:]
		if len(arg[-1].strip()) == 0:
			arg = arg[:-1]
	n = len(arg[0]) - len(arg[0].lstrip())
	for i in arg:
		if crop and len(i[0:n].lstrip()) == 0:
			i = i[n:]
		text.append(shift + i)
	return "\n".join(text)

########################################################################

class _marky_fmtcall:
	def __init__(self, name, fmtc):
		self.name = name
		self.fmtc = fmtc
	def __call__(self, *args, **kwargs):
		text = "<<?html "
		f = getattr(self.fmtc.html, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " html?>>"
		text += "<<?pdf "
		f = getattr(self.fmtc.pdf, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " pdf?>>"
		return text

class _marky_fmtcode:
	def __init__(self, pdf=None, html=None):
		if not html is None: self.html = html
		if not pdf is None: self.pdf = pdf
	def __call__(self, *args, **kwargs):
		text = "<<?html "
		f = self.html
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " html?>>"
		text += "<<?pdf "
		f = self.pdf
		if callable(f):
			v = f(*args, **kwargs)
			if type(v) is str: text += v
		elif type(f) is str:
			text += f.format(*args, **kwargs)
		text += " pdf?>>"
		return text
	def __getattr__(self, name):
		return _marky_fmtcall(name, self)

########################################################################

def _marky_rebrace(t):
	t = t.replace("{{", "<<brace?")
	t = t.replace("}}", "?brace>>")
	t = t.replace("{", "{{")
	t = t.replace("}", "}}")
	t = t.replace("<<brace?", "{")
	t = t.replace("?brace>>", "}")
	return t

def _marky_code_text(t, fstring=True):
	if fstring:
		if not '"""' in t and not t.endswith('"'):
			return '___(rf"""' + _marky_rebrace(t) + '""", ___); '
		elif not "'''" in t and not t.endswith("'"):
			return "___(rf'''" + _marky_rebrace(t) + "''', ___); "
		else:
			print("# ERROR", "python code contains \"\"\" as well as '''.")
			sys.exit(1)
	else:
		if not '"""' in t and not t.endswith('"'):
			return '___(r"""' + t + '""", ___); '
		elif not "'''" in t and not t.endswith("'"):
			return "___(r'''" + t + "''', ___); "
		else:
			print("# ERROR", "python code contains \"\"\" as well as '''.")
			sys.exit(1)

def _marky_paste_code(t):
	global _MARKY_PASTE_CODE
	if t.startswith("!"):
		t = t[1:]
		_MARKY_PASTE_CODE.append(t)
	return t

def _marky_meta_merge(old, front):
	global _MARKY_EXEC_GLOBALS
	meta = {}
	meta.update(old)
	try:
		for k, v in front.items():
			x = k.split("--")
			if "--" in k and x[-1] in _MARKY_FORMAT:
				if k in meta:
					if type(v) is list:
						_marky_print_mesg("field link, merge yaml list %s" % k)
						meta[k].extend(v)
					if type(v) is dict:
						_marky_print_mesg("field link, merge yaml dict %s" % k)
						meta[k].update(v)
					if type(v) is str:
						_marky_print_mesg("field link, merge yaml str %s" % k)
						meta[k] += " " + v
					else:
						_marky_print_mesg("field exists, skip yaml %s %s" % (str(type(v)), k))
				else:
					_marky_print_mesg("field link, set yaml %s" % k)
					meta[k] = v
			else:
				if k in meta:
					_marky_print_mesg("field exists, skip yaml %s" % k)
				else:
					meta[k] = v
				k = k.replace("-", "_")
				if k in _MARKY_EXEC_GLOBALS:
					_marky_print_mesg("field exists, skip local %s" % k)
				else:
					_MARKY_EXEC_GLOBALS[k] = v
	except Exception as ex:
		print("# META MERGE ERROR", type(ex), str(ex))
		sys.exit(1)
	return meta

def _marky_run(fname, inbase, run=True):
	global _MARKY_EXEC_GLOBALS
	global _MARKY_META_DICT
	global _MARKY_INCLUDE_LIST
	_MARKY_INCLUDE_LIST.append(fname)
	_marky_print_mesg("run %s" % fname)
	with open(fname, "r") as h:
		front, t, meta_lines = _marky_front_split(h.read())
	_MARKY_META_DICT = _marky_meta_merge(_MARKY_META_DICT, front)
	p = 0
	r = "\n"*(meta_lines-1)
	while True:
		p0 = t.find("<?", p)
		p1 = t.find("?>", p)
		if p0 > -1:
			if p1 < p0:
				print(t[max(0, p0-250):p0+2])
				print("# ERROR", "?> before <?", r"... (can use <\? and ?\> for escaping)")
				if "<!?" in t:
					print("# there is <!? in text, did you mean: <?!")
				sys.exit(1)
			if p0 > 0: r += _marky_code_text(t[p:p0])
			p1 = t.find("?>", p0)
			if p1 > -1:
				code = t[p0+2:p1]
				r += _marky_paste_code(code)
				p = p1 + 2
			else:
				print("# ERROR", "missing ?>")
				sys.exit(1)
		else:
			r += _marky_code_text(t[p:])
			break
	for a, b, c, count in [
		("", "<%s?", "", 1),
		("", "?%s>", "", 1),
		("", "{%s", "{", 3),
		("}", "%s}", "", 3)
	]:
		for j in reversed(range(1, count+1)):
			for i in range(3):
				X = "\\"*(i + 1)
				Y = "\\"*(i + 0)
				r = r.replace(a + (b % X)*j + c, a + (b % Y)*j + c)
	open(_MARKY_BUILD_DIR + inbase + ".py", "w").write(r)
	old_MARKY_EXEC_GLOBALS = _MARKY_EXEC_GLOBALS["__marky__"]
	_MARKY_EXEC_GLOBALS["__marky__"] = run
	_marky_print_mesg("run %s" % (_MARKY_BUILD_DIR + inbase + ".py"))
	try:
		exec(r, _MARKY_EXEC_GLOBALS, None)
	except Exception as ex:
		import traceback
		exc_type, exc_value, exc_traceback = sys.exc_info()
		tblist = traceback.extract_tb(exc_traceback)
		if len(tblist) > 1:
			tbstr = traceback.format_tb(exc_traceback)
			tbstr[0] = tbstr[0].replace("<string>", fname) + ("    %s\n" % (t.split("\n")[lineno-meta_lines]))
			exstr = str(ex)
		else:
			tbstr = []
			exstr = str(ex).replace("<string>", fname)
			if hasattr(ex, "lineno"): exstr += ("\n    %s" % (t.split("\n")[ex.lineno-meta_lines]))
		print("<!-- PYTHON ERROR\n")
		if len(tbstr) > 0: print("\n".join(tbstr))
		print("  Error", type(ex), ":", exstr, "\n")
		print("--!>")
		sys.exit(1)
	_MARKY_EXEC_GLOBALS["__marky__"] = old_MARKY_EXEC_GLOBALS

########################################################################

def _marky_meta_link(front, link):
	flink = {}
	try:
		for k, v in front.items():
			if "--" in k: continue
			if not k in flink:
				flink[k] = v
			else:
				_marky_print_mesg(" exists, skip yaml %s" % k)
		for k, v in front.items():
			if not "--" in k: continue
			x = k.split("--")
			if x[-1] in _MARKY_FORMAT:
				if x[-1] == link:
					k = "--".join(x[0:-1])
					if k in flink:
						_marky_print_mesg("field link, merge yaml %s" % k)
						if type(v) is list: flink[k].extend(v)
						if type(v) is dict: flink[k].update(v)
						if type(v) is str: flink[k] += " " + v
						else: flink[k] = v
					else:
						_marky_print_mesg("field link, set yaml %s" % k)
						flink[k] = v
	except Exception as ex:
		print("# META LINK ERROR", type(ex), str(ex))
		sys.exit(1)
	return flink

def _marky_link(front, md_text, link):
	md_text = md_text.replace(".???", "." + link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	lsep = 3
	len_args = len(link) + 1
	c = 0
	newtext = ""
	p = md_text.find("<<?")
	while p >= 0:
		q = md_text.find("?>>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(link) and expr.endswith(link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<<?", c)
		else:
			p = md_text.find("<<?", p + lsep)
	newtext += md_text[c:]
	flink = _marky_meta_link(front, link)
	return _marky_front_join(flink, newtext)

def _marky_write_build(inbase, outdir, front, mark):
	os.makedirs(_MARKY_BUILD_DIR + outdir, exist_ok=True)
	if not mark is None:
		open(_MARKY_BUILD_DIR + inbase + ".md", "w").write(_marky_front_join(front, mark))
		for fmt in _MARKY_FORMAT:
			open(_MARKY_BUILD_DIR + inbase + "." + fmt + ".md", "w").write(_marky_link(front, mark, fmt))
	inname = inbase.replace(".", "__").replace("/", "__")
	newltab = "\n\t"
	with open(_MARKY_BUILD_DIR + inbase + ".make", "w") as fhnd:
		fhnd.write(f"""# auto-generated
marky_dep_{inname}:={" ".join(list(set(_MARKY_INCLUDE_LIST[1:])))}

marky_alias:=$(marky_alias) {inbase}

.PHONY: scan/{inbase}
scan/{inbase}:
	./marky.py --base="{inbase}" --scan

{_MARKY_BUILD_DIR+inbase}.md: {_MARKY_MD_DIR+inbase}.md $(marky_dep_{inname})
	mkdir -p "{_MARKY_BUILD_DIR+outdir}"
	ln -snf ../{_MARKY_DATA_DIR} {_MARKY_BUILD_DIR+_MARKY_DATA_DIR}
	ln -snf ../{_MARKY_DATA_DIR} {_MARKY_MD_DIR+_MARKY_DATA_DIR}
	./marky.py --base="{inbase}" $(if $(all_quiet),--quiet,)

.PHONY: build/{inbase}
build/{inbase}: {_MARKY_BUILD_DIR+inbase}.md

.PHONY: aux/{inbase}
aux/{inbase}:
	{newltab.join([i for i in _MARKY_COMMAND_LIST if i != ""])}

.PHONY: clean/{inbase}
clean/{inbase}:
	rm -rf "{_MARKY_BUILD_DIR+inbase}.md"
	rm -rf "{_MARKY_BUILD_DIR+inbase}.html.md"
	rm -rf "{_MARKY_BUILD_DIR+inbase}.pdf.md"
	rm -rf "{_MARKY_BUILD_DIR+inbase}.py"
	rm -rf "{_MARKY_BUILD_DIR+inbase}.tex"
"""
		)
		if "pdf" in _MARKY_FORMAT:
			fhnd.write(f"""
{_MARKY_BUILD_DIR+inbase}.tex: {_MARKY_BUILD_DIR+inbase}.pdf.md {_MARKY_MD_DIR+inbase}.md
	mkdir -p "{_MARKY_BUILD_DIR+outdir}"
	./pandoc-run tex {_MARKY_BUILD_DIR+inbase}.pdf.md {_MARKY_BUILD_DIR+inbase}.tex

.PHONY: tex/{inbase}
tex/{inbase}: {_MARKY_BUILD_DIR+inbase}.tex
"""
			)
		for fmt in _MARKY_FORMAT:
			fhnd.write(f"""
{_MARKY_BUILD_DIR+inbase}.{fmt}.md: {_MARKY_BUILD_DIR+inbase}.md

{fmt}/{inbase}.{fmt}: {_MARKY_BUILD_DIR+inbase}.{fmt}.md {_MARKY_MD_DIR+inbase}.md
	mkdir -p "{fmt}/{outdir}"
	./pandoc-run {fmt} {_MARKY_BUILD_DIR+inbase}.{fmt}.md {fmt}/{inbase}.{fmt}

.PHONY: {fmt}/{inbase}
{fmt}/{inbase}: {fmt}/{inbase}.{fmt}
"""
			)

########################################################################

def _marky_pack_b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def _marky_pack_b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

def _marky_load_pack(i):
	return _marky_pack_b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_")))

def _marky_pack_write_file(fname, force=False):
	if not os.path.exists(fname) or force:
		print("# WRITE", fname)
		open(fname, "w").write(_marky_load_pack("./" + fname))
	else:
		print("# EXISTS", fname)

def _marky_store_pack(i, ftext):
	return "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), _marky_pack_b64enc(ftext))

def _marky_pack_read_file(fname):
	return _marky_store_pack("./" + fname, open(fname, "r").read())

########################################################################

_MARKY_FORMAT = ["html", "pdf"]
_MARKY_BUILD_DIR = "build/"  #< WITH trailing /
_MARKY_MD_DIR = "md/"  #< WITH trailing /
_MARKY_DATA_DIR = "data" #< no trailing /
_MARKY_PACK_DIRS = [
	_MARKY_BUILD_DIR,
	_MARKY_DATA_DIR,
	_MARKY_MD_DIR
]
_MARKY_PACK_FILES = [
	"Makefile",
	"pandoc-run",
	"md/marky.md",
	"data/marky.bib",
	".gitignore"
]
_MARKY_EXEC_QUIET = False
_MARKY_EXEC_TEXT = ""
_MARKY_EXEC_APPEND = False
_MARKY_EXEC_GLOBALS = dict()
_MARKY_EXEC_GLOBALS["___"] = _marky_mdtext_print
_MARKY_EXEC_GLOBALS["fmtcode"] = _marky_fmtcode
_MARKY_EXEC_GLOBALS["__marky__"] = True
_MARKY_META_DICT = dict()
_MARKY_INCLUDE_LIST = list()
_MARKY_PASTE_CODE = list()
_MARKY_PASTE_TEXT = 0
_MARKY_BUILD_PYTHON = None
_MARKY_COMMAND_LIST = list()

########################################################################

if __name__ == "__main__":

	parser = argparse.ArgumentParser(add_help=False)

	parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in _MARKY_VERSION]))
	parser.add_argument("--help", action='store_true', help="show this help message")
	parser.add_argument("--base", type=str, default="", help="path to input markdown text")
	parser.add_argument("--init", action='store_true', help="create dirs (" + ", ".join(_MARKY_PACK_DIRS) + ") and files (" + ", ".join(_MARKY_PACK_FILES) + ")")
	parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")
	parser.add_argument("--pack", action='store_true', help="pack files (" + ", ".join(_MARKY_PACK_FILES) + ") into marky.py.pack source")
	parser.add_argument("--scan", action='store_true', help="create build/*.make from md/*.md")
	parser.add_argument("--quiet", action='store_true', help="do not show Markdown output")

	# ~ args, uargs = parser.parse_known_args()
	args = parser.parse_args()

	# ~ sys.path.append("/".join(sys.argv[0].split("/")[0:-1]))

########################################################################

	if args.version:
		print(".".join([str(i) for i in _MARKY_VERSION]))
		sys.exit(0)
	elif args.help or len(sys.argv) == 1:
		parser.print_help()
		sys.exit(0)
	elif args.init:
		for i in _MARKY_PACK_DIRS:
			if not os.path.exists(i):
				print("# MKDIR", i)
				os.mkdir(i)
			else:
				print("# EXISTS", i)
		for i in _MARKY_PACK_FILES:
			_marky_pack_write_file(i, args.force)
		print("# USAGE")
		print("make help")
		sys.exit(0)
	elif args.pack:
		print("# PACK", ", ".join(_MARKY_PACK_FILES))
		marky_text = open(sys.argv[0], "r").read()
		head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
		src = "".join([_marky_pack_read_file(i) for i in _MARKY_PACK_FILES])
		marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
		open(sys.argv[0] + ".pack", "w").write(marky_text)
		if args.force:
			print("# UPDATE OF `marky` FORCED")
			print("# -----------------------")
			print("# mv marky.py.pack marky.py")
			print("# chmod 775 marky.py")
			os.replace("marky.py.pack", "marky.py")
			os.chmod("marky.py", 0o775)
		else:
			print("# MANUAL UPDATE NEEDED")
			print("# --------------------")
			print("mv marky.py.pack marky.py")
			print("chmod +x marky.py")
		sys.exit(0)
	elif args.scan:
		if len(args.base.strip()) > 0:
			outdir = "/".join(args.base.split("/")[0:-1])
			print("# WRITE", _MARKY_BUILD_DIR + args.base + ".make")
			_marky_write_build(args.base, outdir, None, None)
		else:
			for i in glob.glob("md/**/*.md", recursive=True):
				inbase = i[3:-3]
				outdir = "/".join(inbase.split("/")[0:-1])
				if os.path.exists(_MARKY_BUILD_DIR + inbase + ".make") and not args.force:
					print("# EXISTS", _MARKY_BUILD_DIR + inbase + ".make")
				else:
					print("# WRITE", _MARKY_BUILD_DIR + inbase + ".make")
					_marky_write_build(inbase, outdir, None, None)
		sys.exit(0)
		pass
	elif args.force:
		print("# ERROR", "--force can only be used with --pack/--init/--scan")
		sys.exit(1)
	elif args.quiet:
		_MARKY_EXEC_QUIET = True

########################################################################

	infile = _MARKY_MD_DIR + args.base + ".md"
	if len(args.base) == 0:
		print("# ERROR", "empty base: use --base file.md")
		sys.exit(1)
	if not os.path.exists(infile):
		print("# ERROR", "wrong base %s: file not found %s" % (args.base, infile))
		sys.exit(1)
	inbase = args.base
	outdir = "/".join(inbase.split("/")[0:-1])

	if os.path.exists(_MARKY_BUILD_DIR):
		_marky_run(infile, inbase)
		_marky_write_build(inbase, outdir, _MARKY_META_DICT, _MARKY_EXEC_TEXT)
	else:
		print("# ERROR", "no build dir: mkdir build")
		sys.sys.exit(1)
