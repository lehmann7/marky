#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCB3aWxsIG5vdCBiZSBwYXJzZWQuCgkjCgkjICBU
aGUgYWxwaGFiZXQ6IGAhW2NocihvcmQoIkEiKStpIGZvciBpIGluIHJhbmdlKDcpXWAuCgkj
ICBUaGUgYWxwaGFiZXQ6IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRyddLgoJ
IwoJIyAgQSBuaWNlIGxpc3Q6IGAhIiwgIi5qb2luKGxpc3QocmFuZ2UoMSwgMTEpKSlgLgoJ
IyAgQSBuaWNlIGxpc3Q6IDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLgoJIwoKLlBI
T05ZOiBjaGVhdC1mb3JtYXQKY2hlYXQtZm9ybWF0OgoJIwoJIyBGT1JNQVRURUQgT1VUUFVU
CgkjCgkjICBgYGAhIQoJIyAgdmFsdWUgPSBmbG9hdCgxLjIzNDUpCgkjICBgYGAKCSMgIFRo
ZSBudW1iZXIgYCF2YWx1ZWAgaXMgbm90IGZvcm1hdHRlZC4KCSMgIFRoZSBudW1iZXIgMS4y
MzQ1IGlzIG5vdCBmb3JtYXR0ZWQuCgkjCgkjICBUaGUgbnVtYmVyIGAhdmFsdWU6LjJmYCBp
cyBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjMgaXMgZm9ybWF0dGVkLgoJIwoJIyAg
VGhlIGBcIXZhbHVlYCBpcyBub3QgcGFyc2VkLgoJIwoKLlBIT05ZOiBjaGVhdC1pbmNsdWRl
CmNoZWF0LWluY2x1ZGU6CgkjCgkjIElOQ0xVREUtU1RBVEVNRU5UCgkjCgkjICAhISEgcGF0
aC9pbmNsLm1kaSBGTEFHUwoJIyAgXCEhISBUaGlzIGlzIG5vdCBwYXJzZWQgYXMgaW5jbHVk
ZSBzdGF0ZW1lbnQuCgkjCgkjIEZsYWdzOgoJIyAgKiByYXc6ICAgICBpbmNsdWRlIHdpdGhv
dXQgYW55IHBhcnNpbmcKCSMgICogbm9tZXRhOiAgaW5jbHVkZSBhbmQgaWdub3JlIGFsbCBt
ZXRhIGRhdGEKCSMgICogbm90ZXh0OiAgaW5jbHVkZSBhbmQgaWdub3JlIGFsbCBNYXJrZG93
biB0ZXh0CgkjICAqIG5vbWFya3k6IGluY2x1ZGUgYnV0IGRvIG5vdCBwcm9jZXNzIG1hcmt5
IG1hcmt1cAoJIyAgKiAjK046ICAgICBpbmNyZWFzZSBsZXZlbCBvZiBBVFggaGVhZGluZ3Mg
YnkgTgoJIyAgKiA+Pk46ICAgICBpbmNyZWFzZSBpbmRlbnRhdGlvbiBsZXZlbCBieSBOIHRh
YnMKCSMgICogPk46ICAgICAgaW5jcmVhc2UgaW5kZW50YXRpb24gbGV2ZWwgYnkgTiBzcGFj
ZXMKCSMgICogbm9yZWY6ICAgaW5jbHVkZSB3aXRob3V0IE1ha2VmaWxlIGRlcGVuZGVuY3kK
CSMgICogYXV4OiAgICAgb25seSBNYWtlZmlsZSBkZXBlbmRlbmN5IGJ1dCBubyBwYXJzaW5n
CgkjCgouUEhPTlk6IGNoZWF0LW1ldGEKY2hlYXQtbWV0YToKCSMKCSMgTUVUQSBEQVRBCgkj
CgkjICAtLS0KCSMgIHRpdGxlOiBEb2N1bWVudAoJIyAgZGF0ZTogVG9kYXkKCSMgIGF1dGhv
cjogTmFtZQoJIyAgbGluay1jaXRhdGlvbnM6IHRydWUKCSMgIGJpYmxpb2dyYXBoeTogYmli
bC5iaWIKCSMgIGZvbnRzaXplLS1wZGY6IDExcHQKCSMgIGZvbnRzaXplLS1odG1sOiAxMHB0
CgkjICBoZWFkZXItaW5jbHVkZXMtLXBkZjogPgoJIyAgICAgXHVzZXBhY2thZ2V7Li4ufQoJ
IyAgICAgXHVzZXBhY2thZ2V7Li4ufQoJIyAgaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+Cgkj
ICAgICA8c2NyaXB0IC4uLj4KCSMgICAgIDxsaW5rIC4uLj4KCSMgICAgIDxzdHlsZSAuLi4+
CgkjICB4bm9zLWNsZXZlcmVmOiB0cnVlCgkjICB4bm9zLWNhcGl0YWxpc2U6IHRydWUKCSMg
IC1oaWRkZW5fZmllbGQ6IHRleHQKCSMgIC0tLQoJIwoKLlBIT05ZOiBjaGVhdC1saW5rCmNo
ZWF0LWxpbms6CgkjCgkjIEZPUk1BVCBMSU5LCgkjCgkjICBbTGluayB0byBEb2N1bWVudF0o
cGF0aC90by9maWxlLmh0bWwpCgkjICBbTGluayB0byBEb2N1bWVudF0ocGF0aC90by9maWxl
LnBkZikKCSMgIFtGb3JtYXQgTGluayB0byBEb2N1bWVudF0ocGF0aC90by9maWxlLj8/PykK
CSMgIFRoaXMgaXMgbm90IHBhcnNlZCBhcyBmb3JtYXQgbGluayAuXD8/PwoJIwoKLlBIT05Z
OiBjaGVhdC1jb2RlCmNoZWF0LWNvZGU6CgkjCgkjIEZPUk1BVCBDT0RFCgkjCgkjICAgYGBg
IQoJIyAgIGRlZiB0ZXN0MV9odG1sKCk6CgkjICAgICAgIF8oIlRoaXMgaXMgSFRNTDEhIikK
CSMgICBkZWYgdGVzdDFfcGRmKCk6CgkjICAgICAgIHJldHVybiAiVGhpcyBpcyBce1BERjFc
fSEiCgkjICAgZGVmIHRlc3QyX2h0bWwoKToKCSMgICAgICAgX18oIiIiCgkjICAgICAgICAg
ICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAg
ICAgIFRoaXMgaXMgSFRNTDIhCgkjICAgICAgICIiIikKCSMgICBkZWYgdGVzdDJfcGRmKCk6
CgkjICAgICAgIHJldHVybiAiIiIKCSMgICAgICAgICAgIFRoaXMgaXMgXHtQREYyXH0hCgkj
ICAgICAgICAgICBUaGlzIGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgVGhpcyBpcyBce1BE
RjJcfSEKCSMgICAgICAgIiIiCgkjICAgYGBgCgkjICAgUnVuIEZvcm1hdCBDb2RlIGA/dGVz
dDEoKWAgYW5kIGA/dGVzdDIoKWAuCgkjICAgYFw/dGVzdDEoKWAgYW5kIGBcP3Rlc3QyKClg
IGFyZSBub3QgcGFyc2VkLgoJIwoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgouUEhPTlk6IGFsbAph
bGw6ICQoSFRNTCkgJChQREYpCgouUEhPTlk6IGFsbC1tawphbGwtbWs6ICQoTUspCgouUEhP
Tlk6IGFsbC1tZAphbGwtbWQ6ICQoTUQpCgouUEhPTlk6IGFsbC1saW5rCmFsbC1saW5rOiAk
KE1ESFRNTCkgJChNRFBERikKCi5QSE9OWTogYWxsLWh0bWwKYWxsLWh0bWw6ICQoSFRNTCkK
Ci5QSE9OWTogYWxsLXBkZgphbGwtcGRmOiAkKFBERikKCi5QSE9OWTogY2xlYW4KY2xlYW46
CglybSAtcmYgLi9idWlsZC8qIC4vaHRtbC8qIC4vcGRmLyoKCi5QSE9OWTogaHR0cGQKaHR0
cGQ6CgljZCBodG1sICYmIHB5dGhvbiAtbSBodHRwLnNlcnZlcgoKLlBIT05ZOiBzY2FuCnNj
YW46IGFsbC1tawoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpidWlsZC8lLm1kLm1rOiBtZC8lLm1k
Cglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFya3kucHkgLS1ta2RlcCAt
LW1hcmt5PSIkPCIKCmJ1aWxkLyUubWQ6IGJ1aWxkLyUubWQubWsKCW1rZGlyIC1wICQoc2hl
bGwgZGlybmFtZSAiJEAiKQoJLi9tYXJreS5weSAtLW1kPSIkQCIKCmJ1aWxkLyUuaHRtbC5t
ZDogYnVpbGQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1lICIkQCIpCgkuL21hcmt5
LnB5IC0tbGluayBodG1sIC0tbWQ9IiQ8IgoKYnVpbGQvJS5wZGYubWQ6IGJ1aWxkLyUubWQK
CW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJreS5weSAtLWxpbmsgcGRm
IC0tbWQ9IiQ8IgoKaHRtbC8lLmh0bWw6IGJ1aWxkLyUuaHRtbC5tZAoJbWtkaXIgLXAgJChz
aGVsbCBkaXJuYW1lICIkQCIpCglsbiAtc25mIC4uL2RhdGEgaHRtbC9kYXRhCglwYW5kb2Mg
IiQ8IiAtLWZpbHRlciBwYW5kb2MteG5vcyAtLWNpdGVwcm9jIC0tZnJvbT1tYXJrZG93bity
YXdfaHRtbCskKE1ERUwpIC0tdG89aHRtbDUgLS1vdXRwdXQ9IiRAIiAtLXJlc291cmNlLXBh
dGg9Ii4vZGF0YS8iIC0tbWF0aGpheCAtLXNlbGYtY29udGFpbmVkIC0tdGFibGUtb2YtY29u
dGVudHMgLS1udW1iZXItc2VjdGlvbnMgLS1jb2x1bW5zPTEKCnBkZi8lLnBkZjogYnVpbGQv
JS5wZGYubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJbG4gLXNuZiAuLi9k
YXRhIHBkZi9kYXRhCglwYW5kb2MgIiQ8IiAtLWZpbHRlciBwYW5kb2MteG5vcyAtLWNpdGVw
cm9jIC0tZnJvbT1tYXJrZG93bityYXdfdGV4KyQoTURFTCkgLS10bz1sYXRleCAtLW91dHB1
dD0iJEAiIC0tcmVzb3VyY2UtcGF0aD0iLi9kYXRhLyIgLS10YWJsZS1vZi1jb250ZW50cyAt
LW51bWJlci1zZWN0aW9ucyAtLWNvbHVtbnM9MSAtLXBkZi1lbmdpbmU9eGVsYXRleAoKIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjCgpQU0VVRE89aGVscCB0cmVlIGNoZWF0IGNsZWFuIGh0dHBkIHNj
YW4KCklOQ0ZMQUc9MAoKZGVmaW5lIExPT1BCT0RZCiAgaWZlcSAoJCQoZmlsdGVyICQkKFBT
RVVETyksJCQoRykpLCkKICAgIElOQ0ZMQUc9MQogIGVuZGlmCmVuZGVmCgppZm5lcSAoJChN
QUtFQ01ER09BTFMpLCkKICAkKGZvcmVhY2ggRywkKE1BS0VDTURHT0FMUyksJChldmFsICQo
TE9PUEJPRFkpKSkKZW5kaWYKCmlmZXEgKCQoSU5DRkxBRyksMSkKICAtaW5jbHVkZSAkKE1L
KQplbmRpZgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmRhdGU6IDEuIEF1Z3VzdCAyMDIxCmF1
dGhvcjogSGVucnkgTGVobWFubgpsaW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6
IG1hcmt5LmJpYgpoZWFkZXItaW5jbHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xv
cmxpbmtzPWZhbHNlLAogICBhbGxib3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVy
c3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4q
IHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRy
dWUKeG5vcy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRzaXplOiAxMXB0Ci1maWdzaXplOiBbMTAs
OF0KLWZpZ2RwaTogMzAwCi12ZXJzaW9uOiB1bmRlZmluZWQKCi0tLQohISEgLi4vTWFrZWZp
bGUgYXV4CiEhISAuLi9tYXJreS5weSBhdXgKYGBgISEKCWltcG9ydCBzdWJwcm9jZXNzCglN
RCA9ICJNYXJrZG93biIKCU0gPSAiYG1hcmt5YCIKCU1GID0gImBNYWtlZmlsZWAiCglNUCA9
ICJgbWFya3kucHlgIgoJTXAgPSAibWFya3kucHkiCglQID0gImBwYW5kb2NgIgoJTlUgPSAi
YG51bXB5YCIKCVBMID0gImBtYXRwbG90bGliYCIKCVIgPSAiUk1hcmtkb3duIgoJUSA9ICJR
dWFydG8iCglCVCA9ICJgIgoJUDE9ICJgXygpYCIKCVAyPSAiYF9fKClgIgoJdmVyc2lvbiA9
IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsicHl0aG9uIiwgIm1hcmt5LnB5IiwKCQkiLS12
ZXJzaW9uIl0pLmRlY29kZSgidXRmLTgiKS5zdHJpcCgpCmBgYAoKLS0tCgo+ICoqQWJzdHJh
Y3QqKiAtLSBgIU1gIGlzIGEgcHJlcHJvY2Vzc29yIGZvciBgIU1EYCB1c2luZyBQeXRob24u
Cj4gYCFNYCBpcyBpbnNwaXJlZCBieSBbcGFuZG9jXShodHRwczovL3d3dy5wYW5kb2Mub3Jn
LyksCj4gW2AhUmBdKGh0dHBzOi8vcm1hcmtkb3duLnJzdHVkaW8uY29tLyksIFtgIVFgXSho
dHRwczovL3F1YXJ0by5vcmcvKS4KPiBUaGlzIGRvY3VtZW50IGlzIGNyZWF0ZWQgdXNpbmcg
YCFNYCAoVmVyc2lvbiBgIXZlcnNpb25gKSBhbmQKPiBjb250YWlucyBleGFtcGxlcyB3aGlj
aCBpbGx1c3RyYXRlIHRoZSBnZW5lcmF0aW9uIG9mCj4gZG9jdW1lbnQgY29udGVudCBmb3Ig
YGh0bWxgIGFuZCBgcGRmYCBhbmQgdGhlIGR5bmFtaWNhbCBhZGp1c3RtZW50Cj4gb2YgYCFN
RGAgdGV4dCBkdXJpbmcgcHJlcHJvY2Vzc2luZyBiYXNlZCBvbiBgcHl0aG9uYCBjb2RlLgo+
IFRoZSBmdWxsIHJhdyBgIU1gIHNvdXJjZSBjb2RlIG9mIHRoaXMgZG9jdW1lbnRhdGlvbiBh
cHBlbmRlZCBhdAo+IHRoZSBlbmQuCgotLS0KCiMgSW50cm9kdWN0aW9uCgpgIU1gIGlzIGEg
YCFNRGAgcHJlcHJvY2Vzc29yIHdoaWNoIHRyYW5zZm9ybXMgYSBgIU1EYCBkb2N1bWVudAp1
c2luZyBweXRob24uIGAhTWAgaW1wbGVtZW50cyBuZXcgbWFya3VwIHdoaWNoIGNvbnRyb2xz
IHRoZSBleGVjdXRpb24Kb2YgcHl0aG9uIGNvZGUgYW5kIHRoZSBnZW5lcmF0aW9uIGFuZCBt
YW5pcHVsYXRpb24gb2YgYCFNRGAgdGV4dC4KCmAhTWAgb25seSBkZXBlbmRzIG9uIGAhUGAg
YW5kIGBweXlhbWxgLiBgIVBgIGlzIHVzZWQgZm9yIHJlbmRlcmluZwp0aGUgYCFNRGAgaW50
byBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIHN1cHBvcnRzIHZhcmlvdXMgYCFNRGAKZXh0ZW5z
aW9ucyBhbGxvd2luZyBmb3Igc2NpZW50aWZpYyB3cml0aW5nIHVzaW5nIGVxdWF0aW9ucywg
ZmlndXJlcywKdGFibGVzLCBjaXRhdGlvbnMgYW5kIGNvcnJlc3BvbmRpbmcgcmVmZXJlbmNp
bmcgbWVjaGFuaXNtIGZvciB0aGUgbGF0dGVyLgpgcHl5YW1sYCBpcyB1c2VkIGZvciBwYXJz
aW5nIG1ldGEgZGF0YSBpbiB0aGUgZnJvbnQgbWF0dGVyIG9mIHRoZQpgIU1EYCB0ZXh0IGlm
IGl0IGlzIHByZXNlbnQuCgpXb3JrZmxvdyBmb3IgY3JlYXRpbmcgYGh0bWxgIG9yIGBwZGZg
IHVzaW5nIGAhTWAKCjEuIHVzZXIgd3JpdGVzIGEgYCFNRGAgdGV4dCBmaWxlIGFuZCBwbGFj
ZXMgaXQgaW4gYG1kLyoubWRgCmRpcmVjdG9yeSB3aXRoIHRoZSBleHRlbnNpb24gYC5tZGAu
IHRoZSBgIU1EYCB0ZXh0IGNvbnRhaW5zCnNwZWNpYWwgYCFNYCBtYXJrdXAgd2hpY2ggZXhl
Y3V0ZXMgcHl0aG9uIGNvZGUgYW5kIG1hbmlwdWxhdGVzCnRoZSBgIU1EYCB0ZXh0LgoKMi4g
YCFNYCB0cmFuc2Zvcm1zIHRoZSBmaWxlcyBpbiBgbWQvKi5tZGAgaW50byByZWd1bGFyIGAh
TURgIHRleHQKYW5kIHBsYWNlcyB0aGUgdHJhbnNmb3JtZWQgZmlsZXMgaW4gYGJ1aWxkLyou
bWRgLiBUaGUgdHJhbnNmb3JtZWQgdGV4dApvbmx5IGNvbnRhaW5zIHJlZ3VsYXIgYCFNRGAs
IGFuZCBwbGFjZWhvbGRlcnMgZm9yIGZvcm1hdCBkZXBlbmRlbnQKb3V0cHV0IGZvciBgaHRt
bGAgYW5kIGBwZGZgLgoKMy4gYmVmb3JlIHJlbmRlcmluZyBgIU1gIHJlcGxhY2VzIHBsYWNl
aG9sZGVycyBmb3IgZm9ybWF0IGRlcGVuZGVudApvdXRwdXQgd2l0aCBjb250ZW50IGNyZWF0
aW5nIGEgdGVtcG9yYXJ5IGZpbGUgd2hpY2ggb25seSBjb250YWlucwpyZWd1bGFyIGAhTURg
IHRleHQgZm9yIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIGFjY29yZGluZyB0bwpgIVBg
IGAhTURgIHNwZWNpZmljYXRpb24uCgo0LiB0aGUgcmVndWxhciBgIU1EYCB0ZXh0IGluIHRo
ZSBmaWxlcyBgYnVpbGQvKi5tZGAgaXMgcmVuZGVyZWQgaW50bwpgaHRtbGAgYW5kIGBwZGZg
IHVzaW5nIGAhUGAuCgpUaGUgdGhyZWUgc3RlcHMgYXJlIGltcGxlbWVudGVkIGluIGAhTVBg
IGFuZCBhIGAhTUZgLiBUaGUKZm9sbG93aW5nIGRvY3VtZW50IGRlc2NyaWJlcyB0aGUgc3Bl
Y2lhbCBgIU1gIG1hcmt1cCBhbmQgc2hvd3MKaG93IHRvIHVzZSBgIU1QYCBhbmQgdGhlIGAh
TUZgLgoKLS0tCgojIFJlbGF0ZWQgV29yayB7I3NlYzpyZWxhdGVkfQoKRm9yIHNjaWVudGlm
aWMgcmVwb3J0aW5nIGFuZCB3cml0aW5nIHVzdWFsbHkgdHlwZXNldHRpbmcgc3lzdGVtcyBv
cgpjb21wbGljdGVkIFdZU0lXWUcgZWRpdG9ycyBhcmUgdXNlZC4gSW4gb3JkZXIgdG8gc2lt
cGxpZnkgdGhlIHdyaXRpbmcKZGlmZmVyZW50IGFwcHJvYWNoZXMgYW5kIGZyYW1ld29ya3Mg
aGF2ZSBiZWVuIGRldmVsb3BlZC4KCiogW2AhUGBdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcv
KSwKKiBbYCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20vKQoqIFtRdWFydG9d
KGh0dHBzOi8vcXVhcnRvLm9yZy8pCiogW1NjaWVudGlmaWMgYCFNRGBdKGh0dHBzOi8vamFh
bnRvbGxhbmRlci5jb20vcG9zdC9zY2llbnRpZmljLXdyaXRpbmctd2l0aC1tYXJrZG93bi8p
CiogW1RlY2huaWNhbCBgIVBgXShodHRwczovL2xlZS1waGlsbGlwcy5vcmcvcGFuZmx1dGUt
Z251cGxvdC8pCgpBbGwgb2YgdGhvc2UgYXBwcm9hY2hlcyB1c2UgYCFQYCBhcyBhbiB1bmRl
cmx5aW5nIGZyYW1ld29yayBmb3IgZG9jdW1lbnQKY29udmVyc2lvbi4gYCFQYCBpcyBhIHBv
d2VyZnVsIGZyYW1ld29yayBmb3IgY29udmVyc2lvbiBiZXR3ZWVuIGRpZmZlcmVudApkb2N1
bWVudCBmb3JtYXRzIGluY2x1ZGluZyBgIU1gLCBgaHRtbGAgYW5kIGBwZGZgLiBgIVBgIGlt
cGxlbWVudHMgYW4Kb3duIGludGVybmFsIEFTVCwgaW4gd2hpY2ggZGlmZmVyZW50IGRvY3Vt
ZW50IGZvcm1hdHMgY2FuIGJlIGltcG9ydGVkIGFuZApleHBvcnRlZC4gVXNpbmcgdGhpcyBp
bnRlcm1lZGlhdGUgZG9jdW1lbnQgcmVwcmVzZW50YXRpb24sIGAhUGAgYWxsb3dzCnRvIG1v
ZGlmeSBkb2N1bWVudCB1c2luZyBmaWx0ZXJzLCB3aGljaCBvcGVyYXRlIG9uIHRoZSBBU1Qu
IEZpbHRlcnMKY2FuIGJlIHdyaXR0ZW4gaW4gW2BoYXNrZWxsYF0oaHR0cHM6Ly9wYW5kb2Mu
b3JnL2ZpbHRlcnMuaHRtbCksCltgbHVhYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL2x1YS1maWx0
ZXJzLmh0bWwpIGFuZApbYHB5dGhvbmBdKGh0dHBzOi8vcGFuZG9jLm9yZy9maWx0ZXJzLmh0
bWwjYnV0LWktZG9udC13YW50LXRvLWxlYXJuLWhhc2tlbGwpLgoKV2hlcmUgYXMgYCFSYCBh
bmQgYCFRYCBhcmUgaW50ZWdyYXRlZCBmcmFtZXdvcmtzLCB3aGljaCBhZGRpdGlvbmFsbHkK
ZGVwZW5kIG9uIGBrbml0cmAsIGBSU3R1ZGlvYCwgYEp1cHl0ZXJgLCBgIU1gIGRlcGVuZHMg
b24gYCFQYCBhbmQgYHB5eWFtbGAKb25seS4gYCFNYCBuYXRpdmVseSBvbmx5IHN1cHBvcnRz
IGV4ZWN1dGFibGUgcHl0aG9uIGNvZGUgYmxvY2tzLCBob3dldmVyLApvdGhlciBsYW5ndWFn
ZXMgY2FuIGJlIGV4ZWN1dGVkIHVzaW5nIHdyYXBwZXJzLCB3aGljaCBhcmUgYXZhaWxhYmxl
IGZvcgpvdGhlciBsYW5ndWFnZXMuCgotLS0KCiMgYCFNYCBGZWF0dXJlcyB7I3NlYzpmZWF0
dXJlc30KCmAhTWAgaW1wbGVtZW50cyBmb2xsb3dpbmcgZmVhdHVyZXMgdXNpbmcgYW4gc2lt
cGxlIGAhTURgLXN0eWxlIHN5bnRheC4KCjEuIHJlYWQgYCFNRGAgbWV0YSBkYXRhIGZyb20g
ZnJvbnQgbWF0dGVyLApzZWUgQHNlYzptZXRhZGF0YQpgYGBtZAoJLS0tCgkJPGtleT46IDx2
YWx1ZT4KCS0tLQpgYGAKCjIuIGV4ZWN1dGUgYW5kIGhpZGUvc2hvdyBweXRob24gY29kZSBi
bG9ja3MgaW5zaWRlIGAhTURgIHRleHQsCnNlZSBAc2VjOmJsb2NrCmBgYG1kCglgIUJUKjNg
IQoJCTxweXRob25fY29kZV9zaG93bj4KCWAhQlQqM2AKCglgIUJUKjNgISEKCQk8cHl0aG9u
X2NvZGVfaGlkZGVuPgoJYCFCVCozYApgYGAKCjMuIGdlbmVyYXRlIGAhTURgIHRleHQgdXNp
bmcgcHl0aG9uIGNvZGUsIHNlZSBAc2VjOm1kcHJpbnQKYGBgbWQKCWAhQlQqM2AhCgkJXygi
PG1hcmtkb3duX3RleHQ+IikKCQlfXygiIiIKCQkJPG1hcmtkb3duX3RleHQ+CgkJCTxtYXJr
ZG93bl90ZXh0PgoJCQk8bWFya2Rvd25fdGV4dD4KCQkiIiIpCglgIUJUKjNgCmBgYAoKNC4g
Zm9ybWF0IG91dHB1dCBvZiBweXRob24gdmFyaWFibGVzIGludG8gYCFNRGAgdGV4dCwKc2Vl
IEBzZWM6Zm9ybWF0CmBgYG1kCglPdXRwdXQgaW50byB0ZXh0OiBgXCE8cHl0aG9uX3Zhcmlh
YmxlPmAKYGBgCgo1LiBvdXRwdXQgdGhlIHJlc3VsdCBvZiBweXRob24gZXhwcmVzc2lvbnMg
aW50byBgIU1EYCB0ZXh0LApzZWUgQHNlYzppbmxpbmUKYGBgbWQKCU91dHB1dCBpbnRvIHRl
eHQ6IGBcITxweXRob25fZXhwcmVzc2lvbj5gCmBgYAoKNi4gaW5jbHVkZSBgIU1EYCB0ZXh0
LCBtYWtlIGRlcGVuZGVuY2llcyBhbmQgZm9yd2FyZCBtZXRhIGRhdGEsCnNlZSBAc2VjOmlu
Y2x1ZGUgYW5kICFAc2VjOmluY21ldGEuCmBgYG1kCgkhISEgaW5jbHVkZV9maWxlLm1kaQpg
YGAKCjcuIGZvcm1hdCBsaW5rcyBpbiBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBmb3IK
cmVmZXJlbmNpbmcgZXh0ZXJuYWwgZG9jdW1lbnRzIG9mIHRoZSBzYW1lIGZvcm1hdCwKc2Vl
IEBzZWM6Zm9ybWxpbmsuCmBgYG1kCglbRm9ybWF0IExpbmsgdG8gaHRtbC9wZGYgZG9jdW1l
bnRdKHBhdGgvdG8vZmlsZS5cPz8/KQpgYGAKCjguIHVzZSBmb3JtYXQgY29kZXMgaW4gb3Jk
ZXIgdG8gaW5qZWN0IGZvcm1hdCBzcGVjaWZpYwpjb2RlIGluIGBodG1sYCBhbmQgYHBkZmAg
ZG9jdW1lbnRzLApzZWUgQHNlYzpmb3JtY29kZS4KYGBgbWQKCWAhQlQqM2AhCgkJZGVmIGNv
ZGVfaHRtbCgpOgoJCQlfKCI8SFRNTF9DT0RFPiIpCgkJCXJldHVybiAiIiIKCQkJCTxNT1JF
X0NPREU+CgkJCQk8TU9SRV9DT0RFPgoJCQkJPE1PUkVfQ09ERT4KCQkJIiIiCgkJZGVmIGNv
ZGVfcGRmKCk6CgkJCV9fKCIiIgoJCQkJe1RFWF9DT0RFfQoJCQkJe1RFWF9DT0RFfQoJCQkJ
e1RFWF9DT0RFfQoJCQkiIiIpCglgIUJUKjNgCgoJRm9ybWF0IGRlcGVuZGVudCBvdXRwdXQ6
IGBcIWNvZGUoKWAKYGBgCgotLS0KCiMgU2NpZW50aWZpYyBXcml0aW5nIGluIGAhTURgIHsj
c2VjOnBhbm1kfQoKW2AhTURgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjcGFu
ZG9jcy1tYXJrZG93bikgaXMgYSBtYXJrdXAKbGFuZ3VhZ2UgZm9yIHRlY2huaWNhbCB3cml0
aW5nLCB3aXRoIGVtcGhhc2lzIG9uIHJlYWRhYmlsaXR5LiBgIU1EYApjYW4gYmUgcmVuZGVy
ZWQgaW4gbWFueSBmb3JtYXRzIGluY2x1ZGluZyBgaHRtbGAgYW5kIGBwZGZgIGJ5IHVzaW5n
CltgIVBgXShodHRwczovL3BhbmRvYy5vcmcvKSBmb3IgZXhhbXBsZS4KClVzaW5nIHZhcmlv
dXMgYCFNRGAgZXh0ZW5zaW9ucyBvZiBgIVBgIGEgc3VmZmljaWVudCBzdHJ1Y3R1cmUgZm9y
CndyaXRpbmcgc2NpZW50aWZpYyBkb2N1bWVudHMgY2FuIGJlIHJlZmxlY3RlZCB1c2luZyBg
IU1EYCBzeW50YXguCmAhTWAgdXNlcyB0aGUgZm9sbG93aW5nIGAhUGAgYCFNRGAgZXh0ZW5z
aW9ucy4KKiBwYXJzaW5nIGV4dGVuc2lvbnMKCSogW2FsbF9zeW1ib2xzX2VzY2FwYWJsZV0o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1hbGxfc3ltYm9sc19l
c2NhcGFibGUpCgkqIFtpbnRyYXdvcmRfdW5kZXJzY29yZXNdKGh0dHBzOi8vcGFuZG9jLm9y
Zy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW50cmF3b3JkX3VuZGVyc2NvcmVzKQoJKiBbZXNj
YXBlZF9saW5lX2JyZWFrc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVu
c2lvbi1lc2NhcGVkX2xpbmVfYnJlYWtzKQoJKiBbc3BhY2VfaW5fYXR4X2hlYWRlcl0oaHR0
cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1zcGFjZV9pbl9hdHhfaGVh
ZGVyKQoJKiBbbGlzdHNfd2l0aG91dF9wcmVjZWRpbmdfYmxhbmtsaW5lXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWxpc3RzX3dpdGhvdXRfcHJlY2VkaW5n
X2JsYW5rbGluZSkKKiBzdHlsaW5nIGV4dGVuc2lvbnMKCSogW2lubGluZV9jb2RlX2F0dHJp
YnV0ZXNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW5saW5l
X2NvZGVfYXR0cmlidXRlcykKCSogW3N0cmlrZW91dF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI2V4dGVuc2lvbi1zdHJpa2VvdXQpCiogc3RydWN0dXJpbmcgZXh0ZW5zaW9u
cwoJKiBbeWFtbF9tZXRhZGF0YV9ibG9ja10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi15YW1sX21ldGFkYXRhX2Jsb2NrKQoJKiBbcGlwZV90YWJsZXNdKGh0
dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tcGlwZV90YWJsZXMpCgkq
IFtsaW5lX2Jsb2Nrc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lv
bi1saW5lX2Jsb2NrcykKCSogW2ltcGxpY2l0X2ZpZ3VyZXNdKGh0dHBzOi8vcGFuZG9jLm9y
Zy9NQU5VQUwuaHRtbCNleHRlbnNpb24taW1wbGljaXRfZmlndXJlcykKCSogW2FiYnJldmlh
dGlvbnNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tYWJicmV2
aWF0aW9ucykKCSogW2lubGluZV9ub3Rlc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI2V4dGVuc2lvbi1pbmxpbmVfbm90ZXMpCiogY29kZSBpbmplY3Rpb24KCSogW3Jhd19o
dG1sXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXJhd19odG1s
KQoJKiBbcmF3X3RleF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lv
bi1yYXdfdGV4KQoKYCFQYCBzdXBwb3J0cwpbZXF1YXRpb25zXShodHRwczovL3BhbmRvYy5v
cmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXRleF9tYXRoX2RvbGxhcnMpCnJlbmRlcmVkIGlu
bGluZSBhbmQgc2luZ2xlLWxpbmUgaW4gdGV4LXN0eWxlIHVzaW5nIGAkLi4uJGAgYW5kIGAk
JC4uLiQkYCwKW2JpYmxpb2dyYXBoeV0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I2NpdGF0aW9ucykKdXNpbmcgdGhlIGAtLWNpdGVwcm9jYCBvcHRpb24sCltzZWN0aW9uIG51
bWJlcmluZ10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1oZWFk
ZXJfYXR0cmlidXRlcykKdXNpbmcgdGhlIGAtLW51bWJlci1zZWN0aW9uc2Agb3B0aW9uIGFu
ZApbdGFibGUgb2YgY29udGVudHNdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNv
cHRpb24tLXRvYykKdXNpbmcgdGhlIGAtLXRhYmxlLW9mLWNvbnRlbnRzYCBvcHRpb24uCgpg
IVBgIHN1cHBvcnRzIFtgeG5vc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRv
Yy14bm9zKSBmaWx0ZXJzCmZvciByZWZlcmVuY2luZyBkb2N1bWVudCBjb250ZW50IGxpa2UK
W2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1maWdub3MjdXNh
Z2UpLApbZXF1YXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZXFu
b3MjdXNhZ2UpLApbdGFibGVzXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mt
dGFibGVub3MjdXNhZ2UpLApbc2VjdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNr
L3BhbmRvYy1zZWNub3MjdXNhZ2UpCmJ5IHVzaW5nIHRoZSBgLS1maWx0ZXIgcGFuZG9jLXhu
b3NgIG9wdGlvbi4KYHhub3NgIGludGVncmF0ZXMgY2xldmVyIHJlZmVyZW5jZXMsIHdoaWNo
IG1lYW5zICJGaWcuIiwgIlNlYy4iLCAiRXEuIgphbmQgIlRhYi4iIGFyZSBhZGRlZCBhdXRv
bWF0aWNhbGx5IHRvIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQuCklmIHRoZSBwcmVmaXgg
aXMgdG8gYmUgb21pdHRlZCwgdGhlIHJlZmVyZW5jZSBjYW4gYmUgd3JpdHRlbiBhcwpgXCFA
cmVmOmxhYmVsYC4KCioqRXhhbXBsZSoqCmBgYG1kCiMjIFJlZmVyZW5jZWQgU2VjdGlvbiB7
I3NlYzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHNlYzpsYWJlbC4KCiFbVGhp
cyBpcyB0aGUgY2FwdGlvbl0oZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFB
QU5TClVoRVVnQUFBQVVBQUFBRkNBWUFBQUNOYnlibEFBQUFIRWxFUVZRSTEyUDQvLzgvdzM4
R0lBWERJQktFMERICnhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNm
aWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAg
fEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3
CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlvbiB7I3RibDpsYWJlbH0KClRoaXMgaXMgYSBy
ZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7ZX1ee1xtYm94e2l9XHBpfSsxPTAk
JHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMg
aXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNdLgpgYGAKClRoZSBmaWxlIGBtYXJreS5iaWJg
IGlzIHNwZWNpZmllZCBpbiB0aGUgbWV0YSBkYXRhIGluIHRoZSBmcm9udAptYXR0ZXIgb2Yg
dGhlIGAhTURgIHRleHQgYW5kIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgYXJ0aWNsZS4KCmBg
YGJpYnRleAohISEgLi4vZGF0YS9tYXJreS5iaWIgcmF3CmBgYAoKKipPdXRwdXQqKgoKIyMg
UmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0
byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRoZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZzti
YXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFB
SEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJLRTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFB
QkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBm
aWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0tLXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1
NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTogVGhpcyBpcyB0aGUgY2FwdGlvbi4geyN0Ymw6
bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEB0Ymw6bGFiZWwuCgokJFxtYm94e2V9
XntpXHBpfSsxPTAkJHsjZXE6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTps
YWJlbC4KClRoaXMgaXMgYSBjaXRhdGlvbiBbQE11bGxlcjE5OTNdLgoKLS0tCgojIGAhTVBg
IENvbW1hbmQtTGluZSBVc2FnZQoKIyMgYCFNUGAgU2NyaXB0IFVzYWdlCgpgIU1gIGlzIHN1
cHBsaWVkIGFzIGEgc2luZ2xlLWZpbGUgc2NyaXB0IHdoaWNoIGNvbnRhaW5zIHRoZSBgIU1g
CmAhTUZgIGFzIHdlbGwgYXMgdGhlIGAhTWAgZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBg
bWFya3kubWRpYAphbmQgYG1hcmt5LmJpYmAuCgpBZnRlciBkb3dubG9hZGluZyBgIU1QYCB0
aGUgc2NyaXB0IG5lZWRzIHRvIGJlIHBsYWNlZCBpbiBhIHByb2plY3QKd29ya2luZyBkaXJl
Y3RvcnkgYHdvcmtpbmdfZGlyYC4gVGhlIHNjcmlwdCBjYW4gYmUgaW52b2tlZCB1c2luZwph
IHB5dGhvbiBpbnRlcnByZXRlciBgcHl0aG9uYCBgIU1wYCBvciBpdCBjYW4gYmUgZXhlY3V0
ZWQgdXNpbmcgYQpzaGVsbDoKYGBgYmFzaAo+IGNkIHdvcmtpbmdfZGlyCj4gY2htb2QgK3gg
bWFya3kucHkKPiAuL21hcmt5LnB5CmBgYAoKQSBuZXcgcHJvamVjdCBpcyBpbml0aWFsaXpl
ZCBpbiB0aGUgYHdvcmtpbmdfZGlyYCB1c2luZyB0aGUgYC0taW5pdGAKb3B0aW9uLiBgIU1g
IGNyZWF0ZXMgYSBkaXJlY3RvcnkgdHJlZSBmb3IgdGhlIHByb2plY3QsIHdoaWNoIGlzCmV4
cGxhaW5lZCBpbiBkZXRhaWwgaW4gQHNlYzpwcm9qZWN0LiBUaGUgYCFNYCBgIU1GYCBhbmQK
ZG9jdW1lbnRhdGlvbiBgbWFya3kubWRgLCBgbWFya3kubWRpYCBhbmQgYG1hcmt5LmJpYmAg
YXJlIGF1dG8tZ2VuZXJhdGVkCmFuZCBwbGFjZWQgaW5zaWRlIHRoZSBzdWJkaXJzIGBtZC9g
IGFuZCBgZGF0YS9gIGluIGB3b3JraW5nX2RpcmAKYWNjb3JkaW5nbHkuCmBgYGJhc2gKPiBj
ZCB3b3JraW5nX2Rpcgo+IC4vbWFya3kucHkgLS1pbml0CldSSVRFIC4vTWFrZWZpbGUKV1JJ
VEUgLi9tZC9tYXJreS5tZApXUklURSAuL21kL21hcmt5Lm1kaQpXUklURSAuL2RhdGEvbWFy
a3kuYmliClVTQUdFCjEuIGBtYWtlIGhlbHBgCjIuIGBtYWtlIGFsbC1odG1sIGh0dHBkYAoz
LiBgbWFrZSBhbGwtcGRmYApgYGAKCmAhTWAgcmVuZGVycyB0aGUgZG9jdW1lbnRhdGlvbiB1
c2luZyBgIVBgIGludG8gYGh0bWxgIGFuZApgcGRmYCB1c2luZyBgbWFrZSBhbGxgLiBgaHRt
bGAgYW5kIGBwZGZgIGRvY3VtZW50cyBjYW4gYmUgcmVuZGVyZWQgYWZ0ZXIKaW5zdGFsbGlu
ZyB0aGUgZGVwZW5kZW5jaWVzIGBweXRob24tcHl5YW1sYCwgYHBhbmRvY2AgYW5kIGBwYW5k
b2MteG5vc2AKKGBwYW5kb2MtZmlnbm9zYCwgYHBhbmRvYy1zZWNub3NgLCBgcGFuZG9jLWVx
bm9zYCwgYHBhbmRvYy10YWJsZW5vc2ApLgpUaGUgZGV0YWlscyBhcmUgc2hvd24gaW4gdGhl
IGAhTUZgIGhlbHAgbWVzc2FnZSBpbiBAc2VjOm1ha2VmaWxlLgoKIyMgYCFNYCBQcm9qZWN0
IFN0cnVjdHVyZSB7I3NlYzpwcm9qZWN0fQoKQSBgIU1gIHByb2plY3QgaGFzIHRoZSBmb2xs
b3dpbmcgc3RydWN0dXJlLCB3aGljaCBpcyBhdXRvLWdlbmVyYXRlZAppbiB0aGUgcHJvamVj
dCBkaXJlY3RvcnkgYHdvcmtpbmdfZGlyYCBhZnRlciBpbnZvY2F0aW9uIG9mCmAhTXBgIGAt
LWluaXRgLgpgYGAhIQoJdGV4dCA9ICIiCglmb3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291
dHB1dChbIm1ha2UiLAoJCSJ0cmVlIl0pLmRlY29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToK
CQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToKCQkJdGV4dCArPSBpICsgIlxuIgpgYGAKCmBgYApg
IXRleHRgCmBgYAoKQnkgaW52b2tpbmcgYG1ha2UgYWxsYCBhbGwgZmlsZXMgYG1kLyoubWRg
IGFyZSB0cmFuc2Zvcm1lZAppbnRvIGNvcnJlc3BvbmRpbmcgYGh0bWwvKi5odG1sYCBhbmQg
YHBkZi8qLnBkZmAgZmlsZXMuIEJ5Cmludm9raW5nIGBtYWtlIGh0dHBkYCBhIHB5dGhvbiB3
ZWIgc2VydmVyIGlzIHN0YXJ0ZWQgaW4gYGh0bWwvYC4KCkFsbCB1c2VyLWdlbmVyYXRlZCBw
cm9qZWN0IGNvbnRlbnQgZ29lcyBpbnRvIGBtZC8qLm1kKGkpYCBmb3IKYCFNRGAgdGV4dCBh
bmQgYCFNRGAgaW5jbHVkZSBmaWxlcyBhbmQgYGRhdGEvKmAgZm9yIGltYWdlcywKYmlibGlv
Z3JhcGh5LCB2aWRlb3MsIGh0bWwgZnJhbWVzLCBldGMuLi4KCioqQVRURU5USU9OOioqIFRo
ZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3JpZXMgYGJ1aWxkLyoubWRgIGFyZQoqKmF1dG8tZ2Vu
ZXJhdGVkKiouIEFsbCB1c2VyLWdlbmVyYXRlZCBjb250ZW50IGAqLm1kYCBhbmQgYCoubWRp
YApoYXMgdG8gYmUgcGxhY2VkIGluc2lkZSB0aGUgZGlyZWN0b3J5IGBtZC9gLiBJbnZva2lu
ZyBgbWFrZSBjbGVhbmAKd2lsbCBkZWxldGUgYWxsIGZpbGVzIGluIGBodG1sL2AsIGBidWls
ZC9gIGFuZCBgcGRmL2AuCgojIyBgIU1gIE1ha2VmaWxlIFVzYWdlIHsjc2VjOm1ha2VmaWxl
fQoKQnkgcnVubmluZyBgbWFrZWAgb3IgYG1ha2UgaGVscGAgaW4gdGhlIHByb2plY3QgYHdv
cmtpbmdfZGlyYCB0aGUKYCFNRmAgaGVscCBpcyBzaG93bi4KYGBgISEKCXRleHQgPSAiIgoJ
Zm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJtYWtlIiwKCQkiaGVscCJdKS5k
ZWNvZGUoInV0Zi04Iikuc3BsaXQoIlxuIik6CgkJaWYgaS5zdGFydHN3aXRoKCIjIik6CgkJ
CXRleHQgKz0gaSArICJcbiIKYGBgCgpgYGAKYCF0ZXh0YApgYGAKCiMjIGAhTWAgQ2hlYXQg
U2hlZXQKCkJ5IHJ1bm5pbmcgYG1ha2UgY2hlYXRgIGluIHRoZSBwcm9qZWN0IGB3b3JraW5n
X2RpcmAgdGhlIGAhTWAgY2hlYXQKc2hlZXQgaXMgc2hvd24sIHdoaWNoIHByZXNlbnRzIGEg
cXVpY2sgb3ZlcnZpZXcgb2YgYCFNYCBzcGVjaWFsCm1hcmt1cCBmb3IgZXhlY3V0aW9uIG9m
IHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRpb24gb2YgYCFNRGAgdGV4dCwKYWNjb3JkaW5n
IHRvIHRoZSBmZWF0dXJlcyBkZXNjcmliZXMgaW4gQHNlYzpmZWF0dXJlcy4KYGBgISEKCXRl
eHQgPSAiIgoJZm9yIGkgaW4gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJtYWtlIiwKCQki
Y2hlYXQiXSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIpOgoJCWlmIGkuc3RhcnRzd2l0
aCgiIyIpOgoJCQlpID0gaS5yZXBsYWNlKHIiLlw/Pz8iLCByIi5cXD8/PyIpCgkJCWkgPSBp
LnJlcGxhY2UociIuPz8/IiwgciIuXD8/PyIpCgkJCXRleHQgKz0gaSArICJcbiIKYGBgCgpg
YGAKYCF0ZXh0YApgYGAKCi0tLQoKIyBgIU1gIFByZXByb2Nlc3NvciBNYXJrdXAKCiMjIFlh
bWwgTWV0YSBEYXRhIGluIEZyb250IE1hdHRlciB7I3NlYzptZXRhZGF0YX0KCk1ldGEgZGF0
YSBpcyBhbm5vdGF0ZWQgaW4gdGhlIGZyb250IG1hdHRlciBvZiBhIGAhTURgIHRleHQgZG9j
dW1lbnQuClRoZSBmcm9udCBtYXR0ZXIgbXVzdCBzdGFydCBpbiB0aGUgZmlyc3QgbGluZSB3
aXRoIGAtLS1gIGFuZCBwcmVjZWRlcyBhbGwKb3RoZXIgdGV4dCBiZWluZyBmZW5jZWQgYnkg
YC0tLWAuIFRoZSBtZXRhIGRhdGEgaXMgaW4gYHlhbWxgIGZvcm1hdC4KVGhlIGB5YW1sYCBi
bG9jayBpcyBwYXJzZWQgdXNpbmcgYHB5dGhvbi1weXlhbWxgLiBCeSBkZWZhdWx0IGFsbCBt
ZXRhCmRhdGEgaXMgaW1wb3J0ZWQgaW50byB0aGUgcHJlcHJvY2Vzc2VkIGRvY3VtZW50LiBJ
ZiBhIG1ldGEKZGF0YSBrZXkgc3RhcnRzIHdpdGggYC1gIHRoZSBrZXkgaXMgbm90IGltcG9y
dGVkIGludG8gdGhlIHJlc3VsdGluZwptZXRhIGRhdGEgb2YgdGhlIHByZXByb2Nlc3NlZCBk
b2N1bWVudCwgaG93ZXZlciB0aGUga2V5IHdpbGwgYmUKZXhwb3NlZCBpbnRvIHRoZSBweXRo
b24gc2NvbGUgYXMgYSBsb2NhbCB2YXJpYWJsZS4gSW4gdGhlIGZvbGxvd2luZwpleG1hbXBs
ZSBhbGwga2V5cyBleGNlcHQgYGZpZ3NpemVgLCBgZmlnZHBpYCBhbmQgYHZlcnNpb25gIGFy
ZSBjb3BpZWQKaW50byB0aGUgcHJlcHJvY2Vzc2VkIGAhTURgIGRvY3VtZW50LgoKKipFeGFt
cGxlKioKYGBgeWFtbAoKLS0tCnRpdGxlOiBgIXRpdGxlYApkYXRlOiBgIWRhdGVgCmF1dGhv
cjogYCFhdXRob3JgCmxpbmstY2l0YXRpb25zOiBgIWxpbmtfY2l0YXRpb25zYApiaWJsaW9n
cmFwaHk6IGAhYmlibGlvZ3JhcGh5YApoZWFkZXItaW5jbHVkZXMtLXBkZjogPgogIFxoeXBl
cnNldHVwewogIGNvbG9ybGlua3M9ZmFsc2UsCiAgYWxsYm9yZGVyY29sb3JzPXswIDAgMH0s
CiAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1ZGVzLS1odG1sOiA+
CiAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1j
bGV2ZXJlZjogYCF4bm9zX2NsZXZlcmVmYAp4bm9zLWNhcGl0YWxpc2U6IGAheG5vc19jYXBp
dGFsaXNlYApmb250c2l6ZTogYCFmb250c2l6ZWAKLXZlcnNpb246IGAhdmVyc2lvbmAKLWZp
Z3NpemU6IGAhZmlnc2l6ZWAKLWZpZ2RwaTogYCFmaWdkcGlgCgotLS0KCmBgYAoKVGhlIG1l
dGEgZGF0YSBmaWVsZHMKW2B0aXRsZWAsIGBkYXRlYCwgYGF1dGhvcmBdKGh0dHBzOi8vcGFu
ZG9jLm9yZy9NQU5VQUwuaHRtbCNtZXRhZGF0YS12YXJpYWJsZXMpLApbYGxpbmstY2l0YXRp
b25zYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI290aGVyLXJlbGV2YW50LW1l
dGFkYXRhLWZpZWxkcyksCltgYmlibGlvZ3JhcGh5YF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI2NpdGF0aW9uLXJlbmRlcmluZykgYW5kCltgaGVhZGVyLWluY2x1ZGVzYF0o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1zZXQtYXV0b21hdGlj
YWxseSkKYXJlIHByb2Nlc3NlZCBieSBgIVBgIGR1cmluZyBkb2N1bWVudCByZW5kZXJpbmcu
IGBmb250c2l6ZWAgYWRqdXN0cyB0aGUKZm9udCBzaXplIGluIFtgaHRtbGBdKGh0dHBzOi8v
cGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJpYWJsZXMtZm9yLWh0bWwpCmFuZCBbYHBkZmBd
KGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCN2YXJpYWJsZXMtZm9yLWxhdGV4KSBk
b2N1bWVudHMuClRoZSBgaGVhZGVyLWluY2x1ZGVzYCBmaWVsZCBpcyB1c2VkIGZvciB1bmRl
cmxpbmluZyBsaW5rcyBpbiBgcGRmYAphbmQgYGh0bWxgIGRvY3VtZW50cy4gVGhlIGB4bm9z
LWNsZXZlcmVmYCBhbmQgYHhub3MtY2FwaXRhbGlzZWAKZmllbGRzIGFyZSB1c2VkIGJ5IHRo
ZSBbYHBhbmRvYy14bm9zYF0oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXhu
b3MpCmV4dGVuc2lvbnMgZm9yIHJlZmVyZW5jaW5nCltmaWd1cmVzXShodHRwczovL2dpdGh1
Yi5jb20vdG9tZHVjay9wYW5kb2MtZmlnbm9zI2N1c3RvbWl6YXRpb24pLApbdGFibGVzXSho
dHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtdGFibGVub3MjY3VzdG9taXphdGlv
biksCltzZWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLXNlY25v
cyNjdXN0b21pemF0aW9uKSBhbmQKW2VxdWF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3Rv
bWR1Y2svcGFuZG9jLWVxbm9zI2N1c3RvbWl6YXRpb24pLgoKVGhlIGZpZWxkIGBoZWFkZXIt
aW5jbHVkZXNgIGVuZHMgd2l0aCBgLS1wZGZgIGFuZCBgLS1odG1sYCwgd2hpY2gKc3BlY2lm
aWVzIGNvcnJlc3BvbmRpbmcgb3B0aW9ucyBmb3IgZ2VuZXJhdGlvbiBvZiBgcGRmYCBhbmQg
YGh0bWxgCmRvY3VtZW50cy4gRHVyaW5nIG1ha2UsIGAhTWAgc2NhbnMgYWxsIG1ldGEgZGF0
YSBmaWVsZHMsIGFuZApmaWVsZHMgd2hpY2ggZW5kIHdpdGggYC0tcGRmYCBhbmQgYC0taHRt
bGAgYXJlIHNlbGVjdGVkIGFuZCBmb3J3YXJkZWQKdG8gYCFQYCBiYXNlZCBvbiB0aGUgZm9y
bWF0IHRvIGJlIHJlbmRlcmVkLiBUaGlzIHdhcyBmb3JtYXQgZGVwZW5kZW50Cm1ldGEgZGF0
YSBjYW4gYmUgc3BlY2lmaWVkIGluIGAhTWAgTWFya2Rvd24gdGV4dC4KClRoZSBgdmVyc2lv
bmAgZmllbGQgaXMgYSB1c2VyLWRlZmluZWQgZmllbGQKd2hpY2ggc2hvd3MgdGhlIHZlcnNp
b24gb2YgdGhpcyBkb2N1bWVudDogKmAhdmVyc2lvbmAqLiBgZmlnc2l6ZWAgYW5kCmBmaWdk
cGlgIGFyZSB1c2VkIGluIHRoaXMgZG9jdW1lbnQgdG8gY29udHJvbCB0aGUgZmlndXJlIHNp
emUgYW5kCnJlc29sdXRpb24gaW4gdGhlIGAhTlVgIGFuZCBgIVBMYCBleGFtcGxlLCBzZWUg
QHNlYzpleGFtcGxlcy4gVGhlIGZvbnQKc2l6ZSBpcyBgIWZvbnRzaXplYCBhbmQgdGhlIEBm
aWc6ZmlndXJlMSwgIUBmaWc6ZmlndXJlMl8xLAohQGZpZzpmaWd1cmUyXzIsICFAZmlnOmZp
Z3VyZTJfMyBhbmQgIUBmaWc6ZmlndXJlMl80IGhhdmUgYSBzaXplIG9mCmAhIngiLmpvaW4o
c3RyKGkpIGZvciBpIGluIGZpZ3NpemUpYGNtLiBUaGUgZm9udCBzaXplIGFwcGxpZXMgdG8K
Ym90aCBkb2N1bWVudCB0ZXh0IGFuZCBmaWd1cmUgdGV4dC4KCkFzIHRoZSB1c2VyLWRlZmlu
ZWQgZmllbGRzIGFyZSBwcmVjZWVkZWQgd2l0aCBgLWAsIHRoZXkgYXJlIG5vdCBjb3BpZWQK
aW50byB0aGUgbWV0YSBkYXRhIG9mIHRoZSBwcmVwcm9jZXNzZWQgYCFNRGAgdGV4dC4gVGhl
eSBhcmUgb25seQpleHBvc2VkIGludG8gdGhlIHB5dGhvbiBzY29wZSBhcyB2YXJpYWJsZXMg
Zm9yIHByb2Nlc3NpbmcgdGhlIGAhTWAKYCFNRGAgdGV4dCwgYXMgZGVzY3JpYmVkIGluIEBz
ZWM6aW5jbWV0YS4KCiMjIFB5dGhvbiBDb2RlIEJsb2NrcyBpbnNpZGUgYCFNRGAgVGV4dCB7
I3NlYzpibG9ja30KClB5dGhvbiBjb2RlIGNhbiBiZSBleGVjdXRlZCBkdXJpbmcgdHJhbnNm
b3JtYXRpb24gb2YgdGhlIGAhTURgIHRleHQuClB5dGhvbiBjb2RlIGlzIGRpcmVjdGx5IHdy
aXR0ZW4gaW5zaWRlIHRoZSBgIU1EYCB0ZXh0IGFuZCBpcyBmZW5jZWQKdXNpbmcgdGhlIGBg
IGAhQlQqM2AgYGAgc3RhdGVtZW50LiBUaGUgYmxvY2sgbmVlZHMgdG8gc3RhcnQgd2l0aCBl
aXRoZXIKYCFgIG9yIGAhYC4KKiBgIWA6IFRoZSBweXRob24gY29kZSBpcyBleGVjdXRlZCBh
bmQgKipoaWRkZW4qKiBpbiB0aGUgb3V0cHV0LgoqIGAhYDogVGhlIHB5dGhvbiBjb2RlIGlz
IGV4ZWN1dGVkIGFuZCAqKnNob3duKiogaW4gdGhlIG91dHB1dC4KCmBgYG1kCglgIUJUKjNg
IQoJCTxweXRob25fY29kZV9oaWRkZW4+CglgIUJUKjNgCgoJYCFCVCozYCEKCQk8cHl0aG9u
X2NvZGVfc2hvd24+CglgIUJUKjNgCmBgYAoKTWV0YSBkYXRhIGZyb20gYCFNRGAgZnJvbnQg
bWF0dGVyIGNhbiBiZSB1c2VkIGFzIGxvY2FsIHZhcmlhYmxlcyBpbgpweXRob24gY29kZSBi
bG9ja3MuIFRoZSBgaW1wb3J0YCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQgaW4gcHl0aG9uIGNv
ZGUKYmxvY2tzIGluIG9yZGVyIHRvIGFjY2VzcyBpbnN0YWxsZWQgcHl0aG9uIHBhY2thZ2Vz
LiBBbGwgY29kZSBibG9ja3MKc3BhbiBvbmUgbGFyZ2Ugc2NvcGUgZm9yIHNoYXJpbmcgZnVu
Y3Rpb25zIGFuZCBsb2NhbCB2YXJpYWJsZXMuClVzaW5nIHRoZSBgcHJpbnQoKWAgZnVuY3Rp
b24gdGhlIHRleHQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xlCmFuZCAqKm5vdCoq
IGluc2lkZSB0aGUgcmVzdWx0aW5nIGAhTURgIHRleHQuIEluIG9yZGVyIHRvIG1vZGlmeQp0
aGUgYCFNRGAgdGV4dCB1c2luZyBgIU1gIGR1cmluZyBwcmVwcm9jZXNzaW5nLCB0aGUgYCFQ
MWAgc3RhdGVtZW50CmhhcyB0byBiZSB1c2VkLCBzZWUgQHNlYzptZHByaW50LgoKKipFeGFt
cGxlKioKYGBgIQoJaW1wb3J0IG51bXB5IGFzIG5wCglkZWYgZ2V0X3goYT0wKToKCQlyZXR1
cm4gbnAuYXJyYXkoWzQxICsgYV0pCgl5ID0gMQpgYGAKClRoaXMgaXMgYSBwYXJhZ3JhcGgu
CgpgYGAhCgl4ID0gZ2V0X3goeSkKCXByaW50KCJIZWxsbyBDb25zb2xlISB4IGlzIiwgeCkK
YGBgCgojIyBHZW5lcmF0aW9uIG9mIGAhTURgIFRleHQgdXNpbmcgUHl0aG9uIENvZGUgeyNz
ZWM6bWRwcmludH0KCiMjIyBUaGUgYCFQMWAgU3RhdGVtZW50CgpVc2luZyB0aGUgYHByaW50
KClgIHN0YXRlbWVudCB0aGUgdGV4dCB3aWxsIGJlIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUu
CldoZW4gdXNpbmcgdGhlIGAhUDFgIGFuZCBgIVAyYCBzdGF0ZW1lbnRzIG5ldyBgIU1EYCB0
ZXh0IGNhbiBiZQppbnNlcnRlZCBkeW5hbWljYWxseSBpbnRvIHRoZSBkb2N1bWVudCBkdXJp
bmcgcHJlcHJvY2Vzc2luZy4KCioqYCFQMWAgU3RhdGVtZW50KioKKiBgXygqYXJncywgc2Vw
PSIgIilgOgoJMS4gY29udmVydCBhcmd1bWVudHMgdG8gc3RyaW5nCgkyLiBqb2luIGFyZ3Vt
ZW50cyB1c2luZyBgc2VwYAoqIGBfKF8sICphcmdzICAgKWA6IGFwcGVuZCB0byBwcmV2aW91
cyBvdXRwdXQKKiBgXyhfLCAqYXJncywgXylgOiBhcHBlbmQgdG8gcHJldmlvdXMgb3V0cHV0
IGFuZCBhcHBlbmQgbmV4dCBvdXRwdXQKKiBgXyggICAqYXJncywgXylgOiBhcHBlbmQgbmV4
dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKCioqYCFQMmAgU3RhdGVtZW50KioKKiBgX18oYXJn
LCBjcm9wPVRydWUsIHNoaWZ0PSIiKWA6CgkxLiBjb252ZXJ0IGBhcmdgIHRvIHN0cmluZwoJ
Mi4gY3JvcCBhbmQgcHJlcGVuZCBgc2hpZnRgIHN0cmluZyB0byBlYWNoIGxpbmUKKiBgX18o
YXJnLCBfKWA6IGFwcGVuZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1dAoKKipDcm9wIGFu
ZCBTaGlmdCoqCmBgYHB5CmRlZiB0ZXN0KCk6CglfXygiIiIKCQkqIExpc3QgTGV2ZWwgMQoJ
CSogTGlzdCBMZXZlbCAxCgkiIiIpCglfXygiIiIKCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlz
dCBMZXZlbCAyCgkJICAgICogTGlzdCBMZXZlbCAzCgkiIiIsIHNoaWZ0PSIgIio0KQpgYGAK
CmBgYG1kCiogTGlzdCBMZXZlbCAxCiogTGlzdCBMZXZlbCAxCiAgICAqIExpc3QgTGV2ZWwg
MgogICAgKiBMaXN0IExldmVsIDIKICAgICAgICAqIExpc3QgTGV2ZWwgMwpgYGAKCioqRXhh
bXBsZSoqCmBgYCEKCXkgKz0gMQoJX18oZiIiIgoJCSogVGhpcyBpcyBgbWFya3lgIFZlcnNp
b24gKnt2ZXJzaW9ufSouCgkJKiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259
Ki4KCSIiIikKCV9fKGYiIiIKCQkxLiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNp
b259Ki4KCQkyLiBUaGlzIGlzIGBtYXJreWAgVmVyc2lvbiAqe3ZlcnNpb259Ki4KCSIiIiwg
c2hpZnQ9IiAiKjQpCmBgYAoKYGBgIQoJXygiVGhpcyIsIF8pCglfKCJpcyIpCglfKF8sICIg
b25lIiwgXykKCV8oImxpbmUhIG5vdCBlbmRpbmcgd2l0aCBcXCIpCglfKCJ0aGlzPyIpCmBg
YAoKYGBgIQoJXyhmIkhlbGxvIE1hcmtkb3duISB4IGlzICoqe3h9KiogYW5kIHkgaXMgKnt5
fSoiKQpgYGAKCiMjIyBJbmRlbnRhdGlvbiBvZiB0aGUgYCFQMWAgU3RhdGVtZW50CgpUaGUg
YCFQMWAgc3RhdGVtZW50IG5lZWRzIHRvIGJlIGluZGVudGVkIGFjY29yZGluZyB0byB0aGUg
cHl0aG9uIHByb2dyYW0KZmxvdyAoYGZvcmAsIGB3aGlsZWAsIGBpZmAsIGBlbHNlYCwgYHRy
eWAsIGB3aXRoYCwgYGRlZmAsIGBjbGFzc2ApIGFuZApzdXBwb3J0cyBkeW5hbWljIGluc2Vy
dGlvbiBvZiBgIU1EYCB0ZXh0IGludG8gdGhlIGRvY3VtZW50IGJhc2VkCm9uIGxvb3BzIGFu
ZCBjb25kaXRpb25zLgoKKipFeGFtcGxlIDEqKgoKYGBgIQoJXygiVGhpcyBpcyB0aGUgKipn
ZW5lcmF0ZWQgb3V0cHV0Kio6IikKCV8oIiIpCglfKCI+IFRoaXMgaXMgYSAqbGlzdGluZyo6
IikKCXRleHQgPSBbInplcm8iLCAib25lIiwgInR3byIsICJ0aHJlZSJdCglmb3IgaSBpbiBy
YW5nZSgxMCk6CgkJaWYgaSA8IDI6CgkJCV8oZiI+IHtpfSIpCgkJZWxpZiBpID09IDI6CgkJ
CWogPSB0ZXh0W2ldCgkJCV8oZiI+IHtqfSIpCgkJZWxpZiBpID09IDM6CgkJCV8oIiIpCgkJ
ZWxpZiBpIDwgNzoKCQkJXyhmIj4+IHsnICAgICcqKGktNCl9KiB7aX0iKQoJCWVsaWYgaSA9
PSA3OgoJCQlfKCIiKQoJCWVsc2U6CgkJCWogPSBpIC0gNwoJCQlrID0gdGV4dFtqXQoJCQlf
KGYiPiB7an0uIHtrfSIpCmBgYAoKKipFeGFtcGxlIDIqKgoKQHRibDp0YWJsZTEgaXMgZ2Vu
ZXJhdGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgcHl0aG9uIGNsb2RlIGJsb2NrLgoKYGBgIQoJ
biA9IDEzCglkZWMgPSBbIiolcyoiLCAiKiolcyoqIiwgIn5+JXN+fiIsICJgJXNgIiwKCQly
IiRcdGltZXNeJXMkIiwgIiRcaW5mdHlfJXMkIl0KCV8oInwiLmpvaW4oIlgiKm4pICsgIlxu
IiArICJ8Ii5qb2luKCItIipuKSkKCWZvciBpIGluIHJhbmdlKG4pOgoJCWZpbGwgPSBbY2hy
KG9yZCgiQSIpKygyKmkrMyprKSUyNikgZm9yIGsgaW4gcmFuZ2UoaSsxKV0KCQlmaWxsID0g
W2RlY1sobCtpKSVsZW4oZGVjKV0layBmb3IgbCwgayBpbiBlbnVtZXJhdGUoZmlsbCldCgkJ
dGV4dCA9IGxpc3QoIjAiKSpuCgkJdGV4dFsobj4+MSktKGk+PjEpOihuPj4xKSsoaT4+MSld
ID0gZmlsbAoJCV8oInwiLmpvaW4odGV4dCkpCmBgYAoKVGFibGU6IFRhYmxlIGlzIGdlbmVy
YXRlZCB1c2luZyBjb2RlIGFuZCB0aGUgYCFQMWAgc3RhdGVtZW50LiB7I3RibDp0YWJsZTF9
CgojIyBGb3JtYXR0ZWQgT3V0cHV0IG9mIFB5dGhvbiBWYXJpYWJsZXMgeyNzZWM6Zm9ybWF0
fQoKYCFNYCBjYW4gb3V0cHV0IHB5dGhvbiB2YXJpYWJsZXMgaW5saW5lIGludG8gYCFNRGAg
dGV4dCB1c2luZwp0aGUgYGAgYFwhVkFSSUFCTEVgIGBgIHN0YXRlbWVudC4gYFZBUklBQkxF
YCBjYW4gYmUgYW55IHB5dGhvbiB2YXJpYWJsZQpmcm9tIGEgcHl0aG9uIGNvZGUgYmxvY2sg
b3IgbWV0YSBkYXRhIGZpZWxkLiBUaGUgb3V0cHV0IGNhbiBiZQpmb3JtYXR0ZWQgdXNpbmcg
dGhlIGBgIGBcIVZBUklBQkxFWzpGT1JNQVRdYCBgYCBzdGF0ZW1lbnQgYWNjb3JkaW5nCnRv
IHRoZSBweXRob24gb3BlcmF0b3IgYHs8dmFyaWFibGU+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1l
bnRlZCBpbiB0aGUKW2BzdHIuZm9ybWF0KClgXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8z
L2xpYnJhcnkvc3RyaW5nLmh0bWwjZm9ybWF0c3RyaW5ncykKc3BlY2lmaWNhdGlvbi4gVGhl
IGBgIGBcIVZBUklBQkxFYCBgYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZAp1c2luZyBgYCBgXFwh
VkFSSUFCTEVgIGBgLgoKKipFeGFtcGxlKioKYGBgIQoJeCA9IGludCgxKQoJeSA9IGZsb2F0
KDIuMykKCXogPSAwCglhID0gWzEsIDIsIDNdCgliID0gKDQsIDUpCmBgYAoKYGBgbWQKVGhp
cyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyBgXCF4OjAzZGAgYW5kIHkgaXMgYFwheTouMmZg
LgpPdGhlciBjb250ZW50IGlzOiBgXCFhYCwgYFwhYmAgYW5kIGVzY2FwaW5nIHdvcmtzOiBg
XFwhemAuCmBgYAoKVGhpcyBpcyBhIHBhcmFncmFwaCBhbmQgeCBpcyBgIXg6MDNkYCBhbmQg
eSBpcyBgIXk6LjJmYC4KT3RoZXIgY29udGVudCBpczogYCFhYCwgYCFiYCBhbmQgZXNjYXBp
bmcgd29ya3M6IGBcIXpgLgoKIyMgT3V0cHV0IFJlc3VsdHMgb2YgUHl0aG9uIEV4cHJlc3Np
b25zIHsjc2VjOmlubGluZX0KCmAhTWAgb3V0cHV0cyByZXN1bHRzIG9mIHB5dGhvbiBleHBy
ZXNzaW9ucyBpbmxpbmUgaW50byBgIU1EYCB0ZXh0CnVzaW5nIHRoZSBgYCBgXCFFWFBSRVNT
SU9OYCBgYCBzdGF0ZW1lbnQuIGBFWFBSRVNTSU9OYCBjYW4gYmUgYW55IHB5dGhvbgpleHBy
ZXNzaW9uLiBUaGUgb3V0cHV0IGNhbiBiZSBmb3JtYXR0ZWQgdXNpbmcgdGhlIHB5dGhvbgpg
YCBgXCFFWFBSRVNTSU9OWzpGT1JNQVRdYCBgYCBzdGF0ZW1lbnQgYWNjb3JkaW5nIHRvIHRo
ZSBweXRob24gb3BlcmF0b3IKYHs8ZXhwcmVzc2lvbj5bOjxmb3JtYXQ+XX1gIGltcGxlbWVu
dGVkIGluIHRoZSBweXRob24KW2BmYC1zdHJpbmdzXShodHRwczovL2RvY3MucHl0aG9uLm9y
Zy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJpbmdzKQpzcGVjaWZp
Y2F0aW9uLiBUaGUgYGAgYFwhRVhQUkVTU0lPTmAgYGAgc3RhdGVtZW50IGlzIGVzY2FwZWQK
dXNpbmcgYGAgYFxcIUVYUFJFU1NJT05gIGBgLgoKKipFeGFtcGxlKioKYGBgbWQKVGhpcyBp
cyBhIGxpc3Qgd2l0aCB0aGUgbnVtYmVycyBgXCEiLCAiLmpvaW4oW3N0cihpKSBmb3IgaSBp
biBhXSlgLgpUaGUgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiBgZ2V0X3hgIGlzIGBcIWdldF94
KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFxcIWdldF94KGJbMV0pWzBdYC4KYGBgCgpUaGlz
IGlzIGEgbGlzdCB3aXRoIHRoZSBudW1iZXJzIGAhIiwgIi5qb2luKFtzdHIoaSkgZm9yIGkg
aW4gYV0pYC4KVGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gYGdldF94YCBpcyBgIWdldF94
KClgIGFuZCBlc2NhcGluZwp3b3JrczogYFwhZ2V0X3goYlsxXSlbMF1gLgoKIyMgSW5jbHVk
ZSBTdGF0ZW1lbnQgYW5kIE1ha2UgRGVwZW5kZW5jaWVzIHsjc2VjOmluY2x1ZGV9CgpgIU1g
IHN1cHBvcnRzIGluY2x1ZGUgb2YgYCFNRGAgdGV4dCB1c2luZyB0aGUgYFwhISFgIHN0YXRl
bWVudC4KVGhlIGBcISEhYCBzdGF0ZW1lbnQgbXVzdCBiZSBvbiBhIHNpbmdsZSBsaW5lIGFu
ZCBmb2xsb3dzIHRoZSBwYXRoCm9mIHRoZSBpbmNsdWRlIGZpbGUuIFRoZSBwYXRoIG9mIHRo
ZSBpbmNsdWRlIGZpbGUgaXMgcmVsYXRpdmUgdG8KdGhlIHJvb3QgYCFNRGAgZG9jdW1lbnQg
d2hpY2ggaXMgcHJvY2Vzc2VkLiBUaGUgcGF0aHMgb2YgYWxsCmluY2x1ZGVkIGZpbGVzIGFy
ZSBjb2xsZWN0ZWQgYW5kIGEgYCFNRmAgcnVsZSBpcyBjcmVhdGVkIGFuZApzdG9yZWQgaW4g
YSBmaWxlIChwYXRoIG9mIG91dHB1dCBgIU1EYCB0ZXh0IGFwcGVuZGVkIHdpdGggYC5ta2Ap
LgoKVGhlIGBcISEhYCBzdGF0ZW1lbnQgaXMgZXNjYXBlZCB1c2luZyBgXFwhISFgLgpUaGUg
aW5jbHVkZSBzdGF0ZW1lbnQgKipjYW5ub3QqKiBiZSB1c2VkIGluIGNvZGUgYmxvY2tzLiBg
IU1gIGAhTURgCnRleHQgbXVzdCBoYXZlIHRoZSBleHRlbnNpb24gYC5tZGAgYW5kIGluY2x1
ZGUgZmlsZXMgbXVzdCBoYXZlIHRoZQpleHRlbnNpb24gYC5tZGlgCgpUaGUgaW5jbHVkZSBz
dGF0ZW1lbnQgc3VwcG9ydHMgZmxhZ3MgZm9yIHBhcnNpbmcgdGhlIGluY2x1ZGUgZmlsZS4K
YGBgbWQKXCEhISBQQVRIL0ZJTEUubWRpIEZMQUdTCmBgYAoKKipGbGFncyoqCiogYHJhd2A6
IHRoZSBmaWxlIGlzIGluY2x1ZGVkIGFzIGlzIHdpdGhvdXQgYW55IHBhcnNpbmcKKiBgbm9t
ZXRhYDogbWV0YSBkYXRhIGluIGZyb250IG1hdHRlciBpcyBza2lwcGVkIGR1cmluZyBwYXJz
aW5nCiogYG5vdGV4dGA6IGFsbCBNYXJrZG93biB0ZXh0IGlzIHNraXBwZWQgZHVyaW5nIHBh
cnNpbmcKKiBgbm9tYXJreWA6IGluY2x1ZGUgdGhlIGAhTURgIHRleHQgd2l0aG91dCBhbnkg
YCFNYCBwcm9jZXNzaW5nCiogYCMrTmA6IGluY3JlYXNlIHRoZSBsZXZlbCBvZiBBVFggaGVh
ZGluZ3MgYCNgLiBUaGUgaGVhZGluZ3MgYXJlCnBhcnNlZCBhY2NvcmRpbmcgdG8gYCFQYCBl
eHRlbnNpb25zCihbYmxhbmtfYmVmb3JlX2hlYWRlcl0oaHR0cHM6Ly9wYW5kb2Mub3JnL01B
TlVBTC5odG1sI2V4dGVuc2lvbi1ibGFua19iZWZvcmVfaGVhZGVyKSwKW3NwYWNlX2luX2F0
eF9oZWFkZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tc3Bh
Y2VfaW5fYXR4X2hlYWRlcikpCiogYD4+TmA6IGluY3JlYXNlIHRoZSBpbmRlbnRhdGlvbiB1
c2luZyBgTmAgdGFicwoqIGA+TmA6IGluY3JlYXNlIHRoZSBpbmRlbnRhdGlvbiB1c2luZyBg
TmAgc3BhY2VzCiogYG5vcmVmYDogZG8gbm90IHJlZmVyZW5jZSB0aGlzIGZpbGUgYXMgTWFr
ZWZpbGUgZGVwZW5kZW5jeQoqIGBhdXhgOiByZWZlcmVuY2UgYXMgTWFrZWZpbGUgZGVwZW5k
ZW5jeSwgYnV0IGRvIG5vdCBwcm9jZXNzCgoqKkV4YW1wbGUqKgpgYGBtZApcISEhIG1hcmt5
Lm1kaSAjKzIKVGhlIGZpbGUgd2FzIGluY2x1ZGVkOiBgXCFpbmNsdWRlZGAgYW5kICR4PWBc
IXhgJCBhbmQgJHk9YFwheWAkLgpgYGAKCiEhISBtYXJreS5tZGkgIysyClRoZSBmaWxlIHdh
cyBpbmNsdWRlZDogYCFpbmNsdWRlZGAgYW5kICR4PWAheGAkIGFuZCAkeT1gIXlgJC4KClRo
ZSBmaWxlIGBtYXJreS5tZGlgIHdhcyBsb2FkZWQgd2l0aCBzaGlmdGluZyBBVFggaGVhZGlu
Z3MgYnkgMiB3aGljaAptZWFucyBgIyNgIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBpbmNsdWRl
ZCBzZWN0aW9uLiBUaGUgZmlsZSBjb250YWluczoKYGBgbWQKISEhIG1hcmt5Lm1kaSByYXcg
Pj4xCmBgYApUaGUgdW5tb2RpZmllZCBzb3VyY2Ugd2FzIGxvYWRlZCB1c2luZyB0aGUgZmxh
Z3MgYHJhdyA+PjFgLgoKVGhlIGZpbGUgYG1hcmt5Lm1kLm1rYCBjb250YWluczoKYGBgTWFr
ZWZpbGUKYnVpbGQvbWFya3kubWQ6IFwKbWQvbWFya3kubWRpCgouUEhPTlk6IG1kLW1hcmt5
Cm1kLW1hcmt5OiBidWlsZC9tYXJreS5tZAoKLlBIT05ZOiBodG1sLW1hcmt5Cmh0bWwtbWFy
a3k6IGh0bWwvbWFya3kuaHRtbAoKLlBIT05ZOiBwZGYtbWFya3kKcGRmLW1hcmt5OiBwZGYv
bWFya3kucGRmCmBgYAoKIyMgSW5jbHVkZSBTdGF0ZW1lbnQgYW5kIE1ldGEgRGF0YSBJbXBv
cnQgeyNzZWM6aW5jbWV0YX0KClRoZSBpbmNsdWRlIHN0YXRlbWVudCBgXCEhIWAgbG9hZHMg
YW5kIHBhcnNlcyBhbiBgKi5tZGlgIGluY2x1ZGUgZmlsZS4KVGhlIGB5YW1sYCBtZXRhIGRh
dGEgaW4gdGhlIGZyb250IG1hdHRlciBvZiB0aGUgZG9jdW1lbnQgYWxzbyBpcyBsb2FkZWQK
YW5kIHBhcnNlZCBpZiB0aGUgYG5vbWV0YWAgZmxhZyBpcyBub3Qgc3BlY2lmaWVkIGluIHRo
ZSBpbmNsdWRlCnN0YXRlbWVudC4gQXNzdW1pbmcgdGhlIHJvb3QgZG9jdW1lbnQgYW5kIHRo
ZSBpbmNsdWRlZCBkb2N1bWVudCBoYXZlIHRoZQpmb2xsb3dpbmcgbWV0YSBkYXRhLgoKKipS
b290IERvY3VtZW50KioKYGBgeWFtbAoKLS0tCndpZHRoOiAxMApoZWlnaHQ6IDIwCgotLS0K
XCEhISBpbmNsdWRlLm1kaQpgYGAKCioqSW5jbHVkZWQgRG9jdW1lbnQqKgpgYGB5YW1sCgot
LS0KZGVwdGg6IDMwCnZvbHVtZTogNjAwMAotc2VyaWFsOiBBNTZHSEoKCi0tLQpgYGAKCkJ5
IGRlZmF1bHQgYWxsIGB5YW1sYCBtZXRhIGRhdGEgZmllbGRzIGFyZSBjb3BpZWQgdG8gdGhl
IG1ldGEgZGF0YSBvZgp0aGUgcm9vdCBgIU1EYCBkb2N1bWVudCB3aGljaCBpcyBwcm9jZXNz
ZWQuIEhvd2V2ZXIsIGlmIGEgbWV0YSBkYXRhCmtleSBpcyBwcmVjZWVkZWQgYnkgYC1gIHRo
ZSBrZXkgaXMgbm90IGltcG9ydGVkIGludG8gdGhlIHJvb3QgZG9jdW1lbnQuCkFsbCBgeWFt
bGAgbWV0YSBkYXRhIGtleXMgd2hpY2ggc3RhcnQgd2l0aCBgLWAgYXJlIGV4cG9zZWQgdG8g
dGhlCnB5dGhvbiBzY29wZSBhbmQgd2lsbCBhcHBlYXIgYXMgbG9jYWwgdmFyaWFibGVzLCBi
dXQgdGhleSB3aWxsIG5vdAphcHBlYXIgaW4gdGhlIG1ldGEgZGF0YSBvZiB0aGUgZnJvbnQg
bWF0dGVyIGluIHRoZSBwcmVwcm9jZXNzZWQKYCFNRGAgdGV4dC4gR2l2ZW4gdGhlIGV4YW1w
bGUgYWJvdmUsIHRoZSByZXN1bHRpbmcgbWV0YSBkYXRhIGluCnRoZSBmcm9udCBtYXR0ZXIg
b2YgdGhlIHByZXByb2Nlc3NlZCBgIU1EYCB0ZXh0IGxvb2tzIGFzIGZvbGxvd3MuCgoqKlBy
ZXByb2Nlc3NlZCBEb2N1bWVudCoqCmBgYHlhbWwKCi0tLQp3aWR0aDogMTAKaGVpZ2h0OiAy
MApkZXB0aDogMzAKdm9sdW1lOiA2MDAwCgotLS0KYGBgCgojIyBGb3JtYXQgTGlua3MgZm9y
IGBodG1sYCBhbmQgYHBkZmAgRG9jdW1lbnRzIHsjc2VjOmZvcm1saW5rfQoKV2hlbiB3cml0
aW5nIG11bHRpcGxlIGRvY3VtZW50cywgb2Z0ZW4gZG9jdW1lbnRzIGFyZSByZWZlcmVuY2Vk
CmJldHdlZW4gZWFjaCBvdGhlciB1c2luZyBsaW5rcy4gSW4gb3JkZXIgdG8gcmVmZXIgdG8g
ZXh0ZXJuYWwKYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgdGhlIGAhTURgIGxpbmsgc3Rh
dGVtZW50IGlzIHVzZWQuCmBgYG1kCltMaW5rIENhcHRpb25dKHBhdGgvdG8vZmlsZS5odG1s
KQpbTGluayBDYXB0aW9uXShwYXRoL3RvL2ZpbGUucGRmKQpgYGAKCldoZW4gdXNpbmcgcmVs
YXRpdmUgcGF0aHMgaW4gdGhlIFVSTCwgdGhlIGRvY3VtZW50cyBjYW4gYmUgcmVmZXJlbmNl
ZAphY2NvcmRpbmcgdG8gdGhlIGRpcmVjdG9yeSB0cmVlIG9mIHRoZSBzb3VyY2UgYCFNYCBg
IU1EYCB0ZXh0CmBtZC8qLyoubWRgLiBIb3dldmVyLCB0aGUgcmVzdWx0aW5nIGxpbmsgd2ls
bCBiZSBhIHBhdGggcmVsYXRpdmUKdG8gdGhlIGRpcmVjdG9yeSBgaHRtbC9gIGZvciBgaHRt
bGAgZG9jdW1lbnRzIGFuZCByZWxhdGl2ZSB0byBgcGRmL2AKZm9yIGBwZGZgIGRvY3VtZW50
cy4gQXMgYWxsIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIGFyZSBrZXB0IGluCnNlcGFy
YXRlIGRpcmVjdG9yaWVzLCBvbmUgbGluayBzdGF0ZW1lbnQgY2Fubm90IGJlIHVzZWQgZm9y
IHJlbmRlcmluZwpgaHRtbGAgYW5kIGBwZGZgIHdpdGggY29uc2lzdGVudCBwYXRocyBpbiB0
aGUgbGluayBzdGF0ZW1lbnQuCgpCeSB1c2luZyB0aGUgYCFNYCBmb3JtYXQgbGluayBzdGF0
ZW1lbnQgYC5cPz8/YCwgdGhlIGZpbGUgZXh0ZW5zaW9uCmluIHRoZSBsaW5rcyBpcyByZXBs
YWNlZCBkZXBlbmRpbmcgb24gdGhlIG91dHB1dCBmb3JtYXQKcmVzdWxpbmcgaW4gY29uc2lz
dGVudCBsaW5rcyBmb3IgYGh0bWxgIGFuZCBgcGRmYApkb2N1bWVudHMuIFRoZSBmb3JtYXQg
bGluayBzdGF0ZW1lbnQgY2FuIGJlIGVzY2FwZWQgdXNpbmcgYC5cXD8/P2AuCgoqKkV4YW1w
bGUqKgpgYGBtZApbTGluayB0byB0aGlzIERvY3VtZW50XShtYXJreS5cPz8/KQpgYGAKCltM
aW5rIHRvIHRoaXMgRG9jdW1lbnRdKG1hcmt5Lj8/PykKCiMjIEZvcm1hdCBDb2RlcyBmb3Ig
YGh0bWxgIGFuZCBgcGRmYCBEb2N1bWVudHMgeyNzZWM6Zm9ybWNvZGV9CgpPZnRlbiB3aGVu
IHdyaXRpbmcgbWFya2Rvd24gZm9yIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzLCB0aGUK
Zm9ybWF0IG5lZWRzIHRvIGJlIGFkanVzdGVkIGFjY29yZGluZyB0byB0aGUgZm9ybWF0LiBg
IVBgIGAhTURgCmFscmVhZHkgcmVuZGVycyBhbGwgY29tbW9uIE1hcmtkb3duIGludG8gYGh0
bWxgIGFuZCBgcGRmYC4KYCFNYCBzdXBwb3J0cyBmb3JtYXQgc3BlY2lmaWMgdHdlYWtpbmcg
dXNpbmcgZm9ybWF0IGNvZGVzLgoKSW4gb3JkZXIgdG8gaW5qZWN0IGZvcm1hdCBzcGVjaWZp
YyBjb2RlLCBgaHRtbGAgY29kZSBvciBgdGV4YCBjb2RlCmZvciBgcGRmYCBkb2N1bWVudHMs
IHRoZSBmb3JtYXQgY29kZXMgYXJlIHVzZWQuIEEgZm9ybWF0IGNvZGUgaXMKd3JpdHRlbiBh
cyBgYCBgXCFDT0RFKEFSR1MpYCBgYCB3aGljaCBpcyB0cmFuc2xhdGVkIGluIHR3byBweXRo
b24KZnVuY3Rpb24gY2FsbHM6CjEuIGBDT0RFX2h0bWwoQVJHUylgOiBmb3JtYXQgY29kZSBm
b3IgaW5qZWN0aW9uIG9mIHJhdyBgaHRtbGAKY29kZSBmb3IgcmVuZGVyaW5nIGBodG1sYC1i
YXNlZCBkb2N1bWVudHMgaW4gYCFQYC4KMi4gYENPREVfcGRmKEFSR1MpYDogZm9ybWF0IGNv
ZGUgZm9yIGluamVjdGlvbiBvZiByYXcgYHRleGAKY29kZSBpbiBgcGRmYC1iYXNlZCBkb2N1
bWVudHMgaW4gYCFQYC4KCkR1cmluZyBwcmVwcm9jZXNzaW5nLCBgIU1gIHByb2Nlc3NlcyBh
bGwgZm9ybWF0IGNvZGVzIGZvciBlYWNoCmZvcm1hdCBgaHRtbGAgYW5kIGBwZGZgIGFuZCBj
YWNoZXMgdGhlIG91dHB1dC4gQmVmb3JlIHJlbmRlcmluZwp0aGUgTWFya2Rvd24gaW4gb25l
IHBhcnRpY3VsYXIgZm9ybWF0IHVzaW5nIGAhUGAsIGAhTWAgZXh0cmFjdHMKdGhlIHJlc3Vs
dHMgb2YgdGhlIGNvcnJlc3BvbmRpbmcgZm9ybWF0IGNvZGVzIGFuZCBza2lwcyB0aGUgb3Ro
ZXJzLgpBZGRpdGlvbmFsIGB0ZXhgIHBhY2thZ2VzIGhhdmUgdG8gYmUgaW5jbHVkZWQgdXNp
bmcgdGhlIG1ldGEgZGF0YQpmaWVsZCBgaGVhZGVyLWluY2x1ZGVzYC4KCkZvciByZXR1cm5p
bmcgdGhlIHJhdyBmb3JtYXQgY29kZSwgZWl0aGVyIHRoZSBgIVAxYCBzdGF0ZW1lbnQgY2Fu
CmJlIHVzZWQgQHNlYzptZHByaW50ICoqb3IqKiB0aGUgYHJldHVybmAgc3RhdGVtZW50IGNh
biBiZSB1c2VkLgpJZiBib3RoIHN0YXRlbWVudHMgYXJlIG1peGVkLCB0aGUgb3V0cHV0IHdo
aWNoIGhhZCBiZWVuIHJldHVybmVkCndpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHRleHQgZ2Vu
ZXJhdGVkIHdpdGggdGhlIGAhUDFgIHN0YXRlbWVudC4KCioqRXhhbXBsZSoqCmBgYCEKCWRl
ZiB0ZXN0MV9odG1sKCk6CgkJXygiVGhpcyBpcyBIVE1MMSBhbmQiKQoJCXJldHVybiAiaXQg
Z29lcyBvbiBoZXJlISIKCWRlZiB0ZXN0MV9wZGYoKToKCQlfXygiIiIKCQkJVGhpcyBpcyBc
e1BERjFcfSBhbmQKCQkiIiIpCglkZWYgdGVzdDJfaHRtbCgpOgoJCXJldHVybiAiIiIKCQkJ
VGhpcyBpcyBIVE1MMiEKCQkiIiIKCWRlZiB0ZXN0Ml9wZGYoKToKCQlwYXNzCmBgYAoKYGBg
bWQKVGhlIG91dHB1dCBvZiB0aGUgZm9ybWF0IGNvZGUgYFxcP3Rlc3QxKClgIGlzICJgXD90
ZXN0MSgpYCIgYW5kCmBcXD90ZXN0MigpYCBpcyAiYFw/dGVzdDIoKWAiIChpbiBIVE1MIGl0
IGlzIG5vdCBlbXB0eSkuCmBgYAoKVGhlIG91dHB1dCBvZiB0aGUgZm9ybWF0IGNvZGUgYFw/
dGVzdDEoKWAgaXMgImA/dGVzdDEoKWAiIGFuZApgXD90ZXN0MigpYCBpcyAiYD90ZXN0Migp
YCIgKGluIEhUTUwgaXQgaXMgbm90IGVtcHR5KS4KCi0tLQoKIyBgIU1gIGAhTURgIEV4YW1w
bGVzIHsjc2VjOmV4YW1wbGVzfQoKIyMgSmF2YVNjcmlwdCBpbiBgaHRtbGAgYW5kIFBsYWNl
aG9sZGVyIGluIGBwZGZgCgpXaGVuIGNyZWF0aW5nIGAhTURgIHRleHQgZm9yIGBodG1sYCBv
dXRwdXQsIHRoZSB1c2VyIG9mdGVuIHdhbnRzCmludGVyYWN0aXZpdHkgdXNpbmcgd2lkZ2V0
cyBsaWtlIHNsaWRlcnMsIGNoZWNrIGJveGVzLCBkcm9wIGRvd24gYm94ZXMKZXRjLiBIb3dl
dmVyLCB3aGVuIGV4cG9ydGluZyBpbnRvIGBwZGZgIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8g
YmUKcmVwbGFjZWQgd2l0aCBub24taW50ZXJhY3RpdmUgcGxhY2Vob2xkZXJzLiBJbiBvcmRl
ciB0byBkZXZlbG9wIGEgc2luZ2xlCmAhTURgIGRvY3VtZW50LCB3aGljaCBjYW4gYmUgcmVu
ZGVyZWQgaW4gYGh0bWxgIHdpdGggaW50ZXJhY3RpdmUKZWxlbWVudHMgYW5kIGludG8gYHBk
ZmAgd2l0aCBwbGFjZWhvbGRlciwgdGhlIGAhTWAgZm9ybWF0IGNvZGVzIGNhbiBiZQp1c2Vk
LCBzZWUgQHNlYzpmb3JtY29kZS4gVGhlIGZvbGxvd2luZyBleGFtcGxlIGRlZmluZXMgYQpg
PGlucHV0IHR5cGU9InJhbmdlIj5gIGFuZCB0d28gYDxzcGFucz5gIHdpdGggYGlkPSJteXZh
bCJgIGFuZApgaWQ9Im15cmVzImAsIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUgdmFsdWUgb2Yg
JHk9c2luKHgpJCBpbiBgaHRtbGAuIEZvcgpgcGRmYCBvdXRwdXQgdGhlIGVxdWF0aW9uIGFu
ZCB0aGUgdmFsdWUgcmFuZ2UgaXMgc2hvd24uCgoqKkV4YW1wbGUqKgpgYGAhCglkZWYgcmFu
Z2VfaHRtbCgpOgoJCV9fKCIiIgoJCQkkeFxpbiBbMCQgPGlucHV0IHR5cGU9J3JhbmdlJyB2
YWx1ZT0nMCcgbWluPScwJyBtYXg9JzEwMCcKCQkJb25jaGFuZ2U9IgoJCQlkb2N1bWVudC5n
ZXRFbGVtZW50QnlJZCgnbXl2YWwnKS5pbm5lckhUTUwgPSB0aGlzLnZhbHVlOwoJCQlkb2N1
bWVudC5nZXRFbGVtZW50QnlJZCgnbXlyZXMnKS5pbm5lckhUTUwgPQoJCQlNYXRoLnNpbih0
aGlzLnZhbHVlKTsiPiAkMTAwXSQKCQkiIiIpCglkZWYgcmFuZ2VfcGRmKCk6CgkJcmV0dXJu
ICIkeFxpblswLDEwMF0kIgoJZGVmIGZvcm11bGFfaHRtbCgpOgoJCV9fKCIiIgoJCQkkeT1z
aW4oeCk9JCA8c3BhbiBpZD0ibXlyZXMiPjAuMDAwPC9zcGFuPgoJCQl3aXRoICR4PSQgPHNw
YW4gaWQ9Im15dmFsIj4wPC9zcGFuPgoJCSIiIikKCWRlZiBmb3JtdWxhX3BkZigpOgoJCXJl
dHVybiAiJHk9c2luKHgpJCIKYGBgCgpgYGBtZAokeCQgYW5kICR5JCBhcmUgcmVsYXRlZCB0
byBlYWNoIG90aGVyIGJ5IGBcP2Zvcm11bGEoKWAuCgokeCQgbXVzdCBiZSBpbiB0aGUgcmFu
Z2UgYFw/cmFuZ2UoKWAuCmBgYAoKJHgkIGFuZCAkeSQgYXJlIHJlbGF0ZWQgdG8gZWFjaCBv
dGhlciBieSBgP2Zvcm11bGEoKWAuCgokeCQgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgYD9yYW5n
ZSgpYC4KCiMjIEdlbmVyYXRlIGEgRmlndXJlIG9uLXRoZS1mbHkgZHVyaW5nIFByZXByb2Nl
c3NpbmcKClRoaXMgc2VjdGlvbiBpbGx1c3RyYXRlcyBob3cgcHl0aG9uIG1vZHVsZXMgY2Fu
IGJlIHVzZWQgdG8gY3JlYXRlCmRvY3VtZW50IGNvbnRlbnQuIERvY3VtZW50IGNvbnRlbnQg
aXMgcGxhY2VkIGluc2lkZSB0aGUgYGRhdGEvYApkaXJlY3Rvcnkgb2YgdGhlIGN1cnJlbnQg
cHJvamVjdCB3b3JraW5nIGRpcmVjdG9yeSAocmVmZXIgdG8gYCFNYApwcm9qZWN0IHN0cnVj
dHVyZSwgQHNlYzpwcm9qZWN0KQoKIVtUaGlzIEZpZ3VyZSB3YXMgZ2VuZXJhdGVkIHVzaW5n
IGAhTlVgIGFuZApgIVBMYC5dKGZpZ3VyZTEucG5nKXsjZmlnOmZpZ3VyZTF9CgpbYCFOVWBd
KGh0dHBzOi8vd3d3Lm51bXB5Lm9yZykgYW5kIFtgIVBMYF0oaHR0cHM6Ly93d3cubWF0cGxv
dGxpYi5vcmcpCmFyZSBwb3dlcmZ1bCBweXRob24gbW9kdWxlcyBmb3IgbWF0aGVtYXRpY2Fs
IGNvbXB1dGluZyBhbmQgcGxvdApnZW5lcmF0aW9uLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUg
c2hvd3MgaG93IHRvIGdlbmVyYXRlIEBmaWc6ZmlndXJlMQp1c2luZyBgIU5VYCBhbmQgYCFQ
TGAgYW5kIGluY2x1ZGUgaXQgaW50byB0aGUgZG9jdW1lbnQuCgoqKkV4YW1wbGUqKgoKYGBg
IQoJaW1wb3J0IG51bXB5IGFzIG5wCglpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0
CglHUkVFSyA9IGxhbWJkYSBBOiBjaHIob3JkKHUiXHUwMzkxIikgKyBvcmQoQSkgLSBvcmQo
IkEiKSkKCWdyZWVrID0gbGFtYmRhIGE6IGNocihvcmQodSJcdTAzYjEiKSArIG9yZChhKSAt
IG9yZCgiYSIpKQoJY20yaW5jaCA9IGxhbWJkYSB4eTogdHVwbGUoaS8yLjU0IGZvciBpIGlu
IHh5KQoJZm9udHNpemUgPSBpbnQoZm9udHNpemVbOi0yXSkgIyBjb252ZXJ0IHRvIGludAoJ
Zmlnc2l6ZSA9IGNtMmluY2goZmlnc2l6ZSkgIyBjb252ZXJ0IGZyb20gY20gdG8gaW5jaAoJ
cGFyYW1zID0gewoJCSdmaWd1cmUuZmlnc2l6ZSc6IGZpZ3NpemUsCgkJJ2xlZ2VuZC5mb250
c2l6ZSc6IGZvbnRzaXplLAoJCSdheGVzLmxhYmVsc2l6ZSc6IGZvbnRzaXplLAoJCSdheGVz
LnRpdGxlc2l6ZSc6IGZvbnRzaXplLAoJCSd4dGljay5sYWJlbHNpemUnOiBmb250c2l6ZSwK
CQkneXRpY2subGFiZWxzaXplJzogZm9udHNpemUsCgkJJ2ZvbnQuZmFtaWx5JzogJ1RpbWVz
IE5ldyBSb21hbicKCX0KCXBsdC5yY1BhcmFtcy51cGRhdGUocGFyYW1zKQoJeCA9IG5wLnJh
bmRvbS5yYW5kKDUwKQoJeSA9IG5wLnJhbmRvbS5yYW5kKDUwKQoJcGx0LmZpZ3VyZSgpCglw
bHQuc2NhdHRlcih4LCB5LCBsYWJlbD0iUmFuZG9tIENvb3JkaW5hdGVzIikKCXRleHQgPSAi
Ii5qb2luKFtncmVlayhpKSBmb3IgaSBpbiBbImEiLCAiYiIsICJjIiwgImQiXV0pCglwbHQu
YW5ub3RhdGUodGV4dCwgeHk9KDAuNSwwLjUpLCB4eXRleHQ9KDAuMjUsMC4yNSksCgkJYXJy
b3dwcm9wcz1kaWN0KGFycm93c3R5bGU9Jy0+Jyxsdz0xLjUpKQoJcGx0LnRpdGxlKCJUd28g
UmFuZG9tIERhdGFzZXRzIikKCXBsdC54bGFiZWwociJEYXRhICMxIC0gJFxtYXRoZGVmYXVs
dHslc18xfSQiICUgR1JFRUsoIkMiKSkKCXBsdC55bGFiZWwociJEYXRhICMyIC0gJFxtYXRo
ZGVmYXVsdHslc18yfSQiICUgR1JFRUsoIkQiKSkKCXBsdC5ncmlkKCkKCXBsdC5sZWdlbmQo
KQoJcGx0LnRpZ2h0X2xheW91dCgpCglwbHQuc2F2ZWZpZygiZGF0YS9maWd1cmUxLnBuZyIs
IGRwaT1maWdkcGkpCglwbHQuY2xvc2UoImFsbCIpCmBgYAoKYGBgbWQKIVtUaGlzIEZpZ3Vy
ZSB3YXMgZ2VuZXJhdGVkIHVzaW5nIGAhTlVgCmFuZCBgIVBMYC5dKGZpZ3VyZTEucG5nKXsj
ZmlnOmZpZ3VyZTF9CmBgYAoKIyMgR2VuZXJhdGUgYSBTZXF1ZW5jZSBvZiBGaWd1cmVzIG9u
LXRoZS1mbHkKClRoaXMgc2VjdGlvbiBpbGx1c3RyYXRlcyBob3cgYSBzZXF1ZW5jZSBvZiBj
b21wbGV4IGZpZ3VyZXMgY2FuIGJlCmdlbmVyYXRlZCB1c2luZyBgIU5VYCBhbmQgYCFQTGAg
YW5kIGhvdyB0aGUgZmlndXJlcyBhcmUgZm9ybWF0dGVkCnVzaW5nIHB5dGhvbiBhbmQgcmVm
ZXJlbmNlZCB1c2luZyBgIU1gLgoKU3VwcG9zZSBvbmUgZXhwZXJpbWVudCB3aGljaCBjYW4g
YmUgcnVuIGluIGZvdXIgZGlmZmVyZW50IHNldHVwcyB3aXRoCmRpZmZlcmVudCB2YWx1ZXMg
Zm9yICRcbGFtYmRhPSQKYCEiLCAiLmpvaW4oWyIoJWQpICQlLjJmJG5tIiUoaywgMTI1LjMz
KmspIGZvciBrIGluIHJhbmdlKDEsIDUpXSlgLgpFYWNoIHJ1biBvZiB0aGUgZXhwZXJpbWVu
dCB1c2luZyBzZXR1cCAoMSktLSg0KSwgdHdvIGFkZGl0aW9uYWwKcGFyYW1ldGVycyAkXHZh
cmVwc2lsb24kIGFuZCAkXGFscGhhJCBhcmUgdmFycmllZCBiZXR3ZWVuCiQxMC4yXGxkb3Rz
MzAuNlwlJCBhbmQgJDAuMVxsZG90czAuMyRIeiByZXNwZWN0aXZlbHkuCgpUaGUgcmVzdWx0
cyBvZiB0aGUgZXhwZXJpbWVudHMgZm9yIHRoZSBzZXR1cHMgKDEpLS0oNCkgYXJlIHN1bW1h
cml6ZWQKaW4gdGhlIEBmaWc6ZmlndXJlMl8xLCAhQGZpZzpmaWd1cmUyXzIsICFAZmlnOmZp
Z3VyZTJfMyBhbmQKIUBmaWc6ZmlndXJlMl80LgoKKipFeGFtcGxlKioKCmBgYCEKCW4gPSAx
MDAKCWFscGhhID0gdSJcdTAzYjEiCgllcHNpbG9uID0gdSJcdTAzYjUiCglsYW1kYSA9IHUi
XHUwM2JiIgoJZiA9IGxhbWJkYSB4LCBhLCBiOiBhKihucC5zcXJ0KHgpK2IqbnAuc2luKHgq
YikpCglnID0gbGFtYmRhIHgsIGEgLGIsIGM6IG5wLmZhYnMoZih4LCBhLCBiKSAtIGYoYywg
YSwgYikpICsgYwoJZGF0ID0gbnAuemVyb3MoKG4tMSwgMywgMywgNCksIGR0eXBlPW5wLmZs
b2F0MzIpCgljb2xzID0gWyJyZWQiLCAiZ3JlZW4iLCAiYmx1ZSJdCgltYXJrID0gWyJvIiwg
IngiLCAiPCJdCgl4ID0gbnAuYXJyYXkoWzUwLip4L24gZm9yIHggaW4gcmFuZ2UoMSwgbild
LCBkdHlwZT1ucC5mbG9hdDMyKQoJZm9yIGssIGMgaW4gZW51bWVyYXRlKFsxMC4sIDIwLiwg
MzAuLCA0MC5dKToKCQlmb3IgaSwgYSBpbiBlbnVtZXJhdGUoWzEsIDIsIDRdKToKCQkJZm9y
IGosIGIgaW4gZW51bWVyYXRlKFswLjIsIDAuNCwgMC42XSk6CgkJCQlkYXRbOiwgaSwgaiwg
a10gPSBnKHgsIGEsIGIsIGMpCgkJcGx0LmZpZ3VyZSgpCgkJZm9yIGogaW4gcmFuZ2UoMyk6
CgkJCWZvciBpIGluIHJhbmdlKDMpOgoJCQkJbGFiZWxfaSA9ICIlcz0lLjFmJSUiICUgKGVw
c2lsb24sIChpKzEpKjEwLjIpIFwKCQkJCQlpZiBqID09IDAgZWxzZSBOb25lCgkJCQlsYWJl
bF9qID0gIiVzPSUuMWZIeiIgJSAoYWxwaGEsIChqKzEpLzEwLikgXAoJCQkJCWlmIGkgPT0g
MCBlbHNlIE5vbmUKCQkJCXkgPSBkYXRbOiwgaSwgaiwga10uZmxhdHRlbigpCgkJCQlwbHQu
cGxvdCh4LCB5LCBjb2xvcj1jb2xzW2ldLCBsdz0wLjc1LCBsYWJlbD1sYWJlbF9pKQoJCQkJ
cGx0LnNjYXR0ZXIoeFsxOjo0XSwgeVsxOjo0XSwgY29sb3I9ImJsYWNrIiwKCQkJCQltYXJr
ZXI9bWFya1tqXSwgbHc9MC41LCBzPTUsIGxhYmVsPWxhYmVsX2opCgkJayA9IGsgKyAxCgkJ
a3ZhbCA9IGsqMTI1LjMzCgkJcGx0LnRpdGxlKCJFeHBlcmltZW50IFNldHVwICMlZDogJXM9
JS4yZm5tIiAlIChrLCBsYW1kYSwga3ZhbCkpCgkJcGx0LnhsYWJlbCgiVGltZSBbc10iKQoJ
CXBsdC55bGFiZWwoIkludGVuc2l0eSBba2cvc8KzXSIpCgkJcGx0LmdyaWQoKQoJCXBsdC5s
ZWdlbmQoKQoJCXBsdC50aWdodF9sYXlvdXQoKQoJCXBsdC5zYXZlZmlnKCJkYXRhL2ZpZ3Vy
ZTItJWQucG5nIiAlIGssIGRwaT1maWdkcGkpCgkJcGx0LmNsb3NlKCJhbGwiKQoJCV9fKGYi
IiIKCQkJIVtUaGlzIGlzIHRoZSByZXN1bHQgb2YgdGhlIGV4cGVyaW1lbnQgYWNjb3JkaW5n
CgkJCXRvIHRoZSBzZXR1cCAje2t9IHdpdGggJHtsYW1kYX09e2t2YWx9JG5tLiBUaGUgcGFy
YW1ldGVycwoJCQkke2Vwc2lsb259JCBhbmQgJHthbHBoYX0kIGFyZSB2YXJyaWVkIGJldHdl
ZW4KCQkJJDEwLjJcbGRvdHMzMC42XCUkIGFuZCAkMC4xXGxkb3RzMC4zJEh6CgkJCXJlc3Bl
Y3RpdmVseS5dKGZpZ3VyZTIte2t9LnBuZyl7eyNmaWc6ZmlndXJlMl97a319fQoKCQkiIiIp
CmBgYAoKLS0tCgojIGAhTWAgU291cmNlIGZvciB0aGlzIERvY3VtZW50CgpgYGBweXRob24K
ISEhIG1hcmt5Lm1kIHJhdyA+PjEKYGBgCgotLS0KCiMgUmVmZXJlbmNlcwo=
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmA/eDowNWRgfGA/eTouNGZgCg==
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgpkYXRlOiAxLiBBdWd1c3QgMjAyMQph
dXRob3I6IEhlbnJ5IExlaG1hbm4KaGVhZGVyLWluY2x1ZGVzLS1wZGY6CiAgIFx1c2VwYWNr
YWdle211bHRpY29sfQogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1h
cmt5YCBtYXJrdXAgdXNpbmcgc2ltcGxlIGV4YW1wbGVzLgoKLS0tCgojIEludHJvZHVjdGlv
bgoKVGhpcyBpcyBhIGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IgaWxsdXN0cmF0
aW5nIGBtYXJreWAgbWFya3VwCnVzaW5nIHNpbXBsZSBleGFtcGxlcy4gVGhpcyBkb2N1bWVu
dCBpcyB0aGUgcmVuZGVyZWQgdmVyc2lvbiBvZgp0aGUgc291cmNlIGNvZGUgcHJlc2VudGVk
IFtoZXJlXShxdWlja3NvdXJjZS4/Pz8pLiBUaGUgYG1hcmt5YCBtYXJrdXAKaXMgY29tcGF0
aWJsZSB3aXRoIHN0YW5kYXJkIE1hcmtkb3duIGFuZCBjYW4gYmUgcmVhZCBhcy1pcy4KVGhp
cyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBvdXRwdXQgb2YgYG1hcmt5YCBhZnRlciBwcm9j
ZXNzaW5nCnB5dGhvbiBjb2RlLCB3aGljaCBpcyBlbWJlZGRlZCBpbnRvIHRoZSBkb2N1bWVu
dCBpdHNlbGYuCkluIG9yZGVyIHRvIHVuZGVyc3RhbmQgdGhlIGV4YW1wbGVzIGFuZCBzZWUg
dGhlIGNvbXBsZXRlCmBtYXJreWAgc3ludGF4LCB0aGUgc291cmNlIGNvZGUgb2YgdGhpcyBm
aWxlIGNhbiBiZSByZWFkCltoZXJlXShxdWlja3NvdXJjZS4/Pz8pLiBUaGUgY29tcGxldGUg
ZG9jdW1lbnRhdGlvbiBvZiBgbWFya3lgCmlzIGF2YWlsYWJsZSBbaGVyZV0obWFya3kuPz8/
KQoKLS0tCgojIE1hcmtkb3duCgpgbWFya3lgIGlzIGEgTWFya2Rvd24gcHJlcHJvY2Vzc29y
IGFsbG93aW5nIHRvIHRyYW5zZm9ybSBNYXJrZG93bgp0ZXh0IHVzaW5nIHB5dGhvbi4gVGhl
IHByZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0IGlzIHJlbmRlcmVkIHRvIGBwZGZgCmFuZCBg
aHRtbGAgKG90aGVyIGZvcm1hdHMgdXNpbmcgYHBhbmRvY2ApLiBgcGFuZG9jYCBoYXMgYSBw
b3dlcmZ1bCBzZXQKb2YgTWFya2Rvd24gZXh0ZW5zaW9ucyBzdXBwb3J0aW5nIHN0cnVjdHVy
ZWQgd3JpdGluZyBhcyB3ZWxsIGFzCmJpYmxpb2dyYXBoeSwgZmlndXJlIHJlZmVyZW5jaW5n
LCB0YWJsZSByZWZlcmVuY2luZywgdGV4LXN0eWxlCmVxdWF0aW9ucyB3aXRoIHJlZmVyZW5j
aW5nIGV0Yy4gKHJlZmVyIHRvIFNjaWVudGlmaWMgV3JpdGluZyBpbgpNYXJrZG93biwgW2Bt
YXJreWAgRG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSkuCgpUaGUgcmVuZGVyaW5nIG9mIE1h
cmtkb3duIHRleHQgaW50byBgaHRtbGAgYW5kIGBwZGZgIGNvbnNpc3RzIG9mIHRocmVlCnN0
ZXBzIHdoaWNoIGFyZSBpbGx1c3RyYXRlZCB1c2luZyB0aGUgYG1hcmt5YCBkb2N1bWVudGF0
aW9uCmBtZC9tYXJreS5tZGAuCgoxLiAqUHJlcHJvY2Vzc2luZyogXAogICAocHJvY2VzcyBg
bWFya3lgIG1hcmt1cCwgcnVuIGNvZGUsIGdlbmVyYXRlIGNvbnRlbnQpCgkqIElucHV0OiBg
bWFya3lgIE1hcmtkb3duIHRleHQ6IGBtZC9tYXJreS5tZGAKCSogT3V0cHV0OiBwYW5kb2Mg
TWFya2Rvd24gdGV4dDogYGJ1aWxkL21hcmt5Lm1kYAoyLiAqTGlua2luZyogXAoJKGFwcGx5
IGZvcm1hdCBzcGVjaWZpYyBjb2RlIGZvciBgaHRtbGAgYW5kIGBwZGZgKQoJKiBJbnB1dDog
cGFuZG9jIE1hcmtkb3duIHRleHQ6IGBidWlsZC9tYXJreS5tZGAKCSogT3V0cHV0CgkxLiBw
YW5kb2MgTWFya2Rvd24gdGV4dCBmb3IgYGh0bWxgOiBgYnVpbGQvbWFya3kuaHRtbC5tZGAK
CTIuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZvciBgcGRmYDogYGJ1aWxkL21hcmt5LnBkZi5t
ZGAKMy4gKlJlbmRlcmluZyogXAogICAocmVuZGVyIGBodG1sYCBhbmQgYHBkZmAgZG9jdW1l
bnQgdXNpbmcgYHBhbmRvY2ApCgkqIElucHV0CgkxLiBwYW5kb2MgTWFya2Rvd24gdGV4dCBm
b3IgYGh0bWxgOiBgYnVpbGQvbWFya3kuaHRtbC5tZGAKCTIuIHBhbmRvYyBNYXJrZG93biB0
ZXh0IGZvciBgcGRmYDogYGJ1aWxkL21hcmt5LnBkZi5tZGAKCSogT3V0cHV0CgkxLiBgaHRt
bGAgZG9jdW1lbnQ6IGBodG1sL21hcmt5Lmh0bWxgCgkyLiBgcGRmYCBkb2N1bWVudDogYHBk
Zi9tYXJreS5wZGZgCgpUaGUgd2hvbGUgcHJvY2VzcyBpcyBlY2Fwc3VsYXRlZCBpbnRvIGEg
cHl0aG9uIHNjcmlwdCBhbmQgYSBNYWtlZmlsZS4KUmVuZGVyaW5nIGRvY3VtZW50cyB1c2lu
ZyBgbWFya3lgIHJlcXVpcmVzIHRvIHdyaXRlIE1hcmtkb3duIHRleHQKYW5kIHJ1biBgbWFr
ZSBhbGxgLgoKLS0tCgojIEF1dG9tYXRlZCBSZXBvcnRpbmcKCk1hcmtkb3duIHRleHQgd2l0
aCBlbWJlZGRlZCBjb2RlIHNuaXBwZXRzIGlzIGEgcG93ZXJmdWwgcGFyYWRpZ20gZm9yCmF1
dG9tYXRlZCB0ZWNobmljYWwgYW5kIHNjaWVudGlmaWMgcmVwb3J0aW5nIGFuZCBwb3NzaWJs
eSBvdGhlcgpkb2N1bWVudHMuIE9uIG9uZSBoYW5kIGRhdGEgY2FuIGJlIG9yZ2FuaXplZCBh
Y2NvcmRpbmcgdG8gdGhlIGRvY3VtZW50CnN0cnVjdHVyZSB1c2luZyBhbGdvcml0aG1zIGVt
YmVkZGVkIGluIHRoZSByZXBvcnQgaXRzZWxmLCBhbmQgb24gdGhlCm90aGVyIGhhbmQgdGhl
IGRhdGEgY2FuIGJlIGluc2VydGVkIGluIHRoZSByZXBvcnQgZGlyZWN0bHkgZnJvbQp2YXJp
YWJsZXMuIFRoaXMgZWxsaW1pbmF0ZXMgdGhlIG5lZWQgZm9yIG1hbnVhbCBjb3B5aW5nIG9m
IGRhdGEgaW50bwp0aGUgdGV4dCBhbmQgYWxsb3dzIHRvIHVwZGF0ZSBvciByZXByb2R1Y2Ug
dGhlIHJlcG9ydCBhdXRvbWF0aWNhbGx5CmZvciB0aGUgc2FtZSBhbmQgb3RoZXIgZGF0YS4g
VXNpbmcgdGhlIHNpbXBsZSBgbWFya3lgIHN5bnRheCB0aGUgdXNlcgpjYW4gY29uY2VudHJh
dGUgb24gZG9jdW1lbnRhdGlvbiB3cml0aW5nIGZyb20gdGhlIE1hcmtkb3duIHBlcnNwZWN0
aXZlCmFuZCBhc3Npc3QgdGhlIGNyZWF0aW9uIG9mIGRvY3VtZW50IGNvbnRlbnQgdXNpbmcg
cHl0aG9uIGNvZGUKc25pcHBldHMuCgpgcGFuZG9jYCBmaWx0ZXJzIChyZWZlciB0byBSZWxh
dGVkIFdvcmssIFtgbWFya3lgIERvY3VtZW50YXRpb25dKG1hcmt5Lj8/PykpCmFsbG93IHRy
YW5zZm9ybWluZyB0aGUgZG9jdW1lbnQgd2hpbGUgcmVuZGVyaW5nIGl0LiBgcGFuZG9jYCBm
aWx0ZXJzCm9wZXJhdGUgb24gYW4gaW50ZXJuYWwgYWJzdHJhY3Qgc3ludGF4IHRyZWUgKEFT
VCkgcmVwcmVzZW50YXRpb24sCnRoZXJlZm9yZSB0aGUgdXNlciBtdXN0IGV4cHJlc3MgZHlu
YW1pY2FsbHkgY3JlYXRlZCBkb2N1bWVudCBjb250ZW50CmFzIG5vZGVzIGluIHRoZSBmb3Jt
YXQgb2YgdGhlIEFTVC4gYG1hcmt5YCB0YWtlcyBhIHNsaWdodCBkaWZmZXJlbnQKYXBwcm9h
Y2ggYW5kIG9wZXJhdGVzIG9uIHRoZSBNYXJrZG93biB0ZXh0IGl0c2VsZiwgYmVmb3JlIGl0
IGlzIHBhcnNlZAphbmQgcmVuZGVyZWQuCgpQeXRob24gY29kZSBpcyBlbWJlZGRlZCBpbnRv
IHRoZSBkb2N1bWVudCB3aXRoIGEgc2ltcGxlIG1hcmt1cCBzeW50YXgKc2ltaWxhciB0byBb
Um1hcmtkb3duXShodHRwczovL3d3dy5ybWFya2Rvd24ub3JnKQp1c2luZyBjb2RlIGJsb2Nr
cyBhbmQgaW5saW5lIGV4cHJlc3Npb25zLiBgbWFya3lgIHBhcnNlcyB0aGUgY29kZSwKZXhl
Y3V0ZXMgaXQgYW5kIHdyaXRlcyB0aGUgcmVzdWx0cyBiYWNrIGludG8gdGhlIE1hcmtkb3du
IHRleHQuIFRoZQpjb2RlIGNhbiBwcm9kdWNlIG91dHB1dCB1c2luZyBhbGdvcml0aG1zIG9y
IG91dHB1dCBmb3JtYXR0ZWQgc3RyaW5nCnZhcmlhYmxlcy4gYG1hcmt5YCBhbHNvIGFsbG93
cyBmb3IgdGhlIGluc2VydGlvbiBvZiBmb3JtYXQgZGVwZW5kZW50CnJhdyBjb2RlIGluIGBo
dG1sYCBhbmQgKnRleCogKGZvciBgcGRmYCAgZG9jdW1lbnRzKS4KCjEuIGNvZGUgc25pcHBl
dHMgYXJlIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IHRleHQKMi4gY29kZSBzbmlwcGV0
cyBhcmUgZXhlY3V0ZWQgZHVyaW5nIHByZXByb2Nlc3NpbmcKMy4gY29kZSBwcm9kdWNlcyB0
ZXh0IGZvciB0aGUgTWFya2Rvd24gZG9jdW1lbnQKNC4gY29kZSB2YXJpYWJsZXMgYXJlIGRp
c3BsYXllZCBpbiB0aGUgZG9jdW1lbnQgdGV4dAo1LiBmb3JtYXQgZGVwZW5kZW50IGNvZGUg
aXMgYXBwbGllZCBmb3IgYGh0bWxgIGFuZCBgcGRmYAoKLS0tCgojIEJ1aWxkIGBtYXJreWAg
RG9jdW1lbnRhdGlvbiBhbmQgRXhhbXBsZXMKCmBtYXJreWAgaXMgYSBzaW5nbGUtZmlsZSBz
dGFuZCBhbG9uZSBzY3JpcHQgd2hpY2ggZGVwZW5kcyBvbgpgcHl0aG9uYCAoPj0zLjYpLCBg
cGFuZG9jYCAoPj0yLjExKSwgYHB5eWFtbGAgYW5kIGBwYW5kb2MteG5vc2AuCgoqKkluc3Rh
bGxpbmcgRGVwZW5kZW5jaWVzKioKCmBwYW5kb2NgIGJpbmFyaWVzIGZvciBEZWJpYW4tYmFz
ZWQgTGludXggYXJlIHJlbGVhc2VkCltoZXJlXShodHRwczovL2dpdGh1Yi5jb20vamdtL3Bh
bmRvYy9yZWxlYXNlcykuCmBweXlhbWxgIGlzIGluc3RhbGxlZCB1c2luZyB0aGUgbGludXgg
cGFja2FnZSBtYW5hZ2VyIG9yIGBwaXBgIGFuZApgcGFuZG9jLXhub3NgIGNvbnNpc3RzIG9m
IHRoZSBjb21wb25lbnRzIGBmaWdub3NgLCBgc2Vjbm9zYCwgYGVxbm9zYAphbmQgYHRhYmxl
bm9zYCB3aGljaCBhcmUgaW5zdGFsbGVkIHVzaW5nIGBwaXBgLiBEZXBlbmRpbmcgb24gdGhl
CmxpbnV4IGluc3RhbGxhdGlvbiBtYXliZSBgcGlwM2AgaGFzIHRvIGJlIHVzZWQuCgpgYGBi
YXNoCnBpcCBpbnN0YWxsIHB5eWFtbApwaXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCnBpcCBp
bnN0YWxsIHBhbmRvYy1zZWNub3MKcGlwIGluc3RhbGwgcGFuZG9jLWVxbm9zCnBpcCBpbnN0
YWxsIHBhbmRvYy10YWJsZW5vcwpgYGAKCioqRG93bmxvYWQgYG1hcmt5YCBTY3JpcHQqKgoK
YG1hcmt5YCBpcyBkb3dubG9hZGVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMuCgpg
YGBiYXNoCmNkICRIT01FCm1rZGlyIG1hcmt5CmNkIG1hcmt5CndnZXQgaHR0cDovL3ZyLnR1
LWZyZWliZXJnLmRlL35sZWhtYW5uNy9tYXJreS5weQpjaG1vZCAreCBtYXJreS5weQpgYGAK
CioqSW5pdGlhbGl6ZSBgbWFya3lgIEVudmlyb25tZW50KioKClRoZSBgbWFya3lgIGVudmly
b25tZW50IGlzIGluaXRpYWxpemVkIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMuClRo
ZSBgbWFya3lgIE1ha2VmaWxlLCBkb2N1bWVudGF0aW9uIGFuZCBxdWlja3N0YXJ0IGFyZSB1
bnBhY2tlZCBmcm9tCnRoZSBgbWFya3lgIHNjcmlwdCBmaWxlIGludG8gdGhlIGN1cnJlbnQg
d29ya2luZyBkaXJlY3RvcnkuCgpgYGBiYXNoCmNkICRIT01FCmNkIG1hcmt5Ci4vbWFya3ku
cHkgLS1pbml0CldSSVRFIC4vbWQvbWFya3kubWQKV1JJVEUgLi9tZC9tYXJreS5tZGkKV1JJ
VEUgLi9kYXRhL21hcmt5LmJpYgpXUklURSAuL21kL3F1aWNrc3RhcnQubWQKV1JJVEUgLi9t
ZC9xdWlja3NvdXJjZS5tZApVU0FHRQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRt
bCBodHRwZGAKMy4gYG1ha2UgYWxsLXBkZmAKYGBgCgpEdXJpbmcgaW5pdGlhbGl6YXRpb24g
YG1hcmt5YCBjcmVhdGVzIHR3byBkaXJlY3RvcmllcyBgbWQvYCBhbmQgYGRhdGEvYC4KYG1k
L2AgaXMgdGhlIGRpcmV0b3J5IHdoaWNoIGNvbnRhaW5zIHRoZSBNYXJrZG93biB0ZXh0IHRv
IGJlIHJlbmRlcmVkCmludG8gYGh0bWxgIGFuZCBgcGRmYC4gYGRhdGEvYCBpcyB0aGUgcmVz
b3VyY2UgZGlyZXRvcnkgd2hpY2ggY29udGFpbnMKc2NyaXB0cywgaW1hZ2VzLCB2aWRlb3Mg
YW5kIG90aGVyIGFzc2V0cy4KCioqUmVuZGVyIERvY3VtZW50YXRpb24gYW5kIEV4YW1wbGVz
KioKCklmIGFsbCBkZXBlbmRlbmNpZXMgaGF2ZSBiZWVuIGluc3RhbGxlZCBhY2NvcmRpbmds
eSBhbmQgdGhlIGBtYXJreWAKZW52aXJvbm1lbnQgaXMgaW5pdGlhbGl6ZWQsIGBtYXJreWAg
Y2FuIGJlIHVzZWQgdG8gcmVuZGVyIGEgbG9jYWwKY29weSBvZiB0aGUgZG9jdW1lbnRhdGlv
biBhbmQgdGhlIHF1aWNrc3RhcnQuCgpUaGUgZm9sbG93aW5nIGNvbW1hbmRzIHJlbmRlciB0
aGUgTWFya2Rvd24gdGV4dCBvZiB0aGUgZG9jdW1lbnRhdGlvbi4KCmBgYGJhc2gKY2QgJEhP
TUUKY2QgbWFya3kKbWFrZSBhbGwKYGBgCgpEdXJpbmcgYG1ha2VgIGEgbmV3IGRpcmVjdG9y
eSBgYnVpbGQvYCBpcyBjcmVhdGVkLCB3aGljaCBjb250YWlucwp0ZW1wb3JhcnkgZmlsZXMg
KHByZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0LCBsaW5rZWQgdGV4dCBmb3IgYGh0bWxgCmFu
ZCBgcGRmYCkuIFRoZSByZXN1bHRpbmcgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMgYXJl
IHBsYWNlZCBpbnNpZGUKYGh0bWwvYCBhbmQgYHBkZi9gLgoKKipgbWFya3lgIE1ha2VmaWxl
KioKClRoZSBgbWFya3lgIE1ha2VmaWxlIGNvb3JkaW5hdGVzIHRoZSB0aHJlZSBzdGVwcyBv
ZiB0aGUgYG1hcmt5YApkb2N1bWVudCBwaXBlbGluZSBwcmVwcm9jZXNzaW5nLCBsaW5raW5n
IGFuZCByZW5kZXJpbmcuClRoZSBgbWFya3lgIE1ha2VmaWxlIHN1cHBvcnRzIHNldmVyYWwg
b3B0aW9ucyBmb3IgZGlzcGxheWluZyBoZWxwCm9yIHJlbmRlcmluZyBhbGwsIG11bHRpcGxl
IG9yIHNpbmdsZSBmaWxlcy4KCipNYWtlZmlsZSBUYXJnZXRzKgoKMS4gYG1ha2UgaGVscGA6
IGRpc3BsYXkgaGVscCBtZXNzYWdlIG9uIHRoZSBjb25zb2xlCjIuIGBtYWtlIGNoZWF0YDog
ZGlzcGxheSB0aGUgYG1hcmt5YCBtYXJrdXAgQ2hlYXQgU2hlZXQKMy4gYG1ha2Ugc2NhbmA6
IHNjYW4gZm9yIG5ldyBkb2N1bWVudHMgYG1kLyoubWRgIGFuZCB1cGRhdGUgTWFrZWZpbGUK
NC4gYG1ha2UgYWxsYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyoubWRgIGludG8gYGh0
bWxgIGFuZCBgcGRmYAo1LiBgbWFrZSBhbGwtcGRmYDogcmVuZGVyIGFsbCBkb2N1bWVudHMg
YG1kLyoubWRgIGludG8gYHBkZmAKNi4gYG1ha2UgYWxsLWh0bWxgOiByZW5kZXIgYWxsIGRv
Y3VtZW50cyBgbWQvKi5tZGAgaW50byBgaHRtbGAKNy4gYG1ha2UgaHR0cGRgOiBzdGFydCBw
eXRob24gd2Vic2VydmVyIGluIGBodG1sL2AKOC4gYG1ha2UgY2xlYW5gOiByZW1vdmUgYWxs
IGZpbGVzOiBgYnVpbGQvKmAsIGBwZGYvKmAsIGBodG1sLypgCgoqTWFrZSBTaW5nbGUgRG9j
dW1lbnQqCgpXaGVuIHJ1bm5pbmcgYG1ha2UgYWxsYCwgYG1hcmt5YCByZW5kZXJzIGFsbCBk
b2N1bWVudHMsIHdoaWNoIGNhbgpiZSB1bmRlc2lyYWJsZSBpZiBvbmx5IG9uZSBwYXJ0aWN1
bGFyIGRvY3VtZW50IHNoYWxsIGJlIHJlbmRlcmVkLgpCeSBgbWFrZSBzY2FuYCwgYG1hcmt5
YCBzY2FucyB0aGUgZGlyZWN0b3J5IGBtZC8qLm1kYCBmb3IgbmV3IE1hcmtkb3duCmRvY3Vt
ZW50cyB0byBiZSBwcm9jZXNzZWQuIEZvciBlYWNoIGRvY3VtZW50LCB3aGljaCBoYXMgYmVl
biBmb3VuZCwKYG1hcmt5YCBzZXRzIHVwIGFsaWFzIHRhcmdldHMgaW4gb3JkZXIgdG8gZGVi
dWcgdGhlIHByZXByb2Nlc3NpbmcsCmxpbmtpbmcgYW5kIHJlbmRlcmluZyBvZiB0aGlzIGRv
Y3VtZW50LgoKQXNzdW1pbmcgdGhlIGRvY3VtZW50IGBtZC9tYXJreS5tZGAgc2hhbGwgYmUg
cmVuZGVyZWQgc3RlcCBieSBzdGVwLApgbWFya3lgIGludHJvZHVjZXMgdGhlIGZvbGxvd2lu
ZyB0YXJnZXRzLgoKMS4gKlByZXByb2Nlc3NpbmcqOiBgbWQvbWFya3kubWRgIC0+IGBidWls
ZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcgYGh0bWxgKjogYGJ1aWxkL21hcmt5Lm1kYCAtPiBg
YnVpbGQvbWFya3kuaHRtbC5tZGAKMy4gKkxpbmtpbmcgYHBkZmAqOiBgYnVpbGQvbWFya3ku
bWRgIC0+IGBidWlsZC9tYXJreS5wZGYubWRgCjQuICpSZW5kZXJpbmcgYGh0bWxgKjogYGJ1
aWxkL21hcmt5Lmh0bWwubWRgIC0+IGBodG1sL21hcmt5Lmh0bWxgCjUuICpSZW5kZXJpbmcg
YHBkZmAqOiBgYnVpbGQvbWFya3kucGRmLm1kYCAtPiBgcGRmL21hcmt5LnBkZmAKCi0tLQoK
IyBXcml0ZSBBIE5ldyBEb2N1bWVudAoKSW4gb3JkZXIgdG8gcmVuZGVyIGEgbmV3IGRvY3Vt
ZW50IHRoZSBNYXJrZG93biB0ZXh0IG5lZWRzIHRvIGJlIHNhdmVkCnRvIGEgZmlsZSBsb2Nh
dGVkIGluIGBtZC9leGFtcGxlLm1kYCB3aGljaCBjYW4gYmUgZm91bmQgcmVuZGVyZWQKW2hl
cmVdKGV4YW1wbGUuPz8/KS4gVGhlIGZvbGxvd2luZyBNYXJrZG93biBzbmlwcGV0CmNhbiBi
ZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQuCgpgYGB5YW1sCiEhISBleGFtcGxlLm1kIHJh
dyA+PjEKYGBgCgotLS0KCiMgQ29kZSBCbG9ja3MKCkNvZGUgYmxvY2tzIGFyZSBlbWJlZGRl
ZCBpbiBNYXJrZG93biB1c2luZyBmZW5jZWQgY29kZSB1c2luZwplaXRoZXIgdGhlIGAhYCBv
ciBgIWAgZmxhZyBmb3IgaGlkZGVuIGFuZCBkaXNwbGF5ZWQgY29kZQpyZXNwZWN0aXZlbHku
CgpgYGB0ZXh0CiAgICBgYGBcISEKCUNPREVfQkxPQ0tfSElEREVOCiAgICBgYGAKCiAgICBg
YGBcIQoJQ09ERV9CTE9DS19TSE9XTgogICAgYGBgCmBgYAoKKipEaXNwbGF5IGFuZCBFeGVj
dXRlIENvZGUqKgoKVGhpcyBjb2RlIGJsb2NrIGFubm90YXRlZCB3aXRoIGAhYCBpcyBkaXNw
bGF5ZWQgYW5kIGV4ZWN1dGVkLgoKYGBgIQoJaW1wb3J0IG1hdGgKCXggPSBtYXRoLnNxcnQo
MikKYGBgCgoqKkV4ZWN1dGUgQ29kZSB3aXRob3V0IERpc3BsYXkqKgoKVGhlIGNvZGUgYmxv
Y2sgYW5ub3RhdGVkIHdpdGggYCFgIGlzIG5vdCBkaXNwbGF5ZWQsIGJ1dCBleGVjdXRlZC4K
CmBgYCEhCgl5ID0geCArIDEKYGBgCgoqKkRpc3BsYXkgQ29kZSBidXQgZG8gbm90IEV4ZWN1
dGUqKgoKVGhpcyBjb2RlIGJsb2NrIGlzIGRpc3BsYXllZCBhcyBweXRob24sIGJ1dCBub3Qg
ZXhlY3V0ZWQuCgpgYGBweXRob24KCXogPSAwLi8wLgpgYGAKCioqVXNpbmcgdGhlIFB5dGhv
biBgaW1wb3J0YCBTdGF0ZW1lbnQqKgoKTGFyZ2UgY29kZSBibG9ja3MgY2FuIGJlIGltcG9y
dGVkIGZyb20gcHl0aG9uIG1vZHVsZXMgYW5kIHRoZQpgaW1wb3J0YCBzdGF0ZW1lbnQgY2Fu
IGJlIHVzZWQgZm9yIGxvYWRpbmcgaW5zdGFsbGVkIGxpYnJhcmllcy4KCmBgYHB5dGhvbgoJ
aW1wb3J0IG51bXB5CglpbXBvcnQgc3lzCglzeXMucGF0aC5hcHBlbmQoIi4iKQoJI2ltcG9y
dCBtb2R1bGVfaW5fd29ya2luZ19kaXJlY3RvcnkKYGBgCgotLS0KCiMgSW5saW5lIEV4cHJl
c3Npb25zCgpJbmxpbmUgc3RhdGVtZW50cyBhcmUgZGlyZWN0bHkgZW1iZWRkZWQgaW50byB0
aGUgdGV4dCBmbG93IHVzaW5nCmV4cHJlc3Npb25zIGFuZCB2YXJpYWJsZXMgd2l0aCB0aGUg
Y29ycmVzcG9uZGluZwpzeW50YXggYGAgYFwhRVhQUkVTU0lPTmAgYGAgb3IgYGAgYFwhVkFS
SUFCTEVgIGBgLgpUaGUgb3V0cHV0IG9mIHZhcmlhYmxlcyBjYW4gYmUgZm9ybWF0dGVkIHVz
aW5nIHRoZQpgYCBgXCFWQVJJQUJMRVs6Rk9STUFUXWAgYGAgc3RhdGVtZW50IGFjY29yZGlu
Zwp0byB0aGUgcHl0aG9uIG9wZXJhdG9yIGB7PHZhcmlhYmxlPls6PGZvcm1hdD5dfWAgaW1w
bGVtZW50ZWQgaW4gdGhlCltgc3RyLmZvcm1hdCgpYF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5v
cmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1hdHN0cmluZ3MpCnNwZWNpZmljYXRpb24u
CgoqKklubGluZSBGb3JtYXR0ZWQgT3V0cHV0KioKClRoZSByZXN1bHQgb2YgJFxzcXJ0ezJ9
JCBpczoKKiB1bmZvcm1hdHRlZCBvdXRwdXQ6IGAhIG1hdGguc3FydCgyLjApYAoqIGZvcm1h
dHRlZCBvdXRwdXQ6IGAhICIlLjRmIiAlIG1hdGguc3FydCgyLjApYAoKVGhlIHZhcmlhYmxl
ICR4JCBpcwoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgeGAKKiBmb3JtYXR0ZWQgb3V0cHV0
OiBgISB4Oi40ZmAKClRoZSB2YXJpYWJsZSAkeT14KzEkIGlzCiogdW5mb3JtYXR0ZWQgb3V0
cHV0OiBgISB5YAoqIGZvcm1hdHRlZCBvdXRwdXQ6IGAhIHk6LjRmYAoKKFRoZSBjb2RlIGJs
b2NrIGZvciB0aGUgZGVmaW5pdGlvbiBvZiAkeSQgaXMgaGlkZGVuLikKCioqSW5saW5lIEV4
cHJlc3Npb24gT3V0cHV0KioKCmBgYCEKCXggPSBsaXN0KHJhbmdlKDEsIDExKSkKCXkgPSBb
aSppIGZvciBpIGluIHhdCgoJZGVmIGxpc3Rfc3RyKGEpOgoJCXJldHVybiBbc3RyKGkpIGZv
ciBpIGluIGFdCglkZWYgbGlzdF9hbmQoYSk6CgkJcmV0dXJuICIsICIuam9pbihsaXN0X3N0
cihhWzotMV0pKSArICIgYW5kICIgKyBzdHIoYVstMV0pCmBgYAoKVGhlIGxpc3QgY2FuIGJl
IGluc2VydGVkIGludG8gdGhlIHRleHQuIFRoZSBzcXVhcmUgb2YgdGhlIGZpcnN0CmAhbGVu
KHgpYCBudW1iZXJzIGAhbGlzdF9hbmQoeClgIGlzIGAhbGlzdF9hbmQoeSlgLiBTcXVhcmUg
bnVtYmVycwphcmUgY29tcHV0ZWQgYWNjb3JkaW5nIHRvICR5PXheMiQuCgoqKklubGluZSBT
dGF0ZW1lbnRzIGluIFRhYmxlcyoqCgpgYGAhCgljbGFzcyBzcXVhcmU6CgkJZGVmIF9faW5p
dF9fKHNlbGYpOgoJCQlzZWxmLnggPSAwCgkJZGVmIGdldF94KHNlbGYpOgoJCQlyZXR1cm4g
c2VsZi54CgkJZGVmIG5leHRfeShzZWxmKToKCQkJeSA9IHNlbGYueCoqMgoJCQlzZWxmLngg
Kz0gMQoJCQlyZXR1cm4geQoJc3EgPSBzcXVhcmUoKQpgYGAKClRoZSBmb2xsb3dpbmcgdGFi
bGUgaXMgY29tcHV0ZWQgYWNjb3JkaW5nIHRvICR5PXheMiQuCgp4ICAgICAgICAgICAgfHkK
LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLQpgIXNxLmdldF94KClgfGAhc3EubmV4dF95
KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5l
eHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFz
cS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClg
fGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRf
eCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCgotLS0K
CiMgR2VuZXJhdGUgTWFya2Rvd24gVGV4dAoKTWFya2Rvd24gdGV4dCBjYW4gYmUgcHJvZHVj
ZWQgYWxnb3JpdGhtaWNhbGx5IGZyb20gYSBweXRob24gYWxnb3JpdGhtCnVzaW5nIHRoZSBg
XygpYCBhbmQgYF9fKClgIGZ1bmN0aW9uLiBUaGUgYF8oKWAgYW5kIGBfXygpYCBmdW5jdGlv
biBhcmUKc3BlY2lhbCBuYW1lcyB3aGljaCBhcmUgcmVzZXJ2ZWQgYnkgYG1hcmt5YC4gKHJl
ZmVyIHRvIEdlbmVyYXRpb24gb2YKTWFya2Rvd24gVGV4dCwgW2BtYXJreWAgZG9jdW1lbnRh
dGlvbl0obWFya3kuPz8/KSBmb3IgaW4tZGVwdGgKZXhwbGFuYXRpb24pLgoKIyMgVGhlIGBf
KClgIEZ1bmN0aW9uCgogVGhlIGBfKClgIGZ1bmN0aW9uIGJhc2ljbHkgcmVzZW1ibGVkIHRo
ZSBweXRob24gYHByaW50KClgIGZ1bmN0aW9uLgpgbWFya3lgIGRvZXMgbm90IHBhdGNoIHRo
ZSBzdGFuZGFyZCBgcHJpbnQoKWAgZnVuY3Rpb24gd2hpY2ggc3RpbGwKZGlzcGxheXMgdGV4
dCBpbiB0aGUgY29uc29sZSBhbmQgbm90IGluIHRoZSBNYXJrZG93biB0ZXh0LgpUaGUgYF8o
KWAgZnVuY3Rpb24gc3VwcG9ydHMgYXBwZW5kaW5nIHRleHQgdG8gdGhlIHByZXZpb3VzIGFu
ZCB0aGUgbmV4dApsaW5lIG9mIG91dHB1dCBieSB1c2luZyBgX2AgYXMgdGhlIGZpc3Qgb3Ig
bGFzdCBwYXJhbWV0ZXIuCjEuIGBfKF8sICphcmdzICAgKWA6IGFwcGVuZCB0aGlzIG91dHB1
dCB0byBwcmV2aW91cyBvdXRwdXQKMi4gYF8oXywgKmFyZ3MsIF8pYDogYXBwZW5kIHRvIHBy
ZXZpb3VzIGFuZCBuZXh0IG91dHB1dAozLiBgXyggICAqYXJncywgXylgOiBhcHBlbmQgbmV4
dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKNC4gYF8oKWA6IGRpc2FibGUgYXBwZW5kIGZsYWcK
CioqTW9ua2V5IFBhdGNoIGBwcmludCgpYCBGdW5jdGlvbioqCgpUaGUgYHByaW50KClgIGZ1
bmN0aW9uIGNhbiBiZSAqbW9ua2V5IHBhdGNoZWQqIHVzaW5nIHRoZSBmb2xsb3dpbmcKc3Rh
dG1lbnQgaW4gb3JkZXIgdG8gY2FsbCB0aGUgYF8oKWAgZnVuY3Rpb24gaW5zdGVhZC4KCmBg
YCEKCXByaW50KCJQcmludCIsICJ0byIsICAiY29uc29sZSIsICIhIikKCV8oIlByaW50Iiwg
InRvIiwgICJNYXJrZG93biIsICIhIikKCglwcmludCA9IF8gIyBtb25rZXkgcGF0Y2gKCXBy
aW50KCJQcmludCIsICJ0byIsICAiTWFya2Rvd24iLCAiISIpCmBgYAoKKipKb2luIEFyZ3Vt
ZW50cyB1c2luZyBgc2VwYCoqCgpUaGUgc2lnbmF0dXJlIG9mIHRoZSBgXygpYCBpcyBgXygq
YXJncywgc2VwPSIgIilgLiBgc2VwYCBpcyB1c2VkIHRvCmpvaW4gdGhlIGFyZ3VtZW50cyBg
KmFyZ3NgIGludG8gb25lIHN0cmluZy4KCmBgYCEKCV8oIlRoZSBmaXJzdCBmaXZlIG5hdHVy
YWwgbnVtYmVycyBhcmU6IikKCV8oMSwgMiwgMywgNCwgNSwgc2VwPSIsICIpCmBgYAoKKipH
ZW5lcmF0ZSBhIFRhYmxlIHdpdGggQXBwZW5kaW5nKioKClRoZSBhcHBlbmQgZmVhdHVyZSBp
cyB1c2VkIHRvIGNyZWF0ZSBhIHRhYmxlLgoKYGBgIQoJXygiQ29sdW1uIDEiLCBfKQoJXygi
fENvbHVtbiAyIiwgXykKCV8oInxDb2x1bW4gMyIsIF8pCglfKCkKCglfKCJ8Ii5qb2luKFsi
LS0tLS0tLS0iXSozKSkKCglmb3IgaSBpbiByYW5nZSg1KToKCQlfKCIlIDhkIiAlIChpKjMp
KQoJCWZvciBqIGluIFsxLCAyXToKCQkJXyhfLCAifCUgOGQiICUgKGkqMytqKSkKYGBgCgpU
aGUgYWxnb3JpdGhtIHByb2R1Y2VzIHRoZSBmb2xsb3dpbmcgTWFya2Rvd24gdGV4dC4KCmBg
YG1kCkNvbHVtbiAxfENvbHVtbiAyfENvbHVtbiAzCi0tLS0tLS0tfC0tLS0tLS0tfC0tLS0t
LS0tCiAgICAgICAwfCAgICAgICAxfCAgICAgICAyCiAgICAgICAzfCAgICAgICA0fCAgICAg
ICA1CiAgICAgICA2fCAgICAgICA3fCAgICAgICA4CiAgICAgICA5fCAgICAgIDEwfCAgICAg
IDExCiAgICAgIDEyfCAgICAgIDEzfCAgICAgIDE0CmBgYAoKIyMgVGhlIGBfXygpYCBGdW5j
dGlvbgoKQ29tcGFyZWQgdG8gdGhlIGBfKClgIGZ1bmN0aW9uLCB0aGUgYF9fKClgIGZ1bmN0
aW9uIG9ubHkgdGFrZXMgb25lCmFyZ3VtZW50IGFuZCBpdHMgcHVycG9zZSBpcyB0byBvdXRw
dXQgYSBmb3JtYXR0ZWQgcGFyYWdyYXBoIHdpdGgKaW5kZW50YXRpb24uIFRoZSBzaWduYXR1
cmUgb2YgdGhlIGBfXygpYCBmdW5jdGlvbiBpcyBgXyhhcmcsIGNyb3A9VHJ1ZSlgLgoKKipH
ZW5lcmF0ZSBhIFBhcmFncmFwaCB3aXRoIGBmYC1TdHJpbmdzKioKClRoZSBgX18oKWAgZnVu
Y3Rpb24gY2FuIGJlIGNvbWJpbmVkIHdpdGggdHJpcGxlIHF1b3RlZCBibG9jayBzdHJpbmdz
CmAiIiJgIG9yIGAnJydgIGFuZCB0aGUgcHl0aG9uIDMgYGZgLXN0cmluZ3Mgb3IgYGYiLi4u
ImAgc3RyaW5nCmludGVycG9sYXRpb24sIHJlZmVyIHRvIHRoZQpbcHl0aG9uIG1hbnVhbF0o
aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDQ5OC8jc3VwcG9ydGluZy1m
dWxsLXB5dGhvbi1leHByZXNzaW9ucykKCmBgYCEKCWltcG9ydCByYW5kb20KCXMgPSAwCgly
YW5kb20uc2VlZChzKQoJcCA9IFtyYW5kb20ucmFuZG9tKCkgZm9yIGkgaW4gcmFuZ2UoMyld
CgoJX18oZiIiIgoJCVBhcmFtZXRlciBvbmUgaXMge3BbMF06LjNmfSBhbmQgdGhlIHZhbHVl
IGRlcGVuZHMgb24gdGhlIHNlZWQKCQlvZiB0aGUgcHNldWRvIHJhbmRvbSBudW1iZXIgZ2Vu
ZXJhdG9yLCB3aGljaCB3YXMgY2hvc2VuCgkJdG8gYmUge3N9LiBGb3IgdGhlIHNhbWUgc2Vl
ZCBhbHdheXMgdGhlIHNhbWUgcmFuZG9tIG51bWJlcnMKCQlhcmUgY3JlYXRlZC4gVGhlIG5l
eHQgdHdvIG51bWJlcnMgYXJlIHtwWzFdOi4zZn0gYW5kIHtwWzJdOi4zZn0uCgkJVGhlIHN1
bSBvZiB0aGUgdGhyZWUgbnVtYmVycyBpcyB7c3VtKHApOi4zZn0gYW5kIGl0IGlzCgkJeydn
cmVhdGVyJyBpZiBzdW0ocCkgPiAyLiBlbHNlICdsZXNzZXIgb3IgZXF1YWwnfSB0aGFuIHR3
by4KCSIiIikKYGBgCgoqKkNyb3BwaW5nIGFuZCBJbmRlbnRhdGlvbiBvZiBPdXRwdXQqKgoK
QmVmb3JlIHRoZSB0ZXh0IGdlbmVyYXRlZCBieSB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIHBy
aW50ZWQgaW50byB0aGUKZG9jdW1lbnQuIFRoZSB0ZXh0IGlzIGNyb3BwZWQgYWNjb3JkaW5n
IHRvIHRoZSBsZWFkaW5nIHdoaXRlIHNwYWNlCm9mIHRoZSBmaXJzdCBub24tZW1wdHkgbGlu
ZS4gVGhlIGxlYWRpbmcgd2hpdGUgc3BhY2Ugb2YgdGhlIGZpcnN0Cm5vbi1lbXB0eSBsaW5l
IGlzIHJlbW92ZWQgZnJvbSBhbGwgb3RoZXIgbGluZXMgb2YgdGhlIG91dHB1dC4KCmBgYCEK
CV9fKCIiIgoJCSogTGlzdCBMZXZlbCAxCgkJCSogTGlzdCBMZXZlbCAyCgkJCSogTGlzdCBM
ZXZlbCAyCgkJCQkqIExpc3QgTGV2ZWwgMwoJCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBM
ZXZlbCAxCgkJKiBMaXN0IExldmVsIDEKCSIiIikKYGBgCgpUaGUgY29kZSBibG9jayBwcm9k
dWNlcyB0aGUgZm9sbG93aW5nIG91dHB1dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkqIExp
c3QgTGV2ZWwgMgoJKiBMaXN0IExldmVsIDIKCQkqIExpc3QgTGV2ZWwgMwoJKiBMaXN0IExl
dmVsIDIKKiBMaXN0IExldmVsIDEKKiBMaXN0IExldmVsIDEKYGBgCgoqKkRpc2FibGUgQ3Jv
cHBpbmcgb2YgT3V0cHV0KioKClRoZSBjcm9wcGluZyBpcyBkaXNhYmxlZCB1c2luZyB0aGUg
a2V5d29yZCBgX18odGV4dCwgY3JvcD1GYWxzZSlgLgoKYGBgIQoJX18oIiIiCgkJKiBMaXN0
IExldmVsIDEKCSIiIiwgY3JvcD1UcnVlKQoKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgki
IiIsIGNyb3A9RmFsc2UpCmBgYAoKVGhlIGNvZGUgYmxvY2sgcHJvZHVjZXMgdGhlIGZvbGxv
d2luZyBvdXRwdXQuCgpgYGBtZAoqIExpc3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAyCmBg
YAoKLS0tCgojIEZvcm1hdCBEZXBlbmRlbnQgTGlua3MKCldoZW4gd3JpdGluZyBzZXZlcmFs
IE1hcmtkb3duIGRvY3VtZW50cyBvZnRlbiBkb2N1bWVudHMgYXJlIGxpbmtlZApiZXR3ZWVu
IGVhY2ggb3RoZXIgdXNpbmcgdGhlIE1hcmtkb3duIGxpbmsgc3RhdGVtZW50CmBbTGluayBO
YW1lXShmaWxlLmh0bWwpYCBvciBgW0xpbmsgTmFtZV0oZmlsZS5wZGYpYC4KSG93ZXZlciwg
d2hlbiByZW5kZXJpbmcgZG9jdW1lbnRzIHdpdGggbGlua3MgaW50byBgaHRtbGAgYW5kIGBw
ZGZgCnRoZSBmaWxlIGV4dGVuc2lvbiBvZnRlbiBtdXN0IGJlIGFkanVzdGVkIGFjY29yZGlu
ZyB0byB0aGUgb3V0cHV0IGZvcm1hdC4KYG1hcmt5YCBzdXBwb3J0cyB0aGUgYC5cPz8/YCBz
dGF0ZW1lbnQsIHdoaWNoIHdpbGwgYmUgcmVwbGFjZWQgYnkKYC5odG1sYCBvciBgLnBkZmAg
ZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQgZm9ybWF0LgoKYGBgbWQKW0xpbmsgdG8gZG9jdW1l
bnRdKGZpbGUuXD8/PykKYGBgCgp3aWxsIGJlIHByb3Byb2Nlc3NlZCBpbnRvIHRoZSBmb2xs
b3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxgOiBgW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuaHRt
bClgCiogZm9yIGBwZGZgOiBgW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUucGRmKWAKCltMaW5r
IHRvIHRoaXMgZG9jdW1lbnRdKHF1aWNrc3RhcnQuPz8/KQoKLS0tCgojIEZvcm1hdCBEZXBl
bmRlbnQgQ29kZQoKYHBhbmRvY2AgTWFya2Rvd24gYWxsb3dzIHRvIHdyaXRlIGZvcm1hdCBz
cGVjaWZpYyBjb2RlIHdpdGhpbiBNYXJrZG93bgp1c2luZyBgaHRtbGAgYW5kICp0ZXgqIGZv
ciBgcGRmYCBkb2N1bWVudHMuIEhvd2V2ZXIsIHdoZW4gaW5zZXJ0aW5nCnJhdyBgaHRtbGAg
b3IgcmF3ICp0ZXgqIGNvZGUsIHRoZSBkb2N1bWVudCBvbmx5IGNhbiBiZSByZW5kZXJlZCBp
bnRvCmBodG1sYCBvciBgcGRmYCBhY2NvcmRpbmdseS4KCmBtYXJreWAgaW50cm9kdWNlcyBm
b3JtYXQgY29kZXMsIHdoaWNoIGFyZSBhcHBsaWVkIGR1cmluZyBsaW5raW5nCmFmdGVyIHBy
ZXByb2Nlc3NpbmcuIER1cmluZyBsaW5raW5nIGZvcm1hdCBzcGVjaWZpYyBjb2RlcyBmb3Ig
YGh0bWxgCmFuZCBgcGRmYCBhcmUgYXBwbGllZCBpbiBhIGNvbnNpc3RlbnQgbWFubmVyLCBy
ZXN1bHRpbmcgaW4gZG9jdW1lbnRzCndpdGggTWFya2Rvd24gYW5kIGBodG1sYCBvciBNYXJr
ZG93biBhbmQgKnRleCogb25seS4gVXNpbmcgdGhpcwpwYXR0ZXJuIGBtYXJreWAgZG9jdW1l
bnRzIGNvbnRhaW4gcmVndWxhciBNYXJrZG93biwgd2hpY2ggY2FuIGJlCnJlbmRlcmVkIGlu
dG8gYGh0bWxgIGFuZCBgcGRmYCwgYXMgd2VsbCBhcyBmb3JtYXQgc3BlY2lmaWMgY29kZXMK
Zm9yIHR3ZWFraW5nIG9yIHBvbGlzaGluZyBgaHRtbGAgYW5kIGBwZGZgIG91dHB1dC4KCkZv
cm1hdCBjb2RlcyBhcmUgc3BlY2lmaWVkIGluIGNvZGUgYmxvY2tzIGFuZCBjYWxsZWQgdXNp
bmcgdGhlCmlubGluZSBzeW50YXggYGAgYFwhRk1UQ09ERShBUkdTKWAgYGAsIHdoaWNoIGlz
IHRyYW5zbGF0ZWQgaW50byB0aGUgdHdvCmZvbGxvd2luZyBweWhvbiBmdW5jdGlvbiBjYWxs
cy4KMS4gYEZNVENPREVfaHRtbChBUkdTKWA6IGNhbGxlZCB3aGVuIGxpbmtlZCBmb3IgYGh0
bWxgLgoyLiBgRk1UQ09ERV9wZGYoQVJHUylgOiBjYWxsZWQgd2hlbiBsaW5rZWQgZm9yIGBw
ZGZgLgoKQXNzdW1pbmcgcHJlcHJvY2Vzc2luZyB0aGUgZmlsZSBgbWQvbWFya3kubWRgLCBs
aW5raW5nIGZvcm1hdCBjb2RlcwpyZXN1bHRzIGluIHRoZSB0d28gZm9sbG93aW5nIG91dHB1
dCBmaWxlcy4KMS4gYGJ1aWxkL21hcmt5Lmh0bWwubWRgOiBjb250YWlucyBvdXRwdXQgb2Yg
YGh0bWxgIGZvcm1hdCBjb2Rlcy4KMi4gYGJ1aWxkL21hcmt5LnBkZi5tZGA6IGNvbnRhaW5z
IG91dHB1dCBvZiBgcGRmYCBmb3JtYXQgY29kZXMuCgoqKkV4YW1wbGUgTXVsdGktQ29sdW1u
IFRleHQgaW4gYHBkZmAgYW5kIGBodG1sYCoqCgpEZWZuaXRpb24gb2YgdHdvIGZvcm1hdCBj
b2RlcyBgbWNvbF9iZWdpbmAgYW5kIGBtY29sX2VuZGAsIG9uZSBmb3IgdGhlCmJlZ2luIG9m
IG11bHRpIGNvbHVtbiBhbmQgYW5vdGhlciBmb3IgdGhlIGVuZCBvZiB0aGUgbXVsdGkgY29s
dW1uCnNlY3Rpb24uIFRoZSBmb3JtYXQgY29kZXMgYXJlIGFwcGVuZGVkIHdpdGggYF9odG1s
YCBhbmQgYF9wZGZgCnJlc3BlY3RpdmVseS4KCmBgYCEKCWRlZiBtY29sX2JlZ2luX3BkZigp
OiByZXR1cm4gciJcYmVnaW57bXVsdGljb2xzfXsyfSIKCWRlZiBtY29sX2VuZF9wZGYoKTog
cmV0dXJuIHIiXGVuZHttdWx0aWNvbHN9IgoJZGVmIG1jb2xfYmVnaW5faHRtbCgpOiByZXR1
cm4gciI8ZGl2IHN0eWxlPSdjb2x1bW4tY291bnQ6IDI7Jz4iCglkZWYgbWNvbF9lbmRfaHRt
bCgpOiByZXR1cm4gciI8L2Rpdj4iCmBgYAoKPiAoVGhlIGBjb2x1bW4tY291bnRgIENTUyBw
cm9wZXJ0eSByZXF1aXJlcyBJbnRlcm5ldCBFeHBsb3Jlcj49MTAsCj4gRmlyZWZveD49NTIs
IFNhZmFyaT49OSwgT3BlcmE+PTM3IG9yIENocm9tZT49NTAsIHJlZmVyIHRvCj4gW3czc2No
b29sc10oaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19tdWx0aXBsZV9jb2x1
bW5zLmFzcCkuKQoKCkluIG9yZGVyIHRvIHVzZSB0aGUgYG11bHRpY29sYCAqdGV4KiBwYWNr
YWdlLCB0aGUgc3RhdGVtZW50CmBcdXNlcGFja2FnZXttdWx0aWNvbH1gIGhhcyB0byBiZSBp
bmNsdWRlZCBpbiB0aGUgeWFtbCBtZXRhIGRhdGEKCmA/bWNvbF9iZWdpbigpYApUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKYD9tY29sX2VuZCgpYAo=
'''
pack_quicksource_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKZGF0ZTogMS4gQXVndXN0
IDIwMjEKYXV0aG9yOiBIZW5yeSBMZWhtYW5uCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAg
IFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAw
IDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0
bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4K
eG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDEx
cHQKCi0tLQoKLS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29k
ZSBvZiB0aGUgYG1hcmt5YCBxdWlja3N0YXJ0Cj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGlu
ZyBgbWFya3lgIG1hcmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhlIGBtYXJreWAg
bWFya3VwIGlzIGNvbXBhdGlibGUgd2l0aCBzdGFuZGFyZCBNYXJrZG93biBhbmQgY2FuIGJl
Cj4gcmVhZCBhcy1pcy4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBgbWFya3lgIHNv
dXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNvZGUgZW1iZWRkZWQgaW50
byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IFRoZSBjb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9m
IGBtYXJreWAgaXMgYXZhaWxhYmxlCj4gW2hlcmVdKG1hcmt5Lj8/PykKCi0tLQoKYGBgcHl0
aG9uCiEhISBxdWlja3N0YXJ0Lm1kIHJhdyA+PjEKYGBgCg==
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IG1hcmt5LmJpYgpoZWFkZXItaW5j
bHVkZXMtLXBkZjogPgogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxi
b3JkZXJjb2xvcnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVh
ZGVyLWluY2x1ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVy
LWJveDsgfTwvc3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0
cnVlCmZvbnRzaXplOiAxMXB0CgotLS0KCiMgUmVmZXJlbmNlZCBTZWN0aW9uIHsjc2VjOmxh
YmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtUaGlzIGlzIHRo
ZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVV
Z0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJL
RTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0peyNmaWc6bGFiZWx9
CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBmaWc6bGFiZWwuCgpBICB8QiAgfEMgIHxECi0t
LXwtLS18LS0tfC0tLQowMDB8MTExfDQ0NHw1NTUKMjIyfDMzM3w2NjZ8Nzc3CgpUYWJsZTog
VGhpcyBpcyB0aGUgY2FwdGlvbiB7I3RibDpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2Ug
dG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7ZX1ee1xtYm94e2l9XHBpfSsxPTAkJHsjZXE6bGFi
ZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIEBlcTpsYWJlbC4KClRoaXMgaXMgYSBjaXRh
dGlvbiBbQE11bGxlcjE5OTNdLgoKIyBgbWFya3lgIE1hcmt1cAoKKipEaXNwbGF5ZWQgQ29k
ZSwgRXhlY3V0ZWQqKgoKYGBgIQoJaW1wb3J0IG1hdGgKCWRlZiBsaXN0X2FuZChsKToKCQly
ZXR1cm4gIiwgIi5qb2luKHN0cihpKSBmb3IgaSBpbiBsWzotMV0pICsgIiBhbmQgIiArIHN0
cihsWy0xXSkKCgl4ID0gMgoJeSA9IG1hdGguc3FydCh4KQpgYGAKCioqSGlkZGVuIENvZGUs
IEV4ZWN1dGVkKioKCmBgYCEhCglwcmludCgiSGVsbG8gQ29uc29sZSEiKQpgYGAKCioqRGlz
cGxheWVkIENvZGUsIE5vdCBFeGVjdXRlZCoqCgpgYGBweXRob24KCXggPSAzCmBgYAoKKipJ
bmxpbmUgRm9ybWF0dGVkIE91dHB1dCoqCgpUaGUgc3F1YXJlIHJvb3Qgb2YgJHg9YCF4YCQg
aXMgYCF5Oi4zZmAuCgoqKklubGluZSBFeHByZXNzaW9uKioKClRoZSBmaXJzdCB0ZW4gbnVt
YmVycyBhcmUgYCFsaXN0X2FuZChyYW5nZSgxMCkpYC4KCioqRm9ybWF0IExpbmtzKioKCmBg
YG1kCltMaW5rIHRvIGRvY3VtZW50XShmaWxlLlw/Pz8pCmBgYAoKd2lsbCBiZSBwcm9wcm9j
ZXNzZWQgaW50byB0aGUgZm9sbG93aW5nIHRleHQ6CiogZm9yIGBodG1sYDogYFtMaW5rIHRv
IGRvY3VtZW50XShmaWxlLmh0bWwpYAoqIGZvciBgcGRmYDogYFtMaW5rIHRvIGRvY3VtZW50
XShmaWxlLnBkZilgCgpbTGluayB0byB0aGlzIGRvY3VtZW50XShleGFtcGxlLj8/PykKCioq
Rm9ybWF0IENvZGVzKioKCmBgYCEKCWRlZiBGTVRDT0RFX2h0bWwoKTogcmV0dXJuICJIPHN1
cD5UPC9zdXA+PHN1Yj5NPC9zdWI+TCIKCWRlZiBGTVRDT0RFX3BkZigpOiByZXR1cm4gIlxM
YVRlWCIKYGBgCgpUaGlzIGlzIGEgYC4/Pz9gIGRvY3VtZW50IGFuZCB0aGUgZm9ybWF0IGNv
ZGUgcmV0dXJuczogYD9GTVRDT0RFKClgLgoKIyBSZWZlcmVuY2VzIHstfQo=
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	ipath = inc_path + "/" + line.split(" ")[1]
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "noref":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "notext":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text,
				run_marky=flag_run_marky, shift_atx=flag_shift_atx, shift_str=shift_str)
		print("# !!!", root_file, n, "<-", ipath)

########################################################################

def parse_file(fpath, root_file=False, read_meta=True,
	read_text=True, run_marky=True, shift_atx=0, shift_str=""):
	global mkdep
	global md_text
	global inc_path
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						if not k.startswith("-"):
							print("#    ...", "%s" % k, "IMPORT")
							md_yaml[k] = v
						else:
							k = k[1:]
						exec_dict[k.replace("-", "_")] = v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == "":
						continue
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)
						appendbuf = ""
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					for nn, j in enumerate(run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)):
						#k = parse_line("<module> <sring>", nn, j)
						md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					md_text.append(shift_str + i)
					continue
				elif i.startswith(r"\\!!!"):
					j = parse_line(fpath, n, i[2:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					j = parse_line(fpath, n, i[1:])
					for k in j.split("\n"):
						md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					j = parse_line(fpath, n, i)
					if j == "":
						appendbuf = i
					else:
						for k in j.split("\n"):
							md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	global mkdep
	global inc_path
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] in "!?":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] in "!?":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] in "!?":
			is_code = line[p+1] == "!"
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return ""
		if expr:
			text += line[c:p]
			c = q + 1
			if is_code:
				text += run_inline(fpath, n, p + 2, expr)
			else:
				is_shortcode = "(" in expr and expr[-1] == ")"
				if is_shortcode:
					text += run_shortcode(fpath, n, p + 2, expr)
				else:
					text += print_inline(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None	):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].strip())
		for i in arg:
			if crop and len(i[0:n].strip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		def go_deeper(deeep, first=False):
			print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
			if first:
				print("# FILE", args.marky)
			if os.path.exists(deeep.tb_frame.f_code.co_filename):
				with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
					print("#", fh.read().split("\n")[deeep.tb_lineno-1])
			if deeep.tb_next != None:
				go_deeper(deeep.tb_next)
		if ex.__traceback__.tb_next:
			go_deeper(ex.__traceback__.tb_next, first=True)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def print_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), "{%s}" % text, end="", flush=True)
	try:
		value = ("{" + text + "}").format(**exec_dict)
	except Exception as ex:
		print("")
		print("ERROR", type(ex), str(ex))
		exit(1)
	if "\n" in value:
		print("")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def run_shortcode(fpath, n, ii, expr):
	global exec_text
	global exec_append
	shcode = ""
	for f in ["html", "pdf"]:
		p = expr.find("(")
		shexpr = expr[:p] + "_" + f + expr[p:]
		print("# `?`", fpath, "%d:%d" % (n, ii), "->", shexpr)
		try:
			exec_text = list()
			exec_append = False
			value = eval(shexpr, exec_dict, None)
			if not value is None:
				__(value)
			if len(exec_text) > 0:
				exec_text = "\n".join(exec_text).split("\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
		if len(exec_text) > 0:
			print("# OUT")
			for a, b in enumerate(exec_text):
				print("#    %03d" % (a + 1), b)
			shcode += "<<??%s %s %s??>>" % (f, "\n".join(exec_text), f)
	return shcode

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text)
	try:
		value = str(eval('f"""{%s}"""' % text, exec_dict, None))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for a, b in enumerate(value.split("\n")):
		print("#    %03d" % (a + 1), b)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

args = parser.parse_args()

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/quickstart.md",
	"./md/quicksource.md",
	"./md/example.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--md")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	p = md_text.find("<<??")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("??>>", p + 4)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+4:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + 4
			p = md_text.find("<<??", c)
		else:
			p = md_text.find("<<??", p + 4)
	newtext += md_text[c:]
	if args.md.endswith(".md"):
		outfile = args.md[0:-2] + args.link + ".md"
	else:
		outfile = args.md + args.link + ".md"
	write_file(outfile, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n\n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
