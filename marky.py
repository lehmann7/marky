#!/usr/bin/env python3
# -*- coding: utf-8 -*-

marky_version = (0, 1)

########################################################################
#
# marky Markdown Preprocessor
#
# Make Example Project:
#  > mkdir project
#  > cp /path/to/marky.py project
#  > cd project
#  > chmod +x marky.py
#  > ./marky.py --init
#  > make help
#  > make all-pdf
#  > make all-html httpd
#
# Open: project/pdf/*.pdf
# Goto: http://localhost:8000/
#
########################################################################

import sys
import argparse
import glob
import os
import base64

########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################
###!!!:::marky_pack_data:::!!!###

pack_Makefile = '''
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjCgojIG1hcmtkb3duIGV4dGVuc2lvbiBsaXN0Ck1ERVhUPVwK
YWxsX3N5bWJvbHNfZXNjYXBhYmxlXAppbnRyYXdvcmRfdW5kZXJzY29yZXNcCmVzY2FwZWRf
bGluZV9icmVha3NcCnNwYWNlX2luX2F0eF9oZWFkZXJcCmxpc3RzX3dpdGhvdXRfcHJlY2Vk
aW5nX2JsYW5rbGluZVwKaW5saW5lX2NvZGVfYXR0cmlidXRlc1wKc3RyaWtlb3V0XAp5YW1s
X21ldGFkYXRhX2Jsb2NrXApwaXBlX3RhYmxlc1wKbGluZV9ibG9ja3NcCmltcGxpY2l0X2Zp
Z3VyZXNcCmFiYnJldmlhdGlvbnNcCmlubGluZV9ub3RlcwpNREVMPSQoc2hlbGwgZWNobyAi
JChNREVYVCkiIHwgdHIgIiAiICIrIikKCiMgdXNlciBzb3VyY2UgZmlsZXMKTURQWT0kKHNo
ZWxsIGZpbmQgbWQvIC1uYW1lICIqLm1kIikKCiMgbWFrZSBkZXBlbmRlbmNpZXMKTUs9JChw
YXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQubWssJChNRFBZKSkKCiMgcHJlcHJvY2Vzc2Vk
IE1hcmtkb3duIHRleHQKTUQ9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUubWQsJChNRFBZ
KSkKCiMgaHRtbCBsaW5rZWQgTWFya2Rvd24gdGV4dApNREhUTUw9JChwYXRzdWJzdCBtZC8l
Lm1kLGJ1aWxkLyUuaHRtbC5tZCwkKE1EUFkpKQoKIyBwZGYgbGlua2VkIE1hcmtkb3duIHRl
eHQKTURQREY9JChwYXRzdWJzdCBtZC8lLm1kLGJ1aWxkLyUucGRmLm1kLCQoTURQWSkpCgoj
IHJlbmRlcmVkIGh0bWwKSFRNTD0kKHBhdHN1YnN0IGJ1aWxkLyUubWQsaHRtbC8lLmh0bWws
JChNRCkpCgojIHJlbmRlcmVkIHBkZgpQREY9JChwYXRzdWJzdCBidWlsZC8lLm1kLHBkZi8l
LnBkZiwkKE1EKSkKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBoZWxwCmhlbHA6Cgkj
CgkjIG1hcmt5IEhFTFAKCSMjIyMjIyMjIyMjIwoJIwoJIyBUQVJHRVRTCgkjCgkjIFRvb2xz
OgoJIyAgKiBoZWxwICAgICAgLSBzaG93IHRoaXMgbWVzc2FnZQoJIyAgKiB0cmVlICAgICAg
LSBzaG93IHRoZSBwcm9qZWN0IHRyZWUKCSMgICogY2hlYXQgICAgIC0gc2hvdyB0aGUgbWFy
a3kgKkNoZWF0IFNoZWV0KgoJIyAgKiBodHRwZCAgICAgLSBydW4gcHl0aG9uIC1tIGh0dHBk
LnNlcnZlciBpbiBgaHRtbC9gCgkjICAqIHNjYW4gICAgICAtIGJ1aWxkIG1ha2UgZGVwZW5k
ZW5jaWVzIGFuZCB0YXJnZXRzCgkjCgkjIEJ1aWxkOgoJIyAgKiBhbGwgICAgICAgLSBhbGlh
czogYG1ha2UgYWxsLWh0bWwgYWxsLXBkZmAKCSMgICogYWxsLWh0bWwgIC0gcmVuZGVyIGh0
bWwgKGBidWlsZC8qLmh0bWwubWRgLT5gaHRtbC8qLmh0bWxgKQoJIyAgKiBhbGwtcGRmICAg
LSByZW5kZXIgcGRmIChgYnVpbGQvKi5wZGYubWRgLT5gcGRmLyoucGRmYCkKCSMgICogY2xl
YW4gICAgIC0gZGVsZXRlOiBgYnVpbGQvKmAsIGBodG1sLypgLCBgcGRmLypgCgkjCgkjIERl
YnVnOgoJIyAgKiBhbGwtbWsgICAgLSBkZXBlbmQ6IGBtZC8qLm1kYC0+YGJ1aWxkLyoubWQu
bWtgCgkjICAqIGFsbC1tZCAgICAtIG1hcmt5OiBgbWQvKi5tZGAtPmBidWlsZC8qLm1kYAoJ
IyAgKiBhbGwtbGluayAgLSBsaW5rIChgYnVpbGQvKi5tZGAtPmBidWlsZC8qLmh0bWwubWQv
cGRmYCkKCSMKCSMgRGVwZW5kZW5jaWVzOgoJIyAgKiBwYW5kb2MgPj0gMi4xMAoJIyAgKiBw
aXAgaW5zdGFsbCBwYW5kb2MtZmlnbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBhbmRvYy1lcW5v
cwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2Mtc2Vjbm9zCgkjICAqIHBpcCBpbnN0YWxsIHBh
bmRvYy10YWJsZW5vcwoJIyAgKiBwaXAgaW5zdGFsbCBwYW5kb2MteG5vcwoJIyAgKiBwaXAg
aW5zdGFsbCBweXlhbWwKCSMKCSMgQVRURU5USU9OCgkjICBmaWxlcyBpbiBgYnVpbGQvKi5t
ZGAgYW5kIGBodG1sLyouaHRtbGAgYXJlIGF1dG8tZ2VuZXJhdGVkLgoJIyAgdXNlciBmaWxl
cyBgKi5tZChpKWAgaGF2ZSB0byBiZSBwbGFjZWQgaW4gYG1kLyoubWQoaSlgLgoJIyAgYG1h
a2UgY2xlYW5gIGRlbGV0ZXMgYWxsIGZpbGVzIGluIGBidWlsZC9gLCBgaHRtbC9gIGFuZCBg
cGRmL2AuCgkjCgkjIEVYQU1QTEUKCSMgIDEuIHJ1biBgbWFrZSBhbGwtaHRtbCBodHRwZGA6
CgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBodG1sLyouaHRtbGAKCSMgICAgICog
c3RhcnQgYSBweXRob24gaHR0cGQgc2VydmVyIGluIGBodG1sYAoJIyAgMi4gcnVuIGBtYWtl
IGFsbC1wZGZgCgkjICAgICAqIHRyYW5zZm9ybSBgbWQvKi5tZGAtPmBwZGYvKi5wZGZgCgkj
CgouUEhPTlk6IHRyZWUKdHJlZToKCSMgUFJPSkVDVCBUUkVFCgkjIyMjIyMjIyMjIyMjIwoJ
IwoJIyB3b3JraW5nX2RpcgoJIyB8CgkjIHwtIG1hcmt5LnB5ICAgICAgICAgICAgLSBtYXJr
eSBleGVjdXRhYmxlCgkjIHwtIE1ha2VmaWxlICAgICAgICAoKikgLSBtYXJreSBNYWtlZmls
ZQoJIyB8CgkjIHwtIG1kLyAgICAgICAgICAgICAoKikgLSB1c2VyIE1hcmtkb3duIGRpcgoJ
IyB8ICB8LSBtYXJreS5tZChpKSAgKCopIC0gbWFya3kgZG9jdW1lbnRhdGlvbiB0ZXh0Cgkj
IHwgIHwtICoubWQgICAgICAgICAgICAgLSB1c2VyIE1hcmtkb3duIHRleHQgZmlsZXMKCSMg
fCAgfC0gKi5tZGkgICAgICAgICAgICAtIHVzZXIgTWFya2Rvd24gaW5jbHVkZSBmaWxlcwoJ
IyB8CgkjIHwtIGRhdGEvICAgICAgICAgICAoKikgLSBwYW5kb2MgcmVzb3VyY2UgZGlyZWN0
b3J5CgkjIHwgIHwtIG1hcmt5LmJpYiAgICAoKikgLSBtYXJreSBkb2N1bWVudGF0aW9uIGJp
YgoJIyB8ICB8LSAqLmJpYiAgICAgICAgICAgIC0gdXNlciBiaWJsaW9ncmFwaHkgZmlsZXMK
CSMgfCAgfC0gKi5wbmcvanBnICAgICAgICAtIHVzZXIgaW1hZ2UgZmlsZXMKCSMgfCAgfC0g
Li4uICAgICAgICAgICAgICAgIGV0Yy4uLgoJIyB8CgkjIHwtIGJ1aWxkLyAgICAgICAgICAo
KikgLSBidWlsZCBNYXJrZG93biBkaXIKCSMgfCAgfC0gKi5tZCAgICAgICAgICgqKSAtIHBy
ZXByb2Nlc3NlZCBNYXJrZG93biB0ZXh0CgkjIHwgIHwtICoubWQubWsgICAgICAoKikgLSBN
YWtlZmlsZSBkZXBlbmRlbmNpZXMKCSMgfCAgfC0gKi5odG1sLm1kICAgICgqKSAtIGxpbmtl
ZCBNYXJrZG93biBmb3IgaHRtbCBmb3JtYXQKCSMgfCAgfC0gKi5wZGYubWQgICAgICgqKSAt
IGxpbmtlZCBNYXJrZG93biBmb3IgcGRmIGZvcm1hdAoJIyB8CgkjIHwtIGh0bWwvICAgICAg
ICAgICAoKikgLSByZW5kZXJlZCBodG1sIGRpcgoJIyB8LSBwZGYvICAgICAgICAgICAgKCop
IC0gcmVuZGVyZWQgcGRmIGRpcgoJIwoJIyAoKikgZGlyZWN0b3JpZXMvZmlsZXMgYXJlIGF1
dG8tZ2VuZXJhdGVkIHVzaW5nCgkjICAgIGAuL21hcmt5LnB5IC0taW5pdGAgYW5kIGBtYWtl
IGFsbMK0CgkjCgouUEhPTlk6IGNoZWF0CmNoZWF0OiBjaGVhdC1oZWFkIGNoZWF0LWJsb2Nr
IGNoZWF0LWZvcm1hdCBjaGVhdC1pbmxpbmUgY2hlYXQtbWV0YSBjaGVhdC1pbmNsdWRlIGNo
ZWF0LWxpbmsgY2hlYXQtY29kZQoKLlBIT05ZOiBjaGVhdC1ibG9jawpjaGVhdC1oZWFkOgoJ
IwoJIyBtYXJreSBDSEVBVCBTSEVFVAoJIyMjIyMjIyMjIyMjIyMjIyMjIwoKLlBIT05ZOiBj
aGVhdC1ibG9jawpjaGVhdC1ibG9jazoKCSMKCSMgQ09ERS1CTE9DSwoJIwoJIyAgYGBgIQoJ
IyAgcHJpbnQoIlRoZSBjb2RlIGlzIHNob3duIGluIHRoZSBkb2N1bWVudCwiKQoJIyAgcHJp
bnQoImJ1dCBwcmludGVkIHRleHQgaXMgc2hvd24gaW4gY29uc29sZS4iKQoJIyAgXygiVGhp
cyB0ZXh0IGlzIGluc2VydGVkIGludG8gTWFya2Rvd24iLCBfKQoJIyAgXyhfLCAib3V0cHV0
IGFuZCBhcHBlbmRlZCB0byBwcmV2IGxpbmUuIikKCSMgIF8oMSwgMiwgMywgWzQsIDUsXSwg
ImEiLCAiYiIsIHNlcD0iLCAiKQoJIyAgX18oIiIiCgkjICAgICAqIFRoaXMgaXMgY3JvcHBl
ZCBhbmQgc2hpZnRlZC4KCSMgICAgICogVGhpcyBpcyBjcm9wcGVkIGFuZCBzaGlmdGVkLgoJ
IyAgICAgKiBUaGlzIGlzIGNyb3BwZWQgYW5kIHNoaWZ0ZWQuCgkjICAiIiIsIGNyb3A9VHJ1
ZSwgc2hpZnQ9KQoJIyAgYGBgCgkjCgkjICBgYGAhIQoJIyAgcHJpbnQoIlRoZSBjb2RlIGlz
IGhpZGRlbiBpbiB0aGUgZG9jdW1lbnQsIikKCSMgIHByaW50KCJidXQgcHJpbnRlZCB0ZXh0
IGlzIHNob3duIGluIGNvbnNvbGUuIikKCSMgIGltcG9ydCBzeXMKCSMgIHN5cy5wYXRoLmFw
cGVuZCgiLiIpCgkjICBpbXBvcnQgbXltb2R1bGUKCSMgIG5ld192YXJzID0geyJhIjogMSwg
ImIiOiAyfQoJIyAgZ2xvYmFscygpLnVwZGF0ZShuZXdfdmFycykKCSMgIGBgYAoJIwoKLlBI
T05ZOiBjaGVhdC1pbmxpbmUKY2hlYXQtaW5saW5lOgoJIwoJIyBJTkxJTkUtRVhQUkVTU0lP
TgoJIwoJIyAgVGhpcyBpcyBhIFBhcmFncmFwaCB3aXRoIGFuIGAhPGV4cHJlc3Npb24+YC4K
CSMgIFRoaXMgYFwhPGV4cHJlc3Npb24+YCBpcyBub3QgcGFyc2VkLgoJIwoJIyAgVGhlIGFs
cGhhYmV0OiBgIVtjaHIob3JkKCJBIikraSBmb3IgaSBpbiByYW5nZSg3KV1gLgoJIyAgVGhl
IGFscGhhYmV0OiBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnXS4KCSMKCSMg
IEEgbmljZSBsaXN0OiBgISIsICIuam9pbihsaXN0KHJhbmdlKDEsIDExKSkpYC4KCSMgIEEg
bmljZSBsaXN0OiAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMC4KCSMKCi5QSE9OWTog
Y2hlYXQtZm9ybWF0CmNoZWF0LWZvcm1hdDoKCSMKCSMgRk9STUFUVEVEIE9VVFBVVAoJIwoJ
IyAgYGBgISEKCSMgIHZhbHVlID0gZmxvYXQoMS4yMzQ1KQoJIyAgYGBgCgkjICBUaGUgbnVt
YmVyIGAhdmFsdWVgIGlzIG5vdCBmb3JtYXR0ZWQuCgkjICBUaGUgbnVtYmVyIDEuMjM0NSBp
cyBub3QgZm9ybWF0dGVkLgoJIwoJIyAgVGhlIG51bWJlciBgIXZhbHVlOi4yZmAgaXMgZm9y
bWF0dGVkLgoJIyAgVGhlIG51bWJlciAxLjIzIGlzIGZvcm1hdHRlZC4KCSMKCSMgIFRoaXMg
YFwhPHZhcmlhYmxlPmAgaXMgbm90IHBhcnNlZC4KCSMKCi5QSE9OWTogY2hlYXQtaW5jbHVk
ZQpjaGVhdC1pbmNsdWRlOgoJIwoJIyBJTkNMVURFLVNUQVRFTUVOVAoJIwoJIyAgISEhIHBh
dGgvaW5jbC5tZGkgRkxBR1MKCSMgIFwhISEgVGhpcyBpcyBub3QgcGFyc2VkIGFzIGluY2x1
ZGUgc3RhdGVtZW50LgoJIwoJIyBGbGFnczoKCSMgICogYXV4ICAgICAgb25seSBNYWtlZmls
ZSBkZXBlbmRlbmN5LCBubyBpbmNsdWRlCgkjICAqIG5vZGVwICAgIGluY2x1ZGUgd2l0aG91
dCBNYWtlZmlsZSBkZXBlbmRlbmN5CgkjICAqIHJhdyAgICAgIGRvIG5vdCBwYXJzZSBmaWxl
LCBpbmNsdWRlIGFzLWlzCgkjICAqIG5vbWV0YSAgIGlnbm9yZSBhbmQgc2tpcCBhbGwgbWV0
YSBkYXRhCgkjICAqIG5vYm9keSAgIGlnbm9yZSBhbmQgc2tpcCBNYXJrZG93biBib2R5Cgkj
ICAqIG5vbWFya3kgIG5vIHByb2Nlc3Npbmcgb2YgbWFya3kgbWFya3VwCgkjICAqIGNvZGUg
ICAgIGluY2x1ZGUgb25seSB0aGUgaGlkZGVuIGNvZGUgYmxvY2tzCgkjICAqIGNvZGUhICAg
IGluY2x1ZGUgb25seSBjb2RlLCBidXQgYWxsIGNvZGUgYmxvY2tzCgkjICAqICMrTiAgICAg
IGluY3JlYXNlIGxldmVsIG9mIEFUWCBoZWFkaW5ncyBieSBOCgkjICAqID4+TiAgICAgIGlu
Y3JlYXNlIGluZGVudGF0aW9uIGxldmVsIGJ5IE4gdGFicwoJIyAgKiA+TiAgICAgICBpbmNy
ZWFzZSBpbmRlbnRhdGlvbiBsZXZlbCBieSBOIHNwYWNlcwoJIwoKLlBIT05ZOiBjaGVhdC1t
ZXRhCmNoZWF0LW1ldGE6CgkjCgkjIE1FVEEgREFUQQoJIwoJIyAgLS0tCgkjICB0aXRsZTog
RG9jdW1lbnQKCSMgIGRhdGU6IFRvZGF5CgkjICBhdXRob3I6IE5hbWUKCSMgIGxpbmstY2l0
YXRpb25zOiB0cnVlCgkjICBiaWJsaW9ncmFwaHk6IGJpYmwuYmliCgkjICBmb250c2l6ZS0t
cGRmOiAxMXB0CgkjICBmb250c2l6ZS0taHRtbDogMTBwdAoJIyAgaGVhZGVyLWluY2x1ZGVz
LS1wZGY6ID4KCSMgICAgIFx1c2VwYWNrYWdley4uLn0KCSMgICAgIFx1c2VwYWNrYWdley4u
Ln0KCSMgIGhlYWRlci1pbmNsdWRlcy0taHRtbDogPgoJIyAgICAgPHNjcmlwdCAuLi4+Cgkj
ICAgICA8bGluayAuLi4+CgkjICAgICA8c3R5bGUgLi4uPgoJIyAgeG5vcy1jbGV2ZXJlZjog
dHJ1ZQoJIyAgeG5vcy1jYXBpdGFsaXNlOiB0cnVlCgkjICAtaGlkZGVuX2ZpZWxkOiB0ZXh0
CgkjICAtLS0KCSMKCi5QSE9OWTogY2hlYXQtbGluawpjaGVhdC1saW5rOgoJIwoJIyBGT1JN
QVQgTElOSwoJIwoJIyAgW0xpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5odG1sKQoJ
IyAgW0xpbmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS5wZGYpCgkjICBbRm9ybWF0IExp
bmsgdG8gRG9jdW1lbnRdKHBhdGgvdG8vZmlsZS4/Pz8pCgkjICBUaGlzIGlzIG5vdCBwYXJz
ZWQgYXMgZm9ybWF0IGxpbmsgLlw/Pz8KCSMKCi5QSE9OWTogY2hlYXQtY29kZQpjaGVhdC1j
b2RlOgoJIwoJIyBGT1JNQVQgQ09ERQoJIwoJIyAgIGBgYCEKCSMgICB0ZXN0MSA9IGZtdGNv
ZGUoaHRtbD0iSFRNTCIsIHBkZj0iUERGIikKCSMgICBjbGFzcyBUZXN0MihmbXRjb2RlKToK
CSMgICAgICAgZGVmIGh0bWwoc2VsZik6CgkjICAgICAgICAgICBfXygiIiIKCSMgICAgICAg
ICAgICAgICBUaGlzIGlzIEhUTUwyIQoJIyAgICAgICAgICAgICAgIFRoaXMgaXMgSFRNTDIh
CgkjICAgICAgICAgICAgICAgVGhpcyBpcyBIVE1MMiEKCSMgICAgICAgICAgICIiIikKCSMg
ICAgICAgZGVmIHBkZihzZWxmKToKCSMgICAgICAgICAgIHJldHVybiAiIiIKCSMgICAgICAg
ICAgICAgICBUaGlzIGlzIFx7UERGMlx9IQoJIyAgICAgICAgICAgICAgIFRoaXMgaXMgXHtQ
REYyXH0hCgkjICAgICAgICAgICAgICAgVGhpcyBpcyBce1BERjJcfSEKCSMgICAgICAgICAg
ICIiIgoJIyAgIHRlc3QyID0gVGVzdDIoKQoJIyAgIGBgYAoJIyAgIFJ1biBGb3JtYXQgQ29k
ZSBgIXRlc3QxKClgIGFuZCBgIXRlc3QyKClgLgoJIyAgIGBcIXRlc3QxKClgIGFuZCBgXCF0
ZXN0MigpYCBhcmUgbm90IHBhcnNlZC4KCSMKCSMgICBgYGAhCgkjICAgICAgIF8odGVzdDEo
KSkKCSMgICAgICAgXyh0ZXN0MigpKQoJIyAgIGBgYAoJIwoKIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
CgouUEhPTlk6IGFsbAphbGw6ICQoSFRNTCkgJChQREYpCgouUEhPTlk6IGFsbC1tawphbGwt
bWs6ICQoTUspCgouUEhPTlk6IGFsbC1tZAphbGwtbWQ6ICQoTUQpCgouUEhPTlk6IGFsbC1s
aW5rCmFsbC1saW5rOiAkKE1ESFRNTCkgJChNRFBERikKCi5QSE9OWTogYWxsLWh0bWwKYWxs
LWh0bWw6ICQoSFRNTCkKCi5QSE9OWTogYWxsLXBkZgphbGwtcGRmOiAkKFBERikKCi5QSE9O
WTogY2xlYW4KY2xlYW46CglybSAtcmYgLi9idWlsZC8qIC4vaHRtbC8qIC4vcGRmLyoKCi5Q
SE9OWTogaHR0cGQKaHR0cGQ6CgljZCBodG1sICYmIHB5dGhvbiAtbSBodHRwLnNlcnZlcgoK
LlBIT05ZOiBzY2FuCnNjYW46IGFsbC1tawoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpidWlsZC8l
Lm1kLm1rOiBtZC8lLm1kCglta2RpciAtcCAkKHNoZWxsIGRpcm5hbWUgIiRAIikKCS4vbWFy
a3kucHkgLS1ta2RlcCAtLW1hcmt5PSIkPCIKCmJ1aWxkLyUubWQ6IGJ1aWxkLyUubWQubWsK
CW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJreS5weSAtLW1kPSIkQCIK
CmJ1aWxkLyUuaHRtbC5tZDogYnVpbGQvJS5tZAoJbWtkaXIgLXAgJChzaGVsbCBkaXJuYW1l
ICIkQCIpCgkuL21hcmt5LnB5IC0tbGluayBodG1sIC0tbWQ9IiQ8IgoKYnVpbGQvJS5wZGYu
bWQ6IGJ1aWxkLyUubWQKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFtZSAiJEAiKQoJLi9tYXJr
eS5weSAtLWxpbmsgcGRmIC0tbWQ9IiQ8IgoKaHRtbC8lLmh0bWw6IGJ1aWxkLyUuaHRtbC5t
ZAoJbG4gLXNuZiAuLi9kYXRhIGJ1aWxkL2RhdGEKCW1rZGlyIC1wICQoc2hlbGwgZGlybmFt
ZSAiJEAiKQoJbG4gLXNuZiAuLi9kYXRhIGh0bWwvZGF0YQoJcGFuZG9jICIkPCIgLS1maWx0
ZXIgcGFuZG9jLXhub3MgLS1jaXRlcHJvYyAtLWZyb209bWFya2Rvd24rcmF3X2h0bWwrJChN
REVMKSAtLXRvPWh0bWw1IC0tb3V0cHV0PSIkQCIgLS1yZXNvdXJjZS1wYXRoPSIuL2J1aWxk
LyIgLS1zZWxmLWNvbnRhaW5lZCAtLXRhYmxlLW9mLWNvbnRlbnRzIC0tbnVtYmVyLXNlY3Rp
b25zIC0tY29sdW1ucz0xCgpwZGYvJS5wZGY6IGJ1aWxkLyUucGRmLm1kCglta2RpciAtcCAk
KHNoZWxsIGRpcm5hbWUgIiRAIikKCWxuIC1zbmYgLi4vZGF0YSBidWlsZC9kYXRhCglsbiAt
c25mIC4uL2RhdGEgcGRmL2RhdGEKCXBhbmRvYyAiJDwiIC0tZmlsdGVyIHBhbmRvYy14bm9z
IC0tY2l0ZXByb2MgLS1mcm9tPW1hcmtkb3duK3Jhd190ZXgrJChNREVMKSAtLXRvPWxhdGV4
IC0tb3V0cHV0PSIkQCIgLS1yZXNvdXJjZS1wYXRoPSIuL2J1aWxkLyIgLS10YWJsZS1vZi1j
b250ZW50cyAtLW51bWJlci1zZWN0aW9ucyAtLWNvbHVtbnM9MSAtLXBkZi1lbmdpbmU9eGVs
YXRleAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpQU0VVRE89aGVscCB0cmVlIGNoZWF0IGNsZWFu
IGh0dHBkIHNjYW4KCklOQ0ZMQUc9MAoKZGVmaW5lIExPT1BCT0RZCiAgaWZlcSAoJCQoZmls
dGVyICQkKFBTRVVETyksJCQoRykpLCkKICAgIElOQ0ZMQUc9MQogIGVuZGlmCmVuZGVmCgpp
Zm5lcSAoJChNQUtFQ01ER09BTFMpLCkKICAkKGZvcmVhY2ggRywkKE1BS0VDTURHT0FMUyks
JChldmFsICQoTE9PUEJPRFkpKSkKZW5kaWYKCmlmZXEgKCQoSU5DRkxBRyksMSkKICAtaW5j
bHVkZSAkKE1LKQplbmRpZgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCg==
'''
pack_marky_md = '''
LS0tCnRpdGxlOiBtYXJreSBEb2N1bWVudGF0aW9uCmF1dGhvcjogbGVobWFubjcKZGF0ZTog
MjAyMS0wOS0wOQpsaW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IGRhdGEvbWFy
a3kuYmliCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlu
a3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHls
ZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBi
b3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4
bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKZmlnc2l6ZTogWzEwLDhdCmZp
Z2RwaTogMzAwCnZlcnNpb246IHVuZGVmaW5lZAoKLS0tCiEhISAuLi9NYWtlZmlsZSBhdXgK
ISEhIC4uL21hcmt5LnB5IGF1eApgYGAhIQoJaW1wb3J0IHN1YnByb2Nlc3MKCU1EID0gIk1h
cmtkb3duIgoJTSA9ICJgbWFya3lgIgoJTUYgPSAiYE1ha2VmaWxlYCIKCU1QID0gImBtYXJr
eS5weWAiCglNcCA9ICJtYXJreS5weSIKCVAgPSAiYHBhbmRvY2AiCglOVSA9ICJgbnVtcHlg
IgoJUEwgPSAiYG1hdHBsb3RsaWJgIgoJUiA9ICJSTWFya2Rvd24iCglRID0gIlF1YXJ0byIK
CUJUID0gImAiCglQMT0gImBfKClgIgoJUDI9ICJgX18oKWAiCgl2ZXJzaW9uID0gc3VicHJv
Y2Vzcy5jaGVja19vdXRwdXQoWyJweXRob24iLCAibWFya3kucHkiLAoJCSItLXZlcnNpb24i
XSkuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkKYGBgCgotLS0KCj4gKipBYnN0cmFjdCoqIC0t
IGAhTWAgaXMgYSBwcmVwcm9jZXNzb3IgZm9yIGAhTURgIHVzaW5nIFB5dGhvbi4KPiBgIU1g
IGlzIGluc3BpcmVkIGJ5IFtwYW5kb2NdKGh0dHBzOi8vd3d3LnBhbmRvYy5vcmcvKSwKPiBb
YCFSYF0oaHR0cHM6Ly9ybWFya2Rvd24ucnN0dWRpby5jb20vKSwgW2AhUWBdKGh0dHBzOi8v
cXVhcnRvLm9yZy8pLgo+IFRoaXMgZG9jdW1lbnQgaXMgY3JlYXRlZCB1c2luZyBgIU1gIChW
ZXJzaW9uIGAhdmVyc2lvbmApIGFuZAo+IGNvbnRhaW5zIGV4YW1wbGVzIHdoaWNoIGlsbHVz
dHJhdGUgdGhlIGdlbmVyYXRpb24gb2YKPiBkb2N1bWVudCBjb250ZW50IGZvciBgaHRtbGAg
YW5kIGBwZGZgIGFuZCB0aGUgZHluYW1pY2FsIGFkanVzdG1lbnQKPiBvZiBgIU1EYCB0ZXh0
IGR1cmluZyBwcmVwcm9jZXNzaW5nIGJhc2VkIG9uIGBweXRob25gIGNvZGUuCj4gVGhlIGZ1
bGwgcmF3IGAhTWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVudGF0aW9uIGFwcGVuZGVk
IGF0Cj4gdGhlIGVuZC4gVGhlIGBtYXJreWAgc291cmNlIGNvZGUgb2YgdGhpcyBkb2N1bWVu
dCBjYW4gYmUgcmVhZAo+IFtoZXJlXShtYXJreS1zcmMuPz8/KS4KPiBGb3IgbW9yZSBpbmZv
cm1hdGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0
cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KSwKPiBbYG1hcmt5YCBxdWlja3N0YXJ0
XShxdWlja3N0YXJ0Lj8/Pykgb3IgdGhlCj4gc2ltcGxlIFtgbWFya3lgIGV4YW1wbGVdKGV4
YW1wbGUuPz8/KS4KCgotLS0KCiMgSW50cm9kdWN0aW9uCgpgIU1gIGlzIGEgYCFNRGAgcHJl
cHJvY2Vzc29yIHdoaWNoIHRyYW5zZm9ybXMgYSBgIU1EYCBkb2N1bWVudAp1c2luZyBweXRo
b24uIGAhTWAgaW1wbGVtZW50cyBuZXcgbWFya3VwIHdoaWNoIGNvbnRyb2xzIHRoZSBleGVj
dXRpb24Kb2YgcHl0aG9uIGNvZGUgYW5kIHRoZSBnZW5lcmF0aW9uIGFuZCBtYW5pcHVsYXRp
b24gb2YgYCFNRGAgdGV4dC4KVGhlIGAhTWAgcXVpY2tzdGFydCBjYW4gYmUgZm91bmQgW2hl
cmVdKHF1aWNrc3RhcnQuPz8/KSBhbmQgYSB2ZXJ5CnNpbXBsZSBgIU1gIGV4YW1wbGUgY2Fu
IGJlIGZvdW5kIFtoZXJlXShleGFtcGxlLj8/PykuCgpgIU1gIG9ubHkgZGVwZW5kcyBvbiBg
IVBgIGFuZCBgcHl5YW1sYC4gYCFQYCBpcyB1c2VkIGZvciByZW5kZXJpbmcKdGhlIGAhTURg
IGludG8gYGh0bWxgIGFuZCBgcGRmYC4gYCFQYCBzdXBwb3J0cyB2YXJpb3VzIGAhTURgCmV4
dGVuc2lvbnMgYWxsb3dpbmcgZm9yIHNjaWVudGlmaWMgd3JpdGluZyB1c2luZyBlcXVhdGlv
bnMsIGZpZ3VyZXMsCnRhYmxlcywgY2l0YXRpb25zIGFuZCBjb3JyZXNwb25kaW5nIHJlZmVy
ZW5jaW5nIG1lY2hhbmlzbSBmb3IgdGhlIGxhdHRlci4KYHB5eWFtbGAgaXMgdXNlZCBmb3Ig
cGFyc2luZyBtZXRhIGRhdGEgaW4gdGhlIGZyb250IG1hdHRlciBvZiB0aGUKYCFNRGAgdGV4
dCBpZiBpdCBpcyBwcmVzZW50LgoKV29ya2Zsb3cgZm9yIGNyZWF0aW5nIGBodG1sYCBvciBg
cGRmYCB1c2luZyBgIU1gCgoxLiB1c2VyIHdyaXRlcyBhIGAhTURgIHRleHQgZmlsZSBhbmQg
cGxhY2VzIGl0IGluIGBtZC8qLm1kYApkaXJlY3Rvcnkgd2l0aCB0aGUgZXh0ZW5zaW9uIGAu
bWRgLiB0aGUgYCFNRGAgdGV4dCBjb250YWlucwpzcGVjaWFsIGAhTWAgbWFya3VwIHdoaWNo
IGV4ZWN1dGVzIHB5dGhvbiBjb2RlIGFuZCBtYW5pcHVsYXRlcwp0aGUgYCFNRGAgdGV4dC4K
CjIuIGAhTWAgdHJhbnNmb3JtcyB0aGUgZmlsZXMgaW4gYG1kLyoubWRgIGludG8gcmVndWxh
ciBgIU1EYCB0ZXh0CmFuZCBwbGFjZXMgdGhlIHRyYW5zZm9ybWVkIGZpbGVzIGluIGBidWls
ZC8qLm1kYC4gVGhlIHRyYW5zZm9ybWVkIHRleHQKb25seSBjb250YWlucyByZWd1bGFyIGAh
TURgLCBhbmQgcGxhY2Vob2xkZXJzIGZvciBmb3JtYXQgZGVwZW5kZW50Cm91dHB1dCBmb3Ig
YGh0bWxgIGFuZCBgcGRmYC4KCjMuIGJlZm9yZSByZW5kZXJpbmcgYCFNYCByZXBsYWNlcyBw
bGFjZWhvbGRlcnMgZm9yIGZvcm1hdCBkZXBlbmRlbnQKb3V0cHV0IHdpdGggY29udGVudCBj
cmVhdGluZyBhIHRlbXBvcmFyeSBmaWxlIHdoaWNoIG9ubHkgY29udGFpbnMKcmVndWxhciBg
IU1EYCB0ZXh0IGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cyBhY2NvcmRpbmcgdG8K
YCFQYCBgIU1EYCBzcGVjaWZpY2F0aW9uLgoKNC4gdGhlIHJlZ3VsYXIgYCFNRGAgdGV4dCBp
biB0aGUgZmlsZXMgYGJ1aWxkLyoubWRgIGlzIHJlbmRlcmVkIGludG8KYGh0bWxgIGFuZCBg
cGRmYCB1c2luZyBgIVBgLgoKVGhlIHRocmVlIHN0ZXBzIGFyZSBpbXBsZW1lbnRlZCBpbiBg
IU1QYCBhbmQgYSBgIU1GYC4gVGhlCmZvbGxvd2luZyBkb2N1bWVudCBkZXNjcmliZXMgdGhl
IHNwZWNpYWwgYCFNYCBtYXJrdXAgYW5kIHNob3dzCmhvdyB0byB1c2UgYCFNUGAgYW5kIHRo
ZSBgIU1GYC4KCi0tLQoKIyBSZWxhdGVkIFdvcmsgeyNzZWM6cmVsYXRlZH0KCkZvciBzY2ll
bnRpZmljIHJlcG9ydGluZyBhbmQgd3JpdGluZyB1c3VhbGx5IHR5cGVzZXR0aW5nIHN5c3Rl
bXMgb3IKY29tcGxpY3RlZCBXWVNJV1lHIGVkaXRvcnMgYXJlIHVzZWQuIEluIG9yZGVyIHRv
IHNpbXBsaWZ5IHRoZSB3cml0aW5nCmRpZmZlcmVudCBhcHByb2FjaGVzIGFuZCBmcmFtZXdv
cmtzIGhhdmUgYmVlbiBkZXZlbG9wZWQuCgoqIFtgIVBgXShodHRwczovL3d3dy5wYW5kb2Mu
b3JnLyksCiogW2AhUmBdKGh0dHBzOi8vcm1hcmtkb3duLnJzdHVkaW8uY29tLykKKiBbUXVh
cnRvXShodHRwczovL3F1YXJ0by5vcmcvKQoqIFtTY2llbnRpZmljIGAhTURgXShodHRwczov
L2phYW50b2xsYW5kZXIuY29tL3Bvc3Qvc2NpZW50aWZpYy13cml0aW5nLXdpdGgtbWFya2Rv
d24vKQoqIFtUZWNobmljYWwgYCFQYF0oaHR0cHM6Ly9sZWUtcGhpbGxpcHMub3JnL3BhbmZs
dXRlLWdudXBsb3QvKQoKQWxsIG9mIHRob3NlIGFwcHJvYWNoZXMgdXNlIGAhUGAgYXMgYW4g
dW5kZXJseWluZyBmcmFtZXdvcmsgZm9yIGRvY3VtZW50CmNvbnZlcnNpb24uIGAhUGAgaXMg
YSBwb3dlcmZ1bCBmcmFtZXdvcmsgZm9yIGNvbnZlcnNpb24gYmV0d2VlbiBkaWZmZXJlbnQK
ZG9jdW1lbnQgZm9ybWF0cyBpbmNsdWRpbmcgYCFNYCwgYGh0bWxgIGFuZCBgcGRmYC4gYCFQ
YCBpbXBsZW1lbnRzIGFuCm93biBpbnRlcm5hbCBBU1QsIGluIHdoaWNoIGRpZmZlcmVudCBk
b2N1bWVudCBmb3JtYXRzIGNhbiBiZSBpbXBvcnRlZCBhbmQKZXhwb3J0ZWQuIFVzaW5nIHRo
aXMgaW50ZXJtZWRpYXRlIGRvY3VtZW50IHJlcHJlc2VudGF0aW9uLCBgIVBgIGFsbG93cwp0
byBtb2RpZnkgZG9jdW1lbnQgdXNpbmcgZmlsdGVycywgd2hpY2ggb3BlcmF0ZSBvbiB0aGUg
QVNULiBGaWx0ZXJzCmNhbiBiZSB3cml0dGVuIGluIFtgaGFza2VsbGBdKGh0dHBzOi8vcGFu
ZG9jLm9yZy9maWx0ZXJzLmh0bWwpLApbYGx1YWBdKGh0dHBzOi8vcGFuZG9jLm9yZy9sdWEt
ZmlsdGVycy5odG1sKSBhbmQKW2BweXRob25gXShodHRwczovL3BhbmRvYy5vcmcvZmlsdGVy
cy5odG1sI2J1dC1pLWRvbnQtd2FudC10by1sZWFybi1oYXNrZWxsKS4KCldoZXJlIGFzIGAh
UmAgYW5kIGAhUWAgYXJlIGludGVncmF0ZWQgZnJhbWV3b3Jrcywgd2hpY2ggYWRkaXRpb25h
bGx5CmRlcGVuZCBvbiBga25pdHJgLCBgUlN0dWRpb2AsIGBKdXB5dGVyYCwgYCFNYCBkZXBl
bmRzIG9uIGAhUGAgYW5kIGBweXlhbWxgCm9ubHkuIGAhTWAgbmF0aXZlbHkgb25seSBzdXBw
b3J0cyBleGVjdXRhYmxlIHB5dGhvbiBjb2RlIGJsb2NrcywgaG93ZXZlciwKb3RoZXIgbGFu
Z3VhZ2VzIGNhbiBiZSBleGVjdXRlZCB1c2luZyB3cmFwcGVycywgd2hpY2ggYXJlIGF2YWls
YWJsZSBmb3IKb3RoZXIgbGFuZ3VhZ2VzLgoKLS0tCgojIGAhTWAgRmVhdHVyZXMgeyNzZWM6
ZmVhdHVyZXN9CgpgIU1gIGltcGxlbWVudHMgZm9sbG93aW5nIGZlYXR1cmVzIHVzaW5nIGFu
IHNpbXBsZSBgIU1EYC1zdHlsZSBzeW50YXguCgoxLiByZWFkIGAhTURgIG1ldGEgZGF0YSBm
cm9tIGZyb250IG1hdHRlciwKc2VlIEBzZWM6bWV0YWRhdGEKYGBgbWQKCS0tLQoJCTxrZXk+
OiA8dmFsdWU+CgktLS0KYGBgCgoyLiBleGVjdXRlIGFuZCBoaWRlL3Nob3cgcHl0aG9uIGNv
ZGUgYmxvY2tzIGluc2lkZSBgIU1EYCB0ZXh0LApzZWUgQHNlYzpibG9jawpgYGBtZAoJYCFC
VCozYCEKCQk8cHl0aG9uX2NvZGVfc2hvd24+CglgIUJUKjNgCgoJYCFCVCozYCEhCgkJPHB5
dGhvbl9jb2RlX2hpZGRlbj4KCWAhQlQqM2AKYGBgCgozLiBnZW5lcmF0ZSBgIU1EYCB0ZXh0
IHVzaW5nIHB5dGhvbiBjb2RlLCBzZWUgQHNlYzptZHByaW50CmBgYG1kCglgIUJUKjNgIQoJ
CV8oIjxtYXJrZG93bl90ZXh0PiIpCgkJX18oIiIiCgkJCTxtYXJrZG93bl90ZXh0PgoJCQk8
bWFya2Rvd25fdGV4dD4KCQkJPG1hcmtkb3duX3RleHQ+CgkJIiIiKQoJYCFCVCozYApgYGAK
CjQuIGZvcm1hdCBvdXRwdXQgb2YgcHl0aG9uIHZhcmlhYmxlcyBpbnRvIGAhTURgIHRleHQs
CnNlZSBAc2VjOmZvcm1hdApgYGBtZAoJT3V0cHV0IGludG8gdGV4dDogYFwhPHB5dGhvbl92
YXJpYWJsZT5gCmBgYAoKNS4gb3V0cHV0IHRoZSByZXN1bHQgb2YgcHl0aG9uIGV4cHJlc3Np
b25zIGludG8gYCFNRGAgdGV4dCwKc2VlIEBzZWM6aW5saW5lCmBgYG1kCglPdXRwdXQgaW50
byB0ZXh0OiBgXCE8cHl0aG9uX2V4cHJlc3Npb24+YApgYGAKCjYuIGluY2x1ZGUgYCFNRGAg
dGV4dCwgbWFrZSBkZXBlbmRlbmNpZXMgYW5kIGZvcndhcmQgbWV0YSBkYXRhLApzZWUgQHNl
YzppbmNsdWRlIGFuZCAhQHNlYzppbmNtZXRhLgpgYGBtZAoJISEhIGluY2x1ZGVfZmlsZS5t
ZGkKYGBgCgo3LiBmb3JtYXQgbGlua3MgaW4gYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudHMg
Zm9yCnJlZmVyZW5jaW5nIGV4dGVybmFsIGRvY3VtZW50cyBvZiB0aGUgc2FtZSBmb3JtYXQs
CnNlZSBAc2VjOmZvcm1saW5rLgpgYGBtZAoJW0Zvcm1hdCBMaW5rIHRvIGh0bWwvcGRmIGRv
Y3VtZW50XShwYXRoL3RvL2ZpbGUuXD8/PykKYGBgCgo4LiB1c2UgZm9ybWF0IGNvZGVzIGlu
IG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMKY29kZSBpbiBgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cywKc2VlIEBzZWM6Zm9ybWNvZGUuCmBgYG1kCglgIUJUKjNgIQoJCWNs
YXNzIG15Zm10KGZtdGNvZGUpOgoJCQlkZWYgaHRtbChzZWxmKToKCQkJCV8oIjxIVE1MX0NP
REU+IikKCQkJCXJldHVybiAiIiIKCQkJCQk8TU9SRV9DT0RFPgoJCQkJCTxNT1JFX0NPREU+
CgkJCQkJPE1PUkVfQ09ERT4KCQkJCSIiIgoJCQlkZWYgcGRmKHNlbGYpOgoJCQkJX18oIiIi
CgkJCQkJe1RFWF9DT0RFfQoJCQkJCXtURVhfQ09ERX0KCQkJCQl7VEVYX0NPREV9CgkJCQki
IiIpCgkJZm10YyA9IG15Zm10KCkKCWAhQlQqM2AKCglGb3JtYXQgZGVwZW5kZW50IG91dHB1
dDogYFwhZm10YygpYApgYGAKCi0tLQoKIyBTY2llbnRpZmljIFdyaXRpbmcgaW4gYCFNRGAg
eyNzZWM6cGFubWR9CgpbYCFNRGBdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNw
YW5kb2NzLW1hcmtkb3duKSBpcyBhIG1hcmt1cApsYW5ndWFnZSBmb3IgdGVjaG5pY2FsIHdy
aXRpbmcsIHdpdGggZW1waGFzaXMgb24gcmVhZGFiaWxpdHkuIGAhTURgCmNhbiBiZSByZW5k
ZXJlZCBpbiBtYW55IGZvcm1hdHMgaW5jbHVkaW5nIGBodG1sYCBhbmQgYHBkZmAgYnkgdXNp
bmcKW2AhUGBdKGh0dHBzOi8vcGFuZG9jLm9yZy8pIGZvciBleGFtcGxlLgoKVXNpbmcgdmFy
aW91cyBgIU1EYCBleHRlbnNpb25zIG9mIGAhUGAgYSBzdWZmaWNpZW50IHN0cnVjdHVyZSBm
b3IKd3JpdGluZyBzY2llbnRpZmljIGRvY3VtZW50cyBjYW4gYmUgcmVmbGVjdGVkIHVzaW5n
IGAhTURgIHN5bnRheC4KYCFNYCB1c2VzIHRoZSBmb2xsb3dpbmcgYCFQYCBgIU1EYCBleHRl
bnNpb25zLgoqIHBhcnNpbmcgZXh0ZW5zaW9ucwoJKiBbYWxsX3N5bWJvbHNfZXNjYXBhYmxl
XShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWFsbF9zeW1ib2xz
X2VzY2FwYWJsZSkKCSogW2ludHJhd29yZF91bmRlcnNjb3Jlc10oaHR0cHM6Ly9wYW5kb2Mu
b3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbnRyYXdvcmRfdW5kZXJzY29yZXMpCgkqIFtl
c2NhcGVkX2xpbmVfYnJlYWtzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0
ZW5zaW9uLWVzY2FwZWRfbGluZV9icmVha3MpCgkqIFtzcGFjZV9pbl9hdHhfaGVhZGVyXSho
dHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXNwYWNlX2luX2F0eF9o
ZWFkZXIpCgkqIFtsaXN0c193aXRob3V0X3ByZWNlZGluZ19ibGFua2xpbmVdKGh0dHBzOi8v
cGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tbGlzdHNfd2l0aG91dF9wcmVjZWRp
bmdfYmxhbmtsaW5lKQoqIHN0eWxpbmcgZXh0ZW5zaW9ucwoJKiBbaW5saW5lX2NvZGVfYXR0
cmlidXRlc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbmxp
bmVfY29kZV9hdHRyaWJ1dGVzKQoJKiBbc3RyaWtlb3V0XShodHRwczovL3BhbmRvYy5vcmcv
TUFOVUFMLmh0bWwjZXh0ZW5zaW9uLXN0cmlrZW91dCkKKiBzdHJ1Y3R1cmluZyBleHRlbnNp
b25zCgkqIFt5YW1sX21ldGFkYXRhX2Jsb2NrXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjZXh0ZW5zaW9uLXlhbWxfbWV0YWRhdGFfYmxvY2spCgkqIFtwaXBlX3RhYmxlc10o
aHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1waXBlX3RhYmxlcykK
CSogW2xpbmVfYmxvY2tzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLWxpbmVfYmxvY2tzKQoJKiBbaW1wbGljaXRfZmlndXJlc10oaHR0cHM6Ly9wYW5kb2Mu
b3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1pbXBsaWNpdF9maWd1cmVzKQoJKiBbYWJicmV2
aWF0aW9uc10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1hYmJy
ZXZpYXRpb25zKQoJKiBbaW5saW5lX25vdGVzXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFM
Lmh0bWwjZXh0ZW5zaW9uLWlubGluZV9ub3RlcykKKiBjb2RlIGluamVjdGlvbgoJKiBbcmF3
X2h0bWxdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tcmF3X2h0
bWwpCgkqIFtyYXdfdGV4XShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5z
aW9uLXJhd190ZXgpCgpgIVBgIHN1cHBvcnRzCltlcXVhdGlvbnNdKGh0dHBzOi8vcGFuZG9j
Lm9yZy9NQU5VQUwuaHRtbCNleHRlbnNpb24tdGV4X21hdGhfZG9sbGFycykKcmVuZGVyZWQg
aW5saW5lIGFuZCBzaW5nbGUtbGluZSBpbiB0ZXgtc3R5bGUgdXNpbmcgYCQuLi4kYCBhbmQg
YCQkLi4uJCRgLApbYmlibGlvZ3JhcGh5XShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0
bWwjY2l0YXRpb25zKQp1c2luZyB0aGUgYC0tY2l0ZXByb2NgIG9wdGlvbiwKW3NlY3Rpb24g
bnVtYmVyaW5nXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjZXh0ZW5zaW9uLWhl
YWRlcl9hdHRyaWJ1dGVzKQp1c2luZyB0aGUgYC0tbnVtYmVyLXNlY3Rpb25zYCBvcHRpb24g
YW5kClt0YWJsZSBvZiBjb250ZW50c10oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1s
I29wdGlvbi0tdG9jKQp1c2luZyB0aGUgYC0tdGFibGUtb2YtY29udGVudHNgIG9wdGlvbi4K
CmAhUGAgc3VwcG9ydHMgW2B4bm9zYF0oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFu
ZG9jLXhub3MpIGZpbHRlcnMKZm9yIHJlZmVyZW5jaW5nIGRvY3VtZW50IGNvbnRlbnQgbGlr
ZQpbZmlndXJlc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1Y2svcGFuZG9jLWZpZ25vcyN1
c2FnZSksCltlcXVhdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRvYy1l
cW5vcyN1c2FnZSksClt0YWJsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3BhbmRv
Yy10YWJsZW5vcyN1c2FnZSksCltzZWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3RvbWR1
Y2svcGFuZG9jLXNlY25vcyN1c2FnZSkKYnkgdXNpbmcgdGhlIGAtLWZpbHRlciBwYW5kb2Mt
eG5vc2Agb3B0aW9uLgpgeG5vc2AgaW50ZWdyYXRlcyBjbGV2ZXIgcmVmZXJlbmNlcywgd2hp
Y2ggbWVhbnMgIkZpZy4iLCAiU2VjLiIsICJFcS4iCmFuZCAiVGFiLiIgYXJlIGFkZGVkIGF1
dG9tYXRpY2FsbHkgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudC4KSWYgdGhlIHByZWZp
eCBpcyB0byBiZSBvbWl0dGVkLCB0aGUgcmVmZXJlbmNlIGNhbiBiZSB3cml0dGVuIGFzCmBc
IUByZWY6bGFiZWxgLgoKKipFeGFtcGxlKioKYGBgbWQKIyMgUmVmZXJlbmNlZCBTZWN0aW9u
IHsjc2VjOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAc2VjOmxhYmVsLgoKIVtU
aGlzIGlzIHRoZSBjYXB0aW9uXShkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29B
QUFBTlMKVWhFVWdBQUFBVUFBQUFGQ0FZQUFBQ05ieWJsQUFBQUhFbEVRVlFJMTJQNC8vOC93
MzhHSUFYRElCS0UwREgKeGdsak5CQUFPOVRYTDBZNE9Id0FBQUFCSlJVNUVya0pnZ2c9PSl7
I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQGZpZzpsYWJlbC4KCkEgIHxC
ICB8QyAgfEQKLS0tfC0tLXwtLS18LS0tCjAwMHwxMTF8NDQ0fDU1NQoyMjJ8MzMzfDY2Nnw3
NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBjYXB0aW9uIHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBh
IHJlZmVyZW5jZSB0byBAdGJsOmxhYmVsLgoKJCRcbWJveHtlfV57XG1ib3h7aX1ccGl9KzE9
MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQGVxOmxhYmVsLgoKVGhp
cyBpcyBhIGNpdGF0aW9uIFtATXVsbGVyMTk5M10uCmBgYAoKVGhlIGZpbGUgYG1hcmt5LmJp
YmAgaXMgc3BlY2lmaWVkIGluIHRoZSBtZXRhIGRhdGEgaW4gdGhlIGZyb250Cm1hdHRlciBv
ZiB0aGUgYCFNRGAgdGV4dCBhbmQgY29udGFpbnMgdGhlIGZvbGxvd2luZyBhcnRpY2xlLgoK
YGBgYmlidGV4CiEhISAuLi9kYXRhL21hcmt5LmJpYiByYXcKYGBgCgoqKk91dHB1dCoqCgoj
IyBSZWZlcmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlzIGEgcmVmZXJlbmNl
IHRvIEBzZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRhdGE6aW1hZ2UvcG5n
O2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQVVBQUFBRkNBWUFBQUNOYnlibEFB
QUFIRWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERIeGdsak5CQUFPOVRYTDBZNE9Id0FB
QUFCSlJVNUVya0pnZ2c9PSl7I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8g
QGZpZzpsYWJlbC4KCkEgIHxCICB8QyAgfEQKLS0tfC0tLXwtLS18LS0tCjAwMHwxMTF8NDQ0
fDU1NQoyMjJ8MzMzfDY2Nnw3NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBjYXB0aW9uLiB7I3Ri
bDpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQHRibDpsYWJlbC4KCiQkXG1ib3h7
ZX1ee2lccGl9KzE9MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMgYSByZWZlcmVuY2UgdG8gQGVx
OmxhYmVsLgoKVGhpcyBpcyBhIGNpdGF0aW9uIFtATXVsbGVyMTk5M10uCgotLS0KCiMgYCFN
UGAgQ29tbWFuZC1MaW5lIFVzYWdlCgojIyBgIU1QYCBTY3JpcHQgVXNhZ2UKCmAhTWAgaXMg
c3VwcGxpZWQgYXMgYSBzaW5nbGUtZmlsZSBzY3JpcHQgd2hpY2ggY29udGFpbnMgdGhlIGAh
TWAKYCFNRmAgYXMgd2VsbCBhcyB0aGUgYCFNYCBkb2N1bWVudGF0aW9uIGBtYXJreS5tZGAs
IGBtYXJreS5tZGlgCmFuZCBgbWFya3kuYmliYC4KCkFmdGVyIGRvd25sb2FkaW5nIGAhTVBg
IHRoZSBzY3JpcHQgbmVlZHMgdG8gYmUgcGxhY2VkIGluIGEgcHJvamVjdAp3b3JraW5nIGRp
cmVjdG9yeSBgd29ya2luZ19kaXJgLiBUaGUgc2NyaXB0IGNhbiBiZSBpbnZva2VkIHVzaW5n
CmEgcHl0aG9uIGludGVycHJldGVyIGBweXRob25gIGAhTXBgIG9yIGl0IGNhbiBiZSBleGVj
dXRlZCB1c2luZyBhCnNoZWxsOgpgYGBiYXNoCj4gY2Qgd29ya2luZ19kaXIKPiBjaG1vZCAr
eCBtYXJreS5weQo+IC4vbWFya3kucHkKYGBgCgpBIG5ldyBwcm9qZWN0IGlzIGluaXRpYWxp
emVkIGluIHRoZSBgd29ya2luZ19kaXJgIHVzaW5nIHRoZSBgLS1pbml0YApvcHRpb24uIGAh
TWAgY3JlYXRlcyBhIGRpcmVjdG9yeSB0cmVlIGZvciB0aGUgcHJvamVjdCwgd2hpY2ggaXMK
ZXhwbGFpbmVkIGluIGRldGFpbCBpbiBAc2VjOnByb2plY3QuIFRoZSBgIU1gIGAhTUZgIGFu
ZApkb2N1bWVudGF0aW9uIGBtYXJreS5tZGAsIGBtYXJreS5tZGlgIGFuZCBgbWFya3kuYmli
YCBhcmUgYXV0by1nZW5lcmF0ZWQKYW5kIHBsYWNlZCBpbnNpZGUgdGhlIHN1YmRpcnMgYG1k
L2AgYW5kIGBkYXRhL2AgaW4gYHdvcmtpbmdfZGlyYAphY2NvcmRpbmdseS4KYGBgYmFzaAo+
IGNkIHdvcmtpbmdfZGlyCj4gLi9tYXJreS5weSAtLWluaXQKV1JJVEUgLi9NYWtlZmlsZQpX
UklURSAuL21kL21hcmt5Lm1kCldSSVRFIC4vbWQvbWFya3kubWRpCldSSVRFIC4vZGF0YS9t
YXJreS5iaWIKVVNBR0UKMS4gYG1ha2UgaGVscGAKMi4gYG1ha2UgYWxsLWh0bWwgaHR0cGRg
CjMuIGBtYWtlIGFsbC1wZGZgCmBgYAoKYCFNYCByZW5kZXJzIHRoZSBkb2N1bWVudGF0aW9u
IHVzaW5nIGAhUGAgaW50byBgaHRtbGAgYW5kCmBwZGZgIHVzaW5nIGBtYWtlIGFsbGAuIGBo
dG1sYCBhbmQgYHBkZmAgZG9jdW1lbnRzIGNhbiBiZSByZW5kZXJlZCBhZnRlcgppbnN0YWxs
aW5nIHRoZSBkZXBlbmRlbmNpZXMgYHB5dGhvbi1weXlhbWxgLCBgcGFuZG9jYCBhbmQgYHBh
bmRvYy14bm9zYAooYHBhbmRvYy1maWdub3NgLCBgcGFuZG9jLXNlY25vc2AsIGBwYW5kb2Mt
ZXFub3NgLCBgcGFuZG9jLXRhYmxlbm9zYCkuClRoZSBkZXRhaWxzIGFyZSBzaG93biBpbiB0
aGUgYCFNRmAgaGVscCBtZXNzYWdlIGluIEBzZWM6bWFrZWZpbGUuCgojIyBgIU1gIFByb2pl
Y3QgU3RydWN0dXJlIHsjc2VjOnByb2plY3R9CgpBIGAhTWAgcHJvamVjdCBoYXMgdGhlIGZv
bGxvd2luZyBzdHJ1Y3R1cmUsIHdoaWNoIGlzIGF1dG8tZ2VuZXJhdGVkCmluIHRoZSBwcm9q
ZWN0IGRpcmVjdG9yeSBgd29ya2luZ19kaXJgIGFmdGVyIGludm9jYXRpb24gb2YKYCFNcGAg
YC0taW5pdGAuCmBgYCEhCgl0ZXh0ID0gIiIKCWZvciBpIGluIHN1YnByb2Nlc3MuY2hlY2tf
b3V0cHV0KFsibWFrZSIsCgkJInRyZWUiXSkuZGVjb2RlKCJ1dGYtOCIpLnNwbGl0KCJcbiIp
OgoJCWlmIGkuc3RhcnRzd2l0aCgiIyIpOgoJCQl0ZXh0ICs9IGkgKyAiXG4iCmBgYAoKYGBg
CmAhdGV4dGAKYGBgCgpCeSBpbnZva2luZyBgbWFrZSBhbGxgIGFsbCBmaWxlcyBgbWQvKi5t
ZGAgYXJlIHRyYW5zZm9ybWVkCmludG8gY29ycmVzcG9uZGluZyBgaHRtbC8qLmh0bWxgIGFu
ZCBgcGRmLyoucGRmYCBmaWxlcy4gQnkKaW52b2tpbmcgYG1ha2UgaHR0cGRgIGEgcHl0aG9u
IHdlYiBzZXJ2ZXIgaXMgc3RhcnRlZCBpbiBgaHRtbC9gLgoKQWxsIHVzZXItZ2VuZXJhdGVk
IHByb2plY3QgY29udGVudCBnb2VzIGludG8gYG1kLyoubWQoaSlgIGZvcgpgIU1EYCB0ZXh0
IGFuZCBgIU1EYCBpbmNsdWRlIGZpbGVzIGFuZCBgZGF0YS8qYCBmb3IgaW1hZ2VzLApiaWJs
aW9ncmFwaHksIHZpZGVvcywgaHRtbCBmcmFtZXMsIGV0Yy4uLgoKKipBVFRFTlRJT046Kiog
VGhlIGZpbGVzIGluIHRoZSBkaXJlY3RvcmllcyBgYnVpbGQvKi5tZGAgYXJlCioqYXV0by1n
ZW5lcmF0ZWQqKi4gQWxsIHVzZXItZ2VuZXJhdGVkIGNvbnRlbnQgYCoubWRgIGFuZCBgKi5t
ZGlgCmhhcyB0byBiZSBwbGFjZWQgaW5zaWRlIHRoZSBkaXJlY3RvcnkgYG1kL2AuIEludm9r
aW5nIGBtYWtlIGNsZWFuYAp3aWxsIGRlbGV0ZSBhbGwgZmlsZXMgaW4gYGh0bWwvYCwgYGJ1
aWxkL2AgYW5kIGBwZGYvYC4KCiMjIGAhTWAgTWFrZWZpbGUgVXNhZ2UgeyNzZWM6bWFrZWZp
bGV9CgpCeSBydW5uaW5nIGBtYWtlYCBvciBgbWFrZSBoZWxwYCBpbiB0aGUgcHJvamVjdCBg
d29ya2luZ19kaXJgIHRoZQpgIU1GYCBoZWxwIGlzIHNob3duLgpgYGAhIQoJdGV4dCA9ICIi
Cglmb3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJCSJoZWxwIl0p
LmRlY29kZSgidXRmLTgiKS5zcGxpdCgiXG4iKToKCQlpZiBpLnN0YXJ0c3dpdGgoIiMiKToK
CQkJdGV4dCArPSBpICsgIlxuIgpgYGAKCmBgYApgIXRleHRgCmBgYAoKIyMgYCFNYCBDaGVh
dCBTaGVldAoKQnkgcnVubmluZyBgbWFrZSBjaGVhdGAgaW4gdGhlIHByb2plY3QgYHdvcmtp
bmdfZGlyYCB0aGUgYCFNYCBjaGVhdApzaGVldCBpcyBzaG93biwgd2hpY2ggcHJlc2VudHMg
YSBxdWljayBvdmVydmlldyBvZiBgIU1gIHNwZWNpYWwKbWFya3VwIGZvciBleGVjdXRpb24g
b2YgcHl0aG9uIGNvZGUgYW5kIG1hbmlwdWxhdGlvbiBvZiBgIU1EYCB0ZXh0LAphY2NvcmRp
bmcgdG8gdGhlIGZlYXR1cmVzIGRlc2NyaWJlcyBpbiBAc2VjOmZlYXR1cmVzLgpgYGAhIQoJ
dGV4dCA9ICIiCglmb3IgaSBpbiBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbIm1ha2UiLAoJ
CSJjaGVhdCJdKS5kZWNvZGUoInV0Zi04Iikuc3BsaXQoIlxuIik6CgkJaWYgaS5zdGFydHN3
aXRoKCIjIik6CgkJCWkgPSBpLnJlcGxhY2UociIuXD8/PyIsIHIiLlxcPz8/IikKCQkJaSA9
IGkucmVwbGFjZShyIi4/Pz8iLCByIi5cPz8/IikKCQkJdGV4dCArPSBpICsgIlxuIgpgYGAK
CmBgYApgIXRleHRgCmBgYAoKLS0tCgojIGAhTWAgUHJlcHJvY2Vzc29yIE1hcmt1cAoKIyMg
WWFtbCBNZXRhIERhdGEgaW4gRnJvbnQgTWF0dGVyIHsjc2VjOm1ldGFkYXRhfQoKTWV0YSBk
YXRhIGlzIGFubm90YXRlZCBpbiB0aGUgZnJvbnQgbWF0dGVyIG9mIGEgYCFNRGAgdGV4dCBk
b2N1bWVudC4KVGhlIGZyb250IG1hdHRlciBtdXN0IHN0YXJ0IGluIHRoZSBmaXJzdCBsaW5l
IHdpdGggYC0tLWAgYW5kIHByZWNlZGVzIGFsbApvdGhlciB0ZXh0IGJlaW5nIGZlbmNlZCBi
eSBgLS0tYC4gVGhlIG1ldGEgZGF0YSBpcyBpbiBgeWFtbGAgZm9ybWF0LgpUaGUgYHlhbWxg
IGJsb2NrIGlzIHBhcnNlZCB1c2luZyBgcHl0aG9uLXB5eWFtbGAuIEJ5IGRlZmF1bHQgYWxs
IG1ldGEKZGF0YSBpcyBpbXBvcnRlZCBpbnRvIHRoZSBwcmVwcm9jZXNzZWQgZG9jdW1lbnQu
IElmIGEgbWV0YQpkYXRhIGtleSBzdGFydHMgd2l0aCBgLWAgdGhlIGtleSBpcyBub3QgZXhw
b3NlZCBpbnRvIHRoZSByZXN1bHRpbmcKZnJvbnQgbWF0dGVyIG9mIHRoZSBwcmVwcm9jZXNz
ZWQgZG9jdW1lbnQuIEFsbCBtZXRhIGRhdGEga2V5cyB3aWxsIGJlCmV4cG9zZWQgaW50byB0
aGUgcHl0aG9uIHNjb3BlIGFzIGEgbG9jYWwgdmFyaWFibGUsIHVubGVzcyB0aGUgdmFyaWFi
bGUKYWxyZWFkeSBleGlzdHMuIEluIHRoZSBmb2xsb3dpbmcgZXhtYW1wbGUgYWxsIGtleXMg
ZXhjZXB0CmBmaWdzaXplYCwgYGZpZ2RwaWAgYW5kIGB2ZXJzaW9uYCBhcmUgY29waWVkIGlu
dG8gdGhlIHByZXByb2Nlc3NlZApgIU1EYCBkb2N1bWVudC4KCioqRXhhbXBsZSoqCmBgYHlh
bWwKCi0tLQp0aXRsZTogYCF0aXRsZWAKZGF0ZTogYERhdGVgCmF1dGhvcjogYEF1dGhvcmAK
bGluay1jaXRhdGlvbnM6IGAhbGlua19jaXRhdGlvbnNgCmJpYmxpb2dyYXBoeTogYCFiaWJs
aW9ncmFwaHlgCmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgXGh5cGVyc2V0dXB7CiAgY29s
b3JsaW5rcz1mYWxzZSwKICBhbGxib3JkZXJjb2xvcnM9ezAgMCAwfSwKICBwZGZib3JkZXJz
dHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICA8c3R5bGU+KiB7
IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH08L3N0eWxlPgp4bm9zLWNsZXZlcmVmOiBgIXhu
b3NfY2xldmVyZWZgCnhub3MtY2FwaXRhbGlzZTogYCF4bm9zX2NhcGl0YWxpc2VgCmZvbnRz
aXplOiBgIWZvbnRzaXplYAp2ZXJzaW9uOiBgIXZlcnNpb25gCmZpZ3NpemU6IGAhZmlnc2l6
ZWAKZmlnZHBpOiBgIWZpZ2RwaWAKCi0tLQoKYGBgCgpUaGUgbWV0YSBkYXRhIGZpZWxkcwpb
YHRpdGxlYCwgYGRhdGVgLCBgYXV0aG9yYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5o
dG1sI21ldGFkYXRhLXZhcmlhYmxlcyksCltgbGluay1jaXRhdGlvbnNgXShodHRwczovL3Bh
bmRvYy5vcmcvTUFOVUFMLmh0bWwjb3RoZXItcmVsZXZhbnQtbWV0YWRhdGEtZmllbGRzKSwK
W2BiaWJsaW9ncmFwaHlgXShodHRwczovL3BhbmRvYy5vcmcvTUFOVUFMLmh0bWwjY2l0YXRp
b24tcmVuZGVyaW5nKSBhbmQKW2BoZWFkZXItaW5jbHVkZXNgXShodHRwczovL3BhbmRvYy5v
cmcvTUFOVUFMLmh0bWwjdmFyaWFibGVzLXNldC1hdXRvbWF0aWNhbGx5KQphcmUgcHJvY2Vz
c2VkIGJ5IGAhUGAgZHVyaW5nIGRvY3VtZW50IHJlbmRlcmluZy4gYGZvbnRzaXplYCBhZGp1
c3RzIHRoZQpmb250IHNpemUgaW4gW2BodG1sYF0oaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVB
TC5odG1sI3ZhcmlhYmxlcy1mb3ItaHRtbCkKYW5kIFtgcGRmYF0oaHR0cHM6Ly9wYW5kb2Mu
b3JnL01BTlVBTC5odG1sI3ZhcmlhYmxlcy1mb3ItbGF0ZXgpIGRvY3VtZW50cy4KVGhlIGBo
ZWFkZXItaW5jbHVkZXNgIGZpZWxkIGlzIHVzZWQgZm9yIHVuZGVybGluaW5nIGxpbmtzIGlu
IGBwZGZgCmFuZCBgaHRtbGAgZG9jdW1lbnRzLiBUaGUgYHhub3MtY2xldmVyZWZgIGFuZCBg
eG5vcy1jYXBpdGFsaXNlYApmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIFtgcGFuZG9jLXhub3Ng
XShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MteG5vcykKZXh0ZW5zaW9ucyBm
b3IgcmVmZXJlbmNpbmcKW2ZpZ3VyZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS90b21kdWNrL3Bh
bmRvYy1maWdub3MjY3VzdG9taXphdGlvbiksClt0YWJsZXNdKGh0dHBzOi8vZ2l0aHViLmNv
bS90b21kdWNrL3BhbmRvYy10YWJsZW5vcyNjdXN0b21pemF0aW9uKSwKW3NlY3Rpb25zXSho
dHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2Mtc2Vjbm9zI2N1c3RvbWl6YXRpb24p
IGFuZApbZXF1YXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vdG9tZHVjay9wYW5kb2MtZXFu
b3MjY3VzdG9taXphdGlvbikuCgpUaGUgZmllbGQgYGhlYWRlci1pbmNsdWRlc2AgZW5kcyB3
aXRoIGAtLXBkZmAgYW5kIGAtLWh0bWxgLCB3aGljaApzcGVjaWZpZXMgY29ycmVzcG9uZGlu
ZyBvcHRpb25zIGZvciBnZW5lcmF0aW9uIG9mIGBwZGZgIGFuZCBgaHRtbGAKZG9jdW1lbnRz
LiBEdXJpbmcgbWFrZSwgYCFNYCBzY2FucyBhbGwgbWV0YSBkYXRhIGZpZWxkcywgYW5kCmZp
ZWxkcyB3aGljaCBlbmQgd2l0aCBgLS1wZGZgIGFuZCBgLS1odG1sYCBhcmUgc2VsZWN0ZWQg
YW5kIGZvcndhcmRlZAp0byBgIVBgIGJhc2VkIG9uIHRoZSBmb3JtYXQgdG8gYmUgcmVuZGVy
ZWQuIFRoaXMgd2FzIGZvcm1hdCBkZXBlbmRlbnQKbWV0YSBkYXRhIGNhbiBiZSBzcGVjaWZp
ZWQgaW4gYCFNYCBNYXJrZG93biB0ZXh0LgoKVGhlIGB2ZXJzaW9uYCBmaWVsZCBpcyBhIHVz
ZXItZGVmaW5lZCBmaWVsZAp3aGljaCBzaG93cyB0aGUgdmVyc2lvbiBvZiB0aGlzIGRvY3Vt
ZW50OiAqYCF2ZXJzaW9uYCouIGBmaWdzaXplYCBhbmQKYGZpZ2RwaWAgYXJlIHVzZWQgaW4g
dGhpcyBkb2N1bWVudCB0byBjb250cm9sIHRoZSBmaWd1cmUgc2l6ZSBhbmQKcmVzb2x1dGlv
biBpbiB0aGUgYCFOVWAgYW5kIGAhUExgIGV4YW1wbGUsIHNlZSBAc2VjOmV4YW1wbGVzLiBU
aGUgZm9udApzaXplIGlzIGAhZm9udHNpemVgIGFuZCB0aGUgQGZpZzpmaWd1cmUxLCAhQGZp
ZzpmaWd1cmUyXzEsCiFAZmlnOmZpZ3VyZTJfMiwgIUBmaWc6ZmlndXJlMl8zIGFuZCAhQGZp
ZzpmaWd1cmUyXzQgaGF2ZSBhIHNpemUgb2YKYCEieCIuam9pbihzdHIoaSkgZm9yIGkgaW4g
Zmlnc2l6ZSlgY20uIFRoZSBmb250IHNpemUgYXBwbGllcyB0bwpib3RoIGRvY3VtZW50IHRl
eHQgYW5kIGZpZ3VyZSB0ZXh0LgoKVGhlIHZhbHVlcyBvZiBtZXRhIGRhdGEgZmllbGRzIGNh
biBiZSBtYW5pcHVsYXRlZCBkdXJpbmcgaW5jbHVkZQp3aGVuIGJlaW5nIHByZWNlZWRlZCBi
eSBgLWAgb3IgYC0tYCwgYXMgZGVzY3JpYmVkIGluIEBzZWM6aW5jbWV0YS4KCiMjIFB5dGhv
biBDb2RlIEJsb2NrcyBpbnNpZGUgYCFNRGAgVGV4dCB7I3NlYzpibG9ja30KClB5dGhvbiBj
b2RlIGNhbiBiZSBleGVjdXRlZCBkdXJpbmcgdHJhbnNmb3JtYXRpb24gb2YgdGhlIGAhTURg
IHRleHQuClB5dGhvbiBjb2RlIGlzIGRpcmVjdGx5IHdyaXR0ZW4gaW5zaWRlIHRoZSBgIU1E
YCB0ZXh0IGFuZCBpcyBmZW5jZWQKdXNpbmcgdGhlIGBgIGAhQlQqM2AgYGAgc3RhdGVtZW50
LiBUaGUgYmxvY2sgbmVlZHMgdG8gc3RhcnQgd2l0aCBlaXRoZXIKYFwhYCBvciBgXCEhYC4K
KiBgXCFgOiBUaGUgcHl0aG9uIGNvZGUgaXMgZXhlY3V0ZWQgYW5kICoqc2hvd24qKiBpbiB0
aGUgb3V0cHV0LgoqIGBcISFgOiBUaGUgcHl0aG9uIGNvZGUgaXMgZXhlY3V0ZWQgYW5kICoq
aGlkZGVuKiogaW4gdGhlIG91dHB1dC4KCmBgYG1kCglgIUJUKjNgIQoJCTxweXRob25fY29k
ZV9zaG93bj4KCWAhQlQqM2AKCglgIUJUKjNgISEKCQk8cHl0aG9uX2NvZGVfaGlkZGVuPgoJ
YCFCVCozYApgYGAKCk1ldGEgZGF0YSBmcm9tIGAhTURgIGZyb250IG1hdHRlciBjYW4gYmUg
dXNlZCBhcyBsb2NhbCB2YXJpYWJsZXMgaW4KcHl0aG9uIGNvZGUgYmxvY2tzLiBUaGUgYGlt
cG9ydGAgc3RhdGVtZW50IGNhbiBiZSB1c2VkIGluIHB5dGhvbiBjb2RlCmJsb2NrcyBpbiBv
cmRlciB0byBhY2Nlc3MgaW5zdGFsbGVkIHB5dGhvbiBwYWNrYWdlcy4gQWxsIGNvZGUgYmxv
Y2tzCnNwYW4gb25lIGxhcmdlIHNjb3BlIGZvciBzaGFyaW5nIGZ1bmN0aW9ucyBhbmQgbG9j
YWwgdmFyaWFibGVzLgpVc2luZyB0aGUgYHByaW50KClgIGZ1bmN0aW9uIHRoZSB0ZXh0IHdp
bGwgYmUgcHJpbnRlZCB0byB0aGUgY29uc29sZQphbmQgKipub3QqKiBpbnNpZGUgdGhlIHJl
c3VsdGluZyBgIU1EYCB0ZXh0LiBJbiBvcmRlciB0byBtb2RpZnkKdGhlIGAhTURgIHRleHQg
dXNpbmcgYCFNYCBkdXJpbmcgcHJlcHJvY2Vzc2luZywgdGhlIGAhUDFgIHN0YXRlbWVudApo
YXMgdG8gYmUgdXNlZCwgc2VlIEBzZWM6bWRwcmludC4KCioqRXhhbXBsZSoqCmBgYCEKCWlt
cG9ydCBudW1weSBhcyBucAoJZGVmIGdldF94KGE9MCk6CgkJcmV0dXJuIG5wLmFycmF5KFs0
MSArIGFdKQoJeSA9IDEKYGBgCgpUaGlzIGlzIGEgcGFyYWdyYXBoLgoKYGBgIQoJeCA9IGdl
dF94KHkpCglwcmludCgiSGVsbG8gQ29uc29sZSEgeCBpcyIsIHgpCmBgYAoKIyMgR2VuZXJh
dGlvbiBvZiBgIU1EYCBUZXh0IHVzaW5nIFB5dGhvbiBDb2RlIHsjc2VjOm1kcHJpbnR9Cgoj
IyMgVGhlIGAhUDFgIFN0YXRlbWVudAoKVXNpbmcgdGhlIGBwcmludCgpYCBzdGF0ZW1lbnQg
dGhlIHRleHQgd2lsbCBiZSBwcmludGVkIHRvIHRoZSBjb25zb2xlLgpXaGVuIHVzaW5nIHRo
ZSBgIVAxYCBhbmQgYCFQMmAgc3RhdGVtZW50cyBuZXcgYCFNRGAgdGV4dCBjYW4gYmUKaW5z
ZXJ0ZWQgZHluYW1pY2FsbHkgaW50byB0aGUgZG9jdW1lbnQgZHVyaW5nIHByZXByb2Nlc3Np
bmcuCgoqKmAhUDFgIFN0YXRlbWVudCoqCiogYF8oKmFyZ3MsIHNlcD0iICIpYDoKCTEuIGNv
bnZlcnQgYXJndW1lbnRzIHRvIHN0cmluZwoJMi4gam9pbiBhcmd1bWVudHMgdXNpbmcgYHNl
cGAKKiBgXyhfLCAqYXJncyAgIClgOiBhcHBlbmQgdG8gcHJldmlvdXMgb3V0cHV0CiogYF8o
XywgKmFyZ3MsIF8pYDogYXBwZW5kIHRvIHByZXZpb3VzIG91dHB1dCBhbmQgYXBwZW5kIG5l
eHQgb3V0cHV0CiogYF8oICAgKmFyZ3MsIF8pYDogYXBwZW5kIG5leHQgb3V0cHV0IHRvIHRo
aXMgb3V0cHV0CgoqKmAhUDJgIFN0YXRlbWVudCoqCiogYF9fKGFyZywgY3JvcD1UcnVlLCBz
aGlmdD0iIilgOgoJMS4gY29udmVydCBgYXJnYCB0byBzdHJpbmcKCTIuIGNyb3AgYW5kIHBy
ZXBlbmQgYHNoaWZ0YCBzdHJpbmcgdG8gZWFjaCBsaW5lCiogYF9fKGFyZywgXylgOiBhcHBl
bmQgbmV4dCBvdXRwdXQgdG8gdGhpcyBvdXRwdXQKCioqQ3JvcCBhbmQgU2hpZnQqKgpgYGBw
eQpkZWYgdGVzdCgpOgoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEKCQkqIExpc3QgTGV2ZWwg
MQoJIiIiKQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDIKCQkqIExpc3QgTGV2ZWwgMgoJCSAg
ICAqIExpc3QgTGV2ZWwgMwoJIiIiLCBzaGlmdD0iICIqNCkKYGBgCgpgYGBtZAoqIExpc3Qg
TGV2ZWwgMQoqIExpc3QgTGV2ZWwgMQogICAgKiBMaXN0IExldmVsIDIKICAgICogTGlzdCBM
ZXZlbCAyCiAgICAgICAgKiBMaXN0IExldmVsIDMKYGBgCgoqKkV4YW1wbGUqKgpgYGAhCgl5
ICs9IDEKCV9fKGYiIiIKCQkqIFRoaXMgaXMgYG1hcmt5YCBWZXJzaW9uICp7dmVyc2lvbn0q
LgoJCSogVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkiIiIpCglfXyhm
IiIiCgkJMS4gVGhpcyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkJMi4gVGhp
cyBpcyBgbWFya3lgIFZlcnNpb24gKnt2ZXJzaW9ufSouCgkiIiIsIHNoaWZ0PSIgIio0KQpg
YGAKCmBgYCEKCV8oIlRoaXMiLCBfKQoJXygiaXMiKQoJXyhfLCAiIG9uZSIsIF8pCglfKCJs
aW5lISBub3QgZW5kaW5nIHdpdGggXFwiKQoJXygidGhpcz8iKQpgYGAKCmBgYCEKCV8oZiJI
ZWxsbyBNYXJrZG93biEgeCBpcyAqKnt4fSoqIGFuZCB5IGlzICp7eX0qIikKYGBgCgojIyMg
SW5kZW50YXRpb24gb2YgdGhlIGAhUDFgIFN0YXRlbWVudAoKVGhlIGAhUDFgIHN0YXRlbWVu
dCBuZWVkcyB0byBiZSBpbmRlbnRlZCBhY2NvcmRpbmcgdG8gdGhlIHB5dGhvbiBwcm9ncmFt
CmZsb3cgKGBmb3JgLCBgd2hpbGVgLCBgaWZgLCBgZWxzZWAsIGB0cnlgLCBgd2l0aGAsIGBk
ZWZgLCBgY2xhc3NgKSBhbmQKc3VwcG9ydHMgZHluYW1pYyBpbnNlcnRpb24gb2YgYCFNRGAg
dGV4dCBpbnRvIHRoZSBkb2N1bWVudCBiYXNlZApvbiBsb29wcyBhbmQgY29uZGl0aW9ucy4K
CioqRXhhbXBsZSAxKioKCmBgYCEKCV8oIlRoaXMgaXMgdGhlICoqZ2VuZXJhdGVkIG91dHB1
dCoqOiIpCglfKCIiKQoJXygiPiBUaGlzIGlzIGEgKmxpc3RpbmcqOiIpCgl0ZXh0ID0gWyJ6
ZXJvIiwgIm9uZSIsICJ0d28iLCAidGhyZWUiXQoJZm9yIGkgaW4gcmFuZ2UoMTApOgoJCWlm
IGkgPCAyOgoJCQlfKGYiPiB7aX0iKQoJCWVsaWYgaSA9PSAyOgoJCQlqID0gdGV4dFtpXQoJ
CQlfKGYiPiB7an0iKQoJCWVsaWYgaSA9PSAzOgoJCQlfKCIiKQoJCWVsaWYgaSA8IDc6CgkJ
CV8oZiI+PiB7JyAgICAnKihpLTQpfSoge2l9IikKCQllbGlmIGkgPT0gNzoKCQkJXygiIikK
CQllbHNlOgoJCQlqID0gaSAtIDcKCQkJayA9IHRleHRbal0KCQkJXyhmIj4ge2p9LiB7a30i
KQpgYGAKCioqRXhhbXBsZSAyKioKCkB0Ymw6dGFibGUxIGlzIGdlbmVyYXRlZCB1c2luZyB0
aGUgZm9sbG93aW5nIHB5dGhvbiBjbG9kZSBibG9jay4KCmBgYCEKCW4gPSAxMwoJZGVjID0g
WyIqJXMqIiwgIioqJXMqKiIsICJ+fiVzfn4iLCAiYCVzYCIsCgkJciIkXHRpbWVzXiVzJCIs
ICIkXGluZnR5XyVzJCJdCglfKCJ8Ii5qb2luKCJYIipuKSArICJcbiIgKyAifCIuam9pbigi
LSIqbikpCglmb3IgaSBpbiByYW5nZShuKToKCQlmaWxsID0gW2NocihvcmQoIkEiKSsoMipp
KzMqayklMjYpIGZvciBrIGluIHJhbmdlKGkrMSldCgkJZmlsbCA9IFtkZWNbKGwraSklbGVu
KGRlYyldJWsgZm9yIGwsIGsgaW4gZW51bWVyYXRlKGZpbGwpXQoJCXRleHQgPSBsaXN0KCIw
IikqbgoJCXRleHRbKG4+PjEpLShpPj4xKToobj4+MSkrKGk+PjEpXSA9IGZpbGwKCQlfKCJ8
Ii5qb2luKHRleHQpKQpgYGAKClRhYmxlOiBUYWJsZSBpcyBnZW5lcmF0ZWQgdXNpbmcgY29k
ZSBhbmQgdGhlIGAhUDFgIHN0YXRlbWVudC4geyN0Ymw6dGFibGUxfQoKIyMgRm9ybWF0dGVk
IE91dHB1dCBvZiBQeXRob24gVmFyaWFibGVzIHsjc2VjOmZvcm1hdH0KCmAhTWAgY2FuIG91
dHB1dCBweXRob24gdmFyaWFibGVzIGlubGluZSBpbnRvIGAhTURgIHRleHQgdXNpbmcKdGhl
IGBgIGBcIVZBUklBQkxFYCBgYCBzdGF0ZW1lbnQuIGBWQVJJQUJMRWAgY2FuIGJlIGFueSBw
eXRob24gdmFyaWFibGUKZnJvbSBhIHB5dGhvbiBjb2RlIGJsb2NrIG9yIG1ldGEgZGF0YSBm
aWVsZC4gVGhlIG91dHB1dCBjYW4gYmUKZm9ybWF0dGVkIHVzaW5nIHRoZSBgYCBgXCFWQVJJ
QUJMRVs6Rk9STUFUXWAgYGAgc3RhdGVtZW50IGFjY29yZGluZwp0byB0aGUgcHl0aG9uIG9w
ZXJhdG9yIGB7PHZhcmlhYmxlPls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4gdGhlCltg
c3RyLmZvcm1hdCgpYF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmlu
Zy5odG1sI2Zvcm1hdHN0cmluZ3MpCnNwZWNpZmljYXRpb24uIFRoZSBgYCBgXCFWQVJJQUJM
RWAgYGAgc3RhdGVtZW50IGlzIGVzY2FwZWQKdXNpbmcgYGAgYFxcIVZBUklBQkxFYCBgYC4K
CioqRXhhbXBsZSoqCmBgYCEKCXggPSBpbnQoMSkKCXkgPSBmbG9hdCgyLjMpCgl6ID0gMAoJ
YSA9IFsxLCAyLCAzXQoJYiA9ICg0LCA1KQpgYGAKCmBgYG1kClRoaXMgaXMgYSBwYXJhZ3Jh
cGggYW5kIHggaXMgYFwheDowM2RgIGFuZCB5IGlzIGBcIXk6LjJmYC4KT3RoZXIgY29udGVu
dCBpczogYFwhYWAsIGBcIWJgIGFuZCBlc2NhcGluZyB3b3JrczogYFxcIXpgLgpgYGAKClRo
aXMgaXMgYSBwYXJhZ3JhcGggYW5kIHggaXMgYCF4OjAzZGAgYW5kIHkgaXMgYCF5Oi4yZmAu
Ck90aGVyIGNvbnRlbnQgaXM6IGAhYWAsIGAhYmAgYW5kIGVzY2FwaW5nIHdvcmtzOiBgXCF6
YC4KCiMjIE91dHB1dCBSZXN1bHRzIG9mIFB5dGhvbiBFeHByZXNzaW9ucyB7I3NlYzppbmxp
bmV9CgpgIU1gIG91dHB1dHMgcmVzdWx0cyBvZiBweXRob24gZXhwcmVzc2lvbnMgaW5saW5l
IGludG8gYCFNRGAgdGV4dAp1c2luZyB0aGUgYGAgYFwhRVhQUkVTU0lPTmAgYGAgc3RhdGVt
ZW50LiBgRVhQUkVTU0lPTmAgY2FuIGJlIGFueSBweXRob24KZXhwcmVzc2lvbi4gVGhlIG91
dHB1dCBjYW4gYmUgZm9ybWF0dGVkIHVzaW5nIHRoZSBweXRob24KYGAgYFwhRVhQUkVTU0lP
Tls6Rk9STUFUXWAgYGAgc3RhdGVtZW50IGFjY29yZGluZyB0byB0aGUgcHl0aG9uIG9wZXJh
dG9yCmB7PGV4cHJlc3Npb24+Wzo8Zm9ybWF0Pl19YCBpbXBsZW1lbnRlZCBpbiB0aGUgcHl0
aG9uCltgZmAtc3RyaW5nc10oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2Uv
bGV4aWNhbF9hbmFseXNpcy5odG1sI2Ytc3RyaW5ncykKc3BlY2lmaWNhdGlvbi4gVGhlIGBg
IGBcIUVYUFJFU1NJT05gIGBgIHN0YXRlbWVudCBpcyBlc2NhcGVkCnVzaW5nIGBgIGBcXCFF
WFBSRVNTSU9OYCBgYC4KCioqRXhhbXBsZSoqCmBgYG1kClRoaXMgaXMgYSBsaXN0IHdpdGgg
dGhlIG51bWJlcnMgYFwhIiwgIi5qb2luKFtzdHIoaSkgZm9yIGkgaW4gYV0pYC4KVGhlIHJl
c3VsdCBvZiB0aGUgZnVuY3Rpb24gYGdldF94YCBpcyBgXCFnZXRfeCgpYCBhbmQgZXNjYXBp
bmcKd29ya3M6IGBcXCFnZXRfeChiWzFdKVswXWAuCmBgYAoKVGhpcyBpcyBhIGxpc3Qgd2l0
aCB0aGUgbnVtYmVycyBgISIsICIuam9pbihbc3RyKGkpIGZvciBpIGluIGFdKWAuClRoZSBy
ZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGBnZXRfeGAgaXMgYCFnZXRfeCgpYCBhbmQgZXNjYXBp
bmcKd29ya3M6IGBcIWdldF94KGJbMV0pWzBdYC4KCiMjIEluY2x1ZGUgU3RhdGVtZW50IGFu
ZCBNYWtlIERlcGVuZGVuY2llcyB7I3NlYzppbmNsdWRlfQoKYCFNYCBzdXBwb3J0cyBpbmNs
dWRlIG9mIGAhTURgIHRleHQgdXNpbmcgdGhlIGBcISEhYCBzdGF0ZW1lbnQuClRoZSBgXCEh
IWAgc3RhdGVtZW50IG11c3QgYmUgb24gYSBzaW5nbGUgbGluZSBhbmQgZm9sbG93cyB0aGUg
cGF0aApvZiB0aGUgaW5jbHVkZSBmaWxlLiBUaGUgcGF0aCBvZiB0aGUgaW5jbHVkZSBmaWxl
IGlzIHJlbGF0aXZlIHRvCnRoZSByb290IGAhTURgIGRvY3VtZW50IHdoaWNoIGlzIHByb2Nl
c3NlZC4gVGhlIHBhdGhzIG9mIGFsbAppbmNsdWRlZCBmaWxlcyBhcmUgY29sbGVjdGVkIGFu
ZCBhIGAhTUZgIHJ1bGUgaXMgY3JlYXRlZCBhbmQKc3RvcmVkIGluIGEgZmlsZSAocGF0aCBv
ZiBvdXRwdXQgYCFNRGAgdGV4dCBhcHBlbmRlZCB3aXRoIGAubWtgKS4KClRoZSBgXCEhIWAg
c3RhdGVtZW50IGlzIGVzY2FwZWQgdXNpbmcgYFxcISEhYC4KVGhlIGluY2x1ZGUgc3RhdGVt
ZW50ICoqY2Fubm90KiogYmUgdXNlZCBpbiBjb2RlIGJsb2Nrcy4gYCFNYCBgIU1EYAp0ZXh0
IG11c3QgaGF2ZSB0aGUgZXh0ZW5zaW9uIGAubWRgIGFuZCBpbmNsdWRlIGZpbGVzIG11c3Qg
aGF2ZSB0aGUKZXh0ZW5zaW9uIGAubWRpYAoKVGhlIGluY2x1ZGUgc3RhdGVtZW50IHN1cHBv
cnRzIGZsYWdzIGZvciBwYXJzaW5nIHRoZSBpbmNsdWRlIGZpbGUuCmBgYG1kClwhISEgUEFU
SC9GSUxFLm1kaSBGTEFHUwpgYGAKCioqRmxhZ3MqKgoqIGBhdXhgOiByZWZlcmVuY2UgYXMg
TWFrZWZpbGUgZGVwZW5kZW5jeSwgYnV0IGRvIG5vdCBwcm9jZXNzCiogYG5vZGVwYDogZG8g
bm90IHJlZmVyZW5jZSB0aGlzIGZpbGUgYXMgTWFrZWZpbGUgZGVwZW5kZW5jeQoqIGByYXdg
OiB0aGUgZmlsZSBpcyBpbmNsdWRlZCBhcy1pcyB3aXRob3V0IGFueSBwYXJzaW5nCiogYG5v
bWV0YWA6IG1ldGEgZGF0YSBpbiBmcm9udCBtYXR0ZXIgaXMgc2tpcHBlZCBkdXJpbmcgcGFy
c2luZwoqIGBub2JvZHlgOiBhbGwgTWFya2Rvd24gdGV4dCBpcyBza2lwcGVkIGR1cmluZyBw
YXJzaW5nCiogYG5vbWFya3lgOiBpbmNsdWRlIHRoZSBgIU1EYCB0ZXh0IHdpdGhvdXQgYW55
IGAhTWAgcHJvY2Vzc2luZwoqIGBjb2RlYDogb25seSBpbmNsdWRlIGhpZGRlbiBjb2RlIGJs
b2NrcwoqIGBjb2RlIWA6IGluY2x1ZGUgYWxsIGNvZGUgYmxvY2tzCiogYD4+TmA6IGluY3Jl
YXNlIHRoZSBpbmRlbnRhdGlvbiB1c2luZyBgTmAgdGFicwoqIGA+TmA6IGluY3JlYXNlIHRo
ZSBpbmRlbnRhdGlvbiB1c2luZyBgTmAgc3BhY2VzCiogYCMrTmA6IGluY3JlYXNlIHRoZSBs
ZXZlbCBvZiBBVFggaGVhZGluZ3MgYCNgLiBUaGUgaGVhZGluZ3MgYXJlCnBhcnNlZCBhY2Nv
cmRpbmcgdG8gYCFQYCBleHRlbnNpb25zCihbYmxhbmtfYmVmb3JlX2hlYWRlcl0oaHR0cHM6
Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI2V4dGVuc2lvbi1ibGFua19iZWZvcmVfaGVhZGVy
KSwKW3NwYWNlX2luX2F0eF9oZWFkZXJdKGh0dHBzOi8vcGFuZG9jLm9yZy9NQU5VQUwuaHRt
bCNleHRlbnNpb24tc3BhY2VfaW5fYXR4X2hlYWRlcikpCgoqKkV4YW1wbGUqKgpgYGBtZApc
ISEhIG1hcmt5Lm1kaSAjKzIKVGhlIGZpbGUgd2FzIGluY2x1ZGVkOiBgXCFpbmNsdWRlZGAg
YW5kICR4PWBcIXhgJCBhbmQgJHk9YFwheWAkLgpgYGAKCiEhISBtYXJreS5tZGkgIysyClRo
ZSBmaWxlIHdhcyBpbmNsdWRlZDogYCFpbmNsdWRlZGAgYW5kICR4PWAheGAkIGFuZCAkeT1g
IXlgJC4KClRoZSBmaWxlIGBtYXJreS5tZGlgIHdhcyBsb2FkZWQgd2l0aCBzaGlmdGluZyBB
VFggaGVhZGluZ3MgYnkgMiB3aGljaAptZWFucyBgIyNgIGhhcyBiZWVuIGFkZGVkIHRvIHRo
ZSBpbmNsdWRlZCBzZWN0aW9uLiBUaGUgZmlsZSBjb250YWluczoKYGBgbWQKISEhIG1hcmt5
Lm1kaSByYXcgPj4xCmBgYApUaGUgdW5tb2RpZmllZCBzb3VyY2Ugd2FzIGxvYWRlZCB1c2lu
ZyB0aGUgZmxhZ3MgYHJhdyA+PjFgLgoKVGhlIGZpbGUgYG1hcmt5Lm1kLm1rYCBjb250YWlu
czoKYGBgTWFrZWZpbGUKYnVpbGQvbWFya3kubWQ6IFwKbWQvbWFya3kubWRpCgouUEhPTlk6
IG1kLW1hcmt5Cm1kLW1hcmt5OiBidWlsZC9tYXJreS5tZAoKLlBIT05ZOiBodG1sLW1hcmt5
Cmh0bWwtbWFya3k6IGh0bWwvbWFya3kuaHRtbAoKLlBIT05ZOiBwZGYtbWFya3kKcGRmLW1h
cmt5OiBwZGYvbWFya3kucGRmCmBgYAoKIyMgSW5jbHVkZSBTdGF0ZW1lbnQgYW5kIE1ldGEg
RGF0YSBJbXBvcnQgeyNzZWM6aW5jbWV0YX0KClRoZSBpbmNsdWRlIHN0YXRlbWVudCBgXCEh
IWAgbG9hZHMgYW5kIHBhcnNlcyBhbiBgKi5tZGlgIGluY2x1ZGUgZmlsZS4KVGhlIGB5YW1s
YCBtZXRhIGRhdGEgaW4gdGhlIGZyb250IG1hdHRlciBvZiB0aGUgZG9jdW1lbnQgYWxzbyBp
cyBsb2FkZWQKYW5kIHBhcnNlZCBpZiB0aGUgYG5vbWV0YWAgZmxhZyBpcyBub3Qgc3BlY2lm
aWVkIGluIHRoZSBpbmNsdWRlCnN0YXRlbWVudC4gQXNzdW1pbmcgdGhlIHJvb3QgZG9jdW1l
bnQgYW5kIHRoZSBpbmNsdWRlZCBkb2N1bWVudCBoYXZlIHRoZQpmb2xsb3dpbmcgbWV0YSBk
YXRhLgoKKipSb290IERvY3VtZW50KioKYGBgeWFtbAoKLS0tCndpZHRoOiAxMApoZWlnaHQ6
IDIwCnNlcmlhbDogbm9uZQpwYXJhbWV0ZXI6IHZhbHVlCnRleHQ6IGFiYwoKLS0tClwhISEg
aW5jbHVkZS5tZGkKYGBgCgoqKkluY2x1ZGVkIERvY3VtZW50KioKYGBgeWFtbAoKLS0tCmRl
cHRoOiAzMApzZXJpYWwtOiBBCnBhcmFtZXRlci0tOiBkZWZhdWx0CnRleHQ6IGRlZgoKLS0t
CmBgYAoKQnkgZGVmYXVsdCB0aGUgdmFsdWVzIG9mIG1ldGEgZGF0YSBrZXlzIGFyZSBhcHBl
bmRlZC4gV2hlbiBhIG1ldGEKZGF0YSBrZXkgaXMgcHJlY2VkZWQgYnkgYC1gIHRoZSBpbmNs
dWRlZCBrZXkgcmVwbGFjZXMgdGhlIHByZXNlbnQKa2V5LCBpZiBpdCBpcyBwcmVjZWRlZCBi
eSBgLS1gIHRoZSBpbmNsdWRlZCBrZXkgaXMgc2tpcHBlZCBpZiB0aGUKbWV0YSBkYXRhIGtl
eSBhbHJlYWR5IGlzIHByZXNlbnQgaW4gdGhlIHJvb3QgZG9jdW1lbnQuCkdpdmVuIHRoZSBl
eGFtcGxlIGFib3ZlLCB0aGUgcmVzdWx0aW5nIG1ldGEgZGF0YSBpbgp0aGUgZnJvbnQgbWF0
dGVyIG9mIHRoZSBwcmVwcm9jZXNzZWQgYCFNRGAgdGV4dCBsb29rcyBhcyBmb2xsb3dzLgoK
KipQcmVwcm9jZXNzZWQgRG9jdW1lbnQqKgpgYGB5YW1sCgotLS0Kd2lkdGg6IDEwCmhlaWdo
dDogMjAKZGVwdGg6IDMwCnNlcmlhbDogQQpwYXJhbWV0ZXI6IHZhbHVlCnRleHQ6IHwKICAg
YWJjCiAgIGRlZgoKLS0tCmBgYAoKIyMgRm9ybWF0IExpbmtzIGZvciBgaHRtbGAgYW5kIGBw
ZGZgIERvY3VtZW50cyB7I3NlYzpmb3JtbGlua30KCldoZW4gd3JpdGluZyBtdWx0aXBsZSBk
b2N1bWVudHMsIG9mdGVuIGRvY3VtZW50cyBhcmUgcmVmZXJlbmNlZApiZXR3ZWVuIGVhY2gg
b3RoZXIgdXNpbmcgbGlua3MuIEluIG9yZGVyIHRvIHJlZmVyIHRvIGV4dGVybmFsCmBodG1s
YCBhbmQgYHBkZmAgZG9jdW1lbnRzIHRoZSBgIU1EYCBsaW5rIHN0YXRlbWVudCBpcyB1c2Vk
LgpgYGBtZApbTGluayBDYXB0aW9uXShwYXRoL3RvL2ZpbGUuaHRtbCkKW0xpbmsgQ2FwdGlv
bl0ocGF0aC90by9maWxlLnBkZikKYGBgCgpXaGVuIHVzaW5nIHJlbGF0aXZlIHBhdGhzIGlu
IHRoZSBVUkwsIHRoZSBkb2N1bWVudHMgY2FuIGJlIHJlZmVyZW5jZWQKYWNjb3JkaW5nIHRv
IHRoZSBkaXJlY3RvcnkgdHJlZSBvZiB0aGUgc291cmNlIGAhTWAgYCFNRGAgdGV4dApgbWQv
Ki8qLm1kYC4gSG93ZXZlciwgdGhlIHJlc3VsdGluZyBsaW5rIHdpbGwgYmUgYSBwYXRoIHJl
bGF0aXZlCnRvIHRoZSBkaXJlY3RvcnkgYGh0bWwvYCBmb3IgYGh0bWxgIGRvY3VtZW50cyBh
bmQgcmVsYXRpdmUgdG8gYHBkZi9gCmZvciBgcGRmYCBkb2N1bWVudHMuIEFzIGFsbCBgaHRt
bGAgYW5kIGBwZGZgIGRvY3VtZW50cyBhcmUga2VwdCBpbgpzZXBhcmF0ZSBkaXJlY3Rvcmll
cywgb25lIGxpbmsgc3RhdGVtZW50IGNhbm5vdCBiZSB1c2VkIGZvciByZW5kZXJpbmcKYGh0
bWxgIGFuZCBgcGRmYCB3aXRoIGNvbnNpc3RlbnQgcGF0aHMgaW4gdGhlIGxpbmsgc3RhdGVt
ZW50LgoKQnkgdXNpbmcgdGhlIGAhTWAgZm9ybWF0IGxpbmsgc3RhdGVtZW50IGAuXD8/P2As
IHRoZSBmaWxlIGV4dGVuc2lvbgppbiB0aGUgbGlua3MgaXMgcmVwbGFjZWQgZGVwZW5kaW5n
IG9uIHRoZSBvdXRwdXQgZm9ybWF0CnJlc3VsaW5nIGluIGNvbnNpc3RlbnQgbGlua3MgZm9y
IGBodG1sYCBhbmQgYHBkZmAKZG9jdW1lbnRzLiBUaGUgZm9ybWF0IGxpbmsgc3RhdGVtZW50
IGNhbiBiZSBlc2NhcGVkIHVzaW5nIGAuXFw/Pz9gLgoKKipFeGFtcGxlKioKYGBgbWQKW0xp
bmsgdG8gdGhpcyBEb2N1bWVudF0obWFya3kuXD8/PykKYGBgCgpbTGluayB0byB0aGlzIERv
Y3VtZW50XShtYXJreS4/Pz8pCgojIyBGb3JtYXQgQ29kZXMgZm9yIGBodG1sYCBhbmQgYHBk
ZmAgRG9jdW1lbnRzIHsjc2VjOmZvcm1jb2RlfQoKT2Z0ZW4gd2hlbiB3cml0aW5nIG1hcmtk
b3duIGZvciBgaHRtbGAgYW5kIGBwZGZgIGRvY3VtZW50cywgdGhlCmZvcm1hdCBuZWVkcyB0
byBiZSBhZGp1c3RlZCBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdC4gYCFQYCBgIU1EYAphbHJl
YWR5IHJlbmRlcnMgYWxsIGNvbW1vbiBNYXJrZG93biBpbnRvIGBodG1sYCBhbmQgYHBkZmAu
CmAhTWAgc3VwcG9ydHMgZm9ybWF0IHNwZWNpZmljIHR3ZWFraW5nIHVzaW5nIGZvcm1hdCBj
b2Rlcy4KCkluIG9yZGVyIHRvIGluamVjdCBmb3JtYXQgc3BlY2lmaWMgY29kZSwgYGh0bWxg
IGNvZGUgb3IgYHRleGAgY29kZQpmb3IgYHBkZmAgZG9jdW1lbnRzLCB0aGUgYGZtdGNvZGVg
IGNsYXNzIGlzIHVzZWQuIFRoZSBgZm10Y29kZWAgY2xhc3MKaW1wbGVtZW50cyB0aGUgYGNh
bGxgLW9wZXJhdG9yIGAoKWAgYW5kIGBhdHRyYC1mb3J3YXJkaW5nIHRvIHRoZQpjbGFzcyBt
ZW1iZXJzIGBodG1sYCBhbmQgYHBkZmAuIEVhY2ggY2FsbCB0byB0aGUgYGZtdGNvZGVgIGNs
YXNzCmlzIGRpc3B0YWNoZWQgaW50dG9vIHRoZSBgaHRtbGAgYW5kIGBwZGZgIG1lbWJlcnMs
IHdoaWNoIGVpdGhlciBjYW4KYmUgbWVtYmVyIHZhcmlhYmxlcyBvciBjbGFzcyBtZXRob2Rz
LgoKRHVyaW5nIHByZXByb2Nlc3NpbmcsIGAhTWAgcHJvY2Vzc2VzIGFsbCBmb3JtYXQgY29k
ZXMgZm9yIGVhY2gKZm9ybWF0IGBodG1sYCBhbmQgYHBkZmAgYW5kIGNhY2hlcyB0aGUgb3V0
cHV0LiBXaGVuIHJlbmRlcmluZwp0aGUgTWFya2Rvd24gaW4gb25lIHBhcnRpY3VsYXIgZm9y
bWF0IHVzaW5nIGAhUGAsIGAhTWAgb25seSB1c2VzCnRoZSByZXN1bHRzIG9mIHRoZSBjb3Jy
ZXNwb25kaW5nIGZvcm1hdC4KQWRkaXRpb25hbCBgdGV4YCBwYWNrYWdlcyBoYXZlIHRvIGJl
IGluY2x1ZGVkIGZvciBgcGRmYCBhcyB3ZWxsIGFzCkphdmFTY3JpcHQgYW5kIHN0eWxlIHNo
ZWV0cyBmb3IgYGh0bWxgIHVzaW5nIHRoZQptZXRhIGRhdGEgZmllbGRzIGBoZWFkZXItaW5j
bHVkZXMtLXBkZmAgYW5kIGBoZWFkZXItaW5jbHVkZXMtLWh0bWxgCnJlc3BlY3RpdmVseS4K
CkZvciByZXR1cm5pbmcgdGhlIGZvcm1hdCBzcGVjaWZpYyBjb2RlLCBlaXRoZXIgdGhlIGAh
UDFgIHN0YXRlbWVudCBjYW4KYmUgdXNlZCBAc2VjOm1kcHJpbnQgKipvcioqIHRoZSBgcmV0
dXJuYCBzdGF0ZW1lbnQgY2FuIGJlIHVzZWQuCklmIGJvdGggc3RhdGVtZW50cyBhcmUgbWl4
ZWQsIHRoZSBvdXRwdXQgd2hpY2ggaGFkIGJlZW4gcmV0dXJuZWQKd2lsbCBiZSBhcHBlbmRl
ZCB0byB0aGUgdGV4dCBnZW5lcmF0ZWQgd2l0aCB0aGUgYCFQMWAgc3RhdGVtZW50LgoKKipF
eGFtcGxlOiBGdW5jdGlvbnMgYW5kIFZhcmlhYmxlcyoqCmBgYCEKCWNsYXNzIGZtdF90ZXN0
MShmbXRjb2RlKToKCQlkZWYgaHRtbChzZWxmKToKCQkJXygiPHN1cD5IVE1MIGluIikKCQkJ
cmV0dXJuICJzdXBlcnNjcmlwdDwvc3VwPiIKCQlkZWYgcGRmKHNlbGYpOgoJCQlfXyhyIiIi
CgkJCQkke31fe1xtYm94e1BERiBpbiBzdWJzY3JpcHR9fSQKCQkJIiIiKQoKCXRlc3QxID0g
Zm10X3Rlc3QxKCkKCXRlc3QyID0gZm10Y29kZSgKCQlodG1sPSI8c3ViPkhUTUwgaW4gc3Vi
c2NyaXB0PC9zdWI+IiwKCQlwZGY9ciIke31ee1xtYm94e1BERiBpbiBzdXBlcnNjcmlwdH19
JCIKCSkKCXRlc3QzID0gZm10Y29kZShodG1sPSJIVE1MIiwgcGRmPSJQREYiKQpgYGAKCmBg
YG1kClRoZSBmb3JtYXQgY29kZSBgXFwhdGVzdDMoKWAgcmV0dXJucyB0aGUgZm9ybWF0IG9m
CnRoZSBkb2N1bWVudDogYFwhdGVzdDMoKWAuCiogYFwhdGVzdDEoKWAKKiBgXCF0ZXN0Migp
YApgYGAKClRoZSBmb3JtYXQgY29kZSBgXCF0ZXN0MygpYCByZXR1cm5zIHRoZSBmb3JtYXQg
b2YKdGhlIGRvY3VtZW50OiBgIXRlc3QzKClgLgoqIGAhdGVzdDEoKWAKKiBgIXRlc3QyKClg
CgoqKkV4YW1wbGU6IENsYXNzZXMqKgpgYGAhCgljbGFzcyBodG1sOgoJCWRlZiB0ZXN0MShz
ZWxmKToKCQkJXygiPHN1cD5IVE1MIGluIikKCQkJcmV0dXJuICJzdXBlcnNjcmlwdDwvc3Vw
PiIKCQlkZWYgdGVzdDIoc2VsZik6CgkJCXJldHVybiAiPHN1Yj5IVE1MIGluIHN1YnNjcmlw
dDwvc3ViPiIKCQlkZWYgdGVzdDMoc2VsZik6CgkJCXJldHVybiAiSFRNTCIKCgljbGFzcyBw
ZGY6CgkJZGVmIHRlc3QxKHNlbGYpOgoJCQlfXyhyIiIiCgkJCQkke31fe1xtYm94e1BERiBp
biBzdWJzY3JpcHR9fSQKCQkJIiIiKQoJCWRlZiB0ZXN0MihzZWxmKToKCQkJcmV0dXJuIHIi
JHt9XntcbWJveHtQREYgaW4gc3VwZXJzY3JpcHR9fSQiCgkJZGVmIHRlc3QzKHNlbGYpOgoJ
CQlyZXR1cm4gIlBERiIKCglmbXRjID0gZm10Y29kZShodG1sPWh0bWwoKSwgcGRmPXBkZigp
KQpgYGAKCmBgYG1kClRoZSBmb3JtYXQgY29kZSBgXFwhZm10Yy50ZXN0MygpYCByZXR1cm5z
IHRoZSBmb3JtYXQgb2YKdGhlIGRvY3VtZW50OiBgXCFmbXRjLnRlc3QzKClgLgoqIGBcIWZt
dGMudGVzdDEoKWAKKiBgXCFmbXRjLnRlc3QyKClgCmBgYAoKVGhlIGZvcm1hdCBjb2RlIGBc
IWZtdGMudGVzdDMoKWAgcmV0dXJucyB0aGUgZm9ybWF0IG9mCnRoZSBkb2N1bWVudDogYCFm
bXRjLnRlc3QzKClgLgoqIGAhZm10Yy50ZXN0MSgpYAoqIGAhZm10Yy50ZXN0MigpYAoKLS0t
CgojIGAhTWAgYCFNRGAgRXhhbXBsZXMgeyNzZWM6ZXhhbXBsZXN9CgojIyBKYXZhU2NyaXB0
IGluIGBodG1sYCBhbmQgUGxhY2Vob2xkZXIgaW4gYHBkZmAKCldoZW4gY3JlYXRpbmcgYCFN
RGAgdGV4dCBmb3IgYGh0bWxgIG91dHB1dCwgdGhlIHVzZXIgb2Z0ZW4gd2FudHMKaW50ZXJh
Y3Rpdml0eSB1c2luZyB3aWRnZXRzIGxpa2Ugc2xpZGVycywgY2hlY2sgYm94ZXMsIGRyb3Ag
ZG93biBib3hlcwpldGMuIEhvd2V2ZXIsIHdoZW4gZXhwb3J0aW5nIGludG8gYHBkZmAgdGhv
c2UgZWxlbWVudHMgbmVlZCB0byBiZQpyZXBsYWNlZCB3aXRoIG5vbi1pbnRlcmFjdGl2ZSBw
bGFjZWhvbGRlcnMuIEluIG9yZGVyIHRvIGRldmVsb3AgYSBzaW5nbGUKYCFNRGAgZG9jdW1l
bnQsIHdoaWNoIGNhbiBiZSByZW5kZXJlZCBpbiBgaHRtbGAgd2l0aCBpbnRlcmFjdGl2ZQpl
bGVtZW50cyBhbmQgaW50byBgcGRmYCB3aXRoIHBsYWNlaG9sZGVyLCB0aGUgYCFNYCBmb3Jt
YXQgY29kZXMgY2FuIGJlCnVzZWQsIHNlZSBAc2VjOmZvcm1jb2RlLiBUaGUgZm9sbG93aW5n
IGV4YW1wbGUgZGVmaW5lcyBhCmA8aW5wdXQgdHlwZT0icmFuZ2UiPmAgYW5kIHR3byBgPHNw
YW5zPmAgd2l0aCBgaWQ9Im15dmFsImAgYW5kCmBpZD0ibXlyZXMiYCwgaW4gb3JkZXIgdG8g
dXBkYXRlIHRoZSB2YWx1ZSBvZiAkeT1zaW4oeCkkIGluIGBodG1sYC4gRm9yCmBwZGZgIG91
dHB1dCB0aGUgZXF1YXRpb24gYW5kIHRoZSB2YWx1ZSByYW5nZSBpcyBzaG93bi4KCioqRXhh
bXBsZSoqCmBgYCEKCWNsYXNzIFJhbmdlKGZtdGNvZGUpOgoJCWRlZiBodG1sKHNlbGYpOgoJ
CQlfXygiIiIKCQkJCSR4XGluIFswJCA8aW5wdXQgdHlwZT0ncmFuZ2UnIHZhbHVlPScwJyBt
aW49JzAnIG1heD0nMTAwJwoJCQkJb25jaGFuZ2U9IgoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVu
dEJ5SWQoJ215dmFsJykuaW5uZXJIVE1MID0gdGhpcy52YWx1ZTsKCQkJCWRvY3VtZW50Lmdl
dEVsZW1lbnRCeUlkKCdteXJlcycpLmlubmVySFRNTCA9CgkJCQlNYXRoLnNpbih0aGlzLnZh
bHVlKTsiPiAkMTAwXSQKCQkJIiIiKQoJCWRlZiBwZGYoc2VsZik6CgkJCXJldHVybiAiJHhc
aW5bMCwxMDBdJCIKCWNsYXNzIEZvcm11bGEoZm10Y29kZSk6CgkJZGVmIGh0bWwoc2VsZik6
CgkJCV9fKCIiIgoJCQkJJHk9c2luKHgpPSQgPHNwYW4gaWQ9Im15cmVzIj4wLjAwMDwvc3Bh
bj4KCQkJCXdpdGggJHg9JCA8c3BhbiBpZD0ibXl2YWwiPjA8L3NwYW4+CgkJCSIiIikKCQlk
ZWYgcGRmKHNlbGYpOgoJCQlyZXR1cm4gIiR5PXNpbih4KSQiCglSYSA9IFJhbmdlKCkKCUZv
ID0gRm9ybXVsYSgpCmBgYAoKYGBgbWQKJHgkIGFuZCAkeSQgYXJlIHJlbGF0ZWQgdG8gZWFj
aCBvdGhlciBieSBgXCFGbygpYC4KCiR4JCBtdXN0IGJlIGluIHRoZSByYW5nZSBgXCFSYSgp
YC4KYGBgCgokeCQgYW5kICR5JCBhcmUgcmVsYXRlZCB0byBlYWNoIG90aGVyIGJ5IGAhRm8o
KWAuCgokeCQgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgYCFSYSgpYC4KCiMjIEdlbmVyYXRlIGEg
RmlndXJlIG9uLXRoZS1mbHkgZHVyaW5nIFByZXByb2Nlc3NpbmcKClRoaXMgc2VjdGlvbiBp
bGx1c3RyYXRlcyBob3cgcHl0aG9uIG1vZHVsZXMgY2FuIGJlIHVzZWQgdG8gY3JlYXRlCmRv
Y3VtZW50IGNvbnRlbnQuIERvY3VtZW50IGNvbnRlbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUg
YGRhdGEvYApkaXJlY3Rvcnkgb2YgdGhlIGN1cnJlbnQgcHJvamVjdCB3b3JraW5nIGRpcmVj
dG9yeSAocmVmZXIgdG8gYCFNYApwcm9qZWN0IHN0cnVjdHVyZSwgQHNlYzpwcm9qZWN0KQoK
IVtUaGlzIEZpZ3VyZSB3YXMgZ2VuZXJhdGVkIHVzaW5nIGAhTlVgIGFuZApgIVBMYC5dKGZp
Z3VyZTEucG5nKXsjZmlnOmZpZ3VyZTF9CgpbYCFOVWBdKGh0dHBzOi8vd3d3Lm51bXB5Lm9y
ZykgYW5kIFtgIVBMYF0oaHR0cHM6Ly93d3cubWF0cGxvdGxpYi5vcmcpCmFyZSBwb3dlcmZ1
bCBweXRob24gbW9kdWxlcyBmb3IgbWF0aGVtYXRpY2FsIGNvbXB1dGluZyBhbmQgcGxvdApn
ZW5lcmF0aW9uLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGdlbmVyYXRl
IEBmaWc6ZmlndXJlMQp1c2luZyBgIU5VYCBhbmQgYCFQTGAgYW5kIGluY2x1ZGUgaXQgaW50
byB0aGUgZG9jdW1lbnQuCgoqKkV4YW1wbGUqKgoKYGBgIQoJaW1wb3J0IG51bXB5IGFzIG5w
CglpbXBvcnQgbWF0cGxvdGxpYi5weXBsb3QgYXMgcGx0CglHUkVFSyA9IGxhbWJkYSBBOiBj
aHIob3JkKHUiXHUwMzkxIikgKyBvcmQoQSkgLSBvcmQoIkEiKSkKCWdyZWVrID0gbGFtYmRh
IGE6IGNocihvcmQodSJcdTAzYjEiKSArIG9yZChhKSAtIG9yZCgiYSIpKQoJY20yaW5jaCA9
IGxhbWJkYSB4eTogdHVwbGUoaS8yLjU0IGZvciBpIGluIHh5KQoJZm9udHNpemUgPSBpbnQo
Zm9udHNpemVbOi0yXSkgIyBjb252ZXJ0IHRvIGludAoJZmlnc2l6ZSA9IGNtMmluY2goZmln
c2l6ZSkgIyBjb252ZXJ0IGZyb20gY20gdG8gaW5jaAoJcGFyYW1zID0gewoJCSdmaWd1cmUu
Zmlnc2l6ZSc6IGZpZ3NpemUsCgkJJ2xlZ2VuZC5mb250c2l6ZSc6IGZvbnRzaXplLAoJCSdh
eGVzLmxhYmVsc2l6ZSc6IGZvbnRzaXplLAoJCSdheGVzLnRpdGxlc2l6ZSc6IGZvbnRzaXpl
LAoJCSd4dGljay5sYWJlbHNpemUnOiBmb250c2l6ZSwKCQkneXRpY2subGFiZWxzaXplJzog
Zm9udHNpemUsCgkJJ2ZvbnQuZmFtaWx5JzogJ1RpbWVzIE5ldyBSb21hbicKCX0KCXBsdC5y
Y1BhcmFtcy51cGRhdGUocGFyYW1zKQoJeCA9IG5wLnJhbmRvbS5yYW5kKDUwKQoJeSA9IG5w
LnJhbmRvbS5yYW5kKDUwKQoJcGx0LmZpZ3VyZSgpCglwbHQuc2NhdHRlcih4LCB5LCBsYWJl
bD0iUmFuZG9tIENvb3JkaW5hdGVzIikKCXRleHQgPSAiIi5qb2luKFtncmVlayhpKSBmb3Ig
aSBpbiBbImEiLCAiYiIsICJjIiwgImQiXV0pCglwbHQuYW5ub3RhdGUodGV4dCwgeHk9KDAu
NSwwLjUpLCB4eXRleHQ9KDAuMjUsMC4yNSksCgkJYXJyb3dwcm9wcz1kaWN0KGFycm93c3R5
bGU9Jy0+Jyxsdz0xLjUpKQoJcGx0LnRpdGxlKCJUd28gUmFuZG9tIERhdGFzZXRzIikKCXBs
dC54bGFiZWwociJEYXRhICMxIC0gJFxtYXRoZGVmYXVsdHslc18xfSQiICUgR1JFRUsoIkMi
KSkKCXBsdC55bGFiZWwociJEYXRhICMyIC0gJFxtYXRoZGVmYXVsdHslc18yfSQiICUgR1JF
RUsoIkQiKSkKCXBsdC5ncmlkKCkKCXBsdC5sZWdlbmQoKQoJcGx0LnRpZ2h0X2xheW91dCgp
CglwbHQuc2F2ZWZpZygiYnVpbGQvZmlndXJlMS5wbmciLCBkcGk9ZmlnZHBpKQoJcGx0LmNs
b3NlKCJhbGwiKQpgYGAKCmBgYG1kCiFbVGhpcyBGaWd1cmUgd2FzIGdlbmVyYXRlZCB1c2lu
ZyBgIU5VYAphbmQgYCFQTGAuXShmaWd1cmUxLnBuZyl7I2ZpZzpmaWd1cmUxfQpgYGAKCiMj
IEdlbmVyYXRlIGEgU2VxdWVuY2Ugb2YgRmlndXJlcyBvbi10aGUtZmx5CgpUaGlzIHNlY3Rp
b24gaWxsdXN0cmF0ZXMgaG93IGEgc2VxdWVuY2Ugb2YgY29tcGxleCBmaWd1cmVzIGNhbiBi
ZQpnZW5lcmF0ZWQgdXNpbmcgYCFOVWAgYW5kIGAhUExgIGFuZCBob3cgdGhlIGZpZ3VyZXMg
YXJlIGZvcm1hdHRlZAp1c2luZyBweXRob24gYW5kIHJlZmVyZW5jZWQgdXNpbmcgYCFNYC4K
ClN1cHBvc2Ugb25lIGV4cGVyaW1lbnQgd2hpY2ggY2FuIGJlIHJ1biBpbiBmb3VyIGRpZmZl
cmVudCBzZXR1cHMgd2l0aApkaWZmZXJlbnQgdmFsdWVzIGZvciAkXGxhbWJkYT0kCmAhIiwg
Ii5qb2luKFsiKCVkKSAkJS4yZiRubSIlKGssIDEyNS4zMyprKSBmb3IgayBpbiByYW5nZSgx
LCA1KV0pYC4KRWFjaCBydW4gb2YgdGhlIGV4cGVyaW1lbnQgdXNpbmcgc2V0dXAgKDEpLS0o
NCksIHR3byBhZGRpdGlvbmFsCnBhcmFtZXRlcnMgJFx2YXJlcHNpbG9uJCBhbmQgJFxhbHBo
YSQgYXJlIHZhcnJpZWQgYmV0d2VlbgokMTAuMlxsZG90czMwLjZcJSQgYW5kICQwLjFcbGRv
dHMwLjMkSHogcmVzcGVjdGl2ZWx5LgoKVGhlIHJlc3VsdHMgb2YgdGhlIGV4cGVyaW1lbnRz
IGZvciB0aGUgc2V0dXBzICgxKS0tKDQpIGFyZSBzdW1tYXJpemVkCmluIHRoZSBAZmlnOmZp
Z3VyZTJfMSwgIUBmaWc6ZmlndXJlMl8yLCAhQGZpZzpmaWd1cmUyXzMgYW5kCiFAZmlnOmZp
Z3VyZTJfNC4KCioqRXhhbXBsZSoqCgpgYGAhCgluID0gMTAwCglhbHBoYSA9IHUiXHUwM2Ix
IgoJZXBzaWxvbiA9IHUiXHUwM2I1IgoJbGFtZGEgPSB1Ilx1MDNiYiIKCWYgPSBsYW1iZGEg
eCwgYSwgYjogYSoobnAuc3FydCh4KStiKm5wLnNpbih4KmIpKQoJZyA9IGxhbWJkYSB4LCBh
ICxiLCBjOiBucC5mYWJzKGYoeCwgYSwgYikgLSBmKGMsIGEsIGIpKSArIGMKCWRhdCA9IG5w
Lnplcm9zKChuLTEsIDMsIDMsIDQpLCBkdHlwZT1ucC5mbG9hdDMyKQoJY29scyA9IFsicmVk
IiwgImdyZWVuIiwgImJsdWUiXQoJbWFyayA9IFsibyIsICJ4IiwgIjwiXQoJeCA9IG5wLmFy
cmF5KFs1MC4qeC9uIGZvciB4IGluIHJhbmdlKDEsIG4pXSwgZHR5cGU9bnAuZmxvYXQzMikK
CWZvciBrLCBjIGluIGVudW1lcmF0ZShbMTAuLCAyMC4sIDMwLiwgNDAuXSk6CgkJZm9yIGks
IGEgaW4gZW51bWVyYXRlKFsxLCAyLCA0XSk6CgkJCWZvciBqLCBiIGluIGVudW1lcmF0ZShb
MC4yLCAwLjQsIDAuNl0pOgoJCQkJZGF0WzosIGksIGosIGtdID0gZyh4LCBhLCBiLCBjKQoJ
CXBsdC5maWd1cmUoKQoJCWZvciBqIGluIHJhbmdlKDMpOgoJCQlmb3IgaSBpbiByYW5nZSgz
KToKCQkJCWxhYmVsX2kgPSAiJXM9JS4xZiUlIiAlIChlcHNpbG9uLCAoaSsxKSoxMC4yKSBc
CgkJCQkJaWYgaiA9PSAwIGVsc2UgTm9uZQoJCQkJbGFiZWxfaiA9ICIlcz0lLjFmSHoiICUg
KGFscGhhLCAoaisxKS8xMC4pIFwKCQkJCQlpZiBpID09IDAgZWxzZSBOb25lCgkJCQl5ID0g
ZGF0WzosIGksIGosIGtdLmZsYXR0ZW4oKQoJCQkJcGx0LnBsb3QoeCwgeSwgY29sb3I9Y29s
c1tpXSwgbHc9MC43NSwgbGFiZWw9bGFiZWxfaSkKCQkJCXBsdC5zY2F0dGVyKHhbMTo6NF0s
IHlbMTo6NF0sIGNvbG9yPSJibGFjayIsCgkJCQkJbWFya2VyPW1hcmtbal0sIGx3PTAuNSwg
cz01LCBsYWJlbD1sYWJlbF9qKQoJCWsgPSBrICsgMQoJCWt2YWwgPSBrKjEyNS4zMwoJCXBs
dC50aXRsZSgiRXhwZXJpbWVudCBTZXR1cCAjJWQ6ICVzPSUuMmZubSIgJSAoaywgbGFtZGEs
IGt2YWwpKQoJCXBsdC54bGFiZWwoIlRpbWUgW3NdIikKCQlwbHQueWxhYmVsKCJJbnRlbnNp
dHkgW2tnL3PCs10iKQoJCXBsdC5ncmlkKCkKCQlwbHQubGVnZW5kKCkKCQlwbHQudGlnaHRf
bGF5b3V0KCkKCQlwbHQuc2F2ZWZpZygiYnVpbGQvZmlndXJlMi0lZC5wbmciICUgaywgZHBp
PWZpZ2RwaSkKCQlwbHQuY2xvc2UoImFsbCIpCgkJX18oZiIiIgoJCQkhW1RoaXMgaXMgdGhl
IHJlc3VsdCBvZiB0aGUgZXhwZXJpbWVudCBhY2NvcmRpbmcKCQkJdG8gdGhlIHNldHVwICN7
a30gd2l0aCAke2xhbWRhfT17a3ZhbH0kbm0uIFRoZSBwYXJhbWV0ZXJzCgkJCSR7ZXBzaWxv
bn0kIGFuZCAke2FscGhhfSQgYXJlIHZhcnJpZWQgYmV0d2VlbgoJCQkkMTAuMlxsZG90czMw
LjZcJSQgYW5kICQwLjFcbGRvdHMwLjMkSHoKCQkJcmVzcGVjdGl2ZWx5Ll0oZmlndXJlMi17
a30ucG5nKXt7I2ZpZzpmaWd1cmUyX3trfX19CgoJCSIiIikKYGBgCgotLS0KCipUaGFua3Mg
Zm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkgYG1hcmt5YC4qCgotLS0KCiMgUmVmZXJlbmNlcwo=
'''
pack_marky_mdi = '''
LS0tCmluY2x1ZGVkOiAxCi0tLQojIEluY2x1ZGVkIFNlY3Rpb24KYGBgIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKCV8oIkhlbGxvIE1hcmtkb3duISIpCgl4ID0gMTIzCgl5ID0gNC41
NjcKYGBgCgpGaXJzdHxTZWNvbmQKLS0tLS18LS0tLS0tCmAheDowNWRgfGAheTouNGZgCg==
'''
pack_marky_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBEb2N1bWVudGF0aW9uLgo+IFRoaXMgZG9jdW1lbnQgcmVwcmVzZW50cyB0aGUg
YG1hcmt5YCBzb3VyY2UgY29kZSBiZWZvcmUKPiBwcm9jZXNzaW5nIHB5dGhvbiBjb2RlIGVt
YmVkZGVkIGludG8gdGhlIGRvY3VtZW50IGl0c2VsZi4KPiBGb3IgZG9jdW1lbnRhdGlvbiBh
bmQgZG93bmxvYWQgcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJlcG9zaXRvcnld
KGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSkuCgotLS0KCmBgYHB5dGhvbgoh
ISEgbWFya3kubWQgcmF3ID4+MQpgYGAK
'''
pack_quickstart_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IgphdXRob3I6IGxlaG1hbm43CmRhdGU6
IDIwMjEtMDktMDkKaGVhZGVyLWluY2x1ZGVzLS1wZGY6CiAgIFx1c2VwYWNrYWdle211bHRp
Y29sfQogICBcaHlwZXJzZXR1cHtjb2xvcmxpbmtzPWZhbHNlLAogICBhbGxib3JkZXJjb2xv
cnM9ezAgMCAwfSwKICAgcGRmYm9yZGVyc3R5bGU9ey9TL1UvVyAxfX0KaGVhZGVyLWluY2x1
ZGVzLS1odG1sOiA+CiAgIDxzdHlsZT4qIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfTwv
c3R5bGU+Cnhub3MtY2xldmVyZWY6IHRydWUKeG5vcy1jYXBpdGFsaXNlOiB0cnVlCmZvbnRz
aXplOiAxMXB0CgotLS0KCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBpcyBhIGBtYXJr
eWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5YCBtYXJr
dXAgdXNpbmcgc2ltcGxlIGV4YW1wbGVzLgo+IFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9m
IHRoaXMgZG9jdW1lbnQgY2FuIGJlIHJlYWQKPiBbaGVyZV0ocXVpY2stc3JjLj8/PykuCj4g
Rm9yIG1vcmUgaW5mb3JtYXRpb24gcGxlYXNlIHJlZmVyIHRvIHRoZQo+IFtgbWFya3lgIHJl
cG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9tYXJreSksCj4gW2BtYXJr
eWAgZG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSBvciB0aGUKPiBzaW1wbGUgW2BtYXJreWAg
ZXhhbXBsZV0oZXhhbXBsZS4/Pz8pLgoKLS0tCgojIEludHJvZHVjdGlvbgoKVGhpcyBpcyBh
IGBtYXJreWAgcXVpY2tzdGFydCBkb2N1bWVudCBmb3IgaWxsdXN0cmF0aW5nIGBtYXJreWAg
bWFya3VwCnVzaW5nIHNpbXBsZSBleGFtcGxlcy4gVGhpcyBkb2N1bWVudCBpcyB0aGUgcmVu
ZGVyZWQgdmVyc2lvbiBvZgp0aGUgc291cmNlIGNvZGUgcHJlc2VudGVkIFtoZXJlXShxdWlj
ay1zcmMuPz8/KS4gVGhlIGBtYXJreWAgbWFya3VwCmlzIGNvbXBhdGlibGUgd2l0aCBzdGFu
ZGFyZCBNYXJrZG93biBhbmQgY2FuIGJlIHJlYWQgYXMtaXMuClRoaXMgZG9jdW1lbnQgcmVw
cmVzZW50cyB0aGUgb3V0cHV0IG9mIGBtYXJreWAgYWZ0ZXIgcHJvY2Vzc2luZwpweXRob24g
Y29kZSwgd2hpY2ggaXMgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgpJbiBv
cmRlciB0byB1bmRlcnN0YW5kIHRoZSBleGFtcGxlcyBhbmQgc2VlIHRoZSBjb21wbGV0ZQpg
bWFya3lgIHN5bnRheCwgdGhlIHNvdXJjZSBjb2RlIG9mIHRoaXMgZmlsZSBjYW4gYmUgcmVh
ZApbaGVyZV0ocXVpY2stc3JjLj8/PykuIFRoZSBjb21wbGV0ZSBkb2N1bWVudGF0aW9uIG9m
IGBtYXJreWAKaXMgYXZhaWxhYmxlIFtoZXJlXShtYXJreS4/Pz8pCgotLS0KCiMgTWFya2Rv
d24KCmBtYXJreWAgaXMgYSBNYXJrZG93biBwcmVwcm9jZXNzb3IgYWxsb3dpbmcgdG8gdHJh
bnNmb3JtIE1hcmtkb3duCnRleHQgdXNpbmcgcHl0aG9uLiBUaGUgcHJlcHJvY2Vzc2VkIE1h
cmtkb3duIHRleHQgaXMgcmVuZGVyZWQgdG8gYHBkZmAKYW5kIGBodG1sYCAob3RoZXIgZm9y
bWF0cyB1c2luZyBgcGFuZG9jYCkuIGBwYW5kb2NgIGhhcyBhIHBvd2VyZnVsIHNldApvZiBN
YXJrZG93biBleHRlbnNpb25zIHN1cHBvcnRpbmcgc3RydWN0dXJlZCB3cml0aW5nIGFzIHdl
bGwgYXMKYmlibGlvZ3JhcGh5LCBmaWd1cmUgcmVmZXJlbmNpbmcsIHRhYmxlIHJlZmVyZW5j
aW5nLCB0ZXgtc3R5bGUKZXF1YXRpb25zIHdpdGggcmVmZXJlbmNpbmcgZXRjLiAocmVmZXIg
dG8gU2NpZW50aWZpYyBXcml0aW5nIGluCk1hcmtkb3duLCBbYG1hcmt5YCBEb2N1bWVudGF0
aW9uXShtYXJreS4/Pz8pKS4KClRoZSByZW5kZXJpbmcgb2YgTWFya2Rvd24gdGV4dCBpbnRv
IGBodG1sYCBhbmQgYHBkZmAgY29uc2lzdHMgb2YgdGhyZWUKc3RlcHMgd2hpY2ggYXJlIGls
bHVzdHJhdGVkIHVzaW5nIHRoZSBgbWFya3lgIGRvY3VtZW50YXRpb24KYG1kL21hcmt5Lm1k
YC4KCjEuICpQcmVwcm9jZXNzaW5nKiBcCiAgIChwcm9jZXNzIGBtYXJreWAgbWFya3VwLCBy
dW4gY29kZSwgZ2VuZXJhdGUgY29udGVudCkKCSogSW5wdXQ6IGBtYXJreWAgTWFya2Rvd24g
dGV4dDogYG1kL21hcmt5Lm1kYAoJKiBPdXRwdXQ6IHBhbmRvYyBNYXJrZG93biB0ZXh0OiBg
YnVpbGQvbWFya3kubWRgCjIuICpMaW5raW5nKiBcCgkoYXBwbHkgZm9ybWF0IHNwZWNpZmlj
IGNvZGUgZm9yIGBodG1sYCBhbmQgYHBkZmApCgkqIElucHV0OiBwYW5kb2MgTWFya2Rvd24g
dGV4dDogYGJ1aWxkL21hcmt5Lm1kYAoJKiBPdXRwdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0
ZXh0IGZvciBgaHRtbGA6IGBidWlsZC9tYXJreS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtk
b3duIHRleHQgZm9yIGBwZGZgOiBgYnVpbGQvbWFya3kucGRmLm1kYAozLiAqUmVuZGVyaW5n
KiBcCiAgIChyZW5kZXIgYGh0bWxgIGFuZCBgcGRmYCBkb2N1bWVudCB1c2luZyBgcGFuZG9j
YCkKCSogSW5wdXQKCTEuIHBhbmRvYyBNYXJrZG93biB0ZXh0IGZvciBgaHRtbGA6IGBidWls
ZC9tYXJreS5odG1sLm1kYAoJMi4gcGFuZG9jIE1hcmtkb3duIHRleHQgZm9yIGBwZGZgOiBg
YnVpbGQvbWFya3kucGRmLm1kYAoJKiBPdXRwdXQKCTEuIGBodG1sYCBkb2N1bWVudDogYGh0
bWwvbWFya3kuaHRtbGAKCTIuIGBwZGZgIGRvY3VtZW50OiBgcGRmL21hcmt5LnBkZmAKClRo
ZSB3aG9sZSBwcm9jZXNzIGlzIGVjYXBzdWxhdGVkIGludG8gYSBweXRob24gc2NyaXB0IGFu
ZCBhIE1ha2VmaWxlLgpSZW5kZXJpbmcgZG9jdW1lbnRzIHVzaW5nIGBtYXJreWAgcmVxdWly
ZXMgdG8gd3JpdGUgTWFya2Rvd24gdGV4dAphbmQgcnVuIGBtYWtlIGFsbGAuCgotLS0KCiMg
QXV0b21hdGVkIFJlcG9ydGluZwoKTWFya2Rvd24gdGV4dCB3aXRoIGVtYmVkZGVkIGNvZGUg
c25pcHBldHMgaXMgYSBwb3dlcmZ1bCBwYXJhZGlnbSBmb3IKYXV0b21hdGVkIHRlY2huaWNh
bCBhbmQgc2NpZW50aWZpYyByZXBvcnRpbmcgYW5kIHBvc3NpYmx5IG90aGVyCmRvY3VtZW50
cy4gT24gb25lIGhhbmQgZGF0YSBjYW4gYmUgb3JnYW5pemVkIGFjY29yZGluZyB0byB0aGUg
ZG9jdW1lbnQKc3RydWN0dXJlIHVzaW5nIGFsZ29yaXRobXMgZW1iZWRkZWQgaW4gdGhlIHJl
cG9ydCBpdHNlbGYsIGFuZCBvbiB0aGUKb3RoZXIgaGFuZCB0aGUgZGF0YSBjYW4gYmUgaW5z
ZXJ0ZWQgaW4gdGhlIHJlcG9ydCBkaXJlY3RseSBmcm9tCnZhcmlhYmxlcy4gVGhpcyBlbGxp
bWluYXRlcyB0aGUgbmVlZCBmb3IgbWFudWFsIGNvcHlpbmcgb2YgZGF0YSBpbnRvCnRoZSB0
ZXh0IGFuZCBhbGxvd3MgdG8gdXBkYXRlIG9yIHJlcHJvZHVjZSB0aGUgcmVwb3J0IGF1dG9t
YXRpY2FsbHkKZm9yIHRoZSBzYW1lIGFuZCBvdGhlciBkYXRhLiBVc2luZyB0aGUgc2ltcGxl
IGBtYXJreWAgc3ludGF4IHRoZSB1c2VyCmNhbiBjb25jZW50cmF0ZSBvbiBkb2N1bWVudGF0
aW9uIHdyaXRpbmcgZnJvbSB0aGUgTWFya2Rvd24gcGVyc3BlY3RpdmUKYW5kIGFzc2lzdCB0
aGUgY3JlYXRpb24gb2YgZG9jdW1lbnQgY29udGVudCB1c2luZyBweXRob24gY29kZQpzbmlw
cGV0cy4KCmBwYW5kb2NgIGZpbHRlcnMgKHJlZmVyIHRvIFJlbGF0ZWQgV29yaywgW2BtYXJr
eWAgRG9jdW1lbnRhdGlvbl0obWFya3kuPz8/KSkKYWxsb3cgdHJhbnNmb3JtaW5nIHRoZSBk
b2N1bWVudCB3aGlsZSByZW5kZXJpbmcgaXQuIGBwYW5kb2NgIGZpbHRlcnMKb3BlcmF0ZSBv
biBhbiBpbnRlcm5hbCBhYnN0cmFjdCBzeW50YXggdHJlZSAoQVNUKSByZXByZXNlbnRhdGlv
biwKdGhlcmVmb3JlIHRoZSB1c2VyIG11c3QgZXhwcmVzcyBkeW5hbWljYWxseSBjcmVhdGVk
IGRvY3VtZW50IGNvbnRlbnQKYXMgbm9kZXMgaW4gdGhlIGZvcm1hdCBvZiB0aGUgQVNULiBg
bWFya3lgIHRha2VzIGEgc2xpZ2h0IGRpZmZlcmVudAphcHByb2FjaCBhbmQgb3BlcmF0ZXMg
b24gdGhlIE1hcmtkb3duIHRleHQgaXRzZWxmLCBiZWZvcmUgaXQgaXMgcGFyc2VkCmFuZCBy
ZW5kZXJlZC4KClB5dGhvbiBjb2RlIGlzIGVtYmVkZGVkIGludG8gdGhlIGRvY3VtZW50IHdp
dGggYSBzaW1wbGUgbWFya3VwIHN5bnRheApzaW1pbGFyIHRvIFtSbWFya2Rvd25dKGh0dHBz
Oi8vd3d3LnJtYXJrZG93bi5vcmcpCnVzaW5nIGNvZGUgYmxvY2tzIGFuZCBpbmxpbmUgZXhw
cmVzc2lvbnMuIGBtYXJreWAgcGFyc2VzIHRoZSBjb2RlLApleGVjdXRlcyBpdCBhbmQgd3Jp
dGVzIHRoZSByZXN1bHRzIGJhY2sgaW50byB0aGUgTWFya2Rvd24gdGV4dC4gVGhlCmNvZGUg
Y2FuIHByb2R1Y2Ugb3V0cHV0IHVzaW5nIGFsZ29yaXRobXMgb3Igb3V0cHV0IGZvcm1hdHRl
ZCBzdHJpbmcKdmFyaWFibGVzLiBgbWFya3lgIGFsc28gYWxsb3dzIGZvciB0aGUgaW5zZXJ0
aW9uIG9mIGZvcm1hdCBkZXBlbmRlbnQKcmF3IGNvZGUgaW4gYGh0bWxgIGFuZCAqdGV4KiAo
Zm9yIGBwZGZgICBkb2N1bWVudHMpLgoKMS4gY29kZSBzbmlwcGV0cyBhcmUgZW1iZWRkZWQg
aW50byB0aGUgZG9jdW1lbnQgdGV4dAoyLiBjb2RlIHNuaXBwZXRzIGFyZSBleGVjdXRlZCBk
dXJpbmcgcHJlcHJvY2Vzc2luZwozLiBjb2RlIHByb2R1Y2VzIHRleHQgZm9yIHRoZSBNYXJr
ZG93biBkb2N1bWVudAo0LiBjb2RlIHZhcmlhYmxlcyBhcmUgZGlzcGxheWVkIGluIHRoZSBk
b2N1bWVudCB0ZXh0CjUuIGZvcm1hdCBkZXBlbmRlbnQgY29kZSBpcyBhcHBsaWVkIGZvciBg
aHRtbGAgYW5kIGBwZGZgCgotLS0KCiMgRG93bmxvYWQgYW5kIFJ1biBgbWFya3lgCgpgbWFy
a3lgIGlzIE1hcmtkb3duIHByZXByb2Nlc3NvciBhbGxvd2luZyB0byBleGVjdXRlIGVtYmVk
ZGVkIHB5dGhvbgpjb2RlIGluIE1hcmtkb3duIGRvY3VtZW50cy4gQWZ0ZXIgcHJlcHJvY2Vz
c2luZywgYSByZWd1bGFyIE1hcmtkb3duCmZpbGUgaXMgcHJlc2VudCwgd2hpY2ggaXMgcmVu
ZGVyZWQgaW50byBgaHRtbGAgYW5kIGBwZGZgIHVzaW5nCmBwYW5kb2NgLiBgbWFya3lgIGhh
bmRsZXMgYWxsIHRoaXMgc3RlcHMgdXNpbmcgYSBNYWtlZmlsZS4KYG1hcmt5YCBpcyBhIHNp
bmdsZS1maWxlIHNjcmlwdCB3aGljaCBkZXBlbmRzIG9uIGBweXRob25gICg+PTMuNiksCmBw
YW5kb2NgICg+PTIuMTEpLCBgcHl5YW1sYCBhbmQgYHBhbmRvYy14bm9zYC4KCioqSW5zdGFs
bGluZyBEZXBlbmRlbmNpZXMqKgoKYHBhbmRvY2AgYmluYXJpZXMgZm9yIERlYmlhbi1iYXNl
ZCBMaW51eCBhcmUgcmVsZWFzZWQKW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qZ20vcGFu
ZG9jL3JlbGVhc2VzKS4KYHB5eWFtbGAgaXMgaW5zdGFsbGVkIHVzaW5nIHRoZSBsaW51eCBw
YWNrYWdlIG1hbmFnZXIgb3IgYHBpcGAgYW5kCmBwYW5kb2MteG5vc2AgY29uc2lzdHMgb2Yg
dGhlIGNvbXBvbmVudHMgYGZpZ25vc2AsIGBzZWNub3NgLCBgZXFub3NgCmFuZCBgdGFibGVu
b3NgIHdoaWNoIGFyZSBpbnN0YWxsZWQgdXNpbmcgYHBpcGAuIERlcGVuZGluZyBvbiB0aGUK
bGludXggaW5zdGFsbGF0aW9uIG1heWJlIGBwaXAzYCBoYXMgdG8gYmUgdXNlZC4KCmBgYGJh
c2gKcGlwIGluc3RhbGwgcHl5YW1sCnBpcCBpbnN0YWxsIHBhbmRvYy1maWdub3MKcGlwIGlu
c3RhbGwgcGFuZG9jLXNlY25vcwpwaXAgaW5zdGFsbCBwYW5kb2MtZXFub3MKcGlwIGluc3Rh
bGwgcGFuZG9jLXRhYmxlbm9zCmBgYAoKKipEb3dubG9hZCBgbWFya3lgIFNjcmlwdCoqCgpg
bWFya3lgIGlzIGRvd25sb2FkZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBg
YGJhc2gKY2QgJEhPTUUKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9sZWhtYW5uNy9t
YXJreS5naXQKY2QgbWFya3kKYGBgCgpBbHRlcm5hdGl2ZWx5LCBtYXJreSBjYW4gYmUgb2J0
YWluZWQgZGlyZXRseSB3aXRob3V0IGBnaXRgOgoKYGBgYmFzaApjZCAkSE9NRQpta2RpciBt
YXJreQpjZCBtYXJreQp3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9s
ZWhtYW5uNy9tYXJreS9tYWluL21hcmt5LnB5CmNobW9kICt4IG1hcmt5LnB5CmBgYAoKKipJ
bml0aWFsaXplIGBtYXJreWAgRW52aXJvbm1lbnQqKgoKVGhlIGBtYXJreWAgZW52aXJvbm1l
bnQgY29uc2lzdHMgb2YgdGhlIE1ha2VmaWxlIGFuZCB0aGUgZG9jdW1lbnRhdGlvbi4KVGhl
IGBtYXJreWAgTWFrZWZpbGUsIGRvY3VtZW50YXRpb24gYW5kIHF1aWNrc3RhcnQgYXJlIHVu
cGFja2VkIGZyb20KdGhlIGBtYXJreS5weWAgc2NyaXB0IGZpbGUgaW50byB0aGUgY3VycmVu
dCB3b3JraW5nIGRpcmVjdG9yeS4KVGhlIGBtYXJreWAgZW52aXJvbm1lbnQgaXMgaW5pdGlh
bGl6ZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCmBgYGJhc2gKY2QgJEhPTUUK
Y2QgbWFya3kKLi9tYXJreS5weSAtLWluaXQKV1JJVEUgLi9tZC9tYXJreS5tZApXUklURSAu
L21kL21hcmt5Lm1kaQpXUklURSAuL21kL21hcmt5LXNyYy5tZApXUklURSAuL21kL3F1aWNr
c3RhcnQubWQKV1JJVEUgLi9tZC9xdWljay1zcmMubWQKV1JJVEUgLi9tZC9leGFtcGxlLm1k
CldSSVRFIC4vbWQvZXhhbXBsZS1zcmMubWQKV1JJVEUgLi9kYXRhL21hcmt5LmJpYgpVU0FH
RQoxLiBgbWFrZSBoZWxwYAoyLiBgbWFrZSBhbGwtaHRtbCBodHRwZGAKMy4gYG1ha2UgYWxs
LXBkZmAKYGBgCgpEdXJpbmcgaW5pdGlhbGl6YXRpb24gYG1hcmt5YCBjcmVhdGVzIHR3byBk
aXJlY3RvcmllcyBgbWQvYCBhbmQgYGRhdGEvYC4KYG1kL2AgaXMgdGhlIGRpcmVjdG9yeSB3
aGljaCBjb250YWlucyB0aGUgTWFya2Rvd24gdGV4dCB0byBiZSByZW5kZXJlZAppbnRvIGBo
dG1sYCBhbmQgYHBkZmAuIGBkYXRhL2AgaXMgdGhlIHJlc291cmNlIGRpcmVjdG9yeSB3aGlj
aCBjb250YWlucwpiaWJsaW9ncmFwaHksIGltYWdlcywgdmlkZW9zIGFuZCBvdGhlciBhc3Nl
dHMuCgoqKlJlbmRlciBEb2N1bWVudGF0aW9uIGFuZCBFeGFtcGxlcyoqCgpJZiBhbGwgZGVw
ZW5kZW5jaWVzIGhhdmUgYmVlbiBpbnN0YWxsZWQgYWNjb3JkaW5nbHkgYW5kIHRoZSBgbWFy
a3lgCmVudmlyb25tZW50IGlzIGluaXRpYWxpemVkLCBgbWFya3lgIGNhbiBiZSB1c2VkIHRv
IHJlbmRlciBhIGxvY2FsCmNvcHkgb2YgdGhlIGRvY3VtZW50YXRpb24sIHRoZSBxdWlja3N0
YXJ0IGFuZCB0aGUgZXhhbXBsZS4KClRoZSBmb2xsb3dpbmcgY29tbWFuZHMgcmVuZGVyIHRo
ZSBNYXJrZG93biB0ZXh0IG9mIHRoZSBkb2N1bWVudGF0aW9uLgoKYGBgYmFzaApjZCAkSE9N
RQpjZCBtYXJreQptYWtlIGFsbC1wZGYKbWFrZSBhbGwtaHRtbApgYGAKCkR1cmluZyBgbWFr
ZWAgYSBuZXcgZGlyZWN0b3J5IGBidWlsZC9gIGlzIGNyZWF0ZWQsIHdoaWNoIGNvbnRhaW5z
CnRlbXBvcmFyeSBmaWxlcyAocHJlcHJvY2Vzc2VkIE1hcmtkb3duIHRleHQsIGxpbmtlZCB0
ZXh0IGZvciBgaHRtbGAKYW5kIGBwZGZgKS4gVGhlIHJlc3VsdGluZyBgaHRtbGAgYW5kIGBw
ZGZgIGRvY3VtZW50cyBhcmUgcGxhY2VkIGluc2lkZQpgaHRtbC9gIGFuZCBgcGRmL2AuIEZv
ciByZW5kZXJpbmcgYHBkZmAgYSB0ZXggZW52aXJvbm1lbnQgbGlrZQpgdGV4bGl2ZWAgbmVl
ZHMgdG8gYmUgaW5zdGFsbGVkLiBGb3IgcmVuZGVyaW5nIHRoZSBgaHRtbGAgZG9jdW1lbnRz
LApgcGFuZG9jYCByZXF1aXJlcyBpbnRlcm5ldCBhY2Nlc3MsIGJlY2F1c2UgamF2YSBzY3Jp
cHRzIGFuZCBzdHlsZQpzaGVldHMgYXJlIGZldGNoZWQgZnJvbSBjb250ZW50IGRlbGl2ZXJ5
IG5ldHdvcmtzLgoKKipgbWFya3lgIE1ha2VmaWxlKioKClRoZSBgbWFya3lgIE1ha2VmaWxl
IGNvb3JkaW5hdGVzIHRoZSB0aHJlZSBzdGVwcyBvZiB0aGUgYG1hcmt5YApkb2N1bWVudCBw
cm9jZXNzaW5nIHBpcGVsaW5lOiBwcmVwcm9jZXNzaW5nLCBsaW5raW5nIGFuZCByZW5kZXJp
bmcuClRoZSBgbWFya3lgIE1ha2VmaWxlIHN1cHBvcnRzIHNldmVyYWwgdGFyZ2V0cyBmb3Ig
ZGlzcGxheWluZyBoZWxwCm9yIHJlbmRlcmluZyBhbGwsIG11bHRpcGxlIG9yIHNwZWNpZmlj
IGRvY3VtZW50cy4KCipNYWtlZmlsZSBUYXJnZXRzKgoKMS4gYG1ha2UgaGVscGA6IGRpc3Bs
YXkgaGVscCBtZXNzYWdlIG9uIHRoZSBjb25zb2xlCjIuIGBtYWtlIGNoZWF0YDogZGlzcGxh
eSB0aGUgYG1hcmt5YCBtYXJrdXAgQ2hlYXQgU2hlZXQKMy4gYG1ha2Ugc2NhbmA6IHNjYW4g
Zm9yIG5ldyBkb2N1bWVudHMgYG1kLyoubWRgIGFuZCB1cGRhdGUgTWFrZWZpbGUKNC4gYG1h
a2UgYWxsYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyoubWRgIGludG8gYGh0bWxgIGFu
ZCBgcGRmYAo1LiBgbWFrZSBhbGwtcGRmYDogcmVuZGVyIGFsbCBkb2N1bWVudHMgYG1kLyou
bWRgIGludG8gYHBkZmAKNi4gYG1ha2UgYWxsLWh0bWxgOiByZW5kZXIgYWxsIGRvY3VtZW50
cyBgbWQvKi5tZGAgaW50byBgaHRtbGAKNy4gYG1ha2UgaHR0cGRgOiBzdGFydCBweXRob24g
d2Vic2VydmVyIGluIGBodG1sL2AKOC4gYG1ha2UgY2xlYW5gOiByZW1vdmUgYWxsIGZpbGVz
OiBgYnVpbGQvKmAsIGBwZGYvKmAsIGBodG1sLypgCgoqTWFrZSBTaW5nbGUgRG9jdW1lbnQq
CgpXaGVuIHJ1bm5pbmcgYG1ha2UgYWxsYCwgYG1hcmt5YCByZW5kZXJzIGFsbCBkb2N1bWVu
dHMsIHdoaWNoIGNhbgpiZSB1bmRlc2lyYWJsZSBpZiBvbmx5IG9uZSBwYXJ0aWN1bGFyIGRv
Y3VtZW50IHNoYWxsIGJlIHJlbmRlcmVkLgpCeSBgbWFrZSBzY2FuYCwgYG1hcmt5YCBzY2Fu
cyB0aGUgZGlyZWN0b3J5IGBtZC8qLm1kYCBmb3IgbmV3IE1hcmtkb3duCmRvY3VtZW50cyB0
byBiZSBwcm9jZXNzZWQuIEZvciBlYWNoIGRvY3VtZW50LCB3aGljaCBoYXMgYmVlbiBmb3Vu
ZCwKYG1hcmt5YCBzZXRzIHVwIGFsaWFzIHRhcmdldHMgaW4gb3JkZXIgdG8gZGVidWcgdGhl
IHByZXByb2Nlc3NpbmcsCmxpbmtpbmcgYW5kIHJlbmRlcmluZyBvZiB0aGlzIGRvY3VtZW50
LgoKQXNzdW1pbmcgdGhlIGRvY3VtZW50IGBtZC9tYXJreS5tZGAgc2hhbGwgYmUgcmVuZGVy
ZWQgc3RlcCBieSBzdGVwLApgbWFya3lgIGludHJvZHVjZXMgdGhlIGZvbGxvd2luZyB0YXJn
ZXRzLgoKMS4gKlByZXByb2Nlc3NpbmcqOiBgbWFrZSBtZC1tYXJreWAgXAoJKiBgbWQvbWFy
a3kubWRgIC0+IGBidWlsZC9tYXJreS5tZGAKMi4gKkxpbmtpbmcgYGh0bWxgKjogYG1ha2Ug
bGh0bWwtbWFya3lgIFwKCSogYGJ1aWxkL21hcmt5Lm1kYCAtPiBgYnVpbGQvbWFya3kuaHRt
bC5tZGAKMy4gKkxpbmtpbmcgYHBkZmAqOiBgbWFrZSBscGRmLW1hcmt5YCBcCgkqIGBidWls
ZC9tYXJreS5tZGAgLT4gYGJ1aWxkL21hcmt5LnBkZi5tZGAKNC4gKlJlbmRlcmluZyBgaHRt
bGAqOiBgbWFrZSBodG1sLW1hcmt5YAoJKiBgYnVpbGQvbWFya3kuaHRtbC5tZGAgLT4gYGh0
bWwvbWFya3kuaHRtbGAKNS4gKlJlbmRlcmluZyBgcGRmYCo6IGBtYWtlIHBkZi1tYXJreWAK
CSogYGJ1aWxkL21hcmt5LnBkZi5tZGAgLT4gYHBkZi9tYXJreS5wZGZgCgotLS0KCiMgV3Jp
dGUgQSBOZXcgRG9jdW1lbnQKCkluIG9yZGVyIHRvIHJlbmRlciBhIG5ldyBkb2N1bWVudCB0
aGUgTWFya2Rvd24gdGV4dCBuZWVkcyB0byBiZSBzYXZlZAp0byBhIGZpbGUgbG9jYXRlZCBp
biBgbWQvZXhhbXBsZS5tZGAgd2hpY2ggY2FuIGJlIGZvdW5kIHJlbmRlcmVkCltoZXJlXShl
eGFtcGxlLj8/PykuIFRoZSBmb2xsb3dpbmcgTWFya2Rvd24gc25pcHBldApjYW4gYmUgdXNl
ZCBhcyBhIHN0YXJ0aW5nIHBvaW50LgoKYGBgeWFtbAohISEgZXhhbXBsZS5tZCByYXcgPj4x
CmBgYAoKLS0tCgojIENvZGUgQmxvY2tzCgpDb2RlIGJsb2NrcyBhcmUgZW1iZWRkZWQgaW4g
TWFya2Rvd24gdXNpbmcgZmVuY2VkIGNvZGUgdXNpbmcKZWl0aGVyIHRoZSBgXCFgIG9yIGBc
ISFgIGZsYWcgZm9yIGRpc3BsYXllZCBhbmQgaGlkZGVuIGNvZGUKcmVzcGVjdGl2ZWx5LgoK
YGBgdGV4dAogICAgYGBgXCEKCUNPREVfQkxPQ0tfU0hPV04KICAgIGBgYAoKICAgIGBgYFwh
IQoJQ09ERV9CTE9DS19ISURERU4KICAgIGBgYApgYGAKCioqRGlzcGxheSBhbmQgRXhlY3V0
ZSBDb2RlKioKClRoaXMgY29kZSBibG9jayBhbm5vdGF0ZWQgd2l0aCBgIWAgaXMgZGlzcGxh
eWVkIGFuZCBleGVjdXRlZC4KCmBgYCEKCWltcG9ydCBtYXRoCgl4ID0gbWF0aC5zcXJ0KDIp
CmBgYAoKKipFeGVjdXRlIENvZGUgd2l0aG91dCBEaXNwbGF5KioKClRoZSBjb2RlIGJsb2Nr
IGFubm90YXRlZCB3aXRoIGAhYCBpcyBub3QgZGlzcGxheWVkLCBidXQgZXhlY3V0ZWQuCgpg
YGAhIQoJeSA9IHggKyAxCmBgYAoKKipEaXNwbGF5IENvZGUgYnV0IGRvIG5vdCBFeGVjdXRl
KioKClRoaXMgY29kZSBibG9jayBpcyBkaXNwbGF5ZWQgYXMgcHl0aG9uLCBidXQgbm90IGV4
ZWN1dGVkLgoKYGBgcHl0aG9uCgl6ID0gMC4vMC4KYGBgCgoqKlVzaW5nIHRoZSBQeXRob24g
YGltcG9ydGAgU3RhdGVtZW50KioKCkxhcmdlIGNvZGUgYmxvY2tzIGNhbiBiZSBpbXBvcnRl
ZCBmcm9tIHB5dGhvbiBtb2R1bGVzIGFuZCB0aGUKYGltcG9ydGAgc3RhdGVtZW50IGNhbiBi
ZSB1c2VkIGZvciBsb2FkaW5nIGluc3RhbGxlZCBsaWJyYXJpZXMuCgpgYGBweXRob24KCWlt
cG9ydCBudW1weQoJaW1wb3J0IHN5cwoJc3lzLnBhdGguYXBwZW5kKCIuIikKCSNpbXBvcnQg
bW9kdWxlX2luX3dvcmtpbmdfZGlyZWN0b3J5CmBgYAoKLS0tCgojIElubGluZSBDb2RlCgpJ
bmxpbmUgc3RhdGVtZW50cyBhcmUgZGlyZWN0bHkgZW1iZWRkZWQgaW50byB0aGUgdGV4dCBm
bG93IHVzaW5nCmV4cHJlc3Npb25zIGFuZCB2YXJpYWJsZXMgd2l0aCB0aGUgY29ycmVzcG9u
ZGluZwpzeW50YXggYGAgYFwhRVhQUkVTU0lPTmAgYGAgb3IgYGAgYFwhVkFSSUFCTEVgIGBg
LgpUaGUgb3V0cHV0IG9mIHZhcmlhYmxlcyBjYW4gYmUgZm9ybWF0dGVkIHVzaW5nIHRoZQpg
YCBgXCFWQVJJQUJMRVs6Rk9STUFUXWAgYGAgb3IgYGAgYFwhRVhQUkVTU0lPTls6Rk9STUFU
XWAgYGAKc3RhdGVtZW50IGFjY29yZGluZyB0byB0aGUgcHl0aG9uIG9wZXJhdG9yIGB7PHZh
cmlhYmxlPls6PGZvcm1hdD5dfWAKaW1wbGVtZW50ZWQgaW4gdGhlCltgc3RyLmZvcm1hdCgp
YF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1h
dHN0cmluZ3MpCnNwZWNpZmljYXRpb24gYW5kIHRoZSBvcGVyYXRvciBgezxleHByZXNzaW9u
Pls6PGZvcm1hdD5dfWAgaW1wbGVtZW50ZWQgaW4KW2BmYC1zdHJpbmdzXShodHRwczovL2Rv
Y3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJp
bmdzKS4KCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhlIHJlc3VsdCBvZiAkXHNx
cnR7Mn0kIGlzOgoqIHVuZm9ybWF0dGVkIG91dHB1dDogYCEgbWF0aC5zcXJ0KDIuMClgCiog
Zm9ybWF0dGVkIG91dHB1dDogYCEgIiUuNGYiICUgbWF0aC5zcXJ0KDIuMClgCgpUaGUgdmFy
aWFibGUgJHgkIGlzCiogdW5mb3JtYXR0ZWQgb3V0cHV0OiBgISB4YAoqIGZvcm1hdHRlZCBv
dXRwdXQ6IGAhIHg6LjRmYAoKVGhlIHZhcmlhYmxlICR5PXgrMSQgaXMKKiB1bmZvcm1hdHRl
ZCBvdXRwdXQ6IGAhIHlgCiogZm9ybWF0dGVkIG91dHB1dDogYCEgeTouNGZgCgooVGhlIGNv
ZGUgYmxvY2sgZm9yIHRoZSBkZWZpbml0aW9uIG9mICR5JCBpcyBoaWRkZW4uKQoKKipJbmxp
bmUgRXhwcmVzc2lvbiBPdXRwdXQqKgoKYGBgIQoJeCA9IGxpc3QocmFuZ2UoMSwgMTEpKQoJ
eSA9IFtpKmkgZm9yIGkgaW4geF0KCglkZWYgbGlzdF9zdHIoYSk6CgkJcmV0dXJuIFtzdHIo
aSkgZm9yIGkgaW4gYV0KCWRlZiBsaXN0X2FuZChhKToKCQlyZXR1cm4gIiwgIi5qb2luKGxp
c3Rfc3RyKGFbOi0xXSkpICsgIiBhbmQgIiArIHN0cihhWy0xXSkKYGBgCgpUaGUgbGlzdCBj
YW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgdGV4dC4gVGhlIHNxdWFyZSBvZiB0aGUgZmlyc3QK
YCFsZW4oeClgIG51bWJlcnMgYCFsaXN0X2FuZCh4KWAgaXMgYCFsaXN0X2FuZCh5KWAuIFNx
dWFyZSBudW1iZXJzCmFyZSBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCioqSW5s
aW5lIFN0YXRlbWVudHMgaW4gVGFibGVzKioKCmBgYCEKCWNsYXNzIHNxdWFyZToKCQlkZWYg
X19pbml0X18oc2VsZik6CgkJCXNlbGYueCA9IDAKCQlkZWYgZ2V0X3goc2VsZik6CgkJCXJl
dHVybiBzZWxmLngKCQlkZWYgbmV4dF95KHNlbGYpOgoJCQl5ID0gc2VsZi54KioyCgkJCXNl
bGYueCArPSAxCgkJCXJldHVybiB5CglzcSA9IHNxdWFyZSgpCmBgYAoKVGhlIGZvbGxvd2lu
ZyB0YWJsZSBpcyBjb21wdXRlZCBhY2NvcmRpbmcgdG8gJHk9eF4yJC4KCnggICAgICAgICAg
ICB8eQotLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tCmAhc3EuZ2V0X3goKWB8YCFzcS5u
ZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAh
c3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgp
YHxgIXNxLm5leHRfeSgpYApgIXNxLmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0
X3goKWB8YCFzcS5uZXh0X3koKWAKYCFzcS5nZXRfeCgpYHxgIXNxLm5leHRfeSgpYApgIXNx
LmdldF94KClgfGAhc3EubmV4dF95KClgCmAhc3EuZ2V0X3goKWB8YCFzcS5uZXh0X3koKWAK
Ci0tLQoKIyBHZW5lcmF0ZSBNYXJrZG93biBUZXh0CgpNYXJrZG93biB0ZXh0IGNhbiBiZSBw
cm9kdWNlZCBhbGdvcml0aG1pY2FsbHkgZnJvbSBhIHB5dGhvbiBhbGdvcml0aG0KdXNpbmcg
dGhlIGBfKClgIGFuZCBgX18oKWAgZnVuY3Rpb24uIFRoZSBgXygpYCBhbmQgYF9fKClgIGZ1
bmN0aW9uIGFyZQpzcGVjaWFsIG5hbWVzIHdoaWNoIGFyZSByZXNlcnZlZCBieSBgbWFya3lg
LiAocmVmZXIgdG8gR2VuZXJhdGlvbiBvZgpNYXJrZG93biBUZXh0LCBbYG1hcmt5YCBkb2N1
bWVudGF0aW9uXShtYXJreS4/Pz8pIGZvciBpbi1kZXB0aApleHBsYW5hdGlvbikuCgojIyBU
aGUgYF8oKWAgRnVuY3Rpb24KCiBUaGUgYF8oKWAgZnVuY3Rpb24gYmFzaWNseSByZXNlbWJs
ZWQgdGhlIHB5dGhvbiBgcHJpbnQoKWAgZnVuY3Rpb24uCmBtYXJreWAgZG9lcyBub3QgcGF0
Y2ggdGhlIHN0YW5kYXJkIGBwcmludCgpYCBmdW5jdGlvbiB3aGljaCBzdGlsbApkaXNwbGF5
cyB0ZXh0IGluIHRoZSBjb25zb2xlIGFuZCBub3QgaW4gdGhlIE1hcmtkb3duIHRleHQuClRo
ZSBgXygpYCBmdW5jdGlvbiBzdXBwb3J0cyBhcHBlbmRpbmcgdGV4dCB0byB0aGUgcHJldmlv
dXMgYW5kIHRoZSBuZXh0CmxpbmUgb2Ygb3V0cHV0IGJ5IHVzaW5nIGBfYCBhcyB0aGUgZmlz
dCBvciBsYXN0IHBhcmFtZXRlci4KMS4gYF8oXywgKmFyZ3MgICApYDogYXBwZW5kIHRoaXMg
b3V0cHV0IHRvIHByZXZpb3VzIG91dHB1dAoyLiBgXyhfLCAqYXJncywgXylgOiBhcHBlbmQg
dG8gcHJldmlvdXMgYW5kIG5leHQgb3V0cHV0CjMuIGBfKCAgICphcmdzLCBfKWA6IGFwcGVu
ZCBuZXh0IG91dHB1dCB0byB0aGlzIG91dHB1dAo0LiBgXygpYDogZGlzYWJsZSBhcHBlbmQg
ZmxhZwoKKipNb25rZXkgUGF0Y2ggYHByaW50KClgIEZ1bmN0aW9uKioKClRoZSBgcHJpbnQo
KWAgZnVuY3Rpb24gY2FuIGJlICptb25rZXkgcGF0Y2hlZCogdXNpbmcgdGhlIGZvbGxvd2lu
ZwpzdGF0bWVudCBpbiBvcmRlciB0byBjYWxsIHRoZSBgXygpYCBmdW5jdGlvbiBpbnN0ZWFk
LgoKYGBgIQoJcHJpbnQoIlByaW50IiwgInRvIiwgICJjb25zb2xlIiwgIiEiKQoJXygiUHJp
bnQiLCAidG8iLCAgIk1hcmtkb3duIiwgIiEiKQoKCXByaW50ID0gXyAjIG1vbmtleSBwYXRj
aAoJcHJpbnQoIlByaW50IiwgInRvIiwgICJNYXJrZG93biIsICIhIikKYGBgCgoqKkpvaW4g
QXJndW1lbnRzIHVzaW5nIGBzZXBgKioKClRoZSBzaWduYXR1cmUgb2YgdGhlIGBfKClgIGlz
IGBfKCphcmdzLCBzZXA9IiAiKWAuIGBzZXBgIGlzIHVzZWQgdG8Kam9pbiB0aGUgYXJndW1l
bnRzIGAqYXJnc2AgaW50byBvbmUgc3RyaW5nLgoKYGBgIQoJXygiVGhlIGZpcnN0IGZpdmUg
bmF0dXJhbCBudW1iZXJzIGFyZToiKQoJXygxLCAyLCAzLCA0LCA1LCBzZXA9IiwgIikKYGBg
CgoqKkdlbmVyYXRlIGEgVGFibGUgd2l0aCBBcHBlbmRpbmcqKgoKVGhlIGFwcGVuZCBmZWF0
dXJlIGlzIHVzZWQgdG8gY3JlYXRlIGEgdGFibGUuCgpgYGAhCglfKCJDb2x1bW4gMSIsIF8p
CglfKCJ8Q29sdW1uIDIiLCBfKQoJXygifENvbHVtbiAzIiwgXykKCV8oKQoKCV8oInwiLmpv
aW4oWyItLS0tLS0tLSJdKjMpKQoKCWZvciBpIGluIHJhbmdlKDUpOgoJCV8oIiUgOGQiICUg
KGkqMykpCgkJZm9yIGogaW4gWzEsIDJdOgoJCQlfKF8sICJ8JSA4ZCIgJSAoaSozK2opKQpg
YGAKClRoZSBhbGdvcml0aG0gcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBNYXJrZG93biB0ZXh0
LgoKYGBgbWQKQ29sdW1uIDF8Q29sdW1uIDJ8Q29sdW1uIDMKLS0tLS0tLS18LS0tLS0tLS18
LS0tLS0tLS0KICAgICAgIDB8ICAgICAgIDF8ICAgICAgIDIKICAgICAgIDN8ICAgICAgIDR8
ICAgICAgIDUKICAgICAgIDZ8ICAgICAgIDd8ICAgICAgIDgKICAgICAgIDl8ICAgICAgMTB8
ICAgICAgMTEKICAgICAgMTJ8ICAgICAgMTN8ICAgICAgMTQKYGBgCgojIyBUaGUgYF9fKClg
IEZ1bmN0aW9uCgpDb21wYXJlZCB0byB0aGUgYF8oKWAgZnVuY3Rpb24sIHRoZSBgX18oKWAg
ZnVuY3Rpb24gb25seSB0YWtlcyBvbmUKYXJndW1lbnQgYW5kIGl0cyBwdXJwb3NlIGlzIHRv
IG91dHB1dCBhIGZvcm1hdHRlZCBwYXJhZ3JhcGggd2l0aAppbmRlbnRhdGlvbi4gVGhlIHNp
Z25hdHVyZSBvZiB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIGBfKGFyZywgY3JvcD1UcnVlKWAu
CgoqKkdlbmVyYXRlIGEgUGFyYWdyYXBoIHdpdGggYGZgLVN0cmluZ3MqKgoKVGhlIGBfXygp
YCBmdW5jdGlvbiBjYW4gYmUgY29tYmluZWQgd2l0aCB0cmlwbGUgcXVvdGVkIGJsb2NrIHN0
cmluZ3MKYW5kIHRoZSBweXRob24gMyBgZmAtc3RyaW5ncyBvciBgZiIuLi4iYCBzdHJpbmcg
aW50ZXJwb2xhdGlvbiwgcmVmZXIgdG8KW2BmYC1zdHJpbmdzXShodHRwczovL2RvY3MucHl0
aG9uLm9yZy8zL3JlZmVyZW5jZS9sZXhpY2FsX2FuYWx5c2lzLmh0bWwjZi1zdHJpbmdzKS4K
CmBgYCEKCWltcG9ydCByYW5kb20KCXMgPSAwCglyYW5kb20uc2VlZChzKQoJcCA9IFtyYW5k
b20ucmFuZG9tKCkgZm9yIGkgaW4gcmFuZ2UoMyldCgoJX18oZiIiIgoJCVBhcmFtZXRlciBv
bmUgaXMge3BbMF06LjNmfSBhbmQgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHNlZWQKCQlv
ZiB0aGUgcHNldWRvIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLCB3aGljaCB3YXMgY2hvc2Vu
CgkJdG8gYmUge3N9LiBGb3IgdGhlIHNhbWUgc2VlZCBhbHdheXMgdGhlIHNhbWUgcmFuZG9t
IG51bWJlcnMKCQlhcmUgY3JlYXRlZC4gVGhlIG5leHQgdHdvIG51bWJlcnMgYXJlIHtwWzFd
Oi4zZn0gYW5kIHtwWzJdOi4zZn0uCgkJVGhlIHN1bSBvZiB0aGUgdGhyZWUgbnVtYmVycyBp
cyB7c3VtKHApOi4zZn0gYW5kIGl0IGlzCgkJeydncmVhdGVyJyBpZiBzdW0ocCkgPiAyLiBl
bHNlICdsZXNzZXIgb3IgZXF1YWwnfSB0aGFuIHR3by4KCSIiIikKYGBgCgoqKkNyb3BwaW5n
IGFuZCBJbmRlbnRhdGlvbiBvZiBPdXRwdXQqKgoKQmVmb3JlIHRoZSB0ZXh0IGdlbmVyYXRl
ZCBieSB0aGUgYF9fKClgIGZ1bmN0aW9uIGlzIHByaW50ZWQgaW50byB0aGUKZG9jdW1lbnQu
IFRoZSB0ZXh0IGlzIGNyb3BwZWQgYWNjb3JkaW5nIHRvIHRoZSBsZWFkaW5nIHdoaXRlIHNw
YWNlCm9mIHRoZSBmaXJzdCBub24tZW1wdHkgbGluZS4gVGhlIGxlYWRpbmcgd2hpdGUgc3Bh
Y2Ugb2YgdGhlIGZpcnN0Cm5vbi1lbXB0eSBsaW5lIGlzIHJlbW92ZWQgZnJvbSBhbGwgb3Ro
ZXIgbGluZXMgb2YgdGhlIG91dHB1dC4KCmBgYCEKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAx
CgkJCSogTGlzdCBMZXZlbCAyCgkJCSogTGlzdCBMZXZlbCAyCgkJCQkqIExpc3QgTGV2ZWwg
MwoJCQkqIExpc3QgTGV2ZWwgMgoJCSogTGlzdCBMZXZlbCAxCgkJKiBMaXN0IExldmVsIDEK
CSIiIikKYGBgCgpUaGUgY29kZSBibG9jayBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIG91dHB1
dC4KCmBgYG1kCiogTGlzdCBMZXZlbCAxCgkqIExpc3QgTGV2ZWwgMgoJKiBMaXN0IExldmVs
IDIKCQkqIExpc3QgTGV2ZWwgMwoJKiBMaXN0IExldmVsIDIKKiBMaXN0IExldmVsIDEKKiBM
aXN0IExldmVsIDEKYGBgCgoqKkRpc2FibGUgQ3JvcHBpbmcgb2YgT3V0cHV0KioKClRoZSBj
cm9wcGluZyBpcyBkaXNhYmxlZCB1c2luZyB0aGUga2V5d29yZCBgX18odGV4dCwgY3JvcD1G
YWxzZSlgLgoKYGBgIQoJX18oIiIiCgkJKiBMaXN0IExldmVsIDEKCSIiIiwgY3JvcD1UcnVl
KQoKCV9fKCIiIgoJCSogTGlzdCBMZXZlbCAyCgkiIiIsIGNyb3A9RmFsc2UpCmBgYAoKVGhl
IGNvZGUgYmxvY2sgcHJvZHVjZXMgdGhlIGZvbGxvd2luZyBvdXRwdXQuCgpgYGBtZAoqIExp
c3QgTGV2ZWwgMQoJCSogTGlzdCBMZXZlbCAyCmBgYAoKLS0tCgojIEZvcm1hdCBEZXBlbmRl
bnQgTGlua3MKCldoZW4gd3JpdGluZyBzZXZlcmFsIE1hcmtkb3duIGRvY3VtZW50cyBvZnRl
biBkb2N1bWVudHMgYXJlIGxpbmtlZApiZXR3ZWVuIGVhY2ggb3RoZXIgdXNpbmcgdGhlIE1h
cmtkb3duIGxpbmsgc3RhdGVtZW50CmBbTGluayBOYW1lXShmaWxlLmh0bWwpYCBvciBgW0xp
bmsgTmFtZV0oZmlsZS5wZGYpYC4KSG93ZXZlciwgd2hlbiByZW5kZXJpbmcgZG9jdW1lbnRz
IHdpdGggbGlua3MgaW50byBgaHRtbGAgYW5kIGBwZGZgCnRoZSBmaWxlIGV4dGVuc2lvbiBv
ZnRlbiBtdXN0IGJlIGFkanVzdGVkIGFjY29yZGluZyB0byB0aGUgb3V0cHV0IGZvcm1hdC4K
YG1hcmt5YCBzdXBwb3J0cyB0aGUgYC5cPz8/YCBzdGF0ZW1lbnQsIHdoaWNoIHdpbGwgYmUg
cmVwbGFjZWQgYnkKYC5odG1sYCBvciBgLnBkZmAgZGVwZW5kaW5nIG9uIHRoZSBvdXRwdXQg
Zm9ybWF0LgoKYGBgbWQKW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuXD8/PykKYGBgCgp3aWxs
IGJlIHByb3Byb2Nlc3NlZCBpbnRvIHRoZSBmb2xsb3dpbmcgdGV4dDoKKiBmb3IgYGh0bWxg
OiBgW0xpbmsgdG8gZG9jdW1lbnRdKGZpbGUuaHRtbClgCiogZm9yIGBwZGZgOiBgW0xpbmsg
dG8gZG9jdW1lbnRdKGZpbGUucGRmKWAKCltMaW5rIHRvIHRoaXMgZG9jdW1lbnRdKHF1aWNr
c3RhcnQuPz8/KQoKLS0tCgojIEZvcm1hdCBEZXBlbmRlbnQgQ29kZQoKYHBhbmRvY2AgTWFy
a2Rvd24gYWxsb3dzIHRvIHdyaXRlIGZvcm1hdCBzcGVjaWZpYyBjb2RlIHdpdGhpbiBNYXJr
ZG93bgp1c2luZyBgaHRtbGAgYW5kICp0ZXgqIGZvciBgcGRmYCBkb2N1bWVudHMuIEhvd2V2
ZXIsIHdoZW4gaW5zZXJ0aW5nCnJhdyBgaHRtbGAgb3IgcmF3ICp0ZXgqIGNvZGUsIHRoZSBk
b2N1bWVudCBvbmx5IGNhbiBiZSByZW5kZXJlZCBpbnRvCmBodG1sYCBvciBgcGRmYCBhY2Nv
cmRpbmdseS4gVGhpcyBpcyBvbmx5IGEgc2hvcnQgc3VtbWFyeSwgZm9yIGFuCmluLWRlcHRo
IGV4cGxhbmF0aW9uIG9mIGFsbCBmZWF0dXJlcyBwbGVhc2UgcmVmZXIgdG8gRm9ybWF0IENv
ZGVzLApbYG1hcmt5YCBkb2N1bWVudGF0aW9uXShtYXJreS4/Pz8pLgoKYG1hcmt5YCBpbnRy
b2R1Y2VzIGZvcm1hdCBjb2Rlcywgd2hpY2ggYXJlIGFwcGxpZWQgZHVyaW5nIGxpbmtpbmcK
YWZ0ZXIgcHJlcHJvY2Vzc2luZy4gRHVyaW5nIGxpbmtpbmcgZm9ybWF0IHNwZWNpZmljIGNv
ZGVzIGZvciBgaHRtbGAKYW5kIGBwZGZgIGFyZSBhcHBsaWVkIGluIGEgY29uc2lzdGVudCBt
YW5uZXIsIHJlc3VsdGluZyBpbiBkb2N1bWVudHMKd2l0aCBNYXJrZG93biBhbmQgYGh0bWxg
IG9yIE1hcmtkb3duIGFuZCAqdGV4KiBvbmx5LiBVc2luZyB0aGlzCnBhdHRlcm4gYG1hcmt5
YCBkb2N1bWVudHMgY29udGFpbiByZWd1bGFyIE1hcmtkb3duLCB3aGljaCBjYW4gYmUKcmVu
ZGVyZWQgaW50byBgaHRtbGAgYW5kIGBwZGZgLCBhcyB3ZWxsIGFzIGZvcm1hdCBzcGVjaWZp
YyBjb2Rlcwpmb3IgdHdlYWtpbmcgb3IgcG9saXNoaW5nIGBodG1sYCBhbmQgYHBkZmAgb3V0
cHV0LgoKQXNzdW1pbmcgcHJlcHJvY2Vzc2luZyB0aGUgZmlsZSBgbWQvbWFya3kubWRgLCBs
aW5raW5nIGZvcm1hdCBjb2RlcwpyZXN1bHRzIGluIHRoZSB0d28gZm9sbG93aW5nIG91dHB1
dCBmaWxlcy4KMS4gYGJ1aWxkL21hcmt5Lmh0bWwubWRgOiBjb250YWlucyBvdXRwdXQgb2Yg
YGh0bWxgIGZvcm1hdCBjb2Rlcy4KMi4gYGJ1aWxkL21hcmt5LnBkZi5tZGA6IGNvbnRhaW5z
IG91dHB1dCBvZiBgcGRmYCBmb3JtYXQgY29kZXMuCgoqKkV4YW1wbGUgMTogTXVsdGktQ29s
dW1uIFRleHQgaW4gYHBkZmAgYW5kIGBodG1sYCoqCgpEZWZuaXRpb24gb2YgdHdvIGZvcm1h
dCBjb2RlcyBgbWNvbF9iZWdpbmAgYW5kIGBtY29sX2VuZGAsIG9uZSBmb3IgdGhlCmJlZ2lu
IG9mIG11bHRpIGNvbHVtbiBhbmQgYW5vdGhlciBmb3IgdGhlIGVuZCBvZiB0aGUgbXVsdGkg
Y29sdW1uCnNlY3Rpb24uIFRoZSBmb3JtYXQgY29kZXMgYXJlIGFwcGVuZGVkIHdpdGggYF9o
dG1sYCBhbmQgYF9wZGZgCnJlc3BlY3RpdmVseS4KCmBgYCEKCW1jb2xfYmVnaW4gPSBmbXRj
b2RlKAoJCXBkZj1yIlxiZWdpbnttdWx0aWNvbHN9ezJ9IiwKCQlodG1sPSI8ZGl2IHN0eWxl
PSdjb2x1bW4tY291bnQ6IDI7Jz4iCgkpCgltY29sX2VuZCA9IGZtdGNvZGUoCgkJcGRmPXIi
XGVuZHttdWx0aWNvbHN9IiwKCQlodG1sPSI8L2Rpdj4iCgkpCmBgYAoKVGhlIGBjb2x1bW4t
Y291bnRgIENTUyBwcm9wZXJ0eSByZXF1aXJlcyBJbnRlcm5ldCBFeHBsb3Jlcj49MTAsCkZp
cmVmb3g+PTUyLCBTYWZhcmk+PTksIE9wZXJhPj0zNyBvciBDaHJvbWU+PTUwLCByZWZlciB0
bwpbdzNzY2hvb2xzXShodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2Nzcy9jc3MzX211bHRp
cGxlX2NvbHVtbnMuYXNwKS4KSW4gb3JkZXIgdG8gdXNlIHRoZSBgbXVsdGljb2xgICp0ZXgq
IHBhY2thZ2UsIHRoZSBzdGF0ZW1lbnQKYFx1c2VwYWNrYWdle211bHRpY29sfWAgaGFzIHRv
IGJlIGluY2x1ZGVkIGluIHRoZSB5YW1sIG1ldGEgZGF0YQppbiB0aGUgZnJvbnQgbWF0dGVy
IG9mIHRoZSBNYXJrZG93biBkb2N1bWVudC4KCmAhbWNvbF9iZWdpbigpYApUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0
ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4
dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQgVGV4dCBUZXh0ClRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dCBUZXh0IFRleHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0
IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0ClRleHQgVGV4
dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRl
eHQKVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBU
ZXh0IFRleHQgVGV4dApUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0IFRleHQg
VGV4dCBUZXh0IFRleHQgVGV4dCBUZXh0CmAhbWNvbF9lbmQoKWAKCi0tLQoKIyBJbmNsdWRl
IFN0YXRlbWVudAoKYG1hcmt5YCBhbGxvd3MgdG8gaW5jbHVkZSBvdGhlciBNYXJrZG93biB0
ZXh0IHVzaW5nIHRoZSBgXCEhIWAgc3RhdGVtZW50LgpQbGVhc2UgcmVmZXIgdG8gdGhlIGBt
YXJreWAgZG9jdW1lbnRhdGlvbiBmb3IgY29tcGxldGUgZGVzY3JpcHRpb24Kb2YgdGhlIGBc
ISEhYCBzdGF0ZW1lbnQuIER1cmluZyByZW5kZXJpbmcgYG1hcmt5YCBrZWVwcyB0cmFjayBv
ZgppbmNsdWRlZCBmaWxlcyBhbmQgY3JlYXRlcyBNYWtlZmlsZSBydWxlcyBmb3IgZGVwZW5k
ZW50IG1ha2UuCgpgYGBtZAoJISEhIGZpbGUubWRpCmBgYAoKLS0tCgojIE1ldGEgRGF0YQoK
YG1hcmt5YCBzdXBwb3J0cyBkb2N1bWVudCBtZXRhIGRhdGEgaW4gTWFya2Rvd24gZnJvbnQg
bWF0dGVyLgpUaGlzIGZlYXR1cmUgaXMgbm90IGV4cGxhaW5lZCBpbiB0aGUgcXVpY2tzdGFy
dC4gUGxlYXNlIHJlZmVyCnRvIHRoZSBgbWFya3lgIGRvY3VtZW50YXRpb24gZm9yIGV4cGxh
bmF0aW9uLgoKYGBgbWQKCS0tLQoJTUVUQV9EQVRBCgktLS0KCU1BUktET1dOCmBgYAoKLS0t
CgojIEVzY2FwZSBNYXJrdXAKClRoZSBgbWFya3lgIG1hcmt1cCBjYW4gYmUgZXNjYXBlZC4g
V2hlbiBtYXJrdXAgaXMgZXNjYXBlZApgbWFya3lgIHJlbW92ZXMgdGhlIGVzY2FwZSBzZXF1
ZW5jZSBhbmQgcHJpbnRzIG91dCB0aGUKdW5lc2NhcGVkIHN0YXRlbWVudC4KCk1hcmt1cCAg
ICAgICAgICAgfEVzY2FwZSBTZXF1ZW5jZXxVbnNlY2FwZWQgU2VxdWVuY2UKLS0tLS0tLS0t
LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tCmNvZGUgYmxvY2sg
aGlkZGVufGBgIGBgYFxcISEgYGAgIHxgYCBgYGBcISEgYGAKY29kZSBibG9jayBzaG93biB8
YGAgYGBgXFwhIGBgICAgfGBgIGBgYFwhIGBgCmlubGluZSBjb2RlICAgICAgfGBgIGBcXCEu
Li5gIGBgIHxgYCBgXCEuLi5gIGBgCmZvcm1hdCBjb2RlICAgICAgfGBgIGBcXD8uLi5gIGBg
IHxgYCBgXD8uLi5gIGBgCmluY2x1ZGUgc3RhdGVtZW50fGBcXCEhIWAgICAgICAgIHxgXCEh
IWAKZm9ybWF0IGxpbmsgICAgICB8YC5cXD8/P2AgICAgICAgfGAuXD8/P2AKCi0tLQoKKlRo
YW5rcyBmb3IgcmVhZGluZywgcGxlYXNlIHRyeSBgbWFya3lgLioK
'''
pack_quick_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBgbWFya3lgIG1h
cmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRz
IHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNv
ZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBkb2N1bWVudGF0
aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3Np
dG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoKYGBgcHl0
aG9uCiEhISBxdWlja3N0YXJ0Lm1kIHJhdyA+PjEKYGBgCg==
'''
pack_example_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBFeGFtcGxlIgpkYXRlOiBEYXRlCmF1dGhvcjogTmFtZQps
aW5rLWNpdGF0aW9uczogdHJ1ZQpiaWJsaW9ncmFwaHk6IGRhdGEvbWFya3kuYmliCmhlYWRl
ci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNldHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAg
IGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBwZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9
fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAgPHN0eWxlPiogeyBib3gtc2l6aW5nOiBi
b3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxp
c2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoKPiAqKkFic3RyYWN0KiogLS0gVGhpcyBp
cyBhIGBtYXJreWAgZXhhbXBsZSBkb2N1bWVudCBmb3IKPiBpbGx1c3RyYXRpbmcgYG1hcmt5
YCBtYXJrdXAuIFRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIG9mIHRoaXMKPiBkb2N1bWVudCBj
YW4gYmUgcmVhZCBbaGVyZV0oZXhhbXBsZS1zcmMuPz8/KS4KPiBGb3IgbW9yZSBpbmZvcm1h
dGlvbiBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3NpdG9yeV0oaHR0cHM6
Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KSwKPiBbYG1hcmt5YCBkb2N1bWVudGF0aW9u
XShtYXJreS4/Pz8pIG9yIHRoZQo+IFtgbWFya3lgIHF1aWNrc3RhcnRdKHF1aWNrc3RhcnQu
Pz8/KS4KCi0tLQoKIyBSZWZlcmVuY2VkIFNlY3Rpb24geyNzZWM6bGFiZWx9CgpUaGlzIGlz
IGEgcmVmZXJlbmNlIHRvIEBzZWM6bGFiZWwuCgohW1RoaXMgaXMgdGhlIGNhcHRpb25dKGRh
dGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQVVBQUFBRkNB
WUFBQUNOYnlibEFBQUFIRWxFUVZRSTEyUDQvLzgvdzM4R0lBWERJQktFMERIeGdsak5CQUFP
OVRYTDBZNE9Id0FBQUFCSlJVNUVya0pnZ2c9PSl7I2ZpZzpsYWJlbH0KClRoaXMgaXMgYSBy
ZWZlcmVuY2UgdG8gQGZpZzpsYWJlbC4KCkEgIHxCICB8QyAgfEQKLS0tfC0tLXwtLS18LS0t
CjAwMHwxMTF8NDQ0fDU1NQoyMjJ8MzMzfDY2Nnw3NzcKClRhYmxlOiBUaGlzIGlzIHRoZSBj
YXB0aW9uIHsjdGJsOmxhYmVsfQoKVGhpcyBpcyBhIHJlZmVyZW5jZSB0byBAdGJsOmxhYmVs
LgoKJCRcbWJveHtlfV57XG1ib3h7aX1ccGl9KzE9MCQkeyNlcTpsYWJlbH0KClRoaXMgaXMg
YSByZWZlcmVuY2UgdG8gQGVxOmxhYmVsLgoKVGhpcyBpcyBhIGNpdGF0aW9uIFtATXVsbGVy
MTk5M10uCgojIGBtYXJreWAgTWFya3VwIGZvciBFeGVjdXRpb24gb2YgRW1iZWRkZWQgUHl0
aG9uIENvZGUKCioqRGlzcGxheWVkIENvZGUsIEV4ZWN1dGVkKioKCmBgYCEKCWltcG9ydCBt
YXRoCglkZWYgbGlzdF9hbmQobCk6CgkJcmV0dXJuICIsICIuam9pbihzdHIoaSkgZm9yIGkg
aW4gbFs6LTFdKSArICIgYW5kICIgKyBzdHIobFstMV0pCgoJeCA9IDIKCXkgPSBtYXRoLnNx
cnQoeCkKYGBgCgoqKkhpZGRlbiBDb2RlLCBFeGVjdXRlZCoqCgpgYGAhIQoJcHJpbnQoIkhl
bGxvIENvbnNvbGUhIikKYGBgCgoqKkRpc3BsYXllZCBDb2RlLCBOb3QgRXhlY3V0ZWQqKgoK
YGBgcHl0aG9uCgl4ID0gMwpgYGAKCioqSW5saW5lIEZvcm1hdHRlZCBPdXRwdXQqKgoKVGhl
IHNxdWFyZSByb290IG9mICR4PWAheGAkIGlzIGAheTouM2ZgLgoKKipJbmxpbmUgRXhwcmVz
c2lvbioqCgpUaGUgZmlyc3QgdGVuIG51bWJlcnMgYXJlIGAhbGlzdF9hbmQocmFuZ2UoMTAp
KWAuCgoqKkZvcm1hdCBMaW5rcyoqCgpgYGBtZApbTGluayB0byBkb2N1bWVudF0oZmlsZS5c
Pz8/KQpgYGAKCndpbGwgYmUgcHJvcHJvY2Vzc2VkIGludG8gdGhlIGZvbGxvd2luZyB0ZXh0
OgoqIGZvciBgaHRtbGA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5odG1sKWAKKiBmb3Ig
YHBkZmA6IGBbTGluayB0byBkb2N1bWVudF0oZmlsZS5wZGYpYAoKW0xpbmsgdG8gdGhpcyBk
b2N1bWVudF0oZXhhbXBsZS4/Pz8pCgoqKkZvcm1hdCBDb2RlcyoqCgpgYGAhCglkZWYgaHRt
bF9GTVRDT0RFKCk6IHJldHVybiAiSDxzdXA+VDwvc3VwPjxzdWI+TTwvc3ViPkwiCglkZWYg
cGRmX0ZNVENPREUoKTogcmV0dXJuICJcTGFUZVgiCmBgYAoKVGhpcyBpcyBhIGA/X0ZNVENP
REUoKWAgZG9jdW1lbnQuCgotLS0KCipUaGFua3MgZm9yIHJlYWRpbmcsIHBsZWFzZSB0cnkg
YG1hcmt5YC4qCgotLS0KCiMgUmVmZXJlbmNlcyB7LX0K
'''
pack_example_src_md = '''
LS0tCnRpdGxlOiAiYG1hcmt5YCBRdWlja3N0YXJ0IFNvdXJjZSIKYXV0aG9yOiBsZWhtYW5u
NwpkYXRlOiAyMDIxLTA5LTA5CmhlYWRlci1pbmNsdWRlcy0tcGRmOiA+CiAgIFxoeXBlcnNl
dHVwe2NvbG9ybGlua3M9ZmFsc2UsCiAgIGFsbGJvcmRlcmNvbG9ycz17MCAwIDB9LAogICBw
ZGZib3JkZXJzdHlsZT17L1MvVS9XIDF9fQpoZWFkZXItaW5jbHVkZXMtLWh0bWw6ID4KICAg
PHN0eWxlPiogeyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9PC9zdHlsZT4KeG5vcy1jbGV2
ZXJlZjogdHJ1ZQp4bm9zLWNhcGl0YWxpc2U6IHRydWUKZm9udHNpemU6IDExcHQKCi0tLQoK
LS0tCgo+ICoqQWJzdHJhY3QqKiAtLSBUaGlzIGlzIHRoZSBzb3VyY2UgY29kZSBvZiB0aGUg
YG1hcmt5YCBFeGFtcGxlCj4gZG9jdW1lbnQgZm9yIGlsbHVzdHJhdGluZyBgbWFya3lgIG1h
cmt1cCB1c2luZyBzaW1wbGUgZXhhbXBsZXMuCj4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRz
IHRoZSBgbWFya3lgIHNvdXJjZSBjb2RlIGJlZm9yZQo+IHByb2Nlc3NpbmcgcHl0aG9uIGNv
ZGUgZW1iZWRkZWQgaW50byB0aGUgZG9jdW1lbnQgaXRzZWxmLgo+IEZvciBkb2N1bWVudGF0
aW9uIGFuZCBkb3dubG9hZCBwbGVhc2UgcmVmZXIgdG8gdGhlCj4gW2BtYXJreWAgcmVwb3Np
dG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL2xlaG1hbm43L21hcmt5KS4KCi0tLQoKYGBgcHl0
aG9uCiEhISBleGFtcGxlLm1kIHJhdyA+PjEKYGBgCg==
'''
pack_marky_bib = '''
QGFydGljbGV7TXVsbGVyMTk5MywKICAgIGF1dGhvciAgPSB7UGV0ZXIgTXVsbGVyfSwKICAg
IHRpdGxlICAgPSB7VGhlIHRpdGxlIG9mIHRoZSB3b3JrfSwKICAgIGpvdXJuYWwgPSB7VGhl
IG5hbWUgb2YgdGhlIGpvdXJuYWx9LAogICAgeWVhciAgICA9IHsxOTkzfSwKICAgIG51bWJl
ciAgPSB7Mn0sCiAgICBwYWdlcyAgID0gezIwMS0yMTN9LAogICAgbW9udGggICA9IHs3fSwK
ICAgIG5vdGUgICAgPSB7QW4gb3B0aW9uYWwgbm90ZX0sCiAgICB2b2x1bWUgID0gezR9Cn0K
'''

###!!!:::marky_pack_data:::!!!###
########################################################################
# SECTION IS AUTO-PACKAGED USING ./marky.py --pack --force
########################################################################

def include_file(line, n, root_file, only_mkdep=False):
	global mkdep
	global inc_path
	old_incpath = inc_path
	ipath = inc_path + "/" + line.split(" ")[1]
	inc_path = "/".join(ipath.split("/")[0:-1])
	iflag = list(set(line.split(" ")[2:]))
	print("# !!!", root_file, n, "->", ipath, " ".join(iflag))
	flag_read_meta = True
	flag_read_text = True
	flag_run_marky = True
	flag_ref = True
	flag_aux = False
	flag_shift_atx = 0
	shift_str = ""
	flag_only_code = 0
	try:
		for f in iflag:
			if f == "aux":
				flag_aux = True
			elif f == "nodep":
				flag_ref = False
			elif f == "nometa":
				flag_read_meta = False
			elif f == "nobody":
				flag_read_text = False
			elif f == "nomarky":
				flag_run_marky = False
			elif f == "raw":
				flag_read_meta = False
				flag_run_marky = False
			elif f.startswith("#+"):
				flag_shift_atx = int(f[2:])
			elif f.startswith(">>"):
				shift_str = "\t"*int(f[2:])
			elif f.startswith(">"):
				shift_spaces = " "*int(f[1:])
			elif f.startswith("code"):
				flag_only_code = 2 # only hidden code
			elif f.startswith("code!"):
				flag_only_code = 1 # shown and hidden code
			else:
				raise ValueError("unknown include flag: %s" % f)
	except Exception as ex:
		if only_mkdep:
			print("WARNING", type(ex), str(ex))
		else:
			print("ERROR", type(ex), str(ex))
			exit(1)
	if flag_ref:
		mkdep.append(ipath)
	if not flag_aux:
		if only_mkdep and flag_run_marky:
			parse_mkdep(ipath)
		else:
			parse_file(ipath, read_meta=flag_read_meta, read_text=flag_read_text, run_marky=flag_run_marky,
				shift_atx=flag_shift_atx, shift_str=shift_str, code_only=flag_only_code)
		print("# !!!", root_file, n, "<-", ipath)
	inc_path = old_incpath

########################################################################

def parse_file(fpath, root_file=False, read_meta=True, read_text=True,
	run_marky=True, shift_atx=0, shift_str="", code_only=0):
	global mkdep
	global md_text
	global exec_dict
	global md_yaml
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	is_code = False
	meta_lines = 0
	if read_meta or run_marky:
		if marky_text.startswith("---\n"):
			yaml_text = marky_text.split("---\n")[1]
			marky_text = "---\n".join(marky_text.split("---\n")[2:])
			if read_meta or root_file:
				print("# ---", fpath)
				try:
					import yaml
					for k, v in yaml.safe_load(yaml_text).items():
						print("#    ...", "%s:" % k, v)
						k_ = k
						if k_.endswith("--"): k_ = k[:-2]
						elif k_.endswith("-"): k_ = k[:-1]
						if not k_ in md_yaml:
							md_yaml[k_] = v
						else:
							if k.endswith("--"):
								print("#    ... SKIP")
							elif k.endswith("-"):
								md_yaml[k_] = v
							else:
								md_yaml[k_] += "\n" + v
						k_ = k_.replace("-", "_")
						if not k_ in exec_dict:
							exec_dict[k_] = v
						else:
							if k.endswith("--"):
								print("#    ... SKIP")
							elif k.endswith("-"):
								exec_dict[k_] = v
							else:
								exec_dict[k_] += "\n" + v
				except Exception as ex:
					print("ERROR", type(ex), str(ex))
					exit(1)
			else:
				print("# META", "skip")
			meta_lines += len(yaml_text.split("\n")) + 2
	if shift_atx > 0:
		marky_text = ("\n" + marky_text).replace("\n#", "\n#" + "#"*shift_atx)[1:]
	if read_text:
		if not run_marky:
			if code_only > 0:
				print("ERROR: opposing flags: code_only and not run_marky")
				exit(1)
			for j in marky_text.split("\n"):
				md_text.append(shift_str + j)
		else:
			appendbuf = ""
			code_text = None

			for n, i in enumerate(marky_text.split("\n")):
				n += meta_lines
				if len(appendbuf) > 0:
					appendbuf += "\n" + i
					j = parse_line(fpath, n, appendbuf)
					if j == None:
						continue
					else:
						for k in j.split("\n"):
							if code_only == 0: md_text.append(shift_str + k)
						appendbuf = ""
						continue
				if i == "```!" or i == "```!!":
					show_code = i.endswith("`!")
					code_text = []
				elif i == "```" and not code_text is None:
					if code_only == 0 and show_code:
						md_text.append(shift_str + "```python")
						for j in code_text:
							md_text.append(shift_str + j)
						md_text.append(shift_str + "```")
					if code_only == 2 and show_code:
						pass
					else:
						rl = run_block(fpath, n - len(code_text) - 1, n, code_text, show_code)
					if code_only == 0:
						for j in rl:
							md_text.append(shift_str + j)
					code_text = None
				elif not code_text is None:
					code_text.append(i)
				elif len(i.strip()) == 0:
					if code_only == 0: md_text.append(shift_str + i)
				elif i.startswith(r"\\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[2:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith(r"\!!!"):
					if code_only == 0:
						j = parse_line(fpath, n, i[1:])
						for k in j.split("\n"):
							md_text.append(shift_str + k)
				elif i.startswith("!!! "):
					include_file(i, n, fpath)
				else:
					if code_only == 0:
						j = parse_line(fpath, n, i)
						if j == None:
							appendbuf = i
						else:
							for k in j.split("\n"):
								md_text.append(shift_str + k)

########################################################################

def parse_mkdep(fpath):
	try:
		with open(fpath, "r") as fh:
			marky_text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	for n, i in enumerate(marky_text.split("\n")):
		if i.startswith("!!! "):
			include_file(i, n, fpath, only_mkdep=True)

########################################################################

def parse_line(fpath, n, line):
	text = ""
	c = 0
	ll = len(line)
	p = line.find("`")
	while p >= 0 and p < len(line):
		if p + 3 < ll and line[p+1] == "\\" and line[p+2] == "\\" and line[p+3] == "!":
			text += line[c:p+2] + line[p+3]
			c = p + 4
			p = line.find("`", c)
			continue
		if p + 2 < ll and line[p+1] == "\\" and line[p+2] == "!":
			text += line[c:p+1] + line[p+2]
			c = p + 3
			p = line.find("`", c)
			continue
		expr = None
		if p + 1 < ll and line[p+1] == "!":
			q = line.find("`", p + 2)
			if q > 0:
				expr = line[p+2:q].strip()
			else:
				return None
		if expr:
			text += line[c:p]
			c = q + 1
			text += run_inline(fpath, n, p + 2, expr)
		else:
			text += line[c:p+1]
			c = p + 1
		p = line.find("`", c)
	text += line[c:len(line)]
	return text

########################################################################

exec_text = list()
exec_append = False
def _(*args, sep=" ", file=None):
	if not file is None:
		print(*args, file=file)
	global exec_text
	global exec_append
	if len(args) == 0:
		if exec_append == False:
			exec_text.append("")
		exec_append = False
		return 0
	if len(args) == 1 and args[0] == _:
		exec_append = True
		return 0
	if len(args) == 2 and args[0] == _ and args[1] == _:
		exec_append = True
		return 0
	a = 1 if args[0] == _ else 0
	b = -1 if args[-1] == _ else len(args)
	text = sep.join([str(i) for i in args[a:b]])
	if (exec_append or a == 1) and len(exec_text) > 0:
		exec_text[-1] += text
	else:
		exec_text.append(text)
	exec_append = b == -1

def __(arg=None, append=None, shift="", crop=True):
	global exec_text
	global exec_append
	if arg is None:
		exec_append = False
		exec_text.append("")
	elif not type(arg) is str:
		if exec_append and len(exec_text) > 0:
			exec_text[-1] += str(arg)
		else:
			exec_text.append(str(arg))
		exec_append = False
	else:
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].lstrip())
		for i in arg:
			if crop and len(i[0:n].lstrip()) == 0:
				i = i[n:]
			exec_text.append(shift + i)
	if append == _:
		exec_append = True

def ___(arg, shift="", crop=True):
	if not type(arg) is str:
		return str(arg)
	else:
		text = []
		arg = arg.split("\n")
		if crop:
			if len(arg[0].strip()) == 0:
				arg = arg[1:]
			if len(arg[-1].strip()) == 0:
				arg = arg[:-1]
		n = len(arg[0]) - len(arg[0].lstrip())
		for i in arg:
			if crop and len(i[0:n].lstrip()) == 0:
				i = i[n:]
			text.append(shift + i)
		return "\n".join(text)

class fmtcall:
	def __init__(self, name, fmtc):
		self.name = name
		self.fmtc = fmtc
	def __call__(self, *args, **kwargs):
		text = "<?html "
		f = getattr(self.fmtc.html, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if not v is None:
				text += v
		else:
			text += f
		text += " html?>"
		text += "<?pdf "
		f = getattr(self.fmtc.pdf, self.name)
		if callable(f):
			v = f(*args, **kwargs)
			if not v is None:
				text += v
		else:
			text += f
		text += " pdf?>"
		return text

class fmtcode:
	def __init__(self, pdf=None, html=None):
		if not html is None: self.html = html
		if not pdf is None: self.pdf = pdf
	def __call__(self, *args, **kwargs):
		text = "<?html "
		f = self.html
		if callable(f):
			v = f(*args, **kwargs)
			if not v is None:
				text += v
		else:
			if len(kwargs) > 0:
				text += f.format(**kwargs)
			else:
				text += f
		text += " html?>"
		text += "<?pdf "
		f = self.pdf
		if callable(f):
			v = f(*args, **kwargs)
			if not v is None:
				text += v
		else:
			if len(kwargs) > 0:
				text += f.format(**kwargs)
			else:
				text += f
		text += " pdf?>"
		return text
	def __getattr__(self, name):
		return fmtcall(name, self)

def print_trace(ex):
	def go_deeper(deeep, first=False):
		print("#", deeep.tb_frame.f_code.co_name, deeep.tb_frame.f_code.co_filename, ":", deeep.tb_lineno)
		if first:
			print("# FILE", args.marky)
		if os.path.exists(deeep.tb_frame.f_code.co_filename):
			with open(deeep.tb_frame.f_code.co_filename, "r") as fh:
				print("#", fh.read().split("\n")[deeep.tb_lineno-1])
		if deeep.tb_next != None:
			go_deeper(deeep.tb_next)
	if ex.__traceback__.tb_next:
		go_deeper(ex.__traceback__.tb_next, first=True)

def run_block(fpath, n, m, text, flag_show):
	global exec_dict
	global exec_text
	print("#", "``!" if flag_show else "`!!", fpath, "%d-%d" % (n, m))
	exec_text = list()
	text = __("\n".join(text).replace("\t", "  "))
	text = exec_text
	for a, b in enumerate(text):
		print("#    %03d" % (a + 1), b)
	indent = len(text[0]) - len(text[0].lstrip())
	code = ""
	for i in text:
		if len(i[:indent].strip()) == 0:
			code += i[indent:] + "\n"
		else:
			code += i + "\n"
	try:
		exec_text = list()
		exec_append = False
		exec(code, exec_dict, None)
		if len(exec_text) > 0:
			exec_text = "\n".join(exec_text).split("\n")
	except Exception as ex:
		print_trace(ex)
		print("# ERROR ", type(ex), str(ex))
		exit(1)
	if len(exec_text) > 0:
		print("# OUT")
		for a, b in enumerate(exec_text):
			print("#    %03d" % (a + 1), b)
	return exec_text

########################################################################

def run_inline(fpath, n, i, text):
	print("# `!`", fpath, "%d:%d" % (n, i), text, end="", flush=True)
	try:
		if not "'''" in text:
			value = eval("f'''{%s}'''" % text, exec_dict, None)
		elif not '"""' in text:
			value = eval('f"""{%s}"""' % text, exec_dict, None)
		else:
			raise ValueError("\"\"\" and ''' in expression:", text)
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	if value is None:
		print("")
		return ""
	value = str(value)
	if "\n" in value:
		print("")
		print("# OUT")
		for a, b in enumerate(value.split("\n")):
			print("#    %03d" % (a + 1), b)
	else:
		print(" ->", value)
	return value

########################################################################

def write_file(fpath, text, overwrite=False):
	if overwrite or not os.path.exists(fpath):
		print("# WRITE", fpath)
		try:
			fdir = "/".join(fpath.split("/")[:-1])
			if not os.path.exists(fdir):
				os.mkdir(fdir)
			with open(fpath, "w") as fh:
				fh.write(text.strip() + "\n")
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	else:
		print("# EXIST", fpath)

########################################################################

def read_file(fpath):
	print("# READ", fpath)
	try:
		with open(fpath, "r") as fh:
			text = fh.read()
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)
	return text

########################################################################

if not sys.version_info.major == 3 and sys.version_info.minor >= 6:
	try:
		raise ValueError("marky requires Python 3.6 or higher.")
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument("--version", action='store_true', help="version is v" + ".".join([str(i) for i in marky_version]))
parser.add_argument("--help", action='store_true', help="show this help message")

parser.add_argument("--make", action='store_true', help="create Makefile in working directory")
parser.add_argument("--init", action='store_true', help="create Makefile and docs in working directory")
parser.add_argument("--pack", action='store_true', help="pack Makefile, marky.build/mdi/bib inside marky.py. source")
parser.add_argument("--force", action='store_true', help="force overwrite of files for --init/--pack")

parser.add_argument("--mkdep", action='store_true', help="make dependencies")
parser.add_argument("--link", type=str, default="", help="format dependent processing, link for: pdf, html")

parser.add_argument("--marky", type=str, default="", help="path to input marky text")
parser.add_argument("--md", type=str, default="", help="path to output markdown text")

# ~ args, uargs = parser.parse_known_args()
args = parser.parse_args()

sys.path.append(".")

########################################################################

def b64enc(x, n=72):
	x = base64.b64encode(bytes(x, "utf-8")).decode("ascii")
	return "\n".join([x[i:i+n] for i in range(0, len(x), n)])

def b64dec(x):
	return base64.b64decode(bytes(x.replace("\n", ""), "ascii")).decode("utf-8")

pack_files = [
	"./Makefile",
	"./md/marky.md",
	"./md/marky.mdi",
	"./md/marky-src.md",
	"./md/quickstart.md",
	"./md/quick-src.md",
	"./md/example.md",
	"./md/example-src.md",
	"./data/marky.bib",
]

if args.version:
	print(".".join([str(i) for i in marky_version]))
	exit(0)
elif args.help:
	parser.print_help()
	exit(0)
elif args.make:
	for i in ["./Makefile"]:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.init:
	for i in pack_files:
		write_file(i, b64dec(eval("pack_" + i.split("/")[-1].replace(".", "_").replace("-", "_"))), overwrite=args.force)
	print("# USAGE")
	print("# 1. `make help`")
	print("# 2. `make all-html httpd`")
	print("# 3. `make all-pdf`")
	exit(0)
elif args.pack:
	marky_text = read_file(sys.argv[0])
	head, src, tail = tuple(marky_text.split("\n###!!!:::marky_pack_data:::!!!###\n"))
	src = "\n"
	for i in pack_files:
		btext = b64enc(read_file(i))
		src += "pack_%s = '''\n%s\n'''\n" % (i.split("/")[-1].replace(".", "_").replace("-", "_"), btext)
	marky_text = "\n###!!!:::marky_pack_data:::!!!###\n".join([head, src, tail])
	write_file(sys.argv[0] + ".pack", marky_text, overwrite=True)
	if args.force:
		print("# UPDATE marky.py")
		os.replace("marky.py.pack", "marky.py")
		os.chmod("marky.py", 0o775)
	else:
		print("# UPDATE")
		print("mv marky.py.pack marky.py")
		print("chmod +x marky.py")
	exit(0)
elif args.force:
	print("ERROR", "--force can only be used with --pack/--init")
	exit(1)

########################################################################

if not os.path.exists("Makefile"):
	print("ERROR", "no Makefile present, use --init or --help")
	exit(1)

if len(args.marky) == 0 and len(args.md) == 0:
	print("ERROR: set at least one --md/--marky")
	exit(1)

if len(args.marky) == 0:
	args.marky = "md/" + "/".join(args.md.split("/")[1:])

if len(args.md) == 0:
	args.md = "build/" + "/".join(args.marky.split("/")[1:])

s = args.md.split("/")[1:]
s[-1] = ".".join(s[-1].split(".")[:-1])
args.target = "-".join(s).replace(".", "-")
args.pdf = "pdf/" + "/".join(s) + ".pdf"
args.html = "html/" + "/".join(s) + ".html"

if args.md.endswith(".md"):
	link_file = args.md[0:-2] + args.link + ".md"
else:
	link_file = args.md + args.link + ".md"

inc_path = "/".join(args.marky.split("/")[0:-1])
inc_path = "." if inc_path == "" else inc_path

md_text = list()
mkdep = list()
md_yaml = dict()
exec_dict = dict()
exec_text = list()
exec_append = False
exec_dict["_"] = _
exec_dict["__"] = __
exec_dict["___"] = ___
exec_dict["fmtcode"] = fmtcode

if len(args.link) > 0:

	md_text = read_file(args.md)
	if md_text.startswith("---\n"):
		yaml_text = md_text.split("---\n")[1]
		md_text = "---\n".join(md_text.split("---\n")[2:])
		print("# META")
		try:
			import yaml
			md_yaml = {}
			for k, v in yaml.safe_load(yaml_text).items():
				if k.endswith("--pdf") or k.endswith("--html"):
					if k.endswith("--" + args.link):
						print("#    ...", k, "IMPORT")
						k = "--".join(k.split("--")[:-1])
					else:
						continue
				print("#    ...", "%s:" % k, v)
				md_yaml[k] = v
			md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		except Exception as ex:
			print("ERROR", type(ex), str(ex))
			exit(1)
	print("# LINK", ".??? -> .%s" % args.link)
	md_text = md_text.replace(".???", "." + args.link)
	md_text = md_text.replace(r".\???", r".???")
	md_text = md_text.replace(r".\\???", r".\???")
	c = 0
	lsep = 2
	p = md_text.find("<?")
	newtext = ""
	len_args = len(args.link)+1
	while p >= 0:
		q = md_text.find("?>", p + lsep)
		if q > 0:
			newtext += md_text[c:p]
			expr = md_text[p+lsep:q]
			if expr.startswith(args.link) and expr.endswith(args.link):
				newtext += expr[len_args:-len_args]
			c = q + lsep
			p = md_text.find("<?", c)
		else:
			p = md_text.find("<?", p + lsep)
	newtext += md_text[c:]
	write_file(link_file, "---\n%s\n---\n%s" % (md_yaml, newtext), overwrite=True)

elif args.mkdep:

	parse_mkdep(args.marky)
	mkdep = list(set(mkdep))
	print("# WRITE", args.md + ".mk")
	print("# ... " + "\n# ... ".join(mkdep))
	try:
		with open(args.md + ".mk", "w") as fh:
			if len(mkdep) == 0:
				fh.write(args.md + ": \n")
			else:
				fh.write(args.md + ": \\\n" + " \\\n".join(mkdep) + "\n")
			if len(args.target) > 0:
				fh.write(
"""
.PHONY: md-%s
md-%s: %s
""" % (args.target, args.target, args.md))
				if args.md.endswith(".md"):
					link_html = args.md[0:-3] + ".html.md"
					link_pdf = args.md[0:-3] + ".pdf.md"
				else:
					link_html = args.md + ".html.md"
					link_pdf = args.md + ".pdf.md"
				fh.write(
"""
.PHONY: lhtml-%s
lhtml-%s: %s
""" % (args.target, args.target, link_html))
				fh.write(
"""
.PHONY: lpdf-%s
lpdf-%s: %s
""" % (args.target, args.target, link_pdf))
				if len(args.html) > 0:
					fh.write(
"""
.PHONY: html-%s
html-%s: %s
""" % (args.target, args.target, args.html))
				if len(args.pdf) > 0:
					fh.write(
"""
.PHONY: pdf-%s
pdf-%s: %s
""" % (args.target, args.target, args.pdf))
					fh.write(
"""
.PHONY: all-%s
all-%s: %s %s
""" % (args.target, args.target, args.html, args.pdf))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

else:

	parse_file(args.marky, root_file=True)
	try:
		import yaml
		md_yaml = yaml.dump(md_yaml, allow_unicode=True, default_flow_style=False)
		print("# WRITE", args.md)
		with open(args.md, "w") as fh:
			if len(md_yaml) > 0:
				fh.write("---\n%s---\n" % md_yaml)
			fh.write(r"%s" % "\n".join(md_text))
	except Exception as ex:
		print("ERROR", type(ex), str(ex))
		exit(1)

exit(0)
